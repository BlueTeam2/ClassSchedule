[INFO ] 2020-06-03 12:44:05.628 [Test worker] c.s.s.i.GroupServiceImpl - In save(entity = [Group(id=1, title=some group, disable=false)]
[INFO ] 2020-06-03 12:44:05.763 [Test worker] c.s.s.i.GroupServiceImpl - In isGroupExistsWithTitle(title = [some group])
[INFO ] 2020-06-03 12:44:05.864 [Test worker] c.s.s.i.GroupServiceImpl - In update(entity = [Group(id=1, title=updated title, disable=false)]
[INFO ] 2020-06-03 12:44:05.865 [Test worker] c.s.s.i.GroupServiceImpl - In isExistsWithId(id = [1])
[INFO ] 2020-06-03 12:44:05.866 [Test worker] c.s.s.i.GroupServiceImpl - In isGroupExistsWithTitleAndIgnoreWithId(id = [1], title = [updated title])
[INFO ] 2020-06-03 12:44:05.909 [Test worker] c.s.s.i.GroupServiceImpl - In getById(id = [1])
[INFO ] 2020-06-03 12:44:05.928 [Test worker] c.s.s.i.GroupServiceImpl - In update(entity = [Group(id=1, title=updated group, disable=false)]
[INFO ] 2020-06-03 12:44:05.929 [Test worker] c.s.s.i.GroupServiceImpl - In isExistsWithId(id = [1])
[INFO ] 2020-06-03 12:44:05.931 [Test worker] c.s.s.i.GroupServiceImpl - In isGroupExistsWithTitleAndIgnoreWithId(id = [1], title = [updated group])
[ERROR] 2020-06-03 12:44:05.931 [Test worker] c.s.s.i.GroupServiceImpl - Group with title [updated group] already exists
[INFO ] 2020-06-03 12:44:06.000 [Test worker] c.s.s.i.GroupServiceImpl - In save(entity = [Group(id=1, title=some group, disable=false)]
[INFO ] 2020-06-03 12:44:06.001 [Test worker] c.s.s.i.GroupServiceImpl - In isGroupExistsWithTitle(title = [some group])
[INFO ] 2020-06-03 12:44:06.018 [Test worker] c.s.s.i.GroupServiceImpl - In update(entity = [Group(id=1, title=some group, disable=false)]
[INFO ] 2020-06-03 12:44:06.067 [Test worker] c.s.s.i.GroupServiceImpl - In isExistsWithId(id = [1])
[INFO ] 2020-06-03 12:44:06.081 [Test worker] c.s.s.i.GroupServiceImpl - In getById(id = [2])
[INFO ] 2020-06-03 12:44:06.947 [Test worker] c.s.s.i.LessonServiceImpl - In getById(id = [1])
[INFO ] 2020-06-03 12:44:06.957 [Test worker] c.s.s.i.LessonServiceImpl - In update(entity = [Lesson(id=1, hours=1, teacherForSite=Ivanov I.I., subjectForSite=Human anatomy, lessonType=LECTURE, teacher=com.softserve.entity.Teacher@78e26a36, subject=com.softserve.entity.Subject@6595666c, group=Group(id=1, title=group, disable=false))]
[INFO ] 2020-06-03 12:44:06.960 [Test worker] c.s.s.i.LessonServiceImpl - In isLessonForGroupExists(lesson = [Lesson(id=1, hours=1, teacherForSite=Ivanov I.I., subjectForSite=Human anatomy, lessonType=LECTURE, teacher=com.softserve.entity.Teacher@78e26a36, subject=com.softserve.entity.Subject@6595666c, group=Group(id=1, title=group, disable=false))])
[INFO ] 2020-06-03 12:44:06.967 [Test worker] c.s.s.i.LessonServiceImpl - In save(entity = [Lesson(id=1, hours=1, teacherForSite=Ivanov I.I., subjectForSite=Human anatomy, lessonType=LECTURE, teacher=com.softserve.entity.Teacher@66551afa, subject=com.softserve.entity.Subject@6595666c, group=Group(id=1, title=group, disable=false))]
[INFO ] 2020-06-03 12:44:06.971 [Test worker] c.s.s.i.LessonServiceImpl - In isLessonForGroupExists(lesson = [Lesson(id=1, hours=1, teacherForSite=Ivanov I.I., subjectForSite=Human anatomy, lessonType=LECTURE, teacher=com.softserve.entity.Teacher@66551afa, subject=com.softserve.entity.Subject@6595666c, group=Group(id=1, title=group, disable=false))])
[INFO ] 2020-06-03 12:44:06.988 [Test worker] c.s.s.i.LessonServiceImpl - In getById(id = [2])
[INFO ] 2020-06-03 12:44:07.001 [Test worker] c.s.s.i.LessonServiceImpl - In update(entity = [Lesson(id=1, hours=1, teacherForSite=Ivanov I.I., subjectForSite=Human anatomy, lessonType=LECTURE, teacher=com.softserve.entity.Teacher@6fd4bf27, subject=com.softserve.entity.Subject@6595666c, group=Group(id=1, title=group, disable=false))]
[INFO ] 2020-06-03 12:44:07.001 [Test worker] c.s.s.i.LessonServiceImpl - In isLessonForGroupExists(lesson = [Lesson(id=1, hours=1, teacherForSite=Ivanov I.I., subjectForSite=Human anatomy, lessonType=LECTURE, teacher=com.softserve.entity.Teacher@6fd4bf27, subject=com.softserve.entity.Subject@6595666c, group=Group(id=1, title=group, disable=false))])
[INFO ] 2020-06-03 12:44:07.018 [Test worker] c.s.s.i.LessonServiceImpl - In save(entity = [Lesson(id=1, hours=1, teacherForSite=, subjectForSite=, lessonType=LECTURE, teacher=com.softserve.entity.Teacher@102654ee, subject=com.softserve.entity.Subject@6595666c, group=Group(id=1, title=group, disable=false))]
[INFO ] 2020-06-03 12:44:07.019 [Test worker] c.s.s.i.LessonServiceImpl - In isLessonForGroupExists(lesson = [Lesson(id=1, hours=1, teacherForSite=, subjectForSite=, lessonType=LECTURE, teacher=com.softserve.entity.Teacher@102654ee, subject=com.softserve.entity.Subject@6595666c, group=Group(id=1, title=group, disable=false))])
[INFO ] 2020-06-03 12:44:07.183 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into update of PeriodServiceImpl with entity:Period(id=1, startTime=05:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.191 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=05:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.296 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into update of PeriodServiceImpl with entity:Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.297 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.297 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getAll of PeriodServiceImpl
[INFO ] 2020-06-03 12:44:07.298 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=06:00, endTime=07:00, name=Another period)] and newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.330 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=2, startTime=06:00, endTime=07:00, name=Another period), newPeriods: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.331 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=2, startTime=06:00, endTime=07:00, name=Another period), newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.332 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getById of PeriodServiceImpl with id 1
[INFO ] 2020-06-03 12:44:07.341 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into update of PeriodServiceImpl with entity:Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.342 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.343 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getAll of PeriodServiceImpl
[INFO ] 2020-06-03 12:44:07.344 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=06:00, endTime=07:00, name=Another period)] and newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.345 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=2, startTime=06:00, endTime=07:00, name=Another period), newPeriods: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.345 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=2, startTime=06:00, endTime=07:00, name=Another period), newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.345 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getById of PeriodServiceImpl with id 1
[INFO ] 2020-06-03 12:44:07.350 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into update of PeriodServiceImpl with entity:Period(id=1, startTime=02:00, endTime=03:30, name=Some period)
[INFO ] 2020-06-03 12:44:07.352 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=02:00, endTime=03:30, name=Some period)
[INFO ] 2020-06-03 12:44:07.353 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getAll of PeriodServiceImpl
[INFO ] 2020-06-03 12:44:07.354 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=03:00, endTime=04:00, name=Another period)] and newPeriod: Period(id=1, startTime=02:00, endTime=03:30, name=Some period)
[INFO ] 2020-06-03 12:44:07.355 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=2, startTime=03:00, endTime=04:00, name=Another period), newPeriods: Period(id=1, startTime=02:00, endTime=03:30, name=Some period)
[INFO ] 2020-06-03 12:44:07.356 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=2, startTime=03:00, endTime=04:00, name=Another period), newPeriod: Period(id=1, startTime=02:00, endTime=03:30, name=Some period)
[INFO ] 2020-06-03 12:44:07.360 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into save of PeriodServiceImpl with entity: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.361 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.361 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getAll of PeriodServiceImpl
[INFO ] 2020-06-03 12:44:07.361 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=03:00, endTime=04:00, name=Some period)] and newPeriod: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.361 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=2, startTime=03:00, endTime=04:00, name=Some period), newPeriods: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.369 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=2, startTime=03:00, endTime=04:00, name=Some period), newPeriod: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.369 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into nameExists method with name:Some period
[INFO ] 2020-06-03 12:44:07.394 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into save of PeriodServiceImpl with entity: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.425 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.427 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getAll of PeriodServiceImpl
[INFO ] 2020-06-03 12:44:07.428 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=05:00, endTime=06:00, name=Another period)] and newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.428 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=2, startTime=05:00, endTime=06:00, name=Another period), newPeriods: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.429 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=2, startTime=05:00, endTime=06:00, name=Another period), newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.430 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into nameExists method with name:Some period
[INFO ] 2020-06-03 12:44:07.434 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into save of PeriodServiceImpl with entities:[Period(id=1, startTime=05:00, endTime=04:00, name=Some period)]
[INFO ] 2020-06-03 12:44:07.436 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=05:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.438 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into save of PeriodServiceImpl with entities:[Period(id=1, startTime=02:00, endTime=03:00, name=Some period)]
[INFO ] 2020-06-03 12:44:07.439 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=02:00, endTime=03:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.440 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getAll of PeriodServiceImpl
[INFO ] 2020-06-03 12:44:07.440 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isListOfPeriodsFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=03:00, endTime=04:00, name=Some period)], newPeriods: [Period(id=1, startTime=02:00, endTime=03:00, name=Some period)]
[INFO ] 2020-06-03 12:44:07.441 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=1, startTime=02:00, endTime=03:00, name=Some period)] and newPeriod: Period(id=1, startTime=02:00, endTime=03:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.441 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=1, startTime=02:00, endTime=03:00, name=Some period), newPeriods: Period(id=1, startTime=02:00, endTime=03:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.442 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=1, startTime=02:00, endTime=03:00, name=Some period), newPeriod: Period(id=1, startTime=02:00, endTime=03:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.442 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=03:00, endTime=04:00, name=Some period)] and newPeriod: Period(id=1, startTime=02:00, endTime=03:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.442 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=2, startTime=03:00, endTime=04:00, name=Some period), newPeriods: Period(id=1, startTime=02:00, endTime=03:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.444 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into save of PeriodServiceImpl with entity: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.445 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.445 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getAll of PeriodServiceImpl
[INFO ] 2020-06-03 12:44:07.446 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=02:00, endTime=03:00, name=Some period)] and newPeriod: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.446 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=2, startTime=02:00, endTime=03:00, name=Some period), newPeriods: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.448 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getById of PeriodServiceImpl with id 1
[INFO ] 2020-06-03 12:44:07.450 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getById of PeriodServiceImpl with id 2
[INFO ] 2020-06-03 12:44:07.452 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into save of PeriodServiceImpl with entity: Period(id=1, startTime=05:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.453 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=05:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.456 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into save of PeriodServiceImpl with entities:[Period(id=1, startTime=03:00, endTime=04:00, name=Some period)]
[INFO ] 2020-06-03 12:44:07.456 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.456 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getAll of PeriodServiceImpl
[INFO ] 2020-06-03 12:44:07.457 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isListOfPeriodsFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=01:00, endTime=02:00, name=another period), Period(id=1, startTime=03:00, endTime=04:00, name=Some period)], newPeriods: [Period(id=1, startTime=03:00, endTime=04:00, name=Some period)]
[INFO ] 2020-06-03 12:44:07.457 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=1, startTime=03:00, endTime=04:00, name=Some period)] and newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.458 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=1, startTime=03:00, endTime=04:00, name=Some period), newPeriods: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.458 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period), newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.459 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=01:00, endTime=02:00, name=another period), Period(id=1, startTime=03:00, endTime=04:00, name=Some period)] and newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.459 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=2, startTime=01:00, endTime=02:00, name=another period), newPeriods: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.459 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=2, startTime=01:00, endTime=02:00, name=another period), newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.459 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=1, startTime=03:00, endTime=04:00, name=Some period), newPeriods: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.460 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period), newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2020-06-03 12:44:07.765 [Test worker] c.s.s.i.RoomServiceImpl - Enter into save of RoomServiceImpl with entity:com.softserve.entity.Room@65f37263
[INFO ] 2020-06-03 12:44:07.769 [Test worker] c.s.s.i.RoomServiceImpl - Enter into update of RoomServiceImpl with entity:com.softserve.entity.Room@7df6c633
[INFO ] 2020-06-03 12:44:07.773 [Test worker] c.s.s.i.RoomServiceImpl - Enter into getById of RoomServiceImpl with id 2
[INFO ] 2020-06-03 12:44:07.780 [Test worker] c.s.s.i.RoomServiceImpl - Enter into update of RoomServiceImpl with entity:com.softserve.entity.Room@6c72feb9
[INFO ] 2020-06-03 12:44:07.783 [Test worker] c.s.s.i.RoomServiceImpl - Enter into save of RoomServiceImpl with entity:com.softserve.entity.Room@4f535816
[INFO ] 2020-06-03 12:44:07.788 [Test worker] c.s.s.i.RoomServiceImpl - Enter into getById of RoomServiceImpl with id 1
[INFO ] 2020-06-03 12:44:07.951 [Test worker] c.s.s.i.RoomTypeServiceImpl - In save(entity = [RoomType(id=1, description=1 roomType)]
[INFO ] 2020-06-03 12:44:07.952 [Test worker] c.s.s.i.RoomTypeServiceImpl - In isRoomTypeExistsWithDescription(description = [1 roomType])
[INFO ] 2020-06-03 12:44:07.959 [Test worker] c.s.s.i.RoomTypeServiceImpl - In getById(id = [2])
[INFO ] 2020-06-03 12:44:07.970 [Test worker] c.s.s.i.RoomTypeServiceImpl - In update(entity = [RoomType(id=1, description=1 roomType)]
[INFO ] 2020-06-03 12:44:07.973 [Test worker] c.s.s.i.RoomTypeServiceImpl - In isExistsWithId(id = [1])
[INFO ] 2020-06-03 12:44:07.978 [Test worker] c.s.s.i.RoomTypeServiceImpl - In update(entity = [RoomType(id=1, description=1 roomType)]
[INFO ] 2020-06-03 12:44:07.981 [Test worker] c.s.s.i.RoomTypeServiceImpl - In isExistsWithId(id = [1])
[INFO ] 2020-06-03 12:44:07.988 [Test worker] c.s.s.i.RoomTypeServiceImpl - In isRoomTypeExistsWithDescription(description = [1 roomType])
[ERROR] 2020-06-03 12:44:07.991 [Test worker] c.s.s.i.RoomTypeServiceImpl - RoomType with Description [1 roomType] already exists
[INFO ] 2020-06-03 12:44:07.996 [Test worker] c.s.s.i.RoomTypeServiceImpl - In getById(id = [1])
[INFO ] 2020-06-03 12:44:08.003 [Test worker] c.s.s.i.RoomTypeServiceImpl - In save(entity = [RoomType(id=1, description=1 roomType)]
[INFO ] 2020-06-03 12:44:08.007 [Test worker] c.s.s.i.RoomTypeServiceImpl - In isRoomTypeExistsWithDescription(description = [1 roomType])
[INFO ] 2020-06-03 12:44:08.011 [Test worker] c.s.s.i.RoomTypeServiceImpl - In update(entity = [RoomType(id=1, description=updated roomType)]
[INFO ] 2020-06-03 12:44:08.011 [Test worker] c.s.s.i.RoomTypeServiceImpl - In isExistsWithId(id = [1])
[INFO ] 2020-06-03 12:44:08.012 [Test worker] c.s.s.i.RoomTypeServiceImpl - In isRoomTypeExistsWithDescription(description = [updated roomType])
[INFO ] 2020-06-03 12:44:08.745 [Test worker] c.s.s.i.ScheduleServiceImpl - In update(entity = [Schedule(id=1, dayOfWeek=TUESDAY, evenOdd=EVEN, semester=Semester(id=2, description=null, year=0, startDay=null, endDay=null, currentSemester=false, daysOfWeek=null, periods=null, disable=false), room=com.softserve.entity.Room@13341c77, period=Period(id=2, startTime=null, endTime=null, name=null), lesson=Lesson(id=2, hours=0, teacherForSite=null, subjectForSite=null, lessonType=null, teacher=null, subject=null, group=Group(id=2, title=null, disable=false)))]
[INFO ] 2020-06-03 12:44:08.747 [Test worker] c.s.s.i.ScheduleServiceImpl - In isConflictForGroupInSchedule(semesterId = [2], dayOfWeek = [TUESDAY], evenOdd = [EVEN], classId = [2], lessonId = [2])
[INFO ] 2020-06-03 12:44:08.770 [Test worker] c.s.s.i.ScheduleServiceImpl - In getInfoForCreatingSchedule (semesterId = [1], dayOfWeek = [MONDAY], evenOdd = [EVEN], classId = [1], lessonId = [1])
[INFO ] 2020-06-03 12:44:08.774 [Test worker] c.s.s.i.ScheduleServiceImpl - In isConflictForGroupInSchedule(semesterId = [1], dayOfWeek = [MONDAY], evenOdd = [EVEN], classId = [1], lessonId = [1])
[ERROR] 2020-06-03 12:44:08.775 [Test worker] c.s.s.i.ScheduleServiceImpl - Schedule for group already exists
[INFO ] 2020-06-03 12:44:08.816 [Test worker] c.s.s.i.ScheduleServiceImpl - In getInfoForCreatingSchedule (semesterId = [1], dayOfWeek = [MONDAY], evenOdd = [EVEN], classId = [1], lessonId = [1])
[INFO ] 2020-06-03 12:44:08.816 [Test worker] c.s.s.i.ScheduleServiceImpl - In isConflictForGroupInSchedule(semesterId = [1], dayOfWeek = [MONDAY], evenOdd = [EVEN], classId = [1], lessonId = [1])
[INFO ] 2020-06-03 12:44:08.817 [Test worker] c.s.s.i.ScheduleServiceImpl - In isTeacherAvailable (semesterId = [1], dayOfWeek = [MONDAY], evenOdd = [EVEN], classId = [1], lessonId = [1]
[INFO ] 2020-06-03 12:44:08.934 [Test worker] c.s.s.i.ScheduleServiceImpl - In getFullSchedule(semesterId = [1], groupId[null])
[INFO ] 2020-06-03 12:44:08.938 [Test worker] c.s.s.i.ScheduleServiceImpl - In getDaysWhenGroupHasClassesBySemester(semesterId = [1], groupId = [1])
[INFO ] 2020-06-03 12:44:08.956 [Test worker] c.s.s.i.ScheduleServiceImpl - In getClassesForGroupBySemesterByDayOfWeek(semesterId = [1], groupId = [1], day = [MONDAY])
[INFO ] 2020-06-03 12:44:08.961 [Test worker] c.s.s.i.ScheduleServiceImpl - In getLessonsForGroupForPeriodBySemesterAndDay(semesterId = [1], groupId = [1], periodId = [1], day = [MONDAY])
[INFO ] 2020-06-03 12:44:08.973 [Test worker] c.s.s.i.ScheduleServiceImpl - In getLessonsForGroupForPeriodBySemesterAndDay(semesterId = [1], groupId = [1], periodId = [2], day = [MONDAY])
[INFO ] 2020-06-03 12:44:08.998 [Test worker] c.s.s.i.ScheduleServiceImpl - In getById(id = [2])
[INFO ] 2020-06-03 12:44:09.208 [Test worker] c.s.s.i.ScheduleServiceImpl - In save(entity = [Schedule(id=1, dayOfWeek=MONDAY, evenOdd=ODD, semester=Semester(id=1, description=null, year=0, startDay=null, endDay=null, currentSemester=false, daysOfWeek=null, periods=null, disable=false), room=com.softserve.entity.Room@36613d9f, period=Period(id=1, startTime=null, endTime=null, name=null), lesson=Lesson(id=1, hours=0, teacherForSite=null, subjectForSite=null, lessonType=null, teacher=null, subject=null, group=Group(id=1, title=null, disable=false)))]
[INFO ] 2020-06-03 12:44:09.210 [Test worker] c.s.s.i.ScheduleServiceImpl - In isConflictForGroupInSchedule(semesterId = [1], dayOfWeek = [MONDAY], evenOdd = [ODD], classId = [1], lessonId = [1])
[INFO ] 2020-06-03 12:44:09.277 [Test worker] c.s.s.i.ScheduleServiceImpl - In getScheduleForTeacher(semesterId = [1], teacherId[1])
[INFO ] 2020-06-03 12:44:09.303 [Test worker] c.s.s.i.ScheduleServiceImpl - In save(entity = [Schedule(id=1, dayOfWeek=MONDAY, evenOdd=ODD, semester=Semester(id=1, description=null, year=0, startDay=null, endDay=null, currentSemester=false, daysOfWeek=null, periods=null, disable=false), room=com.softserve.entity.Room@64079653, period=Period(id=1, startTime=null, endTime=null, name=null), lesson=Lesson(id=1, hours=0, teacherForSite=null, subjectForSite=null, lessonType=null, teacher=null, subject=null, group=Group(id=1, title=null, disable=false)))]
[INFO ] 2020-06-03 12:44:09.305 [Test worker] c.s.s.i.ScheduleServiceImpl - In isConflictForGroupInSchedule(semesterId = [1], dayOfWeek = [MONDAY], evenOdd = [ODD], classId = [1], lessonId = [1])
[ERROR] 2020-06-03 12:44:09.308 [Test worker] c.s.s.i.ScheduleServiceImpl - Schedule for group with id [1] has conflict with already existing
[INFO ] 2020-06-03 12:44:09.459 [Test worker] c.s.s.i.ScheduleServiceImpl - In getDaysForSemester(semesterId = [1])
[INFO ] 2020-06-03 12:44:09.464 [Test worker] c.s.s.i.ScheduleServiceImpl - In getClassesForSemester(semesterId = [1])
[INFO ] 2020-06-03 12:44:09.472 [Test worker] c.s.s.i.ScheduleServiceImpl - In getLessonsForGroupForPeriodBySemesterAndDay(semesterId = [1], groupId = [1], periodId = [2], day = [MONDAY])
[INFO ] 2020-06-03 12:44:09.481 [Test worker] c.s.s.i.ScheduleServiceImpl - In getLessonsForGroupForPeriodBySemesterAndDay(semesterId = [1], groupId = [1], periodId = [1], day = [MONDAY])
[INFO ] 2020-06-03 12:44:09.501 [Test worker] c.s.s.i.ScheduleServiceImpl - In getFullSchedule(semesterId = [1], groupId[1])
[INFO ] 2020-06-03 12:44:09.504 [Test worker] c.s.s.i.ScheduleServiceImpl - In groupHasScheduleInSemester(semesterId = [1], groupId = [1])
[INFO ] 2020-06-03 12:44:09.507 [Test worker] c.s.s.i.ScheduleServiceImpl - In getDaysWhenGroupHasClassesBySemester(semesterId = [1], groupId = [1])
[INFO ] 2020-06-03 12:44:09.509 [Test worker] c.s.s.i.ScheduleServiceImpl - In getClassesForGroupBySemesterByDayOfWeek(semesterId = [1], groupId = [1], day = [MONDAY])
[INFO ] 2020-06-03 12:44:09.511 [Test worker] c.s.s.i.ScheduleServiceImpl - In getLessonsForGroupForPeriodBySemesterAndDay(semesterId = [1], groupId = [1], periodId = [1], day = [MONDAY])
[INFO ] 2020-06-03 12:44:09.514 [Test worker] c.s.s.i.ScheduleServiceImpl - In getLessonsForGroupForPeriodBySemesterAndDay(semesterId = [1], groupId = [1], periodId = [2], day = [MONDAY])
[INFO ] 2020-06-03 12:44:09.539 [Test worker] c.s.s.i.ScheduleServiceImpl - In update(entity = [Schedule(id=1, dayOfWeek=TUESDAY, evenOdd=EVEN, semester=Semester(id=2, description=null, year=0, startDay=null, endDay=null, currentSemester=false, daysOfWeek=null, periods=null, disable=false), room=com.softserve.entity.Room@1dfa66c, period=Period(id=2, startTime=null, endTime=null, name=null), lesson=Lesson(id=2, hours=0, teacherForSite=null, subjectForSite=null, lessonType=null, teacher=null, subject=null, group=Group(id=2, title=null, disable=false)))]
[INFO ] 2020-06-03 12:44:09.561 [Test worker] c.s.s.i.ScheduleServiceImpl - In isConflictForGroupInSchedule(semesterId = [2], dayOfWeek = [TUESDAY], evenOdd = [EVEN], classId = [2], lessonId = [2])
[INFO ] 2020-06-03 12:44:09.716 [Test worker] c.s.s.i.SemesterServiceImpl - In update(entity = [Semester(id=1, description=2 semester, year=0, startDay=2020-05-11, endDay=2020-06-22, currentSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=0, startTime=null, endTime=null, name=3 para), Period(id=0, startTime=null, endTime=null, name=2 para), Period(id=0, startTime=null, endTime=null, name=4 para), Period(id=0, startTime=null, endTime=null, name=1 para)], disable=false)]
[INFO ] 2020-06-03 12:44:09.717 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=2 semester, year=0, startDay=2020-05-11, endDay=2020-06-22, currentSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=0, startTime=null, endTime=null, name=3 para), Period(id=0, startTime=null, endTime=null, name=2 para), Period(id=0, startTime=null, endTime=null, name=4 para), Period(id=0, startTime=null, endTime=null, name=1 para)], disable=false)
[INFO ] 2020-06-03 12:44:09.717 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExistsByDescriptionAndYearForUpdate (semesterId = [1],description = [2 semester], year = [0])
[INFO ] 2020-06-03 12:44:09.720 [Test worker] c.s.s.i.SemesterServiceImpl - In update(entity = [Semester(id=1, description=2 semester, year=0, startDay=2020-05-11, endDay=2020-06-22, currentSemester=true, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=0, startTime=null, endTime=null, name=3 para), Period(id=0, startTime=null, endTime=null, name=2 para), Period(id=0, startTime=null, endTime=null, name=4 para), Period(id=0, startTime=null, endTime=null, name=1 para)], disable=false)]
[INFO ] 2020-06-03 12:44:09.720 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=2 semester, year=0, startDay=2020-05-11, endDay=2020-06-22, currentSemester=true, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=0, startTime=null, endTime=null, name=3 para), Period(id=0, startTime=null, endTime=null, name=2 para), Period(id=0, startTime=null, endTime=null, name=4 para), Period(id=0, startTime=null, endTime=null, name=1 para)], disable=false)
[INFO ] 2020-06-03 12:44:09.720 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExistsByDescriptionAndYearForUpdate (semesterId = [1],description = [2 semester], year = [0])
[INFO ] 2020-06-03 12:44:09.730 [Test worker] c.s.s.i.SemesterServiceImpl - In save(entity = [Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=true, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=0, startTime=null, endTime=null, name=3 para), Period(id=0, startTime=null, endTime=null, name=2 para), Period(id=0, startTime=null, endTime=null, name=4 para), Period(id=0, startTime=null, endTime=null, name=1 para)], disable=false)]
[INFO ] 2020-06-03 12:44:09.730 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=true, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=0, startTime=null, endTime=null, name=3 para), Period(id=0, startTime=null, endTime=null, name=2 para), Period(id=0, startTime=null, endTime=null, name=4 para), Period(id=0, startTime=null, endTime=null, name=1 para)], disable=false)
[INFO ] 2020-06-03 12:44:09.731 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExistsByDescriptionAndYear (description = [1 semester], year = [2020])
[INFO ] 2020-06-03 12:44:09.735 [Test worker] c.s.s.i.SemesterServiceImpl - In getCurrentSemester
[INFO ] 2020-06-03 12:44:09.737 [Test worker] c.s.s.i.SemesterServiceImpl - In update(entity = [Semester(id=1, description=1 semester, year=2020, startDay=2020-03-10, endDay=2020-01-11, currentSemester=false, daysOfWeek=null, periods=null, disable=false)]
[INFO ] 2020-06-03 12:44:09.737 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-03-10, endDay=2020-01-11, currentSemester=false, daysOfWeek=null, periods=null, disable=false)
[INFO ] 2020-06-03 12:44:09.740 [Test worker] c.s.s.i.SemesterServiceImpl - In save(entity = [Semester(id=1, description=1 semester, year=0, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, daysOfWeek=null, periods=null, disable=false)]
[INFO ] 2020-06-03 12:44:09.740 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=0, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, daysOfWeek=null, periods=null, disable=false)
[INFO ] 2020-06-03 12:44:09.741 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExistsByDescriptionAndYear (description = [1 semester], year = [0])
[INFO ] 2020-06-03 12:44:09.743 [Test worker] c.s.s.i.SemesterServiceImpl - In update(entity = [Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=0, startTime=null, endTime=null, name=3 para), Period(id=0, startTime=null, endTime=null, name=2 para), Period(id=0, startTime=null, endTime=null, name=4 para), Period(id=0, startTime=null, endTime=null, name=1 para)], disable=false)]
[INFO ] 2020-06-03 12:44:09.744 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=0, startTime=null, endTime=null, name=3 para), Period(id=0, startTime=null, endTime=null, name=2 para), Period(id=0, startTime=null, endTime=null, name=4 para), Period(id=0, startTime=null, endTime=null, name=1 para)], disable=false)
[INFO ] 2020-06-03 12:44:09.744 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExistsByDescriptionAndYearForUpdate (semesterId = [1],description = [1 semester], year = [2020])
[INFO ] 2020-06-03 12:44:09.746 [Test worker] c.s.s.i.SemesterServiceImpl - In getCurrentSemester
[INFO ] 2020-06-03 12:44:09.915 [Test worker] c.s.s.i.SemesterServiceImpl - In save(entity = [Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-03-10, currentSemester=false, daysOfWeek=null, periods=null, disable=false)]
[INFO ] 2020-06-03 12:44:09.916 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-03-10, currentSemester=false, daysOfWeek=null, periods=null, disable=false)
[INFO ] 2020-06-03 12:44:09.917 [Test worker] c.s.s.i.SemesterServiceImpl - In save(entity = [Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=0, startTime=null, endTime=null, name=3 para), Period(id=0, startTime=null, endTime=null, name=2 para), Period(id=0, startTime=null, endTime=null, name=4 para), Period(id=0, startTime=null, endTime=null, name=1 para)], disable=false)]
[INFO ] 2020-06-03 12:44:09.918 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=0, startTime=null, endTime=null, name=3 para), Period(id=0, startTime=null, endTime=null, name=2 para), Period(id=0, startTime=null, endTime=null, name=4 para), Period(id=0, startTime=null, endTime=null, name=1 para)], disable=false)
[INFO ] 2020-06-03 12:44:09.918 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExistsByDescriptionAndYear (description = [1 semester], year = [2020])
[INFO ] 2020-06-03 12:44:09.920 [Test worker] c.s.s.i.SemesterServiceImpl - In getById(id = [1])
[INFO ] 2020-06-03 12:44:09.922 [Test worker] c.s.s.i.SemesterServiceImpl - In getById(id = [2])
[INFO ] 2020-06-03 12:44:09.993 [Test worker] c.s.s.i.SubjectServiceImpl - In getById(id = [1])
[INFO ] 2020-06-03 12:44:09.997 [Test worker] c.s.s.i.SubjectServiceImpl - In getById(id = [2])
[INFO ] 2020-06-03 12:44:10.001 [Test worker] c.s.s.i.SubjectServiceImpl - In save(entity = [com.softserve.entity.Subject@63b77157]
[INFO ] 2020-06-03 12:44:10.003 [Test worker] c.s.s.i.SubjectServiceImpl - In isSubjectExistsWithName(name = [some subject])
[INFO ] 2020-06-03 12:44:10.013 [Test worker] c.s.s.i.SubjectServiceImpl - In update(entity = [com.softserve.entity.Subject@63b5363d]
[INFO ] 2020-06-03 12:44:10.015 [Test worker] c.s.s.i.SubjectServiceImpl - In isExistsWithId(id = [1])
[INFO ] 2020-06-03 12:44:10.019 [Test worker] c.s.s.i.SubjectServiceImpl - In save(entity = [com.softserve.entity.Subject@63b77157]
[INFO ] 2020-06-03 12:44:10.020 [Test worker] c.s.s.i.SubjectServiceImpl - In isSubjectExistsWithName(name = [some subject])
[ERROR] 2020-06-03 12:44:10.021 [Test worker] c.s.s.i.SubjectServiceImpl - Subject with name some subject already exists
[INFO ] 2020-06-03 12:44:10.031 [Test worker] c.s.s.i.SubjectServiceImpl - In update(entity = [com.softserve.entity.Subject@b3c8022d]
[INFO ] 2020-06-03 12:44:10.031 [Test worker] c.s.s.i.SubjectServiceImpl - In isExistsWithId(id = [1])
[INFO ] 2020-06-03 12:44:10.032 [Test worker] c.s.s.i.SubjectServiceImpl - In isSubjectExistsWithNameAndIgnoreWithId(id = [1], name = [updated name])
[ERROR] 2020-06-03 12:44:10.033 [Test worker] c.s.s.i.SubjectServiceImpl - Subject with name [updated name] already exists
[INFO ] 2020-06-03 12:44:10.063 [Test worker] c.s.s.i.SubjectServiceImpl - In update(entity = [com.softserve.entity.Subject@b3c8022d]
[INFO ] 2020-06-03 12:44:10.065 [Test worker] c.s.s.i.SubjectServiceImpl - In isExistsWithId(id = [1])
[INFO ] 2020-06-03 12:44:10.066 [Test worker] c.s.s.i.SubjectServiceImpl - In isSubjectExistsWithNameAndIgnoreWithId(id = [1], name = [updated name])
[INFO ] 2020-06-03 12:44:10.359 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into save method with entity:com.softserve.entity.Teacher@7355bcb5
[INFO ] 2020-06-03 12:44:10.360 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into saveTeacherWishesByNewTeacher method with entity:com.softserve.entity.Teacher@7355bcb5
[INFO ] 2020-06-03 12:44:10.369 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into joinTeacherWithUser method with teacherId 1 and userId:1
[INFO ] 2020-06-03 12:44:10.370 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getById of TeacherServiceImpl with id 1
[INFO ] 2020-06-03 12:44:10.374 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into update method with entity:com.softserve.entity.Teacher@2341b90a
[INFO ] 2020-06-03 12:44:10.383 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getById of TeacherServiceImpl with id 2
[INFO ] 2020-06-03 12:44:10.385 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getById of TeacherServiceImpl with id 1
[INFO ] 2020-06-03 12:44:10.434 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getByUserId with userId 2
[INFO ] 2020-06-03 12:44:10.440 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into joinTeacherWithUser method with teacherId 1 and userId:1
[INFO ] 2020-06-03 12:44:10.442 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getById of TeacherServiceImpl with id 1
[INFO ] 2020-06-03 12:44:10.449 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into joinTeacherWithUser method with teacherId 1 and userId:1
[INFO ] 2020-06-03 12:44:10.450 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getById of TeacherServiceImpl with id 1
[INFO ] 2020-06-03 12:44:10.455 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getByUserId with userId 1
[INFO ] 2020-06-03 12:44:10.611 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter into save method with entity:TeacherWishes(id=1, teacherWishesList=[Wishes(dayOfWeek=MONDAY, evenOdd=EVEN, wishes=[Wish(className=1 para, status=GOOD)]), Wishes(dayOfWeek=MONDAY, evenOdd=WEEKLY, wishes=[Wish(className=1 para, status=GOOD)])])
[INFO ] 2020-06-03 12:44:10.612 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter validateTeacherWish method 
[INFO ] 2020-06-03 12:44:10.613 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter isTeacherSchemaValid method
[INFO ] 2020-06-03 12:44:12.140 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter isUniqueDayAndEvenOdd method with wishesList:[Wishes(dayOfWeek=MONDAY, evenOdd=EVEN, wishes=[Wish(className=1 para, status=GOOD)]), Wishes(dayOfWeek=MONDAY, evenOdd=WEEKLY, wishes=[Wish(className=1 para, status=GOOD)])]
[INFO ] 2020-06-03 12:44:12.191 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter isUniqueClassName update method with wishesList:[Wish(className=1 para, status=GOOD)]
[INFO ] 2020-06-03 12:44:12.195 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter isUniqueClassName update method with wishesList:[Wish(className=1 para, status=GOOD)]
[INFO ] 2020-06-03 12:44:12.196 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter isEvenOddNotExist update method with wishesList:[Wishes(dayOfWeek=MONDAY, evenOdd=EVEN, wishes=[Wish(className=1 para, status=GOOD)]), Wishes(dayOfWeek=MONDAY, evenOdd=WEEKLY, wishes=[Wish(className=1 para, status=GOOD)])]
[INFO ] 2020-06-03 12:44:12.199 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter into save method with entity:TeacherWishes(id=1, teacherWishesList=[Wishes(dayOfWeek=MONDAY, evenOdd=EVEN, wishes=[Wish(className=1 para, status=GOOD)])])
[INFO ] 2020-06-03 12:44:12.203 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter into save method with entity:TeacherWishes(id=1, teacherWishesList=[Wishes(dayOfWeek=MONDAY, evenOdd=WEEKLY, wishes=[Wish(className=1 para, status=GOOD), Wish(className=2 para, status=BAD)]), Wishes(dayOfWeek=MONDAY, evenOdd=WEEKLY, wishes=[Wish(className=1 para, status=GOOD), Wish(className=2 para, status=BAD)])])
[INFO ] 2020-06-03 12:44:12.203 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter validateTeacherWish method 
[INFO ] 2020-06-03 12:44:12.203 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter isTeacherSchemaValid method
[INFO ] 2020-06-03 12:44:12.279 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter into getById of TeacherWishesServiceImpl with id 2
[INFO ] 2020-06-03 12:44:12.285 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter into save method with entity:TeacherWishes(id=1, teacherWishesList=[Wishes(dayOfWeek=MONDAY, evenOdd=EVEN, wishes=[Wish(className=1 para, status=GOOD), Wish(className=1 para, status=BAD)]), Wishes(dayOfWeek=MONDAY, evenOdd=ODD, wishes=[Wish(className=1 para, status=GOOD), Wish(className=1 para, status=BAD)])])
[INFO ] 2020-06-03 12:44:12.287 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter validateTeacherWish method 
[INFO ] 2020-06-03 12:44:12.289 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter isTeacherSchemaValid method
[INFO ] 2020-06-03 12:44:12.350 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter isUniqueDayAndEvenOdd method with wishesList:[Wishes(dayOfWeek=MONDAY, evenOdd=EVEN, wishes=[Wish(className=1 para, status=GOOD), Wish(className=1 para, status=BAD)]), Wishes(dayOfWeek=MONDAY, evenOdd=ODD, wishes=[Wish(className=1 para, status=GOOD), Wish(className=1 para, status=BAD)])]
[INFO ] 2020-06-03 12:44:12.350 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter isUniqueClassName update method with wishesList:[Wish(className=1 para, status=GOOD), Wish(className=1 para, status=BAD)]
[INFO ] 2020-06-03 12:44:12.352 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter into getById of TeacherWishesServiceImpl with id 1
[INFO ] 2020-06-03 12:44:12.354 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter into save method with entity:TeacherWishes(id=1, teacherWishesList=[Wishes(dayOfWeek=MONDAY, evenOdd=EVEN, wishes=[Wish(className=1 para, status=GOOD)])])
[INFO ] 2020-06-03 12:44:12.354 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter validateTeacherWish method 
[INFO ] 2020-06-03 12:44:12.355 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter isTeacherSchemaValid method
[INFO ] 2020-06-03 12:44:12.445 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter isUniqueDayAndEvenOdd method with wishesList:[Wishes(dayOfWeek=MONDAY, evenOdd=EVEN, wishes=[Wish(className=1 para, status=GOOD)])]
[INFO ] 2020-06-03 12:44:12.447 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter isUniqueClassName update method with wishesList:[Wish(className=1 para, status=GOOD)]
[INFO ] 2020-06-03 12:44:12.461 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter into update method with entity:TeacherWishes(id=1, teacherWishesList=[Wishes(dayOfWeek=MONDAY, evenOdd=EVEN, wishes=[Wish(className=1 para, status=GOOD)])])
[INFO ] 2020-06-03 12:44:12.469 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter validateTeacherWish method 
[INFO ] 2020-06-03 12:44:12.471 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter isTeacherSchemaValid method
[INFO ] 2020-06-03 12:44:12.515 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter isUniqueDayAndEvenOdd method with wishesList:[Wishes(dayOfWeek=MONDAY, evenOdd=EVEN, wishes=[Wish(className=1 para, status=GOOD)])]
[INFO ] 2020-06-03 12:44:12.516 [Test worker] c.s.s.i.TeacherWishesServiceImpl - Enter isUniqueClassName update method with wishesList:[Wish(className=1 para, status=GOOD)]
[INFO ] 2020-06-03 12:44:12.670 [Test worker] c.s.s.i.UserServiceImpl - Enter into registration method  with email:some@mail.com
[INFO ] 2020-06-03 12:44:12.670 [Test worker] c.s.s.i.UserServiceImpl - Enter into isPasswordValid method with password:qwert
[INFO ] 2020-06-03 12:44:12.680 [Test worker] c.s.s.i.UserServiceImpl - Enter into getById method with id 2
[INFO ] 2020-06-03 12:44:12.683 [Test worker] c.s.s.i.UserServiceImpl - Enter into findByEmail method with email:test@email.com
[INFO ] 2020-06-03 12:44:12.686 [Test worker] c.s.s.i.UserServiceImpl - Enter into findByToken method with token:qwerty123!@#
[INFO ] 2020-06-03 12:44:12.691 [Test worker] c.s.s.i.UserServiceImpl - Enter into update method with entity:User(id=1, email=update@mail.com, password=updatePassword, role=ROLE_USER, token=null)
[INFO ] 2020-06-03 12:44:12.691 [Test worker] c.s.s.i.UserServiceImpl - Enter into getById method with id 1
[INFO ] 2020-06-03 12:44:12.697 [Test worker] c.s.s.i.UserServiceImpl - Enter into update method with entity:User(id=1, email=email@mail.com, password=oldPassword, role=ROLE_USER, token=null)
[INFO ] 2020-06-03 12:44:12.697 [Test worker] c.s.s.i.UserServiceImpl - Enter into getById method with id 1
[INFO ] 2020-06-03 12:44:12.699 [Test worker] c.s.s.i.UserServiceImpl - Enter into findByEmail method with email:some@email.com
[INFO ] 2020-06-03 12:44:12.705 [Test worker] c.s.s.i.UserServiceImpl - Enter into getAllUsersWithRoleUser of UserServiceImpl
[INFO ] 2020-06-03 12:44:12.711 [Test worker] c.s.s.i.UserServiceImpl - Enter into save method with entity:User(id=null, email=test@email.com, password=password, role=ROLE_USER, token=null)
[INFO ] 2020-06-03 12:44:12.712 [Test worker] c.s.s.i.UserServiceImpl - Enter into emailExists method with email:test@email.com
[INFO ] 2020-06-03 12:44:12.717 [Test worker] c.s.s.i.UserServiceImpl - Enter into save method with entity:User(id=null, email=mail@email.com, password=Qwerty1!, role=ROLE_USER, token=null)
[INFO ] 2020-06-03 12:44:12.718 [Test worker] c.s.s.i.UserServiceImpl - Enter into emailExists method with email:mail@email.com
[INFO ] 2020-06-03 12:44:12.720 [Test worker] c.s.s.i.UserServiceImpl - Enter into registration method  with email:some@mail.com
[INFO ] 2020-06-03 12:44:12.720 [Test worker] c.s.s.i.UserServiceImpl - Enter into isPasswordValid method with password:Qwerty123!@#
[INFO ] 2020-06-03 12:44:12.729 [Test worker] c.s.s.i.UserServiceImpl - Enter into save method with entity:User(id=null, email=some@mail.com, password=Qwerty123!@#, role=ROLE_USER, token=a960c7d8-5c29-4359-a16c-1b0f4ba09a59)
[INFO ] 2020-06-03 12:44:12.730 [Test worker] c.s.s.i.UserServiceImpl - Enter into emailExists method with email:some@mail.com
[INFO ] 2020-06-03 12:44:12.732 [Test worker] c.s.s.i.UserServiceImpl - Enter into resetPassword method  with email:some@mail.com
[INFO ] 2020-06-03 12:44:12.773 [Test worker] c.s.s.i.UserServiceImpl - Enter into findByToken method with token:qflkwrgn
[INFO ] 2020-06-03 12:44:12.777 [Test worker] c.s.s.i.UserServiceImpl - Enter into resetPassword method  with email:afvadf
[INFO ] 2020-06-03 12:44:12.784 [Test worker] c.s.s.i.UserServiceImpl - Enter into getById method with id 1
