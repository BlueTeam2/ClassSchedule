{"version":3,"sources":["redux/reducers/teachers.js","redux/actions/actionsType.js","redux/utility.js","redux/reducers/lesson.js","redux/reducers/snackbar.js","redux/reducers/auth.js","redux/reducers/loadingIndicator.js","redux/reducers/schedule.js","redux/reducers/class.js","redux/reducers/subjects.js","redux/reducers/groups.js","redux/reducers/rooms.js","constants/actionTypes.js","redux/reducers/roomTypes.js","redux/reducers/teachersWish.js","redux/reducers/index.js","helper/axios.js","constants/tokenBegin.js","services/authService.js","constants/axios.js","sagas/authSaga.js","sagas/logoutSaga.js","sagas/checkAuthTimeoutSaga.js","sagas/checkAuthStateSaga.js","sagas/registrationSaga.js","sagas/activateUserSaga.js","sagas/watchers.js","sagas/index.js","constants/links.js","components/Header/Header.js","helper/prepareSchedule.js","helper/i18n.js","helper/renderScheduleTable.js","validation/validateFields.js","redux/actions/snackbar.js","redux/actions/loadingIndicator.js","services/loadingService.js","services/snackbarService.js","constants/snackbarTypes.js","services/scheduleService.js","redux/actions/schedule.js","components/GroupSchedulePage/GroupSchedulePage.js","containers/Home/Home.js","constants/snackbarMessages.js","constants/cardType.js","services/lessonService.js","redux/actions/lesson.js","validation/storeValidation.js","constants/reduxForms.js","constants/schedule/colors.js","share/Card/Card.js","share/renderedFields/input.js","components/LoginForm/LoginForm.js","components/RegistrationForm/RegistrationForm.js","constants/userRoles.js","containers/Auth/Auth.js","redux/actions/auth.js","services/groupService.js","redux/actions/groups.js","services/classService.js","redux/actions/class.js","constants/schedule/cssClasses.js","components/Board/Board.js","helper/strings.js","components/ScheduleItem/ScheduleItem.js","components/ScheduleLessonsList/ScheduleLessonsList.js","constants/schedule/days.js","components/ScheduleDialog/ScheduleDialog.js","components/Schedule/Schedule.js","services/roomService.js","redux/actions/rooms.js","containers/SchedulePage/SchedulePage.js","share/modals/dialog.js","share/renderedFields/select.js","share/renderedFields/error.js","components/LessonForm/LessonForm.js","services/teacherService.js","redux/actions/teachers.js","services/subjectService.js","redux/actions/subjects.js","components/LessonsList/LessonsList.js","containers/LessonPage/LessonPage.js","components/AddTeacherForm/AddTeacherForm.js","components/AddTeacherWishForm/WishForm.js","containers/WishModal/WishModal.js","services/teacherWishService.js","redux/actions/teachersWish.js","helper/search.js","share/SearchPanel/SearchPanel.js","share/NotFound/NotFound.js","containers/TeachersList/TeachersList.js","share/renderedFields/time.js","components/ClassForm/ClassForm.js","constants/common.js","containers/ClassSchedule/ClassSchedule.js","share/Snackbar/SnackbarComponent.js","components/AddGroupForm/AddGroupForm.js","containers/GroupList/GroupList.js","components/AddRoomForm/AddRoomForm.js","services/roomTypesService.js","redux/actions/roomTypes.js","components/AddNewRoomType/AddNewRoomType.js","containers/RoomList/RoomList.js","components/AddSubjectForm/AddSubjectForm.js","containers/SubjectPage/SubjectPage.js","containers/AdminPage/AdminPage.js","containers/Auth/Logout/Logout.js","containers/ActivationPage/ActivationPage.js","router/Routers.js","components/LanguageSelector/LanguageSelector.js","App.js","serviceWorker.js","index.js"],"names":["teachers","state","teacher","action","type","result","filter","id","updatedTeacher","forEach","push","updateObject","oldObject","updatedValues","initialState","lessons","lessonTypes","lesson","groupId","uniqueError","reducer","concat","updatedLessons","isSnackbarOpen","snackbarType","message","isOpen","token","role","error","activationError","response","localStorage","removeItem","loading","items","availability","itemsIds","fullSchedule","groupSchedule","scheduleType","itemArr","index","findIndex","item","splice","newType","itemGroupId","newArr","classActions","classScheduler","classScheduleOne","classSchedulOne","one","classScheduleItem","classSchedulerstate","classItem","subjects","subject","updatedSubjects","groups","group","updatedGroups","rooms","oneRoom","roomItem","roomState","actionType","roomTypes","oneType","typeItem","typeState","teachersWish","wishes","wish","rootReducer","combineReducers","lessonReducer","auth","authReducer","snackbar","snackbarReducer","schedule","scheduleReducer","loadingIndicator","form","formReducer","instance","axios","create","baseURL","interceptors","request","use","config","getItem","includes","headers","Authorization","Promise","reject","authUserService","post","then","registerUserService","activateUserService","put","logoutUserService","authSaga","payload","call","jwtDecode","require","data","decodedJWT","expirationDate","Date","exp","setItem","roles","expirationTime","getTime","logoutSaga","checkAuthTimeoutSaga","delay","checkAuthStateSaga","registrationSaga","activateUserSaga","watchUserAuthentication","takeLatest","takeEvery","startForman","fork","links","Header","props","t","useTranslation","leftLinks","rightLinks","userRole","MANAGER","to","className","USER","dayArray","daysPrep","day","class","daysPrepFull","userLang","navigator","language","userLanguage","slice","lang","find","i","i18n","LanguageDetector","initReactI18next","Backend","init","lng","backend","loadPath","fallbackLng","debug","ns","defaultNS","keySeparator","useDataAttrOptions","interpolation","escapeValue","formatSeparator","react","wait","prepareLessonCardCell","card","inner","undefined","teacherForSite","subjectForSite","lessonType","room","name","printWeekNumber","startScheduleDate","date","oneJan","numberOfDays","Math","floor","ceil","getDay","getWeekNumber","isOdd","num","min","max","renderGroupTable","classes","TableContainer","Table","aria-label","TableHead","TableRow","key","TableCell","map","i18next","TableBody","classDay","classIndex","isOddWeek","currentDay","matchDayNumberSysytemToDayName","currentWeekType","res","Object","entries","cards","value","class_name","startTime","endTime","align","renderGroupDayClass","renderGroupCells","isCurrentDay","groupIndex","colspan","rowspan","classname","skip","weekly","length","colSpan","rowSpan","prepareForRender","odd","cardIndex","even","renderDay","dayItem","classesCount","day_name","dayClassName","classClassName","renderFirstDayFirstClassFirstCardLine","renderFullSchedule","groupList","title","resultArray","dayIndex","setOpenSnackbar","setLoading","setLoadingService","isLoading","store","dispatch","handleSnackbarOpenService","handleSnackbarCloseService","snackbarTypes","getScheduleItemsService","get","catch","err","setScheduleTypeService","useStyles","makeStyles","theme","root","margin","spacing","connect","matchFunction","useEffect","resultArrays","evenArray","oddArray","daysPrepArray","evenDaysPrepArray","days","dayPrep","weeks","clas","clasIndex","hasOwnProperty","dayArr","makeGroupSchedule","Button","variant","color","onClick","maxClassesCount","groupsCount","daysPrepArrayFull","x","makeFullSchedule","HomePage","snackbarMessage","cardType","LESSON","TEACHER","CLASS","GROUP","ROOM","TYPE","SUBJECT","WISH","getLessonsByGroupService","resetFormService","formName","reset","handleLessonCardService","cardObj","lessonCardId","hours","cardObjectHandler","getState","storeLesson","checkUniqLesson","setUniqueErrorService","selectLessonCardService","createLessonHandler","selectGroupIdService","isUniqueError","colors","Card","children","dragItemNode","useRef","dragItem","draggable","handleDragEnd","e","JSON","parse","target","childNodes","groupTitleEl","document","getElementById","style","backgroundColor","boards","getElementsByClassName","board","background","current","removeEventListener","onDragStart","groupTitle","isOnBoard","split","scrollIntoView","setItemGroupIdService","addEventListener","dataTransfer","setData","renderTextField","label","input","meta","touched","invalid","custom","TextField","placeholder","helperText","required","lessThanZero","minLengthValue","maxLengthValue","lessThanTime","previousValue","allValues","values","moment","toDate","field","greaterThanTime","uniqueClassName","classId","some","_arr","checkUniqClassName","uniqueGroup","toUpperCase","trim","checkUniqueGroup","uniqueSubject","subjectTitle","checkUniqueSubject","timeIntersect","extendMoment","Moment","incomeRange","range","intersect","timeIntersectService","uniqueRoomName","roomName","checkUniqueRoomName","email","test","password","LoginForm","handleSubmit","loginError","translation","errArr","toLowerCase","onSubmit","Field","component","onChange","setError","switchAuthMode","CircularProgress","reduxForm","RegistrationForm","registrationError","emailValidate","validate","emailErrorCondition","emailAdvancedValidate","passwordValidate","passwordErrorCondition","passwordValidateAdvanced","retypePasswordValidate","retypePasswordValidateAdvanced","userRoles","onAuth","onRegister","useState","isLogin","setLogin","isSuccess","commonCondition","authRedirect","switchAuthModeHandler","loginData","registrationData","retypePassword","showAllGroupsService","sort","a","b","selectGroupService","handleGroupService","resetForm","createGroupService","resetFormHandler","getClassScheduleListService","bufferArray","results","putAddClassScheduleOneService","postAddClassScheduleOneService","cssClasses","Board","onDrop","preventDefault","card_id","getData","display","arr","borderGroupId","week","obj","lessonId","dayOfWeek","periodId","evenOdd","semesterId","setModalData","openDialog","onDragOver","classList","contains","onDragLeave","parent","parentNode","everyFirstLetterCapital","str","s","charAt","substring","join","firstStringLetterCapital","replace","c","ScheduleItem","itemId","classNumber","fStrLetterCapital","eFLetCapital","itemNodeId","deleteNodeId","itemNode","deleteNode","stringify","inBoard","deleteItem","GroupField","styled","width","ScheduleLessonsList","defaultProps","options","getOptionLabel","option","everyFirstLetterCapitalHandle","firstStringLetterCapitalHandle","Autocomplete","clearOnEscape","openOnFocus","groupFinderHandle","event","newValue","renderInput","params","lessonItem","els","hoursInSchedule","lessonItems","roomField","ScheduleDialog","onClose","itemData","open","setRoom","Dialog","disableBackdropClick","aria-labelledby","DialogTitle","Schedule","setOpen","setItemData","setNewItemHandle","addItemToScheduleService","roomId","handleClickOpen","elClasses","minHeight","deleteItemFromScheduleHandler","delete","console","log","deleteItemFromScheduleService","allLessons","selectedValue","period","itemInBoard","showListOfRoomsService","createRoomService","scheduleItems","ConfirmDialog","whatDelete","cardId","renderSelectField","FormControl","InputLabel","htmlFor","Select","native","FormHelperText","renderFromHelper","textAlign","LessonForm","pristine","submitting","initializeFormHandler","initialize","concatTeacherNameHandler","surname","patronymic","teacherId","change","setValueToTeacherForSiteHandler","subjectId","subjectName","setValueToSubjectForSiteHandler","multiline","rowsMax","disabled","onSetSelectedCard","showAllTeachersService","handleTeacherService","position","cardTeacher","selectTeacherCardService","createTeacherService","teacherCardId","showAllSubjectsService","selectSubjectService","handleSubjectService","createSubjectService","LessonsList","onSelectLesson","onClickOpen","React","setLessonId","lessonLength","selectLessonCardHandler","cardsContainer","groupHandle","groupTitleHandle","deleteLessonCard","keys","constructor","CreateBtn","marginTop","AddTeacher","teacherWishId","class_on_day","classSchedulerOne","day_of_week","class_number","teacher_id","initializeTeacherId","WishModal","onCloseWish","teacherWishes","openWish","class_names","removeWish","deleteWish","removeTeacherWishService","teacherWishOne","teacherWish","maxWidth","WishForm","random","teacherWishesList","class_status","newWish","class_id","status","createTeachersWishService","arrayWish","search","term","flag","String","indexOf","SearchPanel","SearchChange","setTerm","NotFound","setTeacherId","teacherLengs","selectTeacherCard","removeTeacherCard","deleteTeacher","removeTeacherCardService","setOpenWish","setTeacherWishId","visibleItems","handleToUpperCase","wishId","renderTimePicker","inputProps","utils","MomentUtils","TimePicker","clearable","ampm","format","rootInput","onReset","add","ClassScheduleOne","setClassId","handleEdit","getClassScheduleOneService","deleteClassScheduleOneService","addClassScheduleOneService","Alert","elevation","SnackbarComponent","handleSnackbarClose","Snackbar","autoHideDuration","severity","setGroupId","removeGroupCardService","reason","AddRoom","roomType","description","updateOneTypeService","NewRoomType","typeId","setTypeId","editHandler","roomTypeId","setRoomId","selectOneRoomService","deleteRoom","createNewTypeService","setSubjectId","removeSubjectCardService","TabPanel","other","Typography","hidden","Box","p","a11yProps","flexGrow","palette","paper","setValue","AppBar","Tabs","Tab","onLogout","onActivate","URLSearchParams","location","redirect","main","routes","path","exact","Auth","ActivationPage","SchedulePage","AdminPage","Logout","LanguageSelector","RadioGroup","row","changeLanguage","FormControlLabel","control","Radio","onTryAutoLogin","authCheckState","fallback","Boolean","window","hostname","match","sagaMiddleware","createSagaMiddleware","composeEnhancers","compose","createStore","applyMiddleware","run","rootSaga","ReactDOM","render","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc382a60.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionsType';\r\n\r\nconst teachers = (\r\n    state = {\r\n        teachers: [],\r\n        teacher: {}\r\n    },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_TEACHER:\r\n            return {\r\n                ...state,\r\n                teachers: [...state.teachers, action.result]\r\n            };\r\n\r\n        case actionTypes.DELETE_TEACHER:\r\n            return {\r\n                ...state,\r\n                teachers: [\r\n                    ...state.teachers.filter(\r\n                        teachers => teachers.id !== action.result\r\n                    )\r\n                ]\r\n            };\r\n\r\n        case actionTypes.SELECT_TEACHER:\r\n            let teacher = state.teachers.filter(\r\n                teacher => teacher.id === action.result\r\n            )[0];\r\n            if (!teacher) {\r\n                teacher = { id: null };\r\n            }\r\n            return {\r\n                teachers: state.teachers,\r\n                teacher: teacher\r\n            };\r\n\r\n        case actionTypes.UPDATE_TEACHER:\r\n            const updatedTeacher = [];\r\n            state.teachers.forEach(teacher => {\r\n                if (teacher.id === action.result.id) {\r\n                    teacher = { ...teacher, ...action.result };\r\n                }\r\n                updatedTeacher.push(teacher);\r\n            });\r\n            return {\r\n                teachers: updatedTeacher,\r\n                teacher: {}\r\n            };\r\n\r\n        case actionTypes.SHOW_ALL:\r\n            return {\r\n                ...state,\r\n                teachers: [...action.result]\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default teachers;\r\n","export const ADD_LESSON_CARD = 'ADD_LESSON_CARD';\r\nexport const SET_LESSONS_CARDS = 'SET_LESSONS_CARDS';\r\nexport const SET_LESSON_TYPES = 'SET_LESSON_TYPES';\r\nexport const DELETE_LESSON_CARD = 'DELETE_LESSON_CARD';\r\nexport const SELECT_LESSON_CARD = 'SELECT_LESSON_CARD';\r\nexport const UPDATE_LESSON_CARD = 'UPDATE_LESSON_CARD';\r\nexport const SELECT_GROUP_ID = 'SELECT_GROUP_ID';\r\nexport const SET_UNIQUE_ERROR = 'SET_UNIQUE_ERROR';\r\n\r\nexport const SET_OPEN_SNACKBAR = 'SET_OPEN_SNACKBAR';\r\n\r\nexport const AUTH_USER = 'AUTH_USER';\r\nexport const AUTH_USER_SUCCESS = 'AUTH_USER_SUCCESS';\r\nexport const AUTH_USER_ERROR = 'AUTH_USER_ERROR';\r\nexport const AUTH_USER_INITIATE_LOGOUT = 'AUTH_USER_INITIATE_LOGOUT';\r\nexport const AUTH_USER_LOGOUT = 'AUTH_USER_LOGOUT';\r\nexport const AUTH_USER_AUTO_LOGOUT = 'AUTH_USER_AUTO_LOGOUT';\r\nexport const AUTH_USER_CHECK_STATE = 'AUTH_USER_CHECK_STATE';\r\nexport const SET_AUTH_ERROR = 'SET_AUTH_ERROR';\r\n\r\nexport const REGISTER_USER = 'REGISTER_USER';\r\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\r\nexport const REGISTER_USER_ERROR = 'REGISTER_USER_ERROR';\r\n\r\nexport const ACTIVATE_USER = 'ACTIVATE_USER';\r\nexport const ACTIVATE_USER_SUCCESS = 'ACTIVATE_USER_SUCCESS';\r\nexport const ACTIVATE_USER_ERROR = 'ACTIVATE_USER_ERROR';\r\n\r\nexport const SET_LOADING_INDICATOR = 'SET_LOADING_INDICATOR';\r\n\r\nexport const SET_SCHEDULE_ITEMS = 'SET_SCHEDULE_ITEMS';\r\nexport const ADD_ITEM_TO_SCHEDULE = 'ADD_ITEM_TO_SCHEDULE';\r\nexport const CHECK_AVAILABILITY_SCHEDULE = 'CHECK_AVAILABILITY_SCHEDULE';\r\nexport const SET_FULL_SCHEDULE = 'SET_FULL_SCHEDULE';\r\nexport const SET_GROUP_SCHEDULE = 'SET_GROUP_SCHEDULE';\r\nexport const SET_SCHEDULE_TYPE = 'SET_SCHEDULE_TYPE';\r\nexport const DELETE_ITEM_FROM_SCHEDULE = 'DELETE_ITEM_FROM_SCHEDULE';\r\nexport const SET_ITEM_GROUP_ID = 'SET_ITEM_GROUP_ID';\r\n\r\nexport const ADD_TEACHER = 'ADD_TEACHER';\r\nexport const SELECT_TEACHER = 'SELECT_TEACHER';\r\nexport const UPDATE_TEACHER = 'UPDATE_TEACHER';\r\nexport const DELETE_TEACHER = 'DELETE_TEACHER';\r\nexport const SHOW_ALL = 'SHOW_ALL';\r\n\r\nexport const ADD_WISH = 'ADD_WISH';\r\nexport const DELETE_WISH = 'DELETE_WISH';\r\nexport const SHOW_ALL_WISH = 'SHOW_ALL_WISH';\r\n\r\nexport const SET_CLASS_SCHEDULE_LIST = 'SET_CLASS_SCHEDULE_LIST';\r\nexport const ADD_CLASS_SCHEDULE_ONE = 'ADD_CLASS_SCHEDULE_ONE';\r\nexport const GET_CLASS_SCHEDULE_LIST = 'GET_CLASS_SCHEDULE_LIST';\r\nexport const GET_CLASS_SCHEDULE_ONE = 'GET_CLASS_SCHEDULE_ONE';\r\nexport const DELETE_CLASS_SCHEDULE_ONE = 'DELETE_CLASS_SCHEDULE_ONE';\r\nexport const UPDATE_CLASS_SCHEDULE_ONE = 'UPDATE_CLASS_SCHEDULE_ONE';\r\nexport const CLEAR_CLASS_SCHEDULE_ONE = 'CLEAR_CLASS_SCHEDULE_ONE';\r\n\r\nexport const ADD_GROUP = 'ADD_GROUP';\r\nexport const DELETE_GROUP = 'DELETE_GROUP';\r\nexport const SHOW_ALL_GROUPS = 'SHOW_ALL_GROUPS';\r\nexport const SELECT_GROUP = 'SELECT_GROUP';\r\nexport const UPDATE_GROUP = 'UPDATE_GROUP';\r\nexport const CLEAR_GROUP = 'CLEAR_GROUP';\r\n\r\nexport const ADD_ROOM = 'ADD_ROOM';\r\nexport const DELETE_ROOM = 'DELETE_ROOM';\r\nexport const SHOW_LIST_OF_ROOMS = 'SHOW_LIST_OF_ROOMS';\r\nexport const SELECT_ONE_ROOM = 'SELECT_ONE_ROOM';\r\nexport const UPDATE_ONE_ROOM = 'UPDATE_ONE_ROOM';\r\nexport const CLEAR_ROOM_ONE = 'CLEAR_ROOM_ONE';\r\nexport const GET_ALL_ROOM_TYPES = 'GET_ALL_ROOM_TYPES';\r\nexport const CREATE_NEW_TYPE = 'CREATE_NEW_TYPE';\r\nexport const DELETE_TYPE = 'DELETE_TYPE';\r\nexport const SELECT_ONE_TYPE = 'SELECT_ONE_TYPE';\r\nexport const UPDATE_ONE_TYPE = 'UPDATE_ONE_TYPE';\r\n\r\nexport const ADD_SUBJECT = 'ADD_SUBJECT';\r\nexport const DELETE_SUBJECT = 'DELETE_SUBJECT';\r\nexport const SHOW_ALL_SUBJECTS = 'SHOW_ALL_SUBJECT';\r\nexport const SELECT_SUBJECT = 'SELECT_SUBJECT';\r\nexport const UPDATE_SUBJECT = 'UPDATE_SUBJECT';\r\nexport const CLEAR_SUBJECT = 'CLEAR_SUBJECT';\r\n","export const updateObject = (oldObject, updatedValues) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedValues\r\n  };\r\n};\r\n","import * as actionTypes from '../actions/actionsType';\r\nimport { updateObject } from '../utility';\r\n\r\nconst initialState = {\r\n    lessons: [],\r\n    lessonTypes: [],\r\n    lesson: {},\r\n    groupId: null,\r\n    uniqueError: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_LESSON_CARD:\r\n            return updateObject(state, {\r\n                lessons: state.lessons.concat(action.result)\r\n            });\r\n        case actionTypes.SET_LESSONS_CARDS:\r\n            return updateObject(state, {\r\n                lessons: action.result\r\n            });\r\n        case actionTypes.SET_LESSON_TYPES:\r\n            return updateObject(state, {\r\n                lessonTypes: action.result\r\n            });\r\n        case actionTypes.DELETE_LESSON_CARD:\r\n            state.lessons = state.lessons.filter(\r\n                lesson => lesson.id !== action.result\r\n            );\r\n            return updateObject(state, {\r\n                lessons: state.lessons\r\n            });\r\n        case actionTypes.SELECT_LESSON_CARD:\r\n            let lesson = state.lessons.filter(\r\n                lesson => lesson.id === action.result\r\n            )[0];\r\n            if (!lesson) {\r\n                lesson = { id: null };\r\n            }\r\n            return updateObject(state, {\r\n                lesson: lesson\r\n            });\r\n        case actionTypes.UPDATE_LESSON_CARD:\r\n            const updatedLessons = [];\r\n            state.lessons.forEach(lesson => {\r\n                if (lesson.id === action.result.id) {\r\n                    lesson = { ...lesson, ...action.result };\r\n                }\r\n                updatedLessons.push(lesson);\r\n            });\r\n            return updateObject(state, {\r\n                lessons: updatedLessons,\r\n                lesson: {}\r\n            });\r\n        case actionTypes.SELECT_GROUP_ID:\r\n            return updateObject(state, {\r\n                lesson: {},\r\n                groupId: action.result\r\n            });\r\n        case actionTypes.SET_UNIQUE_ERROR:\r\n            return updateObject(state, {\r\n                uniqueError: action.result\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from \"../actions/actionsType\";\r\nimport { updateObject } from \"../utility\";\r\n\r\nconst initialState = {\r\n  isSnackbarOpen: false,\r\n  snackbarType: 'success',\r\n  message: ''\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_OPEN_SNACKBAR:\r\n      let type = action.result.type;\r\n      let message = action.result.message;\r\n      const isOpen = action.result.isOpen;\r\n      if (!isOpen) {\r\n        type = 'success';\r\n        message = '';\r\n      }\r\n      return updateObject(state, {\r\n        isSnackbarOpen: action.result.isOpen,\r\n        snackbarType: type,\r\n        message: message\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from '../actions/actionsType';\r\nimport { updateObject } from '../utility';\r\n\r\nconst initialState = {\r\n    token: null,\r\n    role: null,\r\n    error: null,\r\n    activationError: null\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    const response = action.response;\r\n\r\n    switch (action.type) {\r\n        case actionTypes.AUTH_USER_SUCCESS:\r\n            return updateObject(state, {\r\n                token: response.token,\r\n                role: response.role,\r\n                error: null\r\n            });\r\n        case actionTypes.AUTH_USER_ERROR:\r\n            return updateObject(state, {\r\n                response,\r\n                error: action.error\r\n            });\r\n        case actionTypes.AUTH_USER_LOGOUT:\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('expirationDate');\r\n            localStorage.removeItem('userRole');\r\n            return updateObject(state, {\r\n                response: null,\r\n                token: null,\r\n                error: null,\r\n                role: null\r\n            });\r\n        case actionTypes.REGISTER_USER_SUCCESS:\r\n            return updateObject(state, {\r\n                response\r\n            });\r\n        case actionTypes.REGISTER_USER_ERROR:\r\n            return updateObject(state, {\r\n                error: action.error\r\n            });\r\n        case actionTypes.ACTIVATE_USER_SUCCESS:\r\n            return updateObject(state, {\r\n                response\r\n            });\r\n        case actionTypes.ACTIVATE_USER_ERROR:\r\n            return updateObject(state, {\r\n                activationError: action.error\r\n            });\r\n        case actionTypes.SET_AUTH_ERROR:\r\n            return updateObject(state, {\r\n                error: action.result\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from '../actions/actionsType';\r\nimport { updateObject } from '../utility';\r\n\r\nconst initialState = {\r\n    loading: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_LOADING_INDICATOR:\r\n            return updateObject(state, {\r\n                loading: action.result\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from '../actions/actionsType';\r\nimport { updateObject } from '../utility';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    availability: {},\r\n    itemsIds: [],\r\n    fullSchedule: [],\r\n    groupSchedule: {},\r\n    scheduleType: ''\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_SCHEDULE_ITEMS:\r\n            return updateObject(state, {\r\n                items: action.result\r\n            });\r\n            case actionTypes.CHECK_AVAILABILITY_SCHEDULE:\r\n            return updateObject(state, {\r\n                availability: action.result\r\n            });\r\n        case actionTypes.ADD_ITEM_TO_SCHEDULE:\r\n            const id = action.result.id;\r\n            let itemArr;\r\n            if (id) {\r\n                const index = state.items.findIndex(item => {\r\n                    return item.id === id;\r\n                });\r\n                if (index < 0) {\r\n                    itemArr = state.items.concat(action.result);\r\n                } else {\r\n                    state.items.splice(index, 1, action.result);\r\n                    itemArr = state.items;\r\n                }\r\n            } else {\r\n                itemArr = state.items.concat(action.result);\r\n            }\r\n            return updateObject(state, {\r\n                items: itemArr\r\n            });\r\n        case actionTypes.SET_SCHEDULE_TYPE:\r\n            return updateObject(state, {\r\n                groupSchedule: {},\r\n                fullSchedule: [],\r\n                scheduleType: action.newType\r\n            });\r\n        case actionTypes.SET_FULL_SCHEDULE:\r\n            updateObject(state, {\r\n                fullSchedule: [],\r\n                groupSchedule: {}\r\n            });\r\n            return updateObject(state, {\r\n                fullSchedule: action.result\r\n            });\r\n        case actionTypes.SET_GROUP_SCHEDULE:\r\n            return updateObject(state, {\r\n                groupSchedule: action.result,\r\n                fullSchedule: []\r\n            });\r\n        case actionTypes.SET_ITEM_GROUP_ID:\r\n            return updateObject(state, {\r\n                itemGroupId: action.result\r\n            });\r\n        case actionTypes.DELETE_ITEM_FROM_SCHEDULE:\r\n            const index = state.items.findIndex(\r\n                item =>\r\n                    item.id === action.result\r\n            );\r\n            state.items.splice(index, 1);\r\n            const newArr = state.items;\r\n            return updateObject(state, {\r\n                items: newArr\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from \"../actions/actionsType\";\r\nconst classActions = (\r\n  state = {\r\n    classScheduler: [],\r\n    classScheduleOne: {}\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_CLASS_SCHEDULE_LIST:\r\n      return {\r\n        ...state,\r\n        classScheduler: [...action.classScheduler]\r\n      };\r\n    case actionTypes.ADD_CLASS_SCHEDULE_ONE:\r\n      return {\r\n        ...state,\r\n        classScheduleOne: {},\r\n        classScheduler: [...state.classScheduler, action.classSchedulOne]\r\n      };\r\n    case actionTypes.GET_CLASS_SCHEDULE_LIST:\r\n      return state;\r\n    case actionTypes.GET_CLASS_SCHEDULE_ONE:\r\n      const one = state.classScheduler.filter(\r\n        classScheduleItem => classScheduleItem.id === action.classSchedulOne\r\n      );\r\n      return {\r\n        ...state,\r\n        classScheduleOne: one[0]\r\n      };\r\n    case actionTypes.DELETE_CLASS_SCHEDULE_ONE:\r\n      return {\r\n        ...state,\r\n        classScheduler: state.classScheduler.filter(\r\n          classScheduleItem => classScheduleItem.id !== action.classSchedulOne\r\n        )\r\n      };\r\n    case actionTypes.UPDATE_CLASS_SCHEDULE_ONE:\r\n      let classSchedulerstate = [...state.classScheduler];\r\n      classSchedulerstate[\r\n        classSchedulerstate.findIndex(\r\n          classItem => classItem.id === action.classSchedulOne.id\r\n        )\r\n      ] = action.classSchedulOne;\r\n      return {\r\n        ...state,\r\n        classScheduleOne: {},\r\n        classScheduler: [...classSchedulerstate]\r\n      };\r\n    case actionTypes.CLEAR_CLASS_SCHEDULE_ONE:\r\n      return {\r\n        ...state,\r\n        classScheduleOne: {}\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default classActions;\r\n","import * as actionTypes from \"../actions/actionsType\";\r\nimport { updateObject } from \"../utility\";\r\n\r\nconst initialState = {\r\n    subjects: [],\r\n    subject: {}\r\n};\r\n\r\nconst subjects = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case actionTypes.ADD_SUBJECT:\r\n            return updateObject(state, {\r\n                subjects: state.subjects.concat(action.result),\r\n                subject: state.subject\r\n            });\r\n\r\n        case actionTypes.DELETE_SUBJECT:\r\n            state.subjects = state.subjects.filter(\r\n                subject => subject.id !== action.result\r\n            );\r\n            return updateObject(state, {\r\n                subjects: state.subjects,\r\n                subject: state.subject\r\n            });\r\n\r\n        case actionTypes.SHOW_ALL_SUBJECTS:\r\n            return updateObject(state, {\r\n                subjects: action.result,\r\n                subject: state.subject\r\n            });\r\n\r\n        case actionTypes.SELECT_SUBJECT:\r\n            let subject = state.subjects.filter(\r\n                subject => subject.id === action.result\r\n            )[0];\r\n            if (!subject) {\r\n                subject = {id: null};\r\n            }\r\n            return  updateObject(state, {\r\n                subjects: state.subjects,\r\n                subject: subject\r\n            });\r\n\r\n        case  actionTypes.UPDATE_SUBJECT:\r\n            const updatedSubjects = [];\r\n            state.subjects.forEach(subject => {\r\n                if (subject.id === action.result.id) {\r\n                    subject = { ...subject, ...action.result };\r\n                }\r\n                updatedSubjects.push(subject);\r\n            });\r\n            return updateObject(state, {\r\n                subjects: updatedSubjects,\r\n                subject: {}\r\n            });\r\n\r\n        case actionTypes.CLEAR_SUBJECT:\r\n            return {\r\n                ...state,\r\n                subject: {}\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default subjects;\r\n","import * as actionTypes from \"../actions/actionsType\";\r\nimport { updateObject } from \"../utility\";\r\n\r\nconst initialState = {\r\n    groups: [],\r\n    group: {}\r\n};\r\n\r\nconst groups = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case actionTypes.ADD_GROUP:\r\n            return updateObject(state, {\r\n                groups: state.groups.concat(action.result),\r\n                group: state.group\r\n            });\r\n\r\n        case actionTypes.DELETE_GROUP:\r\n          state.groups = state.groups.filter(\r\n              group => group.id !== action.result\r\n          );\r\n            return updateObject(state, {\r\n                groups: state.groups,\r\n                group: state.group\r\n            });\r\n\r\n        case actionTypes.SHOW_ALL_GROUPS:\r\n           return updateObject(state, {\r\n               groups: action.result,\r\n               group: state.group\r\n           });\r\n\r\n        case actionTypes.SELECT_GROUP:\r\n            let group = state.groups.filter(\r\n                group => group.id === action.result\r\n            )[0];\r\n            if (!group) {\r\n                group = {id: null};\r\n            }\r\n            return  updateObject(state, {\r\n                groups: state.groups,\r\n                group: group\r\n            });\r\n\r\n        case  actionTypes.UPDATE_GROUP:\r\n            const updatedGroups = [];\r\n            state.groups.forEach(group => {\r\n                if (group.id === action.result.id) {\r\n                    group = { ...group, ...action.result };\r\n                }\r\n                updatedGroups.push(group);\r\n            });\r\n            return updateObject(state, {\r\n                groups: updatedGroups,\r\n                group: {}\r\n            });\r\n\r\n        case actionTypes.CLEAR_GROUP:\r\n            return {\r\n                ...state,\r\n                group: {}\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default groups;\r\n","import * as actionTypes from '../actions/actionsType';\r\n\r\nconst rooms = (\r\n    state = {\r\n        rooms: [],\r\n        oneRoom: {}\r\n    },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_ROOM:\r\n            return {\r\n                ...state,\r\n                oneRoom: {},\r\n                rooms: [...state.rooms, action.result]\r\n            };\r\n        case actionTypes.DELETE_ROOM:\r\n            return {\r\n                ...state,\r\n                oneRoom: {},\r\n                rooms: [\r\n                    ...state.rooms.filter(rooms => rooms.id !== action.result)\r\n                ]\r\n            };\r\n\r\n        case actionTypes.SHOW_LIST_OF_ROOMS:\r\n            return {\r\n                ...state,\r\n                rooms: [...action.result]\r\n            };\r\n        case actionTypes.SELECT_ONE_ROOM:\r\n            const one = state.rooms.filter(\r\n                roomItem => roomItem.id === action.result\r\n            );\r\n            return {\r\n                ...state,\r\n                oneRoom: one[0]\r\n            };\r\n        case actionTypes.UPDATE_ONE_ROOM:\r\n            let roomState = [...state.rooms];\r\n            roomState[\r\n                roomState.findIndex(\r\n                    roomItem => roomItem.id === action.result.id\r\n                )\r\n            ] = action.result;\r\n            return {\r\n                ...state,\r\n                oneRoom: {},\r\n                rooms: [...roomState]\r\n            };\r\n        case actionTypes.CLEAR_ROOM_ONE:\r\n            return {\r\n                ...state,\r\n                oneRoom: {}\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default rooms;\r\n","export const actionType = {\r\n  CREATED: 'created',\r\n  DELETED: 'deleted',\r\n  UPDATED: 'updated'\r\n};\r\n","import * as actionTypes from '../actions/actionsType';\r\nimport actions from 'redux-form/lib/actions';\r\nimport { actionType } from '../../constants/actionTypes';\r\n\r\nconst roomTypes = (\r\n    state = {\r\n        roomTypes: [],\r\n        oneType: {}\r\n    },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case actionTypes.CREATE_NEW_TYPE:\r\n            return {\r\n                ...state,\r\n                roomTypes: [...state.roomTypes, action.result]\r\n            };\r\n\r\n        case actionTypes.GET_ALL_ROOM_TYPES:\r\n            return {\r\n                ...state,\r\n                roomTypes: [...action.result]\r\n            };\r\n        case actionTypes.DELETE_TYPE:\r\n            return {\r\n                ...state,\r\n                roomTypes: [\r\n                    ...state.roomTypes.filter(\r\n                        roomTypes => roomTypes.id !== action.result\r\n                    )\r\n                ]\r\n            };\r\n        case actionTypes.SELECT_ONE_TYPE:\r\n            const one = state.roomTypes.filter(\r\n                typeItem => typeItem.id === action.result\r\n            );\r\n            return {\r\n                ...state,\r\n                oneType: one[0]\r\n            };\r\n        case actionTypes.UPDATE_ONE_TYPE:\r\n            let typeState = [...state.roomTypes];\r\n            typeState[\r\n            typeState.findIndex(typeItem => typeItem.id === action.result.id) \r\n            \r\n            ] = action.result; \r\n         \r\n            return {\r\n                ...state,\r\n                oneType: {},\r\n                roomTypes: [...typeState]\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default roomTypes;\r\n","import * as actionTypes from '../actions/actionsType';\r\n\r\nconst teachersWish = (\r\n    state = {\r\n        wishes: [],\r\n        wish: {}\r\n    },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_WISH:\r\n            return {\r\n                ...state,\r\n                wishes: [...state.wishes, action.result]\r\n            };\r\n\r\n        case actionTypes.DELETE_WISH:\r\n            return {\r\n                ...state,\r\n                wishes: [\r\n                    ...state.wishes.filter(\r\n                        wishes => wishes.id !== action.result\r\n                    )\r\n                ]\r\n            };\r\n\r\n        case actionTypes.SHOW_ALL_WISH:\r\n            return {\r\n                ...state,\r\n                wishes: [...action.result]\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default teachersWish;\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport teachers from './teachers';\r\nimport lessonReducer from './lesson';\r\nimport snackbarReducer from './snackbar';\r\nimport authReducer from './auth';\r\nimport loadingIndicator from './loadingIndicator';\r\nimport scheduleReducer from './schedule';\r\nimport classActions from './class';\r\nimport subjects from './subjects';\r\nimport groups from './groups';\r\nimport rooms from './rooms';\r\nimport roomTypes from './roomTypes';\r\nimport teachersWish from './teachersWish';\r\n\r\nconst rootReducer = combineReducers({\r\n    lesson: lessonReducer,\r\n    auth: authReducer,\r\n    snackbar: snackbarReducer,\r\n    schedule: scheduleReducer,\r\n    loadingIndicator,\r\n    classActions,\r\n    teachers,\r\n    subjects,\r\n    groups,\r\n    rooms,\r\n    roomTypes,\r\n    teachersWish,\r\n\r\n    form: formReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import axios from 'axios';\r\nimport { TOKEN_BEGIN } from '../constants/tokenBegin';\r\n\r\nconst instance = axios.create({\r\n    baseURL: `/`\r\n});\r\n\r\ninstance.interceptors.request.use(\r\n    config => {\r\n        const token = localStorage.getItem('token');\r\n        if (token && token.includes(TOKEN_BEGIN)) {\r\n            config.headers.Authorization = localStorage.getItem('token');\r\n        }\r\n        return config;\r\n    },\r\n    error => Promise.reject(error)\r\n);\r\n\r\nexport default instance;\r\n","export const TOKEN_BEGIN= 'Bearer_';\r\n","import axios from '../helper/axios';\r\n\r\nimport {\r\n    ACTIVATE_ACCOUNT_URL,\r\n    LOGINURL,\r\n    LOGOUT_URL,\r\n    REGISTRATION_URL\r\n} from '../constants/axios';\r\n\r\nexport const authUserService = request => {\r\n    return axios.post(LOGINURL, request.result).then(response => {\r\n        return response;\r\n    });\r\n};\r\n\r\nexport const registerUserService = request => {\r\n    return axios.post(REGISTRATION_URL, request.result).then(response => {\r\n        return response;\r\n    });\r\n};\r\n\r\nexport const activateUserService = request => {\r\n    return axios\r\n        .put(`${ACTIVATE_ACCOUNT_URL}?token=${request.result}`)\r\n        .then(response => response);\r\n};\r\n\r\nexport const logoutUserService = () => {\r\n    return axios.post(LOGOUT_URL).then(response => response);\r\n};\r\n","export const CLASSURL = 'classes';\r\nexport const GROPURL = 'groups';\r\nexport const LESSONURL = 'lessons';\r\nexport const LESSON_TYPES_URL = 'lessons/types';\r\nexport const LOGINURL = 'auth/sign_in';\r\nexport const LOGOUT_URL = 'auth/sign_out';\r\nexport const REGISTRATION_URL = 'auth/sign_up';\r\nexport const RESET_PASSWORD_URL = 'auth/reset_password';\r\nexport const ACTIVATE_ACCOUNT_URL = 'auth/activation_account';\r\nexport const TEACHERURL = 'teachers';\r\nexport const ROOMURL = 'rooms';\r\nexport const SUBJECTURL = 'subjects';\r\nexport const FULL_SCHEDULE_URL = 'schedules/full/groups?semesterId=1';\r\nexport const GROUP_SCHEDULE_URL =\r\n    'schedules/full/groups?semesterId=1&groupId=1';\r\nexport const SCHEDULE_ITEMS_URL = '/schedules';\r\nexport const SCHEDULE_CHECK_AVAILABILITY_URL = '/schedules/creating-data';\r\n","import { call, put } from 'redux-saga/effects';\r\nimport { authUserService } from '../services/authService';\r\n\r\nimport * as actionTypes from '../redux/actions/actionsType';\r\nimport { TOKEN_BEGIN } from '../constants/tokenBegin';\r\n\r\nexport function* authSaga(payload) {\r\n    try {\r\n        const response = yield call(authUserService, payload);\r\n        const jwtDecode = require('jwt-decode');\r\n        const token = response.data.token;\r\n        const decodedJWT = jwtDecode(token);\r\n        const expirationDate = new Date(decodedJWT.exp * 1000);\r\n\r\n        yield localStorage.setItem('token', TOKEN_BEGIN + token);\r\n        yield localStorage.setItem('expirationDate', expirationDate);\r\n        yield localStorage.setItem('userRole', decodedJWT.roles);\r\n\r\n        yield put({\r\n            type: actionTypes.AUTH_USER_SUCCESS,\r\n            response: { token, role: decodedJWT.roles }\r\n        });\r\n\r\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\r\n\r\n        yield put({\r\n            type: actionTypes.AUTH_USER_AUTO_LOGOUT,\r\n            expirationTime: decodedJWT.exp * 1000 - new Date().getTime()\r\n        });\r\n\r\n    } catch (error) {\r\n        yield put({\r\n            type: actionTypes.AUTH_USER_ERROR,\r\n            error: error.response ? error.response.data.message : error\r\n        });\r\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\r\n    }\r\n}\r\n","import { call, put } from 'redux-saga/effects';\r\n\r\nimport * as actionTypes from '../redux/actions/actionsType';\r\nimport { logoutUserService } from '../services/authService';\r\n\r\nexport function* logoutSaga(payload) {\r\n    try {\r\n        yield call(logoutUserService, payload);\r\n        yield put({\r\n            type: actionTypes.AUTH_USER_LOGOUT\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: actionTypes.AUTH_USER_ERROR,\r\n            error: error.response ? error.response.data.message : error\r\n        });\r\n    }\r\n}\r\n","import { call, delay } from 'redux-saga/effects';\r\n\r\nimport { logoutSaga } from './logoutSaga';\r\n\r\nexport function* checkAuthTimeoutSaga(action) {\r\n    yield delay(action.expirationTime);\r\n    yield call(logoutSaga);\r\n}\r\n","import { put } from 'redux-saga/effects';\r\n\r\nimport * as actionTypes from '../redux/actions/actionsType';\r\n\r\nexport function* checkAuthStateSaga(payload) {\r\n    if (!payload.token) {\r\n        yield put({ type: actionTypes.AUTH_USER_LOGOUT });\r\n    } else {\r\n        const expirationDate = new Date(localStorage.getItem('expirationDate'));\r\n        if (expirationDate <= new Date()) {\r\n            yield put({ type: actionTypes.AUTH_USER_LOGOUT });\r\n        } else {\r\n            yield put({\r\n                type: actionTypes.AUTH_USER_SUCCESS,\r\n                response: {\r\n                    token: payload.token,\r\n                    role: payload.role\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { call, put } from 'redux-saga/effects';\r\nimport { registerUserService } from '../services/authService';\r\n\r\nimport * as actionTypes from '../redux/actions/actionsType';\r\n\r\nexport function* registrationSaga(payload) {\r\n    try {\r\n        const response = yield call(registerUserService, payload);\r\n        yield put({ type: actionTypes.REGISTER_USER_SUCCESS, response });\r\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\r\n    } catch (error) {\r\n        yield put({ type: actionTypes.REGISTER_USER_ERROR, error: error.response.data.message });\r\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\r\n    }\r\n}\r\n","import { call, put } from 'redux-saga/effects';\r\nimport {\r\n    activateUserService,\r\n    registerUserService\r\n} from '../services/authService';\r\n\r\nimport * as actionTypes from '../redux/actions/actionsType';\r\n\r\nexport function* activateUserSaga(payload) {\r\n    try {\r\n        const response = yield call(activateUserService, payload);\r\n        yield put({ type: actionTypes.ACTIVATE_USER_SUCCESS, response });\r\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\r\n    } catch (error) {\r\n        yield put({ type: actionTypes.ACTIVATE_USER_ERROR, error: error.response.data.message });\r\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\r\n    }\r\n}\r\n","import { takeLatest, takeEvery } from 'redux-saga/effects';\r\n\r\nimport * as actionTypes from '../redux/actions/actionsType';\r\n\r\nimport { authSaga } from './authSaga';\r\nimport { logoutSaga } from './logoutSaga';\r\nimport { checkAuthTimeoutSaga } from './checkAuthTimeoutSaga';\r\nimport { checkAuthStateSaga } from './checkAuthStateSaga';\r\nimport { registrationSaga } from './registrationSaga';\r\nimport { activateUserSaga } from './activateUserSaga';\r\n\r\nexport default function* watchUserAuthentication() {\r\n    yield takeLatest(actionTypes.REGISTER_USER, registrationSaga);\r\n    yield takeLatest(actionTypes.ACTIVATE_USER, activateUserSaga);\r\n    yield takeLatest(actionTypes.AUTH_USER, authSaga);\r\n    yield takeEvery(actionTypes.AUTH_USER_CHECK_STATE, checkAuthStateSaga);\r\n    yield takeEvery(actionTypes.AUTH_USER_AUTO_LOGOUT, checkAuthTimeoutSaga);\r\n    yield takeEvery(actionTypes.AUTH_USER_INITIATE_LOGOUT, logoutSaga);\r\n}\r\n\r\n","import { fork } from 'redux-saga/effects';\r\nimport watchUserAuthentication from './watchers';\r\n\r\nexport default function* startForman() {\r\n  yield fork(watchUserAuthentication);\r\n}","export const links = {\r\n    HOME_PAGE: '/',\r\n    ADMIN_PAGE: '/admin',\r\n    SCHEDULE_PAGE: '/schedule',\r\n    AUTH: '/login',\r\n    ACTIVATION_PAGE: '/activation-page',\r\n    LOGOUT: '/logout'\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport './Header.scss';\r\n\r\nimport { links } from '../../constants/links';\r\n\r\nconst Header = props => {\r\n    const { t } = useTranslation('common');\r\n\r\n    const roles = props.roles;\r\n\r\n    let leftLinks = null;\r\n    let rightLinks = null;\r\n    if (props.userRole === roles.MANAGER) {\r\n        leftLinks = (\r\n            <Link to={links.SCHEDULE_PAGE} className=\"navLinks\">\r\n                {t('schedule.title')}\r\n            </Link>\r\n        );\r\n        rightLinks = (\r\n            <>\r\n                <Link to={links.ADMIN_PAGE} className=\"navLinks\">\r\n                    {t('admin.title')}\r\n                </Link>\r\n                <Link to={links.LOGOUT} className=\"navLinks\">\r\n                    {t('logout.title')}\r\n                </Link>\r\n            </>\r\n        );\r\n    } else if (props.userRole === roles.USER) {\r\n        rightLinks = (\r\n            <Link to={links.LOGOUT} className=\"navLinks\">\r\n                {t('logout.title')}\r\n            </Link>\r\n        );\r\n    } else {\r\n        rightLinks = (\r\n            <Link to={links.AUTH} className=\"navLinks\">\r\n                {t('login.title')}\r\n            </Link>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <header className=\"header\">\r\n                <nav className=\"header-blocks\">\r\n                    <Link to={links.HOME_PAGE} className=\"navLinks\">\r\n                        {t('home.title')}\r\n                    </Link>\r\n                    {leftLinks}\r\n                </nav>\r\n                <div className=\"header-blocks\">{rightLinks}</div>\r\n            </header>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","const dayArray = [\r\n    'MONDAY',\r\n    'TUESDAY',\r\n    'WEDNESDAY',\r\n    'THURSDAY',\r\n    'FRIDAY',\r\n    'SATURDAY',\r\n    'SUNDAY'\r\n];\r\n\r\nconst daysPrep = [\r\n    { day: 'MONDAY', class: [] },\r\n    { day: 'TUESDAY', class: [] },\r\n    { day: 'WEDNESDAY', class: [] },\r\n    { day: 'THURSDAY', class: [] },\r\n    { day: 'FRIDAY', class: [] },\r\n    { day: 'SATURDAY', class: [] },\r\n    { day: 'SUNDAY', class: [] }\r\n];\r\n\r\nconst daysPrepFull = [\r\n    { day: 'MONDAY', class: [] },\r\n    { day: 'TUESDAY', class: [] },\r\n    { day: 'WEDNESDAY', class: [] },\r\n    { day: 'THURSDAY', class: [] },\r\n    { day: 'FRIDAY', class: [] },\r\n    { day: 'SATURDAY', class: [] },\r\n    { day: 'SUNDAY', class: [] }\r\n];\r\n\r\nexport const makeGroupSchedule = groupSchedule => {\r\n    let evenArray = [];\r\n    let oddArray = [];\r\n    let group = {};\r\n\r\n    const daysPrepArray = daysPrep;\r\n    const evenDaysPrepArray = daysPrep;\r\n\r\n    if (groupSchedule[0]) {\r\n        group = groupSchedule[0].group;\r\n        groupSchedule[0].days.map(day => {\r\n            day.classes.map(classItem => {\r\n                evenDaysPrepArray.map(dayPrep => {\r\n                    if (dayPrep.day === day.day) {\r\n                        dayPrep.class[classItem.class.id] = {\r\n                            class: classItem.class,\r\n                            card: classItem.weeks.even\r\n                        };\r\n                    }\r\n                });\r\n\r\n                daysPrepArray.map(dayPrep => {\r\n                    if (dayPrep.day === day.day) {\r\n                        dayPrep.class[classItem.class.id] = {\r\n                            class: classItem.class,\r\n                            card: classItem.weeks.odd\r\n                        };\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    daysPrepArray.map(day => {\r\n        day.class.map((clas, clasIndex) => {\r\n            if (!oddArray.hasOwnProperty(clasIndex)) {\r\n                oddArray[clasIndex] = { class: clas.class, cards: {} };\r\n            }\r\n\r\n            dayArray.map(dayArr => {\r\n                if (!oddArray[clasIndex].cards.hasOwnProperty(dayArr)) {\r\n                    oddArray[clasIndex].cards[dayArr] = {};\r\n                }\r\n            });\r\n            if (clas.card !== null && clas.card !== undefined) {\r\n                if (clas.card.hasOwnProperty('teacherForSite')) {\r\n                    oddArray[clasIndex].cards[day.day] = {\r\n                        card: clas.card\r\n                    };\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    evenDaysPrepArray.map(day => {\r\n        day.class.map((clas, clasIndex) => {\r\n            if (!evenArray.hasOwnProperty(clasIndex)) {\r\n                evenArray[clasIndex] = { class: clas.class, cards: {} };\r\n            }\r\n\r\n            dayArray.map(dayArr => {\r\n                if (!evenArray[clasIndex].cards.hasOwnProperty(dayArr)) {\r\n                    evenArray[clasIndex].cards[dayArr] = {};\r\n                }\r\n            });\r\n            if (clas.card !== null && clas.card !== undefined) {\r\n                if (clas.card.hasOwnProperty('teacherForSite')) {\r\n                    evenArray[clasIndex].cards[day.day] = {\r\n                        card: clas.card\r\n                    };\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    return {\r\n        oddArray: oddArray,\r\n        evenArray: evenArray,\r\n        group: group\r\n    };\r\n};\r\n\r\nexport const makeFullSchedule = fullSchedule => {\r\n    let maxClassesCount = 0;\r\n    let groupsCount = fullSchedule.length;\r\n    let groupList = [];\r\n    fullSchedule.map(group => {\r\n        groupList.push(group.group);\r\n        group.days.map(day => {\r\n            if (day.classes !== null && day.classes.length > maxClassesCount) {\r\n                maxClassesCount = day.classes.length;\r\n            }\r\n        });\r\n    });\r\n\r\n    const daysPrepArrayFull = daysPrepFull;\r\n    fullSchedule.map(group => {\r\n        group.days.map(day => {\r\n            day.classes.map(card => {\r\n                const dayIndex = daysPrepArrayFull.findIndex(\r\n                    x => x.day === day.day\r\n                );\r\n                if (dayIndex >= 0 && daysPrepArrayFull[dayIndex].class) {\r\n                    let classIndex = daysPrepArrayFull[\r\n                        dayIndex\r\n                    ].class.findIndex(x => x.class.id === card.class.id);\r\n                    if (classIndex < 0) {\r\n                        daysPrepArrayFull[dayIndex].class.push({\r\n                            class: card.class,\r\n                            cards: { even: [], odd: [] }\r\n                        });\r\n                        classIndex = daysPrepArrayFull[\r\n                            dayIndex\r\n                        ].class.findIndex(x => x.class.id === card.class.id);\r\n                    }\r\n                    if (daysPrepArrayFull[dayIndex].class[classIndex].cards) {\r\n                        if (\r\n                            card.weeks.even !== null &&\r\n                            card.weeks.odd !== null\r\n                        ) {\r\n                            card.weeks.even.weekly = 0;\r\n                            card.weeks.even.skip = 0;\r\n                            card.weeks.odd.weekly = 0;\r\n                            card.weeks.odd.skip = 0;\r\n                            if (\r\n                                card.weeks.even.teacherForSite ===\r\n                                card.weeks.odd.teacherForSite\r\n                            ) {\r\n                                card.weeks.even.skip = 1;\r\n                                card.weeks.odd.weekly = 1;\r\n                            }\r\n                        }\r\n\r\n                        const evenIndex = daysPrepArrayFull[dayIndex].class[\r\n                            classIndex\r\n                        ].cards.even.find(\r\n                            item => item.group.id === group.group.id\r\n                        );\r\n                        if (!evenIndex) {\r\n                            daysPrepArrayFull[dayIndex].class[\r\n                                classIndex\r\n                            ].cards.even.push({\r\n                                group: group.group,\r\n                                card: card.weeks.even\r\n                            });\r\n                        }\r\n\r\n                        const oddIndex = daysPrepArrayFull[dayIndex].class[\r\n                            classIndex\r\n                        ].cards.odd.find(\r\n                            item => item.group.id === group.group.id\r\n                        );\r\n                        if (!oddIndex) {\r\n                            daysPrepArrayFull[dayIndex].class[\r\n                                classIndex\r\n                            ].cards.odd.push({\r\n                                group: group.group,\r\n                                card: card.weeks.odd\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n    daysPrepArrayFull.map(day => {\r\n        day.class.map(clas => {\r\n            if (\r\n                clas.cards !== undefined &&\r\n                clas.cards.even.length < groupList.length\r\n            ) {\r\n                clas.cards.even.push({\r\n                    group: {},\r\n                    card: null\r\n                });\r\n            }\r\n            if (\r\n                clas.cards !== undefined &&\r\n                clas.cards.odd.length < groupList.length\r\n            ) {\r\n                clas.cards.odd.push({\r\n                    group: {},\r\n                    card: null\r\n                });\r\n            }\r\n        });\r\n    });\r\n    return {\r\n        maxClassesCount: maxClassesCount,\r\n        groupsCount: groupsCount,\r\n        groupList: groupList,\r\n        resultArray: daysPrepArrayFull\r\n    };\r\n};\r\n","import i18n from 'i18next';\r\nimport Backend from 'i18next-xhr-backend';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\n\r\nvar supportedLangs = ['en', 'uk'];\r\nvar userLang = (navigator.language || navigator.userLanguage).slice(0, 2);\r\nexport const lang = supportedLangs.find(i => i === userLang) || 'en';\r\n\r\ni18n.use(LanguageDetector)\r\n    .use(initReactI18next)\r\n    .use(Backend)\r\n    .init({\r\n        lng: lang,\r\n        backend: {\r\n            loadPath: '/assets/i18n/translations/{{lng}}/{{ns}}.json'\r\n        },\r\n        fallbackLng: 'en',\r\n        debug: false,\r\n        ns: ['formElements', 'validationMessages', 'common', 'serviceMessages'],\r\n        defaultNS: 'common',\r\n        keySeparator: false,\r\n        useDataAttrOptions: true,\r\n        interpolation: {\r\n            escapeValue: false,\r\n            formatSeparator: ','\r\n        },\r\n        react: {\r\n            wait: true\r\n        }\r\n    });\r\n\r\nexport default i18n;\r\n","import React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport i18next from './i18n';\r\n\r\nconst dayArray = [\r\n    'MONDAY',\r\n    'TUESDAY',\r\n    'WEDNESDAY',\r\n    'THURSDAY',\r\n    'FRIDAY',\r\n    'SATURDAY',\r\n    'SUNDAY'\r\n];\r\n\r\nexport const prepareLessonCardCell = card => {\r\n    let inner = '';\r\n    if (card !== undefined && card !== null) {\r\n        inner =\r\n            card.teacherForSite +\r\n            '\\n\\r' +\r\n            card.subjectForSite +\r\n            '\\n\\r' +\r\n            card.lessonType;\r\n        if (card.room) {\r\n            inner += '\\n\\r' + card.room.name;\r\n        }\r\n    }\r\n    return inner;\r\n};\r\n\r\nconst getWeekNumber = (startScheduleDate, date) => {\r\n    var oneJan = new Date(startScheduleDate);\r\n    var numberOfDays = Math.floor((date - oneJan) / (24 * 60 * 60 * 1000));\r\n    return Math.ceil((date.getDay() + 1 + numberOfDays) / 7);\r\n};\r\nconst printWeekNumber = startScheduleDate => {\r\n    var date = new Date();\r\n    var result = getWeekNumber(startScheduleDate, date);\r\n    return result;\r\n};\r\n\r\nfunction isOdd(num) {\r\n    return num % 2;\r\n}\r\n\r\nexport const renderGroupDayClass = (classDay, isOddWeek, startScheduleDate) => {\r\n    const currentDay = matchDayNumberSysytemToDayName();\r\n    const currentWeekType = isOdd(printWeekNumber(startScheduleDate));\r\n\r\n    let res = [];\r\n    for (let [key, value] of Object.entries(classDay.cards)) {\r\n        value.day = key;\r\n        res.push(value);\r\n    }\r\n    return (\r\n        <TableRow>\r\n            <TableCell className=\" lesson groupLabelCell\">\r\n                {classDay.class.class_name +\r\n                    '\\n\\r' +\r\n                    classDay.class.startTime +\r\n                    ' - ' +\r\n                    classDay.class.endTime}\r\n            </TableCell>\r\n            {res.map(day => {\r\n                let className = 'lesson ';\r\n                if (currentDay === day.day && currentWeekType === isOddWeek) {\r\n                    className += ' currentDay';\r\n                }\r\n                return (\r\n                    <TableCell align=\"center\" className={className}>\r\n                        {prepareLessonCardCell(day.card, currentDay)}\r\n                    </TableCell>\r\n                );\r\n            })}\r\n        </TableRow>\r\n    );\r\n};\r\n\r\nexport const renderScheduleGroupHeader = dayArray => (\r\n    <TableHead>\r\n        <TableRow key={0}>\r\n            <TableCell className=\"groupLabelCell\"></TableCell>\r\n            {dayArray.map(day => (\r\n                <TableCell>{i18next.t(`day_of_week_${day}`)}</TableCell>\r\n            ))}\r\n        </TableRow>\r\n    </TableHead>\r\n);\r\n\r\nexport const renderGroupTable = (classes, isOdd) => (\r\n    <TableContainer>\r\n        <Table aria-label=\"sticky table\">\r\n            {renderScheduleGroupHeader(dayArray)}\r\n            <TableBody>\r\n                {classes.map((classDay, classIndex) => {\r\n                    if (classDay) {\r\n                        return renderGroupDayClass(\r\n                            classDay,\r\n                            isOdd,\r\n                            new Date('04/06/2020')\r\n                        );\r\n                    }\r\n                })}\r\n            </TableBody>\r\n        </Table>\r\n    </TableContainer>\r\n);\r\n\r\nexport const renderGroupCells = (\r\n    groups,\r\n    isOdd,\r\n    currentWeekType,\r\n    isCurrentDay\r\n) => {\r\n    return groups.map((group, groupIndex) => {\r\n        var colspan = 1;\r\n        var rowspan = 1;\r\n        var classname = 'lesson';\r\n\r\n        if (group.card !== null && group.card.skip === 1) {\r\n            return;\r\n        }\r\n        if (group.card !== null && group.card.weekly === 1) {\r\n            rowspan = 2;\r\n            classname += ' weekly';\r\n        }\r\n\r\n        if (currentWeekType === isOdd && isCurrentDay) {\r\n            classname += ' currentDay';\r\n        }\r\n\r\n        for (let i = groupIndex; i < groups.length; i++) {\r\n            if (\r\n                group &&\r\n                groups[i + 1] &&\r\n                group.card !== null &&\r\n                groups[i + 1].card !== null\r\n            ) {\r\n                if (\r\n                    group.card.teacherForSite &&\r\n                    group.card.teacherForSite ===\r\n                        groups[i + 1].card.teacherForSite &&\r\n                    group.card.subjectForSite ===\r\n                        groups[i + 1].card.subjectForSite &&\r\n                    group.card.room === groups[i + 1].card.room &&\r\n                    group.card.weekly === groups[i + 1].card.weekly &&\r\n                    group.card.skip === groups[i + 1].card.skip\r\n                ) {\r\n                    groups[i + 1].card.skip = 1;\r\n                    colspan++;\r\n                    classname += ' grouped';\r\n                }\r\n            }\r\n        }\r\n        return (\r\n            <TableCell\r\n                align=\"center\"\r\n                colSpan={colspan}\r\n                rowSpan={rowspan}\r\n                className={classname}\r\n            >\r\n                {prepareLessonCardCell(group.card)}\r\n            </TableCell>\r\n        );\r\n    });\r\n};\r\n\r\nexport const renderScheduleHeader = groups => (\r\n    <TableHead>\r\n        <TableRow key={0}>\r\n            <TableCell className=\"groupLabelCell\" colSpan={2}>\r\n                {i18next.t('groupy.label')}\r\n            </TableCell>\r\n            {groups.map(group => (\r\n                <TableCell align=\"center\">{group}</TableCell>\r\n            ))}\r\n        </TableRow>\r\n    </TableHead>\r\n);\r\n\r\nexport const renderFirstDayFirstClassFirstCardLine = (\r\n    day_name,\r\n    class_name,\r\n    groups,\r\n    classesCount\r\n) => {\r\n    const currentDay = matchDayNumberSysytemToDayName();\r\n    const currentWeekType = isOdd(printWeekNumber(new Date('04/06/2020')));\r\n\r\n    let dayClassName = 'dayNameCell ';\r\n    let classClassName = 'classNameCell ';\r\n    let isCurrentDay = false;\r\n    if (currentDay === day_name) {\r\n        dayClassName += ' currentDay';\r\n        classClassName += ' currentDay';\r\n        isCurrentDay = true;\r\n    }\r\n\r\n    if (groups.even.length <= 2 || groups.odd.length <= 2) {\r\n        dayClassName += ' minHeightDouble';\r\n    }\r\n    return (\r\n        <>\r\n            <TableRow key={555 + day_name}>\r\n                <TableCell rowSpan={classesCount * 2} className={dayClassName}>\r\n                    <span className=\"dayName\">\r\n                        <p>{i18next.t(`common:day_of_week_${day_name}`)}</p>\r\n                    </span>\r\n                </TableCell>\r\n                <TableCell className={classClassName} rowSpan={2}>\r\n                    {class_name}\r\n                </TableCell>\r\n                {renderGroupCells(groups.odd, 1, currentWeekType, isCurrentDay)}\r\n            </TableRow>\r\n            <TableRow key={789 + groups.even}>\r\n                {renderGroupCells(\r\n                    groups.even,\r\n                    0,\r\n                    currentWeekType,\r\n                    isCurrentDay\r\n                )}\r\n            </TableRow>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const renderFirstDayOtherClassFirstCardLine = (class_name, groups) => (\r\n    <>\r\n        <TableRow key={4545 + class_name}>\r\n            <TableCell className=\"classNameCell\" rowSpan={2}>\r\n                {class_name}\r\n            </TableCell>\r\n            {renderGroupCells(groups.odd)}\r\n        </TableRow>\r\n        <TableRow key={789 + groups.even}>\r\n            {renderGroupCells(groups.even)}\r\n        </TableRow>\r\n    </>\r\n);\r\n\r\nconst prepareForRender = classItem => {\r\n    if (classItem.cards) {\r\n        classItem.cards.odd.map((card, cardIndex) => {\r\n            if (card.group.id === classItem.cards.even[cardIndex].group.id) {\r\n                if (\r\n                    card.card !== null &&\r\n                    classItem.cards.even[cardIndex].card !== null\r\n                ) {\r\n                    if (\r\n                        card.card.teacherForSite ===\r\n                            classItem.cards.even[cardIndex].card\r\n                                .teacherForSite &&\r\n                        card.card.subjectForSite ===\r\n                            classItem.cards.even[cardIndex].card\r\n                                .subjectForSite &&\r\n                        card.card.room.id ===\r\n                            classItem.cards.even[cardIndex].card.room.id\r\n                    ) {\r\n                        classItem.cards.odd[cardIndex].card.weekly = 1;\r\n                        classItem.cards.even[cardIndex].card.skip = 1;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nexport const renderDay = dayItem => {\r\n    return dayItem.class.map((classItem, classIndex) => {\r\n        var classesCount = dayItem.class.length;\r\n        if (classIndex === 0) {\r\n            prepareForRender(classItem);\r\n\r\n            if (classItem.cards) {\r\n                return renderFirstDayFirstClassFirstCardLine(\r\n                    dayItem.day,\r\n                    classItem.class.class_name,\r\n                    classItem.cards,\r\n                    classesCount\r\n                );\r\n            }\r\n        } else {\r\n            prepareForRender(classItem);\r\n            if (classItem.cards) {\r\n                return renderFirstDayOtherClassFirstCardLine(\r\n                    classItem.class.class_name,\r\n                    classItem.cards\r\n                );\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nexport const renderScheduleFullHeader = groupList => (\r\n    <TableHead>\r\n        <TableRow key={0}>\r\n            <TableCell colSpan={2}>\r\n                {i18next.t('formElements:group.label')}\r\n            </TableCell>\r\n            {groupList.map(group => (\r\n                <TableCell className=\"groupLabelCell\">{group.title}</TableCell>\r\n            ))}\r\n        </TableRow>\r\n    </TableHead>\r\n);\r\n\r\nexport const renderFullSchedule = fullSchedule => (\r\n    <TableContainer>\r\n        <Table aria-label=\"sticky table\">\r\n            {renderScheduleFullHeader(fullSchedule.groupList)}\r\n            <TableBody>\r\n                {fullSchedule.resultArray.map((dayItem, dayIndex) => {\r\n                    return renderDay(dayItem, dayIndex);\r\n                })}\r\n            </TableBody>\r\n        </Table>\r\n    </TableContainer>\r\n);\r\n\r\nconst matchDayNumberSysytemToDayName = () => {\r\n    var now = new Date();\r\n    const dayArray = [\r\n        'SUNDAY',\r\n        'MONDAY',\r\n        'TUESDAY',\r\n        'WEDNESDAY',\r\n        'THRUESDAY',\r\n        'FRIDAY',\r\n        'SATURDAY'\r\n    ];\r\n    return dayArray[now.getDay()];\r\n};\r\n","import * as moment from 'moment';\r\nimport {\r\n    checkUniqClassName,\r\n    checkUniqueGroup,\r\n    checkUniqueRoomName,\r\n    checkUniqueSubject,\r\n    checkUniqWish,\r\n    timeIntersectService\r\n} from './storeValidation';\r\nimport i18n from '../helper/i18n';\r\n\r\nexport const required = value =>\r\n    value ? undefined : i18n.t('validationMessages:required.message');\r\n\r\nexport const lessThanZero = value =>\r\n    value > 0\r\n        ? undefined\r\n        : i18n.t('validationMessages:bigger.than.zero.message');\r\n\r\nconst minLength = min => value =>\r\n    value && value.length < min\r\n        ? i18n.t('validationMessages:bigger.than.char.message', { min: min })\r\n        : undefined;\r\n\r\nexport const minLengthValue = minLength(3);\r\n\r\nconst maxLength = max => value =>\r\n    value && value.length > max\r\n        ? i18n.t('validationMessages:less.than.char.message', {\r\n              max: max\r\n          })\r\n        : undefined;\r\n\r\nexport const maxLengthValue = maxLength(55);\r\n\r\nexport const lessThanTime = (value, previousValue, allValues) => {\r\n    const otherField = 'endTime';\r\n    if (allValues.values[otherField] === undefined) return undefined;\r\n    return moment(value, 'HH:mm').toDate() <=\r\n        moment(allValues.values[otherField], 'HH:mm').toDate() &&\r\n        allValues.values[otherField] !== undefined\r\n        ? undefined\r\n        : i18n.t('validationMessages:less.than.field.message', {\r\n              field: i18n.t('formElements:class.to.label')\r\n          });\r\n};\r\n\r\nexport const greaterThanTime = (value, previousValue, allValues) => {\r\n    const otherField = 'startTime';\r\n    if (allValues.values[otherField] === undefined) return undefined;\r\n    return moment(value, 'HH:mm').toDate() >=\r\n        moment(allValues.values[otherField], 'HH:mm').toDate()\r\n        ? undefined\r\n        : i18n.t('validationMessages:bigger.than.field.message', {\r\n              field: i18n.t('formElements:class.from.label')\r\n          });\r\n};\r\n\r\nexport const uniqueClassName = value => {\r\n    return checkUniqClassName(value);\r\n};\r\n\r\nexport const uniqueGroup = value => {\r\n    return checkUniqueGroup(value);\r\n};\r\n\r\nexport const uniqueSubject = value => {\r\n    return checkUniqueSubject(value);\r\n};\r\n\r\nexport const timeIntersect = (value, previousValue, allValues) => {\r\n    return timeIntersectService(\r\n        allValues.values['startTime'],\r\n        allValues.values['endTime']\r\n    );\r\n};\r\n\r\nexport const uniqueRoomName = value => {\r\n    return checkUniqueRoomName(value);\r\n};\r\n\r\nexport const uniqWish = value => {\r\n    return checkUniqWish(value);\r\n};\r\n\r\nexport const email = value =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n        ? i18n.t('validationMessages:email')\r\n        : undefined;\r\n\r\nexport const password = value =>\r\n    value && !/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?=.*[!@#$%^&*]).{8,}$/.test(value)\r\n        ? i18n.t('validationMessages:password')\r\n        : undefined;\r\n\r\n","import * as actionTypes from \"./actionsType\";\r\n\r\nexport const setOpenSnackbar = res => {\r\n  return {\r\n    type: actionTypes.SET_OPEN_SNACKBAR,\r\n    result: res\r\n  };\r\n};\r\n","import * as actionTypes from './actionsType';\r\n\r\nexport const setLoading = res => {\r\n    return {\r\n        type: actionTypes.SET_LOADING_INDICATOR,\r\n        result: res\r\n    };\r\n};\r\n\r\n\r\n\r\n","import { store } from '../index';\r\n\r\nimport {\r\n    setLoading\r\n} from '../redux/actions/index';\r\n\r\nexport const setLoadingService = isLoading => {\r\n    store.dispatch(setLoading(isLoading));\r\n};\r\n","import { store } from '../index';\r\n\r\nimport { setOpenSnackbar } from '../redux/actions/index';\r\n\r\nexport const handleSnackbarOpenService = (isOpen, type, message) => {\r\n  store.dispatch(\r\n    setOpenSnackbar({\r\n      isOpen: isOpen,\r\n      type: type,\r\n      message: message\r\n    })\r\n  );\r\n};\r\n\r\nexport const handleSnackbarCloseService = () => {\r\n  store.dispatch(setOpenSnackbar({ isOpen: false }));\r\n};\r\n","export const snackbarTypes = {\r\n    ERROR: 'error',\r\n    WARNING: 'warning',\r\n    INFO: 'info',\r\n    SUCCESS: 'success'\r\n}","import { store } from '../index';\r\nimport axios from '../helper/axios';\r\n\r\nimport {\r\n    addItemToSchedule,\r\n    checkAvailabilitySchedule,\r\n    deleteItemFromSchedule,\r\n    setFullSchedule,\r\n    setGroupSchedule,\r\n    setItemGroupId,\r\n    setScheduleItems,\r\n    setScheduleType\r\n} from '../redux/actions/index';\r\nimport { setLoadingService } from './loadingService';\r\nimport {\r\n    FULL_SCHEDULE_URL,\r\n    GROUP_SCHEDULE_URL,\r\n    SCHEDULE_CHECK_AVAILABILITY_URL,\r\n    SCHEDULE_ITEMS_URL\r\n} from '../constants/axios';\r\nimport { handleSnackbarOpenService } from './snackbarService';\r\nimport { snackbarTypes } from '../constants/snackbarTypes';\r\n\r\nexport const getScheduleItemsService = () => {\r\n    axios\r\n        .get(SCHEDULE_ITEMS_URL)\r\n        .then(response => {\r\n            store.dispatch(setScheduleItems(response.data));\r\n            setLoadingService(false);\r\n        })\r\n        .catch(err => {\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                err.response.data.message\r\n            );\r\n            setLoadingService(false);\r\n        });\r\n};\r\n\r\nexport const checkAvailabilityScheduleService = item => {\r\n    axios\r\n        .get(\r\n            SCHEDULE_CHECK_AVAILABILITY_URL +\r\n                '?classId=' +\r\n                item.periodId +\r\n                '&dayOfWeek=' +\r\n                item.dayOfWeek +\r\n                '&evenOdd=' +\r\n                item.evenOdd +\r\n                '&lessonId=' +\r\n                item.lessonId +\r\n                '&semesterId=' +\r\n                item.semesterId\r\n        )\r\n        .then(response => {\r\n            store.dispatch(checkAvailabilitySchedule(response.data));\r\n            setLoadingService(false);\r\n        })\r\n        .catch(err => {\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                err.response.data.message\r\n            );\r\n            setLoadingService(false);\r\n        });\r\n};\r\nexport const addItemToScheduleService = item => {\r\n    axios\r\n        .post(SCHEDULE_ITEMS_URL, item)\r\n        .then(response => {\r\n            getScheduleItemsService();\r\n        })\r\n        .catch(err => {\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                err.response.data.message\r\n            );\r\n            setLoadingService(false);\r\n        });\r\n};\r\n\r\nexport const deleteItemFromScheduleService = itemId => {\r\n    axios\r\n        .delete(`${SCHEDULE_ITEMS_URL}/${itemId}`)\r\n        .then(response => {\r\n            store.dispatch(deleteItemFromSchedule(itemId));\r\n            getScheduleItemsService();\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                err.response.data.message\r\n            );\r\n            setLoadingService(false);\r\n        });\r\n};\r\n\r\nexport const setItemGroupIdService = groupId => {\r\n    store.dispatch(setItemGroupId(groupId));\r\n};\r\nexport const setScheduleTypeService = item => {\r\n    store.dispatch(setScheduleType(item));\r\n};\r\n\r\nexport const getFullSchedule = () => {\r\n    axios\r\n        .get(FULL_SCHEDULE_URL)\r\n        .then(response => {\r\n            store.dispatch(setFullSchedule(response.data));\r\n        })\r\n        .catch(error => {});\r\n};\r\n\r\nexport const getGroupSchedule = () => {\r\n    axios\r\n        .get(GROUP_SCHEDULE_URL)\r\n        .then(response => {\r\n            store.dispatch(setGroupSchedule(response.data));\r\n        })\r\n        .catch(error => {});\r\n};\r\n","import * as actionTypes from './actionsType';\r\n\r\nexport const setScheduleItems = res => {\r\n    return {\r\n        type: actionTypes.SET_SCHEDULE_ITEMS,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const addItemToSchedule = res => {\r\n    return {\r\n        type: actionTypes.ADD_ITEM_TO_SCHEDULE,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const checkAvailabilitySchedule = res => {\r\n    return {\r\n        type: actionTypes.CHECK_AVAILABILITY_SCHEDULE,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const setFullSchedule = result => {\r\n    return {\r\n        type: actionTypes.SET_FULL_SCHEDULE,\r\n        result: result\r\n    };\r\n};\r\nexport const setItemGroupId = res => {\r\n    return {\r\n        type: actionTypes.SET_ITEM_GROUP_ID,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const setGroupSchedule = result => {\r\n    return {\r\n        type: actionTypes.SET_GROUP_SCHEDULE,\r\n        result: result\r\n    };\r\n};\r\nexport const deleteItemFromSchedule = res => {\r\n    return {\r\n        type: actionTypes.DELETE_ITEM_FROM_SCHEDULE,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const setScheduleType = result => {\r\n    return {\r\n        type: actionTypes.SET_SCHEDULE_TYPE,\r\n        newType: result\r\n    };\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport './GroupSchedulePage.scss';\r\n\r\nimport {\r\n    makeGroupSchedule,\r\n    makeFullSchedule\r\n} from '../../helper/prepareSchedule';\r\nimport {\r\n    renderGroupTable,\r\n    renderFullSchedule\r\n} from '../../helper/renderScheduleTable';\r\nimport {\r\n    getGroupSchedule,\r\n    getFullSchedule,\r\n    setScheduleTypeService\r\n} from '../../services/scheduleService';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    }\r\n}));\r\n\r\nconst GroupSchedulePage = props => {\r\n    const classes = useStyles();\r\n    let { groupSchedule, fullSchedule } = props;\r\n\r\n    const matchFunction = scheduleType => {\r\n        switch (scheduleType) {\r\n            case 'full':\r\n                getFullSchedule();\r\n                break;\r\n            case 'group':\r\n                getGroupSchedule();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return 1;\r\n    };\r\n    useEffect(() => {\r\n        matchFunction(props.scheduleType);\r\n    }, [props.scheduleType]);\r\n\r\n    const { t } = useTranslation('common');\r\n\r\n    switch (props.scheduleType) {\r\n        case 'group':\r\n            const resultArrays = makeGroupSchedule(groupSchedule);\r\n            return (\r\n                <section className={classes.root}>\r\n                    <p>{t('common:greetings.schedule.message')}</p>\r\n                    <Button\r\n                        className=\"buttons-style\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => {\r\n                            setScheduleTypeService('full');\r\n                        }}\r\n                    >\r\n                        {t('common:full.schedule.label')}\r\n                    </Button>\r\n                    <Button\r\n                        className=\"buttons-style\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => {\r\n                            setScheduleTypeService('group');\r\n                        }}\r\n                    >\r\n                        {t('common:group.schedule.label')}\r\n                    </Button>\r\n                    <br />\r\n                    <p>{resultArrays.group.title}</p>\r\n                    <p>{t('common:odd.week')}</p>\r\n                    {renderGroupTable(resultArrays.oddArray, 1)}\r\n                    <p>{t('common:even.week')}</p>\r\n                    {renderGroupTable(resultArrays.evenArray, 0)}\r\n                </section>\r\n            );\r\n\r\n        case 'full':\r\n            const result = makeFullSchedule(fullSchedule);\r\n            return (\r\n                <section className={classes.root}>\r\n                    <p>{t('common:greetings.schedule.message')}</p>\r\n                    <Button\r\n                        className=\"buttons-style\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => {\r\n                            setScheduleTypeService('full');\r\n                        }}\r\n                    >\r\n                        {t('common:full.schedule.label')}\r\n                    </Button>\r\n                    <Button\r\n                        className=\"buttons-style\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => {\r\n                            setScheduleTypeService('group');\r\n                        }}\r\n                    >\r\n                        {t('common:group.schedule.label')}\r\n                    </Button>\r\n                    {renderFullSchedule(result)}\r\n                </section>\r\n            );\r\n        default:\r\n            setScheduleTypeService('full');\r\n            return (\r\n                <section className={classes.root}>\r\n                    <p>{t('common:greetings.schedule.message')}</p>\r\n                    <Button\r\n                        className=\"buttons-style\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => {\r\n                            setScheduleTypeService('full');\r\n                        }}\r\n                    >\r\n                        {t('common:full.schedule.label')}\r\n                    </Button>\r\n                    <Button\r\n                        className=\"buttons-style\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => {\r\n                            setScheduleTypeService('group');\r\n                        }}\r\n                    >\r\n                        {t('common:group.schedule.label')}\r\n                    </Button>\r\n                </section>\r\n            );\r\n    }\r\n};\r\nconst mapStateToProps = state => ({\r\n    scheduleType: state.schedule.scheduleType,\r\n    groupSchedule: state.schedule.groupSchedule,\r\n    fullSchedule: state.schedule.fullSchedule\r\n});\r\nexport default connect(mapStateToProps)(GroupSchedulePage);\r\n","import React, { Fragment } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport GroupSchedulePage from '../../components/GroupSchedulePage/GroupSchedulePage';\r\nconst HomePage = props => {\r\n    const { t } = useTranslation('common');\r\n\r\n    return (\r\n        <Fragment>\r\n            <h1>{t('home.title')}</h1>\r\n            <GroupSchedulePage scheduleType=\"default\" />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n","export const snackbarMessage = (cardType, actionType) => {\r\n  return `${cardType} was ${actionType} successfully`;\r\n};\r\n","export const cardType = {\r\n    LESSON: 'Lesson',\r\n    TEACHER: 'Teacher',\r\n    CLASS: 'Class',\r\n    GROUP: 'Group',\r\n    ROOM: 'Room',\r\n    TYPE: 'Type',\r\n    SUBJECT: 'Subject',\r\n    WISH: 'Wish'\r\n};\r\n","import axios from '../helper/axios';\r\nimport { store } from '../index';\r\nimport { reset } from 'redux-form';\r\n\r\nimport { LESSON_TYPES_URL, LESSONURL } from '../constants/axios';\r\nimport { LESSON_FORM } from '../constants/reduxForms';\r\n\r\nimport { handleSnackbarOpenService } from './snackbarService';\r\nimport { setLoadingService } from './loadingService';\r\n\r\nimport {\r\n    setLessonsCards,\r\n    setLessonTypes,\r\n    storeLessonCard,\r\n    deleteLessonCard,\r\n    selectLessonCard,\r\n    updateLessonCard,\r\n    selectGroupId,\r\n    setUniqueError\r\n} from '../redux/actions/index';\r\n\r\nimport { snackbarTypes } from '../constants/snackbarTypes';\r\nimport { snackbarMessage } from '../constants/snackbarMessages';\r\nimport { actionType } from '../constants/actionTypes';\r\nimport { cardType } from '../constants/cardType';\r\n\r\nimport { checkUniqLesson } from '../validation/storeValidation';\r\nimport i18n from '../helper/i18n';\r\n\r\nexport const getLessonsByGroupService = groupId => {\r\n    axios\r\n        .get(LESSONURL + `?groupId=${groupId}`)\r\n        .then(response => {\r\n            store.dispatch(setLessonsCards(response.data));\r\n            setLoadingService(false);\r\n        })\r\n        .catch(err => {\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                err.response.data.message\r\n            );\r\n            setLoadingService(false);\r\n        });\r\n};\r\n\r\nexport const getLessonTypesService = () => {\r\n    axios\r\n        .get(LESSON_TYPES_URL)\r\n        .then(response => {\r\n            store.dispatch(setLessonTypes(response.data));\r\n        })\r\n        .catch(err => {\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                err.response.data.message\r\n            );\r\n        });\r\n};\r\n\r\nexport const resetFormService = formName => {\r\n    store.dispatch(reset(formName));\r\n};\r\n\r\nconst cardObjectHandler = (card, groupId) => {\r\n    return {\r\n        id: card.lessonCardId,\r\n        group: {\r\n            id: groupId\r\n        },\r\n        hours: card.hours,\r\n        subject: {\r\n            id: card.subject\r\n        },\r\n        lessonType: card.type,\r\n        subjectForSite: card.subjectForSite,\r\n        teacher: { id: card.teacher },\r\n        teacherForSite: card.teacherForSite\r\n    };\r\n};\r\n\r\nconst updateLessonHandler = data => {\r\n    return axios\r\n        .put(LESSONURL, data)\r\n        .then(response => {\r\n            store.dispatch(updateLessonCard(response.data));\r\n            selectLessonCardService(null);\r\n            resetFormService(LESSON_FORM);\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.SUCCESS,\r\n                snackbarMessage(cardType.LESSON, actionType.UPDATED)\r\n            );\r\n        })\r\n        .catch(err => {\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                err.response.data.message\r\n            );\r\n        });\r\n};\r\n\r\nconst createLessonHandler = data => {\r\n    return axios\r\n        .post(LESSONURL, data)\r\n        .then(response => {\r\n            store.dispatch(storeLessonCard(response.data));\r\n            resetFormService(LESSON_FORM);\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.SUCCESS,\r\n                snackbarMessage(cardType.LESSON, actionType.CREATED)\r\n            );\r\n        })\r\n        .catch(err => {\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                err.response.data.message\r\n            );\r\n        });\r\n};\r\n\r\nexport const handleLessonCardService = (card, groupId) => {\r\n    let cardObj = cardObjectHandler(card, groupId);\r\n    if (!checkUniqLesson(cardObj)) {\r\n        handleSnackbarOpenService(\r\n            true,\r\n            snackbarTypes.ERROR,\r\n            i18n.t('common:lesson.service.is.not.unique')\r\n        );\r\n        setUniqueErrorService(true);\r\n        return;\r\n    }\r\n    if (cardObj.id) {\r\n        updateLessonHandler(cardObj);\r\n    } else {\r\n        createLessonHandler(cardObj);\r\n    }\r\n};\r\nexport const removeLessonCardService = lessonCardId => {\r\n    axios\r\n        .delete(LESSONURL + `/${lessonCardId}`)\r\n        .then(res => {\r\n            store.dispatch(deleteLessonCard(lessonCardId));\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.SUCCESS,\r\n                snackbarMessage(cardType.LESSON, actionType.DELETED)\r\n            );\r\n        })\r\n        .catch(err => {\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                err.response.data.message\r\n            );\r\n        });\r\n};\r\n\r\nexport const selectLessonCardService = lessonCardId => {\r\n    store.dispatch(selectLessonCard(lessonCardId));\r\n};\r\n\r\nexport const selectGroupIdService = groupId => {\r\n    store.dispatch(selectGroupId(groupId));\r\n};\r\n\r\nexport const setUniqueErrorService = isUniqueError => {\r\n    store.dispatch(setUniqueError(isUniqueError));\r\n};\r\n","import * as actionTypes from './actionsType';\r\n\r\nexport const storeLessonCard = res => {\r\n    return {\r\n        type: actionTypes.ADD_LESSON_CARD,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const setLessonsCards = res => {\r\n    return {\r\n        type: actionTypes.SET_LESSONS_CARDS,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const setLessonTypes = res => {\r\n    return {\r\n        type: actionTypes.SET_LESSON_TYPES,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const deleteLessonCard = res => {\r\n    return {\r\n        type: actionTypes.DELETE_LESSON_CARD,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const selectLessonCard = res => {\r\n    return {\r\n        type: actionTypes.SELECT_LESSON_CARD,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const updateLessonCard = res => {\r\n    return {\r\n        type: actionTypes.UPDATE_LESSON_CARD,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const selectGroupId = res => {\r\n    return {\r\n        type: actionTypes.SELECT_GROUP_ID,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const setUniqueError = res => {\r\n    return {\r\n        type: actionTypes.SET_UNIQUE_ERROR,\r\n        result: res\r\n    };\r\n};\r\n","import { store } from '../index';\r\n\r\nimport Moment from 'moment';\r\nimport { extendMoment } from 'moment-range';\r\nimport i18n from '../helper/i18n';\r\n\r\nexport const checkUniqClassName = className => {\r\n    const classId = store.getState().classActions.classScheduleOne.id;\r\n    var find = false;\r\n    if (classId) {\r\n        find = store\r\n            .getState()\r\n            .classActions.classScheduler.some(function (value, index, _arr) {\r\n                return value.class_name === className && value.id !== classId;\r\n            });\r\n    } else {\r\n        find = store\r\n            .getState()\r\n            .classActions.classScheduler.some(function (value, index, _arr) {\r\n                return value.class_name === className;\r\n            });\r\n    }\r\n    return find ? i18n.t('validationMessages:unique.error.message') : undefined;\r\n};\r\n\r\nexport const timeIntersectService = (startTime, endTime) => {\r\n    const classId = store.getState().classActions.classScheduleOne.id;\r\n    const moment = extendMoment(Moment);\r\n    let find = false;\r\n    if (startTime && endTime) {\r\n        const incomeRange = moment.range(\r\n            moment(startTime, 'HH:mm').toDate(),\r\n            moment(endTime, 'HH:mm').toDate()\r\n        );\r\n        if (classId) {\r\n            find = store\r\n                .getState()\r\n                .classActions.classScheduler.some(function (\r\n                    value,\r\n                    index,\r\n                    _arr\r\n                ) {\r\n                    return (\r\n                        incomeRange.intersect(\r\n                            moment.range(\r\n                                moment(value.startTime, 'HH:mm').toDate(),\r\n                                moment(value.endTime, 'HH:mm').toDate()\r\n                            )\r\n                        ) !== null && value.id !== classId\r\n                    );\r\n                });\r\n        } else {\r\n            find = store\r\n                .getState()\r\n                .classActions.classScheduler.some(function (\r\n                    value,\r\n                    index,\r\n                    _arr\r\n                ) {\r\n                    return (\r\n                        incomeRange.intersect(\r\n                            moment.range(\r\n                                moment(value.startTime, 'HH:mm').toDate(),\r\n                                moment(value.endTime, 'HH:mm').toDate()\r\n                            )\r\n                        ) !== null\r\n                    );\r\n                });\r\n        }\r\n    }\r\n    return find\r\n        ? i18n.t('validationMessages:intersect.time.error.message')\r\n        : undefined;\r\n};\r\n\r\nexport const checkUniqLesson = lesson => {\r\n    const lessons = store.getState().lesson.lessons;\r\n    let isNotUnique;\r\n    if (!lesson.id) {\r\n        isNotUnique = !!lessons.find(\r\n            storeLesson =>\r\n                storeLesson.subject.id === +lesson.subject.id &&\r\n                storeLesson.teacher.id === +lesson.teacher.id &&\r\n                storeLesson.lessonType === lesson.lessonType\r\n        );\r\n    } else {\r\n        isNotUnique = !!lessons.find(\r\n            storeLesson =>\r\n                storeLesson.subject.id === +lesson.subject.id &&\r\n                storeLesson.teacher.id === +lesson.teacher.id &&\r\n                storeLesson.lessonType === lesson.lessonType &&\r\n                storeLesson.id !== +lesson.id\r\n        );\r\n    }\r\n    return !isNotUnique;\r\n};\r\n\r\nexport const checkUniqueRoomName = roomName => {\r\n    if (!roomName) {\r\n        return;\r\n    }\r\n    const find = store\r\n        .getState()\r\n        .rooms.rooms.some(function (value, index, _arr) {\r\n            return value.name.toUpperCase() === roomName.toUpperCase()  ;\r\n        });\r\n    return find ? i18n.t('validationMessages:unique.error.message') : undefined;\r\n};\r\n\r\nexport const checkUniqueGroup = groupTitle => {\r\n    if (!groupTitle) {\r\n        return;\r\n    }\r\n    const find = store.getState().groups.groups.some(function (value) {\r\n        return (\r\n            value.title.toUpperCase().trim() === groupTitle.toUpperCase().trim()\r\n        );\r\n    });\r\n    return find ? i18n.t('validationMessages:unique.error.message') : undefined;\r\n};\r\n\r\nexport const checkUniqueSubject = subjectTitle => {\r\n    if (!subjectTitle) {\r\n        return;\r\n    }\r\n    const find = store.getState().subjects.subjects.some(function (value) {\r\n        return (\r\n            value.name.toUpperCase().trim() ===\r\n            subjectTitle.toUpperCase().trim()\r\n        );\r\n    });\r\n    return find ? i18n.t('validationMessages:unique.error.message') : undefined;\r\n};\r\n\r\nexport const checkUniqWish = wish => {\r\n    if (!wish) {\r\n        return;\r\n    }\r\n    const find = store.getState().teachersWish.wishes.some(function (value) {\r\n        return (\r\n            value.teacherWishesList[0].day_of_week.toUpperCase() ===\r\n            wish.toUpperCase()\r\n        );\r\n    });\r\n    return find ? 'Day must be unique!' : undefined;\r\n};\r\n\r\n\r\n","export const LESSON_FORM = 'lessonForm';\r\nexport const GROUP_FORM = 'addGroup';\r\nexport const ROOM_FORM = 'AddRoom';\r\nexport const ROOM_FORM_TYPE = 'roomType';\r\nexport const TEACHER_FORM = 'addTeacher';\r\nexport const CLASS_FORM = 'classForm';\r\nexport const LOGIN_FORM = 'loginForm';\r\nexport const REGISTRATION_FORM = 'registrationForm';\r\nexport const SUBJECT_FORM = 'addSubject';\r\nexport const TEACHER_WISH_FORM = 'teacherWish';\r\n","export const colors = {\r\n    POSSIBILITY: '#f7f7c1',\r\n    DANGER: '#ff5e54',\r\n    ALLOW: '#68f271',\r\n    NOTHING: '#fff'\r\n};\r\n","import React, { useRef } from 'react';\r\n\r\nimport './Card.scss';\r\nimport { colors } from '../../constants/schedule/colors';\r\n\r\nimport { setItemGroupIdService } from '../../services/scheduleService';\r\n\r\nconst Card = props => {\r\n    let className = 'card';\r\n    if (props.class) {\r\n        className = className.concat(' ' + props.class);\r\n    }\r\n\r\n    let card = <div className={className}>{props.children}</div>;\r\n\r\n    const dragItemNode = useRef();\r\n    const dragItem = useRef();\r\n\r\n    if (props.draggable) {\r\n        const dragStart = e => {\r\n            const item = JSON.parse(e.target.childNodes[0].value);\r\n            const groupId = item.lesson.group.id;\r\n            // const classNumber = item.classNumber;\r\n            const groupTitle = document.getElementById(`group-${groupId}`);\r\n            const isOnBoard = e.target.id.split('-')[4] === 'in';\r\n            groupTitle.style.backgroundColor = colors.ALLOW;\r\n            const boards = document.getElementsByClassName(`group-${groupId}`);\r\n\r\n            for (const board of boards) {\r\n                // if (\r\n                //     classNumber &&\r\n                //     `group-${groupId}-class-${i}` ===\r\n                //         `group-${groupId}-class-${classNumber}`\r\n                // ) {\r\n                //     continue;\r\n                // }\r\n                if (!board.childNodes[0]) {\r\n                    board.style.background = colors.POSSIBILITY;\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < boards.length; i++) {\r\n                // if (\r\n                //     classNumber &&\r\n                //     `group-${groupId}-class-${i}` ===\r\n                //         `group-${groupId}-class-${classNumber}`\r\n                // ) {\r\n                //     continue;\r\n                // }\r\n                if (!boards[i].childNodes[0]) {\r\n                    if (!isOnBoard) {\r\n                        // if (\r\n                        //     `group-${groupId}-class-${i}` ===\r\n                        //     `group-${groupId}-class-0`\r\n                        // ) {\r\n                        //     groupTitle.scrollIntoView();\r\n                        // } else {\r\n                            boards[i].scrollIntoView();\r\n                        // }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            setItemGroupIdService(groupId);\r\n\r\n            dragItemNode.current = e.target;\r\n            dragItemNode.current.addEventListener('dragend', handleDragEnd);\r\n\r\n            e.dataTransfer.setData('card_id', dragItemNode.current.id);\r\n        };\r\n\r\n        const handleDragEnd = e => {\r\n            const groupId = +JSON.parse(e.target.childNodes[0].value).lesson\r\n                .group.id;\r\n            const groupTitleEl = document.getElementById(`group-${groupId}`);\r\n\r\n            if (groupTitleEl) {\r\n                groupTitleEl.style.backgroundColor = colors.NOTHING;\r\n            }\r\n            const boards = document.getElementsByClassName(`group-${groupId}`);\r\n            for (const board of boards) {\r\n                if (board) {\r\n                    board.style.background = colors.NOTHING;\r\n                }\r\n            }\r\n\r\n            dragItem.current = null;\r\n            dragItemNode.current.removeEventListener('dragend', handleDragEnd);\r\n            dragItemNode.current = null;\r\n        };\r\n\r\n        card = (\r\n            <div\r\n                id={props.id}\r\n                className={className}\r\n                onDragStart={dragStart}\r\n                draggable={props.draggable}\r\n            >\r\n                {props.children}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return <>{card}</>;\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst renderTextField = ({\r\n  label,\r\n  input,\r\n  meta: { touched, invalid, error },\r\n  ...custom\r\n}) => {\r\n  return (\r\n    <TextField\r\n      label={label}\r\n      placeholder={label}\r\n      error={touched && invalid}\r\n      helperText={touched && error}\r\n      {...input}\r\n      {...custom}\r\n    />\r\n  );\r\n};\r\n\r\nexport default renderTextField;\r\n","import React from 'react';\r\n\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport Card from '../../share/Card/Card';\r\nimport renderTextField from '../../share/renderedFields/input';\r\n\r\nimport { LOGIN_FORM } from '../../constants/reduxForms';\r\n\r\nimport { required } from '../../validation/validateFields';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nlet LoginForm = props => {\r\n    const { t } = useTranslation('formElements');\r\n    const { handleSubmit } = props;\r\n\r\n    const error = props.loginError;\r\n\r\n    const translation = props.translation;\r\n\r\n    const errorHandling = value => {\r\n        if (required(value)) {\r\n            props.setError(required(value));\r\n        } else {\r\n            props.setError(null);\r\n        }\r\n    };\r\n\r\n    const errArr = error ? error.toLowerCase().split(' ') : '';\r\n\r\n    const passwordFieldErrorHandling = () =>\r\n        error &&\r\n        (errArr.includes('fields') ||\r\n            errArr.includes('����') ||\r\n            errArr.includes('password') ||\r\n            errArr.includes('������'));\r\n\r\n    let form = (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field\r\n                name=\"email\"\r\n                className=\"form-field\"\r\n                component={renderTextField}\r\n                label={t('email.label')}\r\n                error={!!error}\r\n                helperText={error}\r\n                onChange={e => {\r\n                    errorHandling(e.target.value);\r\n                }}\r\n            />\r\n            <Field\r\n                name=\"password\"\r\n                className=\"form-field\"\r\n                type=\"password\"\r\n                component={renderTextField}\r\n                label={t('password.label')}\r\n                error={error && passwordFieldErrorHandling()}\r\n                onChange={() => {\r\n                    props.setError(null);\r\n                }}\r\n            />\r\n            <Button\r\n                className=\"buttons-style under-line\"\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n            >\r\n                {translation('login.title')}\r\n            </Button>\r\n            <button\r\n                type=\"button\"\r\n                className=\"auth-link\"\r\n                onClick={() => {\r\n                    props.switchAuthMode(false);\r\n                    props.setError(null);\r\n                }}\r\n            >\r\n                {translation('no.account')}\r\n            </button>\r\n        </form>\r\n    );\r\n\r\n    if (props.isLoading) {\r\n        form = <CircularProgress />;\r\n    }\r\n\r\n    return (\r\n        <section className=\"auth-form\">\r\n            <Card class=\"auth-card\">\r\n                <h2 className=\"under-line\">\r\n                    {translation('login.page.title')}\r\n                </h2>\r\n                {form}\r\n            </Card>\r\n        </section>\r\n    );\r\n};\r\n\r\nLoginForm = reduxForm({\r\n    form: LOGIN_FORM\r\n})(LoginForm);\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\n\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nimport renderTextField from '../../share/renderedFields/input';\r\nimport Card from '../../share/Card/Card';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { REGISTRATION_FORM } from '../../constants/reduxForms';\r\n\r\nimport { email, password, required } from '../../validation/validateFields';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nlet RegistrationForm = props => {\r\n    const { t } = useTranslation('formElements');\r\n    const { handleSubmit } = props;\r\n\r\n    const translation = props.translation;\r\n\r\n    const error = props.registrationError;\r\n\r\n    const errArr = error ? error.toLowerCase().split(' ') : '';\r\n    const emailValidate = { validate: [required, email] };\r\n    const emailErrorCondition = error && errArr.includes('email');\r\n    const emailAdvancedValidate = {\r\n        error: emailErrorCondition,\r\n        helperText: emailErrorCondition ? error : ''\r\n    };\r\n\r\n    const passwordValidate = { validate: [required, password] };\r\n    const passwordErrorCondition =\r\n        error &&\r\n        (errArr.includes('password') ||\r\n            errArr.includes('passwords') ||\r\n            errArr.includes('паролі'));\r\n    const passwordValidateAdvanced = {\r\n        error: passwordErrorCondition,\r\n        helperText: passwordErrorCondition ? error : ''\r\n    };\r\n\r\n    const retypePasswordValidate = { validate: [required, password] };\r\n    const retypePasswordCondition =\r\n        error && (errArr.includes('passwords') || errArr.includes('паролі'));\r\n    const retypePasswordValidateAdvanced = {\r\n        error: retypePasswordCondition\r\n    };\r\n\r\n    let form = (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field\r\n                name=\"email\"\r\n                className=\"form-field\"\r\n                type=\"email\"\r\n                component={renderTextField}\r\n                label={t('email.label')}\r\n                {...(!error ? emailValidate : emailAdvancedValidate)}\r\n                onChange={e => {\r\n                    props.setError(null);\r\n                }}\r\n            />\r\n            <Field\r\n                name=\"password\"\r\n                className=\"form-field\"\r\n                type=\"password\"\r\n                component={renderTextField}\r\n                label={t('password.label')}\r\n                {...(!error ? passwordValidate : passwordValidateAdvanced)}\r\n                onChange={e => {\r\n                    props.setError(null);\r\n                }}\r\n            />\r\n            <Field\r\n                name=\"retypePassword\"\r\n                className=\"form-field\"\r\n                type=\"password\"\r\n                component={renderTextField}\r\n                label={t('retype.password.label')}\r\n                {...(!error\r\n                    ? retypePasswordValidate\r\n                    : retypePasswordValidateAdvanced)}\r\n            />\r\n            <Button\r\n                className=\"buttons-style\"\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n            >\r\n                {translation('create.account')}\r\n            </Button>\r\n            <button\r\n                type=\"button\"\r\n                className=\"auth-link\"\r\n                onClick={() => {\r\n                    props.switchAuthMode(true);\r\n                    props.setError(null);\r\n                }}\r\n            >\r\n                {translation('account.exist')}\r\n            </button>\r\n        </form>\r\n    );\r\n\r\n    if (props.isLoading) {\r\n        form = <CircularProgress />;\r\n    }\r\n    return (\r\n        <section className=\"auth-form\">\r\n            <Card class=\"auth-card\">\r\n                <h2 className=\"under-line\">\r\n                    {props.translation('registration.page.title')}\r\n                </h2>\r\n                {form}\r\n            </Card>\r\n        </section>\r\n    );\r\n};\r\n\r\nRegistrationForm = reduxForm({\r\n    form: REGISTRATION_FORM\r\n})(RegistrationForm);\r\n\r\nexport default RegistrationForm;\r\n","export const userRoles = {\r\n    USER: 'ROLE_USER',\r\n    MANAGER: 'ROLE_MANAGER'\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport { resetFormService } from '../../services/lessonService';\r\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\r\n\r\nimport { LOGIN_FORM, REGISTRATION_FORM } from '../../constants/reduxForms';\r\nimport { snackbarTypes } from '../../constants/snackbarTypes';\r\nimport { links } from '../../constants/links';\r\n\r\nimport './Auth.scss';\r\n\r\nimport LoginForm from '../../components/LoginForm/LoginForm';\r\nimport RegistrationForm from '../../components/RegistrationForm/RegistrationForm';\r\n\r\nimport {\r\n    authUser,\r\n    registerUser,\r\n    setAuthError,\r\n    setLoading\r\n} from '../../redux/actions/index';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\nimport { userRoles } from '../../constants/userRoles';\r\n\r\nconst Auth = props => {\r\n    const { t } = useTranslation('common');\r\n    const [isLogin, setLogin] = useState(true);\r\n\r\n    const error = props.error;\r\n\r\n    if (isLogin) {\r\n        document.title = t('login.page.title');\r\n    } else {\r\n        document.title = t('registration.page.title');\r\n    }\r\n\r\n    const loginHandler = loginData => {\r\n        if (!loginData.email || !loginData.password) {\r\n            props.setError(t('empty.fields'));\r\n            return;\r\n        }\r\n        props.onAuth(loginData);\r\n        props.setLoading(true);\r\n        resetFormService(LOGIN_FORM);\r\n    };\r\n\r\n    const registrationHandler = registrationData => {\r\n        if (registrationData.password !== registrationData.retypePassword) {\r\n            props.setError(t('different.passwords'));\r\n            return;\r\n        }\r\n        props.onRegister({\r\n            email: registrationData.email,\r\n            password: registrationData.password\r\n        });\r\n        props.setLoading(true);\r\n        resetFormService(REGISTRATION_FORM);\r\n    };\r\n\r\n    let isSuccess, message;\r\n    const isLoading = props.loading;\r\n\r\n    if (!error && props.userRole) {\r\n        const token = props.token;\r\n        isSuccess = !!token;\r\n        message = t('successful.login.message');\r\n        handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\r\n    }\r\n\r\n    const commonCondition = !error && isSuccess && !isLoading;\r\n\r\n    let authRedirect = null;\r\n    if (commonCondition && props.userRole === userRoles.MANAGER) {\r\n        authRedirect = <Redirect to={links.ADMIN_PAGE} />;\r\n    } else if (commonCondition && props.userRole === userRoles.USER) {\r\n        authRedirect = <Redirect to={links.HOME_PAGE} />;\r\n    }\r\n\r\n    const switchAuthModeHandler = isLogin => {\r\n        setLogin(isLogin);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (\r\n            !isLogin &&\r\n            props.response &&\r\n            props.response.data.hasOwnProperty('message')\r\n        ) {\r\n            setLogin(true);\r\n            message = t('successful.registered.message');\r\n            handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\r\n        }\r\n    }, [props.response]);\r\n\r\n    return (\r\n        <div className=\"auth-form\">\r\n            {authRedirect}\r\n            {isLogin ? (\r\n                <LoginForm\r\n                    isLoading={isLoading}\r\n                    loginError={error}\r\n                    onSubmit={loginHandler}\r\n                    switchAuthMode={switchAuthModeHandler}\r\n                    translation={t}\r\n                    setError={props.setError}\r\n                />\r\n            ) : (\r\n                <RegistrationForm\r\n                    isLoading={isLoading}\r\n                    registrationError={error}\r\n                    onSubmit={registrationHandler}\r\n                    switchAuthMode={switchAuthModeHandler}\r\n                    translation={t}\r\n                    setError={props.setError}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    response: state.auth.response,\r\n    error: state.auth.error,\r\n    token: state.auth.token,\r\n    userRole: state.auth.role,\r\n    loading: state.loadingIndicator.loading\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: data => dispatch(authUser(data)),\r\n        onRegister: data => dispatch(registerUser(data)),\r\n        setLoading: isLoading => dispatch(setLoading(isLoading)),\r\n        setError: error => dispatch(setAuthError(error))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","import * as actionTypes from './actionsType';\r\nimport { TOKEN_BEGIN } from '../../constants/tokenBegin';\r\n\r\nexport const authUser = res => {\r\n    return {\r\n        type: actionTypes.AUTH_USER,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const registerUser = res => {\r\n    return {\r\n        type: actionTypes.REGISTER_USER,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const activateUser = res => {\r\n    return {\r\n        type: actionTypes.ACTIVATE_USER,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const logout = () => {\r\n    return {\r\n        type: actionTypes.AUTH_USER_INITIATE_LOGOUT\r\n    };\r\n};\r\n\r\nexport const authCheckState = () => {\r\n    const token = localStorage.getItem('token');\r\n    if (token && !token.includes(TOKEN_BEGIN)) {\r\n        return {\r\n            type: actionTypes.AUTH_USER_LOGOUT\r\n        }\r\n    }\r\n    const role = localStorage.getItem('userRole');\r\n    return {\r\n        type: actionTypes.AUTH_USER_CHECK_STATE,\r\n        token,\r\n        role\r\n    }\r\n};\r\n\r\nexport const setAuthError = res => {\r\n    return {\r\n        type: actionTypes.SET_AUTH_ERROR,\r\n        result: res\r\n    }\r\n};\r\n\r\n\r\n\r\n","import axios from '../helper/axios';\r\nimport { store } from '../index';\r\nimport { reset } from 'redux-form';\r\n\r\nimport { GROPURL } from '../constants/axios';\r\nimport { GROUP_FORM } from '../constants/reduxForms';\r\n\r\nimport {\r\n    showAllGroups,\r\n    deleteGroup,\r\n    addGroup,\r\n    selectGroup,\r\n    updateGroup,\r\n    clearGroup\r\n} from '../redux/actions/index';\r\n\r\nimport { handleSnackbarOpenService } from './snackbarService';\r\n\r\nimport { snackbarTypes } from '../constants/snackbarTypes';\r\nimport { snackbarMessage } from '../constants/snackbarMessages';\r\nimport { actionType } from '../constants/actionTypes';\r\nimport { cardType } from '../constants/cardType';\r\n\r\nexport const showAllGroupsService = () => {\r\n    axios\r\n        .get(GROPURL)\r\n        .then(response => {\r\n            store.dispatch(\r\n                showAllGroups(\r\n                    response.data.sort(function (a, b) {\r\n                        return a - b;\r\n                    })\r\n                )\r\n            );\r\n        })\r\n        .catch(error => {});\r\n};\r\n\r\nexport const removeGroupCardService = groupId => {\r\n    axios\r\n        .delete(GROPURL + `/${groupId}`)\r\n        .then(response => {\r\n            store.dispatch(deleteGroup(groupId));\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.SUCCESS,\r\n                snackbarMessage(cardType.GROUP, actionType.DELETED)\r\n            );\r\n        })\r\n        .catch(err => {\r\n            handleSnackbarOpenService(true, snackbarTypes.ERROR, 'Error');\r\n        });\r\n};\r\n\r\nexport const selectGroupService = groupId => {\r\n    store.dispatch(selectGroup(groupId));\r\n};\r\n\r\nexport const createGroupService = data => {\r\n    axios\r\n        .post(GROPURL, data)\r\n        .then(response => {\r\n            store.dispatch(addGroup(response.data));\r\n            resetForm(GROUP_FORM);\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.SUCCESS,\r\n                snackbarMessage(cardType.GROUP, actionType.CREATED)\r\n            );\r\n        })\r\n        .catch(error => {\r\n            handleSnackbarOpenService(true, snackbarTypes.ERROR, 'Error');\r\n        });\r\n};\r\n\r\nexport const updateGroupService = data => {\r\n    return axios\r\n        .put(GROPURL, data)\r\n        .then(response => {\r\n            store.dispatch(updateGroup(response.data));\r\n            selectGroupService(null);\r\n            resetForm(GROUP_FORM);\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.SUCCESS,\r\n                snackbarMessage(cardType.GROUP, actionType.UPDATED)\r\n            );\r\n        })\r\n        .catch(err => {\r\n            handleSnackbarOpenService(true, snackbarTypes.ERROR, 'Error');\r\n        });\r\n};\r\n\r\nexport const handleGroupService = values => {\r\n    if (values.id) {\r\n        updateGroupService(values);\r\n    } else {\r\n        createGroupService(values);\r\n    }\r\n};\r\n\r\nexport const clearGroupService = () => {\r\n    store.dispatch(clearGroup());\r\n    resetForm(GROUP_FORM);\r\n};\r\n\r\nconst resetForm = form => {\r\n    store.dispatch(reset(form));\r\n};\r\n","import * as actionTypes from './actionsType';\r\n\r\nexport const showAllGroups = (res) => {\r\n    return {\r\n        type: actionTypes.SHOW_ALL_GROUPS,\r\n        result: res\r\n    }\r\n};\r\n\r\nexport const addGroup = (res) => {\r\n    return {\r\n        type: actionTypes.ADD_GROUP,\r\n        result: res\r\n    }\r\n};\r\n\r\nexport const deleteGroup = (res) => {\r\n    return {\r\n        type: actionTypes.DELETE_GROUP,\r\n        result: res\r\n    }\r\n};\r\n\r\nexport const selectGroup = (res) => {\r\n    return {\r\n        type: actionTypes.SELECT_GROUP,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const updateGroup = (res) => {\r\n    return {\r\n        type: actionTypes.UPDATE_GROUP,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const clearGroup = () => ({\r\n    type: actionTypes.CLEAR_GROUP\r\n});\r\n","import axios from '../helper/axios';\r\nimport { store } from '../index';\r\nimport { reset } from 'redux-form';\r\nimport { CLASSURL } from '../constants/axios';\r\n\r\nimport { CLASS_FORM } from '../constants/reduxForms';\r\n\r\nimport {\r\n    addClassScheduleOne,\r\n    setClassScheduleList,\r\n    getClassScheduleOne,\r\n    deleteClassScheduleOne,\r\n    updateClassScheduleOne,\r\n    clearClassScheduleOne\r\n} from '../redux/actions/class';\r\n\r\nimport { handleSnackbarOpenService } from './snackbarService';\r\nimport { snackbarTypes } from '../constants/snackbarTypes';\r\n\r\nimport i18n from '../helper/i18n';\r\n\r\nconst resetFormHandler = formName => {\r\n    store.dispatch(reset(formName));\r\n};\r\n\r\nexport const getClassScheduleListService = dispatch => {\r\n    axios\r\n        .get(CLASSURL)\r\n        .then(response => {\r\n            let bufferArray = [];\r\n            const results = response.data;\r\n            for (const key in results) {\r\n                bufferArray.push({\r\n                    id: key,\r\n                    ...results[key]\r\n                });\r\n            }\r\n            store.dispatch(setClassScheduleList(bufferArray));\r\n        })\r\n        .catch(error => {\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                i18n.t(error.response.data.message, error.response.data.message)\r\n            );\r\n        });\r\n};\r\n\r\nexport const addClassScheduleOneService = values => {\r\n    if (values.id) {\r\n        putAddClassScheduleOneService(values);\r\n    } else {\r\n        postAddClassScheduleOneService(values);\r\n    }\r\n};\r\n\r\nexport const putAddClassScheduleOneService = values => {\r\n    axios\r\n        .put(CLASSURL, values)\r\n        .then(response => {\r\n            store.dispatch(updateClassScheduleOne(response.data));\r\n            resetFormHandler(CLASS_FORM);\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.SUCCESS,\r\n                i18n.t('serviceMessages:back.end.success.operation', {\r\n                    cardType: i18n.t('formElements:class.label'),\r\n                    actionType: i18n.t('serviceMessages:updated.label')\r\n                })\r\n            );\r\n        })\r\n        .catch(error => {\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                i18n.t(error.response.data.message, error.response.data.message)\r\n            );\r\n        });\r\n};\r\n\r\nexport const postAddClassScheduleOneService = values => {\r\n    axios\r\n        .post(CLASSURL, values)\r\n        .then(response => {\r\n            store.dispatch(addClassScheduleOne(response.data));\r\n            resetFormHandler(CLASS_FORM);\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.SUCCESS,\r\n                i18n.t('serviceMessages:back.end.success.operation', {\r\n                    cardType: i18n.t('formElements:class.label'),\r\n                    actionType: i18n.t('serviceMessages:created.label')\r\n                })\r\n            );\r\n        })\r\n        .catch(error => {\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                i18n.t(error.response.data.message, error.response.data.message)\r\n            );\r\n        });\r\n};\r\n\r\nexport const getClassScheduleOneService = classId => {\r\n    store.dispatch(getClassScheduleOne(classId));\r\n};\r\n\r\nexport const deleteClassScheduleOneService = classId => {\r\n    axios\r\n        .delete(CLASSURL + `/${classId}`)\r\n        .then(response => {\r\n            store.dispatch(deleteClassScheduleOne(classId));\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.SUCCESS,\r\n                i18n.t('serviceMessages:back.end.success.operation', {\r\n                    cardType: i18n.t('formElements:class.label'),\r\n                    actionType: i18n.t('serviceMessages:deleted.label')\r\n                })\r\n            );\r\n        })\r\n        .catch(error => {\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                i18n.t(error.response.data.message, error.response.data.message)\r\n            );\r\n        });\r\n};\r\n\r\nexport const clearClassScheduleOneService = () => {\r\n    store.dispatch(clearClassScheduleOne());\r\n    resetFormHandler(CLASS_FORM);\r\n};\r\n","import * as actionTypes from \"./actionsType\";\r\n\r\nexport const setClassScheduleList = classScheduler => ({\r\n  type: actionTypes.SET_CLASS_SCHEDULE_LIST,\r\n  classScheduler\r\n});\r\n\r\nexport const addClassScheduleOne = classSchedulOne => ({\r\n  type: actionTypes.ADD_CLASS_SCHEDULE_ONE,\r\n  classSchedulOne\r\n});\r\n\r\nexport const getClassScheduleList = () => ({\r\n  type: actionTypes.GET_CLASS_SCHEDULE_LIST\r\n});\r\n\r\nexport const getClassScheduleOne = classSchedulOne => ({\r\n  type: actionTypes.GET_CLASS_SCHEDULE_ONE,\r\n  classSchedulOne\r\n});\r\n\r\nexport const deleteClassScheduleOne = classSchedulOne => ({\r\n  type: actionTypes.DELETE_CLASS_SCHEDULE_ONE,\r\n  classSchedulOne\r\n});\r\n\r\nexport const updateClassScheduleOne = classSchedulOne => ({\r\n  type: actionTypes.UPDATE_CLASS_SCHEDULE_ONE,\r\n  classSchedulOne\r\n});\r\n\r\nexport const clearClassScheduleOne = () => ({\r\n  type: actionTypes.CLEAR_CLASS_SCHEDULE_ONE\r\n});\r\n","export const cssClasses = {\r\n    SCHEDULE_BOARD: 'schedule-board',\r\n    IN_BOARD_SECTION: 'in-board-section',\r\n    IN_BOARD_CARD: 'in-board-card',\r\n};\r\n","import React from 'react';\r\n\r\nimport { colors } from '../../constants/schedule/colors';\r\nimport { cssClasses } from '../../constants/schedule/cssClasses';\r\n\r\nconst Board = props => {\r\n    const itemGroupId = props.itemGroupId;\r\n\r\n    const drop = e => {\r\n        e.preventDefault();\r\n        const card_id = e.dataTransfer.getData('card_id');\r\n\r\n        const card = document.getElementById(card_id);\r\n        card.style.display = 'block';\r\n\r\n        const arr = e.target.id.split('-');\r\n        const borderGroupId = arr[1];\r\n        const day = arr[3];\r\n        const classId = arr[5];\r\n        const week = arr[7];\r\n\r\n        const tooltip = document.getElementById(\r\n            `tooltip-${borderGroupId}-day-${day}-class-${classId}-week-${week}`\r\n        );\r\n        tooltip.style.display = 'none';\r\n\r\n        const item = JSON.parse(card.childNodes[0].value);\r\n        // let itemId = item.id || new Date().getTime();\r\n\r\n        let obj = {\r\n            lessonId: item.lesson.id,\r\n            dayOfWeek: day.toUpperCase(),\r\n            periodId: +classId,\r\n            evenOdd: week.toUpperCase(),\r\n            semesterId: 1\r\n        };\r\n        props.setModalData({ item: obj, groupId: item.lesson.group.id });\r\n        props.openDialog();\r\n    };\r\n\r\n    const dragOver = e => {\r\n        const target = e.target;\r\n        const children = target.childNodes;\r\n        const arr = target.id.split('-');\r\n        const borderGroupId = +arr[1];\r\n        const day = arr[3];\r\n        const classId = arr[5];\r\n        const week = arr[7];\r\n\r\n        if (\r\n            borderGroupId !== itemGroupId &&\r\n            target.classList.contains(cssClasses.SCHEDULE_BOARD)\r\n        ) {\r\n            target.style.backgroundColor = colors.DANGER;\r\n        } else if (\r\n            target.classList.contains(cssClasses.SCHEDULE_BOARD) &&\r\n            children[0]\r\n        ) {\r\n            children[0].style.backgroundColor = colors.DANGER;\r\n            target.style.backgroundColor = colors.DANGER;\r\n        } else if (\r\n            !children[0] &&\r\n            target.classList.contains(cssClasses.SCHEDULE_BOARD)\r\n        ) {\r\n            target.style.backgroundColor = colors.ALLOW;\r\n            const tooltip = document.getElementById(\r\n                `tooltip-${borderGroupId}-day-${day}-class-${classId}-week-${week}`\r\n            );\r\n            tooltip.style.display = 'block';\r\n            e.preventDefault();\r\n        }\r\n    };\r\n\r\n    const dragLeave = e => {\r\n        const target = e.target;\r\n        const children = target.childNodes;\r\n        const parent = target.parentNode;\r\n\r\n        const arr = target.id.split('-');\r\n        const borderGroupId = +arr[1];\r\n        const day = arr[3];\r\n        const classId = arr[5];\r\n        const week = arr[7];\r\n\r\n        if (borderGroupId === itemGroupId && !target.childNodes[0]) {\r\n            target.style.backgroundColor = colors.POSSIBILITY;\r\n            const tooltip = document.getElementById(\r\n                `tooltip-${borderGroupId}-day-${day}-class-${classId}-week-${week}`\r\n            );\r\n            tooltip.style.display = 'none';\r\n        } else if (\r\n            target.classList.contains(cssClasses.SCHEDULE_BOARD) &&\r\n            children[0]\r\n        ) {\r\n            target.style.backgroundColor = colors.NOTHING;\r\n            children[0].style.backgroundColor = colors.NOTHING;\r\n        } else if (\r\n            parent &&\r\n            parent.classList.contains(cssClasses.SCHEDULE_BOARD)\r\n        ) {\r\n            parent.style.backgroundColor = colors.NOTHING;\r\n            parent.parentNode.style.backgroundColor = colors.NOTHING;\r\n        } else {\r\n            target.style.backgroundColor = colors.NOTHING;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            id={props.id}\r\n            onDrop={drop}\r\n            onDragOver={dragOver}\r\n            onDragLeave={dragLeave}\r\n            className={props.className}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;\r\n","export const everyFirstLetterCapital = str => {\r\n    return str\r\n        .toLowerCase()\r\n        .split(' ')\r\n        .map(s => s.charAt(0).toUpperCase() + s.substring(1))\r\n        .join(' ');\r\n};\r\n\r\nexport const firstStringLetterCapital = str => {\r\n    return str.replace(/^\\w/, c => c.toUpperCase());\r\n};\r\n","import React from 'react';\r\nimport Card from '../../share/Card/Card';\r\n\r\nimport { MdDelete } from 'react-icons/md';\r\n\r\nconst ScheduleItem = props => {\r\n    let lesson = props.lesson;\r\n    let itemId, classNumber;\r\n\r\n    const item = props.item || null;\r\n    const t = props.translation;\r\n    const { fStrLetterCapital, eFLetCapital } = props;\r\n\r\n    if (item) {\r\n        lesson = item.lesson;\r\n        itemId = item.id;\r\n        classNumber = item.classNumber;\r\n    }\r\n\r\n    const index = props.index;\r\n\r\n    const itemNodeId = `card-${lesson.id}-group-${lesson.group.id}-${index}`;\r\n    const deleteNodeId = `delete-${lesson.id}-${lesson.group.id}-${index}`;\r\n    const itemNode = document.getElementById(itemNodeId);\r\n    const deleteNode = document.getElementById(deleteNodeId);\r\n\r\n    if (itemNode && deleteNode) {\r\n        itemNode.addEventListener('mouseenter', () => {\r\n            deleteNode.style.display = 'block';\r\n        });\r\n        itemNode.addEventListener('mouseleave', () => {\r\n            deleteNode.style.display = 'none';\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            id={itemNodeId}\r\n            class={props.class}\r\n            draggable={true}\r\n            classes={props.classScheduler}\r\n        >\r\n            <input\r\n                type=\"hidden\"\r\n                value={JSON.stringify({\r\n                    lesson: lesson,\r\n                    id: itemId,\r\n                    classNumber\r\n                })}\r\n            />\r\n            {props.inBoard ? (\r\n                <>\r\n                    <div className=\"cards-btns delete-item\" id={deleteNodeId}>\r\n                        <MdDelete\r\n                            title={t('common:delete.schedule.item')}\r\n                            className=\"svg-btn\"\r\n                            onClick={() =>\r\n                                props.deleteItem(\r\n                                    itemId,\r\n                                    item.lesson.group.id\r\n                                )\r\n                            }\r\n                        />\r\n                    </div>\r\n                    <p>\r\n                        {t('common:room.card.title')} <b>{item.room.name}</b>\r\n                    </p>\r\n                </>\r\n            ) : (\r\n                ''\r\n            )}\r\n            <p>\r\n                {fStrLetterCapital(lesson.subjectForSite)}(\r\n                <b>{lesson.lessonType}</b>)\r\n            </p>\r\n            <p>{eFLetCapital(lesson.teacherForSite)}</p>\r\n            <p>\r\n                <b>1</b> {t('formElements:hours.label')}\r\n            </p>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ScheduleItem;\r\n","import React from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Board from '../Board/Board';\r\nimport { selectGroupIdService } from '../../services/lessonService';\r\nimport { styled } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {\r\n    everyFirstLetterCapital,\r\n    firstStringLetterCapital\r\n} from '../../helper/strings';\r\nimport ScheduleItem from '../ScheduleItem/ScheduleItem';\r\n\r\nconst GroupField = styled(TextField)({\r\n    width: '150px'\r\n});\r\n\r\nconst ScheduleLessonsList = props => {\r\n    const { groups, groupId } = props;\r\n\r\n    let lessons = props.lessons;\r\n    const items = props.items;\r\n\r\n    const t = props.translation;\r\n\r\n    const handleGroupSelect = group => {\r\n        if (group) {\r\n            selectGroupIdService(group.id);\r\n        }\r\n    };\r\n\r\n    const groupFinderHandle = groupId => {\r\n        if (groupId) {\r\n            return groups.find(group => group.id === groupId);\r\n        } else {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    const defaultProps = {\r\n        options: groups,\r\n        getOptionLabel: option => (option ? option.title : '')\r\n    };\r\n\r\n    const everyFirstLetterCapitalHandle = str => {\r\n        return everyFirstLetterCapital(str);\r\n    };\r\n\r\n    const firstStringLetterCapitalHandle = str => {\r\n        return firstStringLetterCapital(str);\r\n    };\r\n\r\n    const lessonItems = lesson => {\r\n        let hours = lesson.hours;\r\n        const lessonItem = [];\r\n        let els = [];\r\n        if (items.length > 0) {\r\n            els = items.filter(item => item.lesson.id === lesson.id);\r\n        }\r\n        let hoursInSchedule = 0;\r\n        for (let el of els) {\r\n            hoursInSchedule += 1;\r\n        }\r\n        for (let i = 0; i < hours - hoursInSchedule; i++) {\r\n            lessonItem.push(\r\n                <section key={lesson.id + i}>\r\n                    <ScheduleItem\r\n                        index={i}\r\n                        lesson={lesson}\r\n                        fStrLetterCapital={firstStringLetterCapitalHandle}\r\n                        eFLetCapital={everyFirstLetterCapitalHandle}\r\n                        translation={t}\r\n                        classScheduler={props.classScheduler}\r\n                    />\r\n                </section>\r\n            );\r\n        }\r\n        return lessonItem;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {t('common:select.group.schedule')}\r\n            <Autocomplete\r\n                {...defaultProps}\r\n                id=\"group\"\r\n                clearOnEscape\r\n                openOnFocus\r\n                value={groupFinderHandle(groupId)}\r\n                onChange={(event, newValue) => {\r\n                    handleGroupSelect(newValue);\r\n                }}\r\n                renderInput={params => (\r\n                    <GroupField\r\n                        {...params}\r\n                        label={t('formElements:group.label')}\r\n                        margin=\"normal\"\r\n                    />\r\n                )}\r\n            />\r\n            {lessons.length > 0 ? (\r\n                <Board className=\"board lesson-board\">\r\n                    {lessons.map(lesson => lessonItems(lesson))}\r\n                </Board>\r\n            ) : groupId ? (\r\n                'There are no lessons for this group'\r\n            ) : (\r\n                ''\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ScheduleLessonsList;\r\n","export const days = [\r\n    'Monday',\r\n    'Tuesday',\r\n    'Wednesday',\r\n    'Thursday',\r\n    'Friday',\r\n    'Saturday',\r\n    'Sunday'\r\n];\r\n","import React, { useState } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport '../../share/modals/dialog.scss';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    roomField: {\r\n        '&': {\r\n            margin: '0 auto',\r\n            width: 250\r\n        }\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst ScheduleDialog = props => {\r\n    const { onClose, itemData, open, rooms, translation } = props;\r\n    const [room, setRoom] = useState('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleClose = () => {\r\n        onClose();\r\n    };\r\n\r\n    const chooseClickHandle = () => {\r\n        if (!room) {\r\n            return;\r\n        }\r\n        onClose({ itemData, room });\r\n        setRoom(null);\r\n    };\r\n\r\n    const defaultProps = {\r\n        options: rooms,\r\n        getOptionLabel: option => (option ? option.name : '')\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            disableBackdropClick={true}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"simple-dialog-title\"\r\n            open={open}\r\n        >\r\n            <DialogTitle id=\"simple-dialog-title\">{translation('common:schedule.dialog.title')}</DialogTitle>\r\n            <Autocomplete\r\n                {...defaultProps}\r\n                id=\"group\"\r\n                clearOnEscape\r\n                openOnFocus\r\n                className={classes.roomField}\r\n                onChange={(event, newValue) => {\r\n                    setRoom(newValue);\r\n                }}\r\n                renderInput={params => (\r\n                    <TextField {...params} label={translation('formElements:room.label')} margin=\"normal\" />\r\n                )}\r\n            />\r\n            <div className=\"buttons-container\">\r\n                <Button\r\n                    className=\"dialog-button\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => chooseClickHandle()}\r\n                >\r\n                    {translation('formElements:choose.button.title')}\r\n                </Button>\r\n                <Button\r\n                    className=\"dialog-button\"\r\n                    variant=\"contained\"\r\n                    onClick={() => onClose()}\r\n                >\r\n                    {translation('formElements:cancel.button.title')}\r\n                </Button>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nScheduleDialog.propTypes = {\r\n    onClose: PropTypes.func.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    selectedValue: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ScheduleDialog;\r\n","import React, { useState } from 'react';\r\n\r\nimport Board from '../Board/Board';\r\n\r\nimport { days } from '../../constants/schedule/days';\r\n\r\nimport {\r\n    everyFirstLetterCapital,\r\n    firstStringLetterCapital\r\n} from '../../helper/strings';\r\n\r\nimport ScheduleItem from '../ScheduleItem/ScheduleItem';\r\n\r\nimport {\r\n    addItemToScheduleService,\r\n    deleteItemFromScheduleService\r\n} from '../../services/scheduleService';\r\nimport {\r\n    getLessonsByGroupService,\r\n    selectGroupIdService\r\n} from '../../services/lessonService';\r\nimport { cssClasses } from '../../constants/schedule/cssClasses';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ScheduleDialog from '../ScheduleDialog/ScheduleDialog';\r\n\r\nconst Schedule = props => {\r\n    const { groups, itemGroupId } = props;\r\n    const [open, setOpen] = useState(false);\r\n    const [itemData, setItemData] = useState(null);\r\n\r\n    const setNewItemHandle = (item, room, groupId) => {\r\n        getLessonsByGroupService(groupId);\r\n        selectGroupIdService(groupId);\r\n        addItemToScheduleService({ ...item, roomId: room.id });\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = value => {\r\n        setOpen(false);\r\n        if (value) {\r\n            setNewItemHandle(\r\n                value.itemData.item,\r\n                value.room,\r\n                value.itemData.groupId\r\n            );\r\n        }\r\n    };\r\n\r\n    const items = props.items;\r\n\r\n    const classes = props.classes;\r\n\r\n    const boardHeight = 129;\r\n    const margins = 17;\r\n\r\n    const t = props.translation;\r\n\r\n    const useStyles = makeStyles({\r\n        day: {\r\n            minHeight: classes.length * 2 * (boardHeight + margins)\r\n        }\r\n    });\r\n    const elClasses = useStyles();\r\n\r\n    const everyFirstLetterCapitalHandle = str => {\r\n        return everyFirstLetterCapital(str);\r\n    };\r\n\r\n    const firstStringLetterCapitalHandle = str => {\r\n        return firstStringLetterCapital(str);\r\n    };\r\n\r\n    const deleteItemFromScheduleHandler = (itemId, groupId) => {\r\n        deleteItemFromScheduleService(itemId);\r\n        getLessonsByGroupService(groupId);\r\n        selectGroupIdService(groupId);\r\n    };\r\n\r\n    const itemInBoard = (group, lesson, index) => {\r\n        for (let item of items) {\r\n            if (\r\n                `group-${\r\n                    item.lesson.group.id\r\n                }-day-${item.dayOfWeek.toLowerCase()}-class-${\r\n                    item.period.id\r\n                }-week-${item.evenOdd.toLowerCase()}` ===\r\n                `group-${group.id}-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`\r\n            ) {\r\n                return (\r\n                    <section\r\n                        key={group.id + index + item.id}\r\n                        className={cssClasses.IN_BOARD_SECTION}\r\n                    >\r\n                        <ScheduleItem\r\n                            inBoard={true}\r\n                            index={`in-day-${lesson.day}-class-${lesson.classNumber.id}-week-${lesson.week}`}\r\n                            classScheduler={classes}\r\n                            class={cssClasses.IN_BOARD_CARD}\r\n                            item={item}\r\n                            deleteItem={deleteItemFromScheduleHandler}\r\n                            fStrLetterCapital={firstStringLetterCapitalHandle}\r\n                            eFLetCapital={everyFirstLetterCapitalHandle}\r\n                            translation={t}\r\n                        />\r\n                    </section>\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const allLessons = [];\r\n    days.forEach((day, index) => {\r\n        classes.forEach(classNumber => {\r\n            for (let i = 0; i < 2; i++) {\r\n                if ((i + 1) % 2 === 0) {\r\n                    allLessons.push({\r\n                        day: { name: day.toLowerCase(), id: index },\r\n                        classNumber,\r\n                        week: 'even'\r\n                    });\r\n                } else {\r\n                    allLessons.push({\r\n                        day: { name: day.toLowerCase(), id: index },\r\n                        classNumber,\r\n                        week: 'odd'\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    return (\r\n        <section className=\"cards-container\">\r\n            <ScheduleDialog\r\n                translation={t}\r\n                selectedValue={''}\r\n                itemData={itemData}\r\n                rooms={props.rooms}\r\n                open={open}\r\n                onClose={handleClose}\r\n            />\r\n            <aside className=\"day-classes-aside\">\r\n                <div className=\"card empty-card\" />\r\n                {days.map((day, index) => (\r\n                    <section className=\"cards-container\" key={day}>\r\n                        <section\r\n                            className={elClasses.day + ' card schedule-day'}\r\n                        >\r\n                            {t(`common:day_of_week_${index + 1}`)}\r\n                        </section>\r\n                        <section className=\"class-section\">\r\n                            {classes.map(classScheduler => (\r\n                                <section\r\n                                    className=\"card schedule-class\"\r\n                                    key={classScheduler.id}\r\n                                >\r\n                                    {t('common:class.schedule')}{' '}\r\n                                    {classScheduler.class_name}\r\n                                </section>\r\n                            ))}\r\n                        </section>\r\n                    </section>\r\n                ))}\r\n            </aside>\r\n            {groups.map(group => (\r\n                <section key={'group-' + group.id}>\r\n                    <div className=\"group-title card\" id={`group-${group.id}`}>\r\n                        {t('common:group.schedule')}\r\n                        {group.title}\r\n                    </div>\r\n                    {allLessons.map((lesson, index) => (\r\n                        <div key={group + '-' + index} className=\"tooltip-div\">\r\n                            <div\r\n                                className=\"tooltip-board\"\r\n                                id={`tooltip-${group.id}-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`}\r\n                            >\r\n                                <p>\r\n                                    {t(`common:day_of_week_${+lesson.day.id + 1}`)}\r\n                                </p>\r\n                                <p>\r\n                                    {t('common:class.schedule')}:{' '}\r\n                                    {lesson.classNumber.class_name},{' '}\r\n                                    {t('common:week.title')}:{' '}\r\n                                    {t(`common:week.${lesson.week}.title`)}\r\n                                </p>\r\n                            </div>\r\n                            <Board\r\n                                setModalData={setItemData}\r\n                                openDialog={handleClickOpen}\r\n                                itemGroupId={itemGroupId}\r\n                                id={`group-${group.id}-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`}\r\n                                className={`board card ${cssClasses.SCHEDULE_BOARD} group-${group.id}`}\r\n                            >\r\n                                {itemInBoard(group, lesson, index)}\r\n                            </Board>\r\n                        </div>\r\n                    ))}\r\n                </section>\r\n            ))}\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Schedule;\r\n","import { store } from '../index';\r\nimport { reset } from 'redux-form';\r\nimport { ROOMURL } from '../constants/axios';\r\nimport { ROOM_FORM } from '../constants/reduxForms';\r\nimport axios from '../helper/axios';\r\n\r\nimport {\r\n    showListOfRooms,\r\n    deleteRoom,\r\n    addRoom,\r\n    selectOneRoom,\r\n    updateOneRoom,\r\n    clearRoomOne\r\n} from '../redux/actions/rooms';\r\n\r\nimport { handleSnackbarOpenService } from './snackbarService';\r\nimport { snackbarTypes } from '../constants/snackbarTypes';\r\n\r\n\r\nimport i18n from '../helper/i18n';\r\n\r\nconst resetFormHandler = form => {\r\n    store.dispatch(reset(form));\r\n};\r\n\r\nexport const showListOfRoomsService = () => {\r\n    axios\r\n        .get(ROOMURL)\r\n        .then(res => {\r\n            store.dispatch(showListOfRooms(res.data));\r\n        })\r\n        .catch(error => {\r\n       \r\n            // TO DO\r\n            // NEED IT IN THE NEAREST FUTURE\r\n            // handleSnackbarOpenService(\r\n            //     true,\r\n            //     snackbarTypes.ERROR,\r\n            //     i18n.t(error.response.data.message, error.response.data.message)\r\n            // );\r\n        });\r\n};\r\n\r\nexport const deleteRoomCardService = id => {\r\n    axios\r\n        .delete(ROOMURL + `/${id}`)\r\n        .then(res => {\r\n            store.dispatch(deleteRoom(id));\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.SUCCESS,\r\n                i18n.t('serviceMessages:back.end.success.operation', {\r\n                    cardType: i18n.t('formElements:room.label'),\r\n                    actionType: i18n.t('serviceMessages:deleted.label')\r\n                })\r\n                \r\n            );\r\n        })\r\n        .catch(error => {\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                i18n.t(error.response.data.message, error.response.data.message)\r\n            );\r\n        });\r\n};\r\n\r\nconst put = values => {\r\n    axios\r\n        .put(ROOMURL, values)\r\n        .then(result => {\r\n            store.dispatch(updateOneRoom(result.data));\r\n            resetFormHandler(ROOM_FORM);\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.SUCCESS,\r\n                i18n.t('serviceMessages:back.end.success.operation', {\r\n                    cardType: i18n.t('formElements:room.label'),\r\n                    actionType: i18n.t('serviceMessages:updated.label')\r\n                })\r\n            );\r\n        })\r\n        .catch(error => {\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                i18n.t(error.response.data.message, error.response.data.message)\r\n            );\r\n        });\r\n};\r\nconst post = values => {\r\n    axios\r\n        .post(ROOMURL, values)\r\n        .then(res => {\r\n            store.dispatch(addRoom(res.data));\r\n            resetFormHandler(ROOM_FORM);\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.SUCCESS,\r\n                i18n.t('serviceMessages:back.end.success.operation', {\r\n                    cardType: i18n.t('formElements:room.label'),\r\n                    actionType: i18n.t('serviceMessages:created.label')\r\n                })\r\n            );\r\n        })\r\n        .catch(error => {\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                i18n.t(error.response.data.message, error.response.data.message)\r\n            );\r\n        });\r\n};\r\n\r\nexport const createRoomService = values => {   \r\n    if (values.id) {\r\n        const newValue = {id: values.id, name:values.name, type:{id:+values.type}}\r\n        put(newValue);\r\n    } else {\r\n        const newValue = {name:values.name, type:{id:+values.type}}\r\n        post(newValue);\r\n    }\r\n};\r\n\r\nexport const selectOneRoomService = roomId => {\r\n    store.dispatch(selectOneRoom(roomId));\r\n};\r\n\r\nexport const clearRoomOneService = () => {\r\n    store.dispatch(clearRoomOne());\r\n    resetFormHandler(ROOM_FORM);\r\n};\r\n","import * as actionsType from './actionsType';\r\n\r\nexport const addRoom = room => {\r\n    return {\r\n        type: actionsType.ADD_ROOM,\r\n        result: room\r\n    };\r\n};\r\n\r\nexport const deleteRoom = id => {\r\n    return {\r\n        type: actionsType.DELETE_ROOM,\r\n        result: id\r\n    };\r\n};\r\n\r\nexport const showListOfRooms = rooms => {\r\n    return {\r\n        type: actionsType.SHOW_LIST_OF_ROOMS,\r\n        result: rooms\r\n    };\r\n};\r\n\r\nexport const selectOneRoom = id => {\r\n    return {\r\n        type: actionsType.SELECT_ONE_ROOM,\r\n        result: id\r\n    };\r\n};\r\n\r\nexport const updateOneRoom = room => {\r\n    return {\r\n        type: actionsType.UPDATE_ONE_ROOM,\r\n        result: room\r\n    };\r\n};\r\n\r\nexport const clearRoomOne = () => ({\r\n    type: actionsType.CLEAR_ROOM_ONE\r\n});\r\n\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport './SchedulePage.scss';\r\n\r\nimport { showAllGroupsService } from '../../services/groupService';\r\nimport { getLessonsByGroupService } from '../../services/lessonService';\r\nimport { setLoadingService } from '../../services/loadingService';\r\nimport { getClassScheduleListService } from '../../services/classService';\r\n\r\nimport ScheduleLessonsList\r\n    from '../../components/ScheduleLessonsList/ScheduleLessonsList';\r\nimport Schedule from '../../components/Schedule/Schedule';\r\n\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { getScheduleItemsService } from '../../services/scheduleService';\r\nimport { showListOfRoomsService } from '../../services/roomService';\r\n\r\nconst SchedulePage = props => {\r\n    const { t } = useTranslation('common');\r\n\r\n    document.title = t('schedule.title');\r\n\r\n    const { groups, groupId } = props;\r\n\r\n    const itemGroupId = props.itemGroupId;\r\n\r\n    const scheduleItems = props.scheduleItems;\r\n\r\n    let lessons = props.lessons;\r\n\r\n    const isLoading = props.loading;\r\n\r\n    useEffect(() => {\r\n        setLoadingService(true);\r\n        getScheduleItemsService();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        showAllGroupsService();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (groupId) {\r\n            setLoadingService(true);\r\n            setLoadingService(true);\r\n            getLessonsByGroupService(groupId);\r\n        }\r\n    }, [groupId]);\r\n\r\n    useEffect(() => getClassScheduleListService(), []);\r\n\r\n    useEffect(() => showListOfRoomsService(), []);\r\n\r\n    return (\r\n        <section className=\"cards-container\">\r\n            <section className=\"flexbox card\">\r\n                {isLoading ? (\r\n                    <CircularProgress />\r\n                ) : (\r\n                    <Schedule\r\n                        classes={props.classScheduler}\r\n                        groups={groups}\r\n                        itemGroupId={itemGroupId}\r\n                        items={scheduleItems}\r\n                        translation={t}\r\n                        rooms={props.rooms}\r\n                    />\r\n                )}\r\n            </section>\r\n            <aside className=\"lesson-list card\">\r\n                {isLoading ? (\r\n                    <CircularProgress />\r\n                ) : (\r\n                    <ScheduleLessonsList\r\n                        items={scheduleItems}\r\n                        groups={groups}\r\n                        lessons={lessons}\r\n                        groupId={groupId}\r\n                        translation={t}\r\n                        classScheduler={props.classScheduler}\r\n                    />\r\n                )}\r\n            </aside>\r\n        </section>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    groups: state.groups.groups,\r\n    lessons: state.lesson.lessons,\r\n    groupId: state.lesson.groupId,\r\n    loading: state.loadingIndicator.loading,\r\n    scheduleItems: state.schedule.items,\r\n    itemGroupId: state.schedule.itemGroupId,\r\n    classScheduler: state.classActions.classScheduler,\r\n    rooms: state.rooms.rooms\r\n});\r\n\r\nexport default connect(mapStateToProps)(SchedulePage);\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport './dialog.scss';\r\n\r\nexport const ConfirmDialog = props => {\r\n    const { onClose, whatDelete, cardId, open } = props;\r\n\r\n    const handleClose = () => {\r\n        onClose(cardId);\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            disableBackdropClick={true}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"confirm-dialog-title\"\r\n            open={open}\r\n        >\r\n            <DialogTitle id=\"confirm-dialog-title\">\r\n                Do you want to <span className=\"delete-word\">delete</span> this{' '}\r\n                {whatDelete}?\r\n            </DialogTitle>\r\n            <div className=\"buttons-container\">\r\n                <Button\r\n                    className=\"dialog-button\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => onClose(cardId)}\r\n                >\r\n                    Yes\r\n                </Button>\r\n                <Button\r\n                    className=\"dialog-button\"\r\n                    variant=\"contained\"\r\n                    onClick={() => onClose('')}\r\n                >\r\n                    No\r\n                </Button>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nConfirmDialog.propTypes = {\r\n    onClose: PropTypes.func.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    selectedValue: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ConfirmDialog;\r\n","import React from \"react\";\r\n\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\n\r\nimport {renderFromHelper} from './error';\r\n\r\nconst renderSelectField = ({\r\n  input,\r\n  label,\r\n  name,\r\n  id,\r\n  meta: { touched, error },\r\n  children,\r\n  ...custom\r\n}) => (\r\n  <FormControl error={touched && !!error}>\r\n    <InputLabel htmlFor={id}>{label}</InputLabel>\r\n    <Select\r\n      native\r\n      {...input}\r\n      {...custom}\r\n      name={name}\r\n      id={id}\r\n    >\r\n      {children}\r\n    </Select>\r\n    {renderFromHelper({ touched, error })}\r\n  </FormControl>\r\n)\r\n\r\nexport default renderSelectField;\r\n","import React from \"react\";\r\n\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\n\r\nexport const renderFromHelper = ({ touched, error }) => {\r\n  if (!(touched && error)) {\r\n    return;\r\n  } else {\r\n    return <FormHelperText>{touched && error}</FormHelperText>;\r\n  }\r\n};\r\n","import React, { useEffect } from 'react';\r\n\r\nimport Card from '../../share/Card/Card';\r\n\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './LessonForm.scss';\r\n\r\nimport renderTextField from '../../share/renderedFields/input';\r\nimport renderSelectField from '../../share/renderedFields/select';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { LESSON_FORM } from '../../constants/reduxForms';\r\n\r\nimport {\r\n    required,\r\n    lessThanZero,\r\n    maxLengthValue\r\n} from '../../validation/validateFields';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { setUniqueErrorService } from '../../services/lessonService';\r\nimport { firstStringLetterCapital } from '../../helper/strings';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    openDialog: {\r\n        '&': {\r\n            textAlign: 'center',\r\n            margin: 'auto'\r\n        }\r\n    }\r\n}));\r\n\r\nlet LessonForm = props => {\r\n    const { t } = useTranslation('formElements');\r\n\r\n    const { handleSubmit, pristine, reset, submitting } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const lesson = props.lesson;\r\n    const lessonId = lesson.id;\r\n\r\n    const isUniqueError = props.isUniqueError;\r\n\r\n    const teachers = props.teachers;\r\n\r\n    const subjects = props.subjects;\r\n\r\n    const groupId = props.groupId;\r\n\r\n    useEffect(() => {\r\n        if (lessonId) {\r\n            initializeFormHandler(lesson);\r\n        } else {\r\n            props.initialize();\r\n        }\r\n    }, [lessonId]);\r\n\r\n    const initializeFormHandler = lesson => {\r\n        props.initialize({\r\n            lessonCardId: lesson.id,\r\n            teacher: lesson.teacher.id,\r\n            subject: lesson.subject.id,\r\n            type: lesson.lessonType,\r\n            hours: lesson.hours,\r\n            teacherForSite: lesson.teacherForSite,\r\n            subjectForSite: lesson.subjectForSite\r\n        });\r\n    };\r\n\r\n    const setValueToTeacherForSiteHandler = teacherId => {\r\n        const teacher = teachers.find(teacher => teacher.id === +teacherId);\r\n        props.change('teacherForSite', concatTeacherNameHandler(teacher));\r\n    };\r\n\r\n    const setValueToSubjectForSiteHandler = subjectId => {\r\n        const subject = subjects.find(subject => subject.id === +subjectId);\r\n        if (!subject) {\r\n            return props.change('subjectForSite', '');\r\n        }\r\n        const subjectName = subject.name;\r\n        props.change('subjectForSite', subjectName);\r\n    };\r\n\r\n    const concatTeacherNameHandler = teacher => {\r\n        if (!teacher) {\r\n            return '';\r\n        }\r\n        return teacher.surname + ' ' + teacher.name + ' ' + teacher.patronymic;\r\n    };\r\n\r\n    return (\r\n        <Card class=\"form-card\">\r\n            {groupId ? (\r\n                <h2 className=\"form-title under-line\">\r\n                    {lessonId ? t('edit.title') : t('create.title')}\r\n                    {t('lessony.label')}\r\n                </h2>\r\n            ) : (\r\n                ''\r\n            )}\r\n            {groupId ? (\r\n                <form onSubmit={handleSubmit}>\r\n                    <Field\r\n                        id=\"teacher\"\r\n                        name=\"teacher\"\r\n                        className=\"form-field\"\r\n                        component={renderSelectField}\r\n                        label={t('teacher.label')}\r\n                        {...(!isUniqueError ? {validate: [required]} : {error: isUniqueError})}\r\n                        onChange={event => {\r\n                            setValueToTeacherForSiteHandler(event.target.value);\r\n                            setUniqueErrorService(false);\r\n                        }}\r\n                    >\r\n                        <option value={''} />\r\n                        {teachers.map(teacher => (\r\n                            <option key={teacher.id} value={teacher.id}>\r\n                                {concatTeacherNameHandler(teacher)}\r\n                            </option>\r\n                        ))}\r\n                    </Field>\r\n                    <Field\r\n                        id=\"subject\"\r\n                        name=\"subject\"\r\n                        className=\"form-field\"\r\n                        component={renderSelectField}\r\n                        label={t('subject.label')}\r\n                        {...(!isUniqueError ? {validate: [required]} : {error: isUniqueError})}\r\n                        onChange={event => {\r\n                            setValueToSubjectForSiteHandler(event.target.value);\r\n                            setUniqueErrorService(false);\r\n                        }}\r\n                    >\r\n                        <option value={''} />\r\n                        {subjects.map(subject => (\r\n                            <option key={subject.id} value={subject.id}>\r\n                                {subject.name}\r\n                            </option>\r\n                        ))}\r\n                    </Field>\r\n                    <Field\r\n                        id=\"type\"\r\n                        name=\"type\"\r\n                        className=\"form-field\"\r\n                        component={renderSelectField}\r\n                        label={t('type.label')}\r\n                        {...(!isUniqueError ? {validate: [required]} : {error: isUniqueError})}\r\n                        onChange={() => {\r\n                            setUniqueErrorService(false);\r\n                        }}\r\n                    >\r\n                        <option value={''} />\r\n                        {props.lessonTypes.map((lessonType, index) => (\r\n                            <option value={lessonType} key={index}>\r\n                                {firstStringLetterCapital(\r\n                                    lessonType.toLowerCase()\r\n                                )}\r\n                            </option>\r\n                        ))}\r\n                    </Field>\r\n                    <Field\r\n                        id=\"hours\"\r\n                        name=\"hours\"\r\n                        className=\"form-field\"\r\n                        type=\"number\"\r\n                        component={renderTextField}\r\n                        label={t('hours.label')}\r\n                        validate={[required, lessThanZero]}\r\n                    />\r\n                    <Field\r\n                        id=\"teacherForSite\"\r\n                        name=\"teacherForSite\"\r\n                        className=\"form-field\"\r\n                        multiline\r\n                        rowsMax=\"1\"\r\n                        margin=\"normal\"\r\n                        component={renderTextField}\r\n                        label={t('teacher.label') + t('for.site.label')}\r\n                        validate={[required, maxLengthValue]}\r\n                    />\r\n                    <Field\r\n                        id=\"subjectForSite\"\r\n                        name=\"subjectForSite\"\r\n                        className=\"form-field\"\r\n                        multiline\r\n                        rowsMax=\"1\"\r\n                        margin=\"normal\"\r\n                        component={renderTextField}\r\n                        label={t('subject.label') + t('for.site.label')}\r\n                        validate={[required, maxLengthValue]}\r\n                    />\r\n                    <div className=\"form-buttons-container\">\r\n                        <Button\r\n                            className=\"buttons-style\"\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            disabled={pristine || submitting}\r\n                        >\r\n                            {t('save.button.label')}\r\n                        </Button>\r\n                        <Button\r\n                            className=\"buttons-style\"\r\n                            type=\"button\"\r\n                            variant=\"contained\"\r\n                            disabled={pristine || submitting}\r\n                            onClick={() => {\r\n                                reset();\r\n                                setUniqueErrorService(null);\r\n                                props.onSetSelectedCard(null);\r\n                            }}\r\n                        >\r\n                            {t('clear.button.label')}\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            ) : (\r\n                <div className={classes.openDialog}>\r\n                    <h2>{t('group.label') + t('not.selected.label')}</h2>\r\n                </div>\r\n            )}\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({ lesson: state.lesson.lesson });\r\n\r\nLessonForm = reduxForm({\r\n    form: LESSON_FORM\r\n})(LessonForm);\r\n\r\nexport default connect(mapStateToProps)(LessonForm);\r\n","import { store } from '../index';\r\nimport { reset } from 'redux-form';\r\nimport { TEACHERURL } from '../constants/axios';\r\nimport { handleSnackbarOpenService } from './snackbarService';\r\nimport { snackbarTypes } from '../constants/snackbarTypes';\r\nimport { snackbarMessage } from '../constants/snackbarMessages';\r\nimport { actionType } from '../constants/actionTypes';\r\nimport { cardType } from '../constants/cardType';\r\nimport { TEACHER_FORM } from '../constants/reduxForms';\r\n\r\nimport axios from '../helper/axios';\r\n\r\nimport {\r\n\tshowAllTeachers,\r\n\tdeleteTeacher,\r\n\tselectTeacherCard,\r\n\tupdateTeacherCard,\r\n\taddTeacher\r\n} from '../redux/actions';\r\n\r\nconst resetForm = form => {\r\n\tstore.dispatch(reset(form));\r\n};\r\n\r\nexport const showAllTeachersService = () => {\r\n\taxios\r\n\t\t.get(TEACHERURL)\r\n\t\t.then(response => {\r\n\t\t\tstore.dispatch(showAllTeachers(response.data));\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\thandleSnackbarOpenService(true, snackbarTypes.ERROR, 'Error');\r\n\t\t});\r\n};\r\n\r\nexport const createTeacherService = values => {\r\n\tvalues.wish = [];\r\n\taxios\r\n\t\t.post(TEACHERURL, values)\r\n\t\t.then(response => {\r\n\t\t\tstore.dispatch(addTeacher(response.data));\r\n\t\t\tresetForm(TEACHER_FORM);\r\n\t\t\thandleSnackbarOpenService(\r\n\t\t\t\ttrue,\r\n\t\t\t\tsnackbarTypes.SUCCESS,\r\n\t\t\t\tsnackbarMessage(cardType.TEACHER, actionType.CREATED)\r\n\t\t\t);\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\thandleSnackbarOpenService(true, snackbarTypes.ERROR, 'Error');\r\n\t\t});\r\n};\r\n\r\nconst cardTeacher = teacher => {\r\n\treturn {\r\n\t\tteacher: {\r\n\t\t\tid: teacher.id,\r\n\t\t\tname: teacher.name,\r\n\t\t\tsurname: teacher.surname,\r\n\t\t\tpatronymic: teacher.patronymic,\r\n\t\t\tposition: teacher.position\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const updateTeacherService = data => {\r\n\treturn axios\r\n\t\t.put(TEACHERURL, data.teacher)\r\n\t\t.then(response => {\r\n\t\t\tstore.dispatch(updateTeacherCard(response.data));\r\n\t\t\tselectTeacherCardService(null);\r\n\t\t\tresetForm(TEACHER_FORM);\r\n\t\t\thandleSnackbarOpenService(\r\n\t\t\t\ttrue,\r\n\t\t\t\tsnackbarTypes.SUCCESS,\r\n\t\t\t\tsnackbarMessage(cardType.TEACHER, actionType.UPDATED)\r\n\t\t\t);\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\thandleSnackbarOpenService(true, snackbarTypes.ERROR, 'Error');\r\n\t\t});\r\n};\r\n\r\nexport const handleTeacherService = values => {\r\n\tconst teacher = cardTeacher(values);\r\n\r\n\tif (values.id) {\r\n\t\tupdateTeacherService(teacher);\r\n\t} else {\r\n\t\tcreateTeacherService(values);\r\n\t}\r\n};\r\n\r\nexport const removeTeacherCardService = id => {\r\n\taxios\r\n\t\t.delete(TEACHERURL + `/${id}`)\r\n\t\t.then(response => {\r\n\t\t\tstore.dispatch(deleteTeacher(id));\r\n\t\t\thandleSnackbarOpenService(\r\n\t\t\t\ttrue,\r\n\t\t\t\tsnackbarTypes.SUCCESS,\r\n\t\t\t\tsnackbarMessage(cardType.TEACHER, actionType.DELETED)\r\n\t\t\t);\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\thandleSnackbarOpenService(true, snackbarTypes.ERROR, 'Error');\r\n\t\t});\r\n};\r\n\r\nexport const selectTeacherCardService = teacherCardId => {\r\n\tstore.dispatch(selectTeacherCard(teacherCardId));\r\n};\r\n","\r\nimport * as actionsType from './actionsType';\r\n\r\nexport const addTeacher = teacher => {\r\n\treturn {\r\n\t\ttype: actionsType.ADD_TEACHER,\r\n\t\tresult: teacher\r\n\t};\r\n};\r\n\r\nexport const deleteTeacher = id => {\r\n\treturn {\r\n\t\ttype: actionsType.DELETE_TEACHER,\r\n\t\tresult: id\r\n\t};\r\n};\r\n\r\nexport const selectTeacherCard = res => {\r\n\treturn {\r\n\t\ttype: actionsType.SELECT_TEACHER,\r\n\t\tresult: res\r\n\t};\r\n};\r\n\r\nexport const updateTeacherCard = res => {\r\n\treturn {\r\n\t\ttype: actionsType.UPDATE_TEACHER,\r\n\t\tresult: res\r\n\t};\r\n};\r\n\r\nexport const showAllTeachers = teachers => {\r\n\treturn {\r\n\t\ttype: actionsType.SHOW_ALL,\r\n\t\tresult: teachers\r\n\t};\r\n};\r\n","import axios from \"../helper/axios\";\r\nimport { store } from \"../index\";\r\nimport { reset } from \"redux-form\";\r\n\r\nimport { SUBJECTURL } from \"../constants/axios\";\r\nimport { SUBJECT_FORM } from '../constants/reduxForms'\r\n\r\nimport {showAllSubjects, deleteSubject, addSubject, selectSubject, updateSubject, clearSubject} from \"../redux/actions/index\";\r\n\r\nimport { handleSnackbarOpenService } from './snackbarService';\r\n\r\nimport { snackbarTypes } from '../constants/snackbarTypes';\r\nimport { snackbarMessage } from '../constants/snackbarMessages';\r\nimport { actionType } from '../constants/actionTypes';\r\nimport { cardType } from '../constants/cardType';\r\n\r\nexport const showAllSubjectsService = () => {\r\n    axios\r\n        .get(SUBJECTURL)\r\n        .then(response => {\r\n            store.dispatch(showAllSubjects(response.data));\r\n        })\r\n        .catch(error => {});\r\n};\r\n\r\nexport const removeSubjectCardService = (subjectId) => {\r\n    axios\r\n        .delete(SUBJECTURL + `/${subjectId}`)\r\n        .then(response => {\r\n            store.dispatch(deleteSubject(subjectId));\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.SUCCESS,\r\n                snackbarMessage(cardType.SUBJECT, actionType.DELETED)\r\n            );\r\n        })\r\n        .catch(err => {\r\n            handleSnackbarOpenService(true, snackbarTypes.ERROR, 'Error');\r\n        });\r\n};\r\n\r\nexport const selectSubjectService = (subjectId) => {\r\n    store.dispatch(selectSubject(subjectId));\r\n};\r\n\r\nexport const createSubjectService = (data) => {\r\n    axios\r\n        .post(SUBJECTURL, data)\r\n        .then(response => {\r\n            store.dispatch(addSubject(response.data));\r\n            resetForm(SUBJECT_FORM);\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.SUCCESS,\r\n                snackbarMessage(cardType.SUBJECT, actionType.CREATED)\r\n            );\r\n        })\r\n        .catch(error => {\r\n            handleSnackbarOpenService(true, snackbarTypes.ERROR, 'Error');\r\n        });\r\n};\r\n\r\nexport const updateSubjectService = data => {\r\n    return axios\r\n        .put(SUBJECTURL, data)\r\n        .then(response => {\r\n            store.dispatch(updateSubject(response.data));\r\n            selectSubjectService(null);\r\n            resetForm(SUBJECT_FORM);\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.SUCCESS,\r\n                snackbarMessage(cardType.SUBJECT, actionType.UPDATED)\r\n            );\r\n        })\r\n        .catch(err => {\r\n            handleSnackbarOpenService(true, snackbarTypes.ERROR, 'Error');\r\n        });\r\n};\r\n\r\nexport const handleSubjectService = (values) => {\r\n    if (values.id) {\r\n        updateSubjectService(values);\r\n    } else {\r\n        createSubjectService(values)\r\n    }\r\n};\r\n\r\nexport const clearSubjectService = () => {\r\n    store.dispatch(clearSubject());\r\n    resetForm(SUBJECT_FORM);\r\n};\r\n\r\nconst resetForm = (form) => {\r\n    store.dispatch(reset(form));\r\n};\r\n","import * as actionTypes from './actionsType';\r\n\r\nexport const showAllSubjects = (res) => {\r\n    return {\r\n        type: actionTypes.SHOW_ALL_SUBJECTS,\r\n        result: res\r\n    }\r\n};\r\n\r\nexport const addSubject = (res) => {\r\n    return {\r\n        type: actionTypes.ADD_SUBJECT,\r\n        result: res\r\n    }\r\n};\r\n\r\nexport const deleteSubject = (res) => {\r\n    return {\r\n        type: actionTypes.DELETE_SUBJECT,\r\n        result: res\r\n    }\r\n};\r\n\r\nexport const selectSubject = (res) => {\r\n    return {\r\n        type: actionTypes.SELECT_SUBJECT,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const updateSubject = (res) => {\r\n    return {\r\n        type: actionTypes.UPDATE_SUBJECT,\r\n        result: res\r\n    };\r\n};\r\n\r\nexport const clearSubject = () => ({\r\n    type: actionTypes.CLEAR_SUBJECT\r\n});\r\n","import React from 'react';\r\n\r\nimport Card from '../../share/Card/Card';\r\n\r\nimport { FaEdit } from 'react-icons/fa';\r\nimport { MdDelete } from 'react-icons/md';\r\n\r\nconst LessonsList = props => {\r\n    const lessons = props.lessons;\r\n\r\n    const t = props.translation;\r\n\r\n    const firstStringLetterCapitalHandle = str => {\r\n        return str.replace(/^\\w/, c => c.toUpperCase());\r\n    };\r\n\r\n    const everyFirstLetterCapitalHandle = str => {\r\n        return str\r\n            .toLowerCase()\r\n            .split(' ')\r\n            .map(s => s.charAt(0).toUpperCase() + s.substring(1))\r\n            .join(' ');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <section className=\"container-flex-wrap\">\r\n                {lessons.map(lesson => (\r\n                    <Card class=\"done-card\" key={lesson.id}>\r\n                        <div className=\"cards-btns\">\r\n                            <FaEdit\r\n                                title={t('delete.lesson')}\r\n                                className=\"svg-btn\"\r\n                                onClick={() => props.onSelectLesson(lesson.id)}\r\n                            />\r\n                            <MdDelete\r\n                                title={t('edit.lesson')}\r\n                                className=\"svg-btn\"\r\n                                onClick={() => props.onClickOpen(lesson.id)}\r\n                            />\r\n                        </div>\r\n                        <p>\r\n                            {firstStringLetterCapitalHandle(\r\n                                lesson.subjectForSite\r\n                            )}\r\n                            (<b>{lesson.lessonType}</b>)\r\n                        </p>\r\n                        <p>\r\n                            {everyFirstLetterCapitalHandle(\r\n                                lesson.teacherForSite\r\n                            )}\r\n                        </p>\r\n                        <p>\r\n                            {' '}\r\n                            <b>{lesson.hours}</b>{' '}\r\n                            {t('formElements:hours.label')}\r\n                        </p>\r\n                    </Card>\r\n                ))}\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LessonsList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Card from '../../share/Card/Card';\r\nimport ConfirmDialog from '../../share/modals/dialog';\r\n\r\nimport LessonForm from '../../components/LessonForm/LessonForm';\r\nimport {\r\n    getLessonsByGroupService, getLessonTypesService,\r\n    handleLessonCardService,\r\n    removeLessonCardService,\r\n    selectGroupIdService,\r\n    selectLessonCardService\r\n} from '../../services/lessonService';\r\nimport { showAllTeachersService } from '../../services/teacherService';\r\nimport { showAllGroupsService } from '../../services/groupService';\r\nimport { setLoadingService } from '../../services/loadingService';\r\nimport { showAllSubjectsService } from '../../services/subjectService';\r\n\r\nimport './LessonPage.scss';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { styled } from '@material-ui/core/styles';\r\n\r\nimport { cardType } from '../../constants/cardType';\r\nimport { useTranslation } from 'react-i18next';\r\nimport LessonsList from '../../components/LessonsList/LessonsList';\r\n\r\nconst GroupField = styled(TextField)({\r\n    display: 'inline-block',\r\n    width: '150px'\r\n});\r\n\r\nconst LessonPage = props => {\r\n    const { t } = useTranslation('common');\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [lessonId, setLessonId] = React.useState(-1);\r\n\r\n    const teachers = props.teachers;\r\n\r\n    const isUniqueError = props.isUniqueError;\r\n\r\n    const lessons = props.lessons;\r\n    const lessonLength = lessons.length;\r\n\r\n    const isLoading = props.loading;\r\n\r\n    const { groups, groupId } = props;\r\n\r\n    const subjects = props.subjects;\r\n\r\n    document.title = t('lesson.management.title');\r\n\r\n    useEffect(() => {\r\n        if (groupId) {\r\n            setLoadingService(true);\r\n            getLessonsByGroupService(groupId);\r\n        }\r\n    }, [groupId]);\r\n    useEffect(() => showAllTeachersService(), []);\r\n    useEffect(() => getLessonTypesService(), []);\r\n    useEffect(() => showAllGroupsService(), []);\r\n    useEffect(() => {\r\n        showAllSubjectsService();\r\n    }, []);\r\n\r\n    const createLessonCardHandler = card => {\r\n        if (Object.keys(card).length === 0 && card.constructor === Object) {\r\n            return;\r\n        }\r\n        handleLessonCardService(card, groupId);\r\n    };\r\n\r\n    const selectLessonCardHandler = lessonCardId => {\r\n        selectLessonCardService(lessonCardId);\r\n    };\r\n\r\n    const groupTitleHandle = (groups, groupId) => {\r\n        return groups.find(group => group.id === +groupId).title;\r\n    };\r\n\r\n    const groupHandle = (groups, groupId) => {\r\n        return groups.find(group => group.id === +groupId);\r\n    };\r\n\r\n    const handleClickOpen = lessonId => {\r\n        setLessonId(lessonId);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = lessonId => {\r\n        setOpen(false);\r\n        if (!lessonId) {\r\n            return;\r\n        }\r\n        removeLessonCardService(lessonId);\r\n    };\r\n\r\n    const defaultProps = {\r\n        options: groups,\r\n        getOptionLabel: option => (option ? option.title : '')\r\n    };\r\n    const handleGroupSelect = group => {\r\n        if (group) {\r\n            selectGroupIdService(group.id);\r\n        }\r\n    };\r\n    const groupFinderHandle = groupId => {\r\n        if (groupId) {\r\n            return groups.find(group => group.id === groupId);\r\n        } else {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    let cardsContainer = (\r\n        <>\r\n            {lessonLength > 0 ? (\r\n                <LessonsList\r\n                    lessons={lessons}\r\n                    onClickOpen={handleClickOpen}\r\n                    onSelectLesson={selectLessonCardHandler}\r\n                    translation={t}\r\n                />\r\n            ) : (\r\n                <section className=\"centered-container\">\r\n                    <h2>\r\n                        {groupHandle(groups, groupId)\r\n                            ? t('lesson.nolessonforgroup.label') +\r\n                              groupTitleHandle(groups, groupId)\r\n                            : ''}\r\n                    </h2>\r\n                </section>\r\n            )}\r\n        </>\r\n    );\r\n\r\n    if (isLoading) {\r\n        cardsContainer = (\r\n            <section className=\"centered-container\">\r\n                <CircularProgress />\r\n            </section>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card class=\"card-title\">\r\n                <ConfirmDialog\r\n                    selectedValue={''}\r\n                    cardId={lessonId}\r\n                    whatDelete={cardType.LESSON.toLowerCase()}\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                />\r\n                <div className=\"lesson-page-title\">\r\n                    <h1 className=\"lesson-page-h\">\r\n                        {t('lesson.forgroup.title')}\r\n                    </h1>\r\n                    <Autocomplete\r\n                        {...defaultProps}\r\n                        id=\"group\"\r\n                        clearOnEscape\r\n                        openOnFocus\r\n                        value={groupFinderHandle(groupId)}\r\n                        onChange={(event, newValue) => {\r\n                            handleGroupSelect(newValue);\r\n                        }}\r\n                        renderInput={params => (\r\n                            <GroupField\r\n                                {...params}\r\n                                label={t('formElements:group.label')}\r\n                                margin=\"normal\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n            </Card>\r\n            <div className=\"cards-container\">\r\n                <LessonForm\r\n                    lessonTypes={props.lessonTypes}\r\n                    isUniqueError={isUniqueError}\r\n                    groupId={groupId}\r\n                    subjects={subjects}\r\n                    teachers={teachers}\r\n                    onSubmit={createLessonCardHandler}\r\n                    onSetSelectedCard={selectLessonCardHandler}\r\n                />\r\n                {cardsContainer}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\nconst mapStateToProps = state => ({\r\n    lessons: state.lesson.lessons,\r\n    lessonTypes: state.lesson.lessonTypes,\r\n    groupId: state.lesson.groupId,\r\n    isUniqueError: state.lesson.uniqueError,\r\n    teachers: state.teachers.teachers,\r\n    groups: state.groups.groups,\r\n    subjects: state.subjects.subjects,\r\n    loading: state.loadingIndicator.loading,\r\n});\r\n\r\nexport default connect(mapStateToProps)(LessonPage);\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nimport renderTextField from '../../share/renderedFields/input';\r\nimport { required } from '../../validation/validateFields';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport { styled } from '@material-ui/core/styles';\r\n\r\nimport Card from '../../share/Card/Card';\r\n\r\nimport { TEACHER_FORM } from '../../constants/reduxForms';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport './AddTeacherForm.scss';\r\n\r\nconst CreateBtn = styled(Button)({\r\n\tmarginTop: '20px'\r\n});\r\n\r\nlet AddTeacher = props => {\r\n\tconst { t } = useTranslation('formElements');\r\n\tconst { handleSubmit, pristine, submitting, reset } = props;\r\n\r\n\tconst teacher = props.teacher;\r\n\tconst teacherId = teacher.id;\r\n\r\n\tuseEffect(() => {\r\n\t\tif (teacherId) {\r\n\t\t\tinitializeFormHandler(teacher);\r\n\t\t} else {\r\n\t\t\tprops.initialize();\r\n\t\t}\r\n\t}, [teacherId]);\r\n\r\n\tconst initializeFormHandler = teacher => {\r\n\t\tprops.initialize({\r\n\t\t\tid: teacher.id,\r\n\t\t\tsurname: teacher.surname,\r\n\t\t\tname: teacher.name,\r\n\t\t\tpatronymic: teacher.patronymic,\r\n\t\t\tposition: teacher.position\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Card class='form-card teacher-form'>\r\n\t\t\t<form className='createTeacherForm w-100' onSubmit={handleSubmit}>\r\n\t\t\t\t<h2 className='form-title'>\r\n\t\t\t\t\t{teacherId ? t('edit.title') : t('create.title')}{' '}\r\n\t\t\t\t\t{t('teachery.label')}\r\n\t\t\t\t</h2>\r\n\r\n\t\t\t\t<Field\r\n\t\t\t\t\tclassName='form-field'\r\n\t\t\t\t\tname='surname'\r\n\t\t\t\t\tid='surname'\r\n\t\t\t\t\tcomponent={renderTextField}\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tplaceholder={t('teachery.surname')}\r\n\t\t\t\t\tlabel={t('teachery.surname')}\r\n\t\t\t\t\tvalidate={[required]}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<Field\r\n\t\t\t\t\tclassName='form-field'\r\n\t\t\t\t\tname='name'\r\n\t\t\t\t\tid='name'\r\n\t\t\t\t\tcomponent={renderTextField}\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tplaceholder={t('teachery.firstName')}\r\n\t\t\t\t\tlabel={t('teachery.firstName')}\r\n\t\t\t\t\tvalidate={[required]}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<Field\r\n\t\t\t\t\tclassName='form-field'\r\n\t\t\t\t\tname='patronymic'\r\n\t\t\t\t\tid='patronymic'\r\n\t\t\t\t\tcomponent={renderTextField}\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tplaceholder={t('teachery.patronymic')}\r\n\t\t\t\t\tlabel={t('teachery.patronymic')}\r\n\t\t\t\t\tvalidate={[required]}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<Field\r\n\t\t\t\t\tclassName='form-field'\r\n\t\t\t\t\tname='position'\r\n\t\t\t\t\tid='position'\r\n\t\t\t\t\tcomponent={renderTextField}\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tplaceholder={t('teachery.position')}\r\n\t\t\t\t\tlabel={t('teachery.position')}\r\n\t\t\t\t\tvalidate={[required]}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<div className='form-buttons-container'>\r\n\t\t\t\t\t<CreateBtn\r\n\t\t\t\t\t\tclassName='buttons-style'\r\n\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\tcolor='primary'\r\n\t\t\t\t\t\tdisabled={pristine || submitting}\r\n\t\t\t\t\t\ttype='submit'>\r\n\t\t\t\t\t\t{t('save.button.label')}\r\n\t\t\t\t\t</CreateBtn>\r\n\t\t\t\t\t<CreateBtn\r\n\t\t\t\t\t\tclassName='buttons-style'\r\n\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\tdisabled={pristine || submitting}\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\treset();\r\n\t\t\t\t\t\t\tprops.onSetSelectedCard(null);\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t{t('clear.button.label')}\r\n\t\t\t\t\t</CreateBtn>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = state => ({ teacher: state.teachers.teacher });\r\n\r\nAddTeacher = reduxForm({\r\n\tform: TEACHER_FORM\r\n})(AddTeacher);\r\n\r\nexport default connect(mapStateToProps)(AddTeacher);\r\n","import React, { useEffect } from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { required, uniqWish } from '../../validation/validateFields';\r\nimport Button from '@material-ui/core/Button';\r\nimport renderTextField from '../../share/renderedFields/input';\r\nimport renderSelectField from '../../share/renderedFields/select';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst WishFrom = props => {\r\n    const { t } = useTranslation('formElements');\r\n\r\n    const {\r\n        teacherWishId,\r\n        handleSubmit,\r\n        classScheduler,\r\n        pristine,\r\n        submitting,\r\n        reset\r\n    } = props;\r\n\r\n    let class_on_day = [];\r\n\r\n    if (classScheduler.length > 0) {\r\n        classScheduler.map(classSchedulerOne => {\r\n            class_on_day.push(classSchedulerOne.class_name);\r\n        });\r\n    }\r\n\r\n    const days_of_week = [\r\n        'Monday',\r\n        'Tuesday',\r\n        'Wedneday',\r\n        'Thursday',\r\n        'Friday',\r\n        'Saturday',\r\n        'Sunday'\r\n    ];\r\n\r\n    useEffect(() => {\r\n        // let defWishes = {};\r\n\r\n        // const teacterWishList = [];\r\n        // if (teachers.length > 1) {\r\n        //     for (let i = 0; i < class_on_day.length - 1; i++) {\r\n        //         let one = teacterWishList.filter(\r\n        //             wish => wish.class_id === class_on_day[i]\r\n        //         );\r\n        //         if (one[0] === undefined) {\r\n        //             defWishes[`class_number${class_on_day[i]}`] = 'all_ok';\r\n        //         } else {\r\n        //             defWishes[`class_number${class_on_day[i]}`] = one[0];\r\n        //         }\r\n        //     }\r\n        // } else {\r\n        //     for (let i = 0; i < class_on_day.length - 1; i++) {\r\n        //         defWishes[`class_number${class_on_day[i]}`] = 'all_ok';\r\n\r\n        //         props.change(`class_number${class_on_day[i]}`, 'all_ok');\r\n        //     }\r\n        // }\r\n\r\n        for (let i = 0; i <= class_on_day.length - 1; i++) {\r\n            props.change(`class_number${class_on_day[i]}`, 'ok');\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        props.change('teacher_id', teacherWishId);\r\n    }, [props.teacherWishId]);\r\n\r\n    const initializeTeacherId = () => {\r\n        props.initialize({ teacher_id: teacherWishId });\r\n\r\n        for (let i = 0; i <= class_on_day.length - 1; i++) {\r\n            props.change(`class_number${class_on_day[i]}`, 'ok');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form className=\"wish-form\" onSubmit={handleSubmit}>\r\n            <Field\r\n                id=\"teacher_id\"\r\n                name=\"teacher_id\"\r\n                component={renderTextField}\r\n                type=\"text\"\r\n            />\r\n\r\n            <Field\r\n                name=\"day_of_week\"\r\n                className=\"week-days\"\r\n                component={renderSelectField}\r\n                label={t('teachery.wish.day')}\r\n                type=\"text\"\r\n                validate={[required]}\r\n            >\r\n                <option />\r\n                {days_of_week.map((day_of_week, index) => (\r\n                    <option key={index} value={`${day_of_week}`}>\r\n                        {day_of_week}\r\n                    </option>\r\n                ))}\r\n            </Field>\r\n            <Field\r\n                name=\"evenOdd\"\r\n                className=\"evenOdd\"\r\n                component={renderSelectField}\r\n                label=\"evenOdd\"\r\n                type=\"text\"\r\n                validate={[required]}\r\n            >\r\n                <option />\r\n                <option value={'Even'}>Even</option>\r\n                <option value={'Odd'}>Odd</option>\r\n            </Field>\r\n\r\n            {class_on_day.map(class_number => (\r\n                <Field\r\n                    key={class_number}\r\n                    name={`class_number${class_number}`}\r\n                    component={renderSelectField}\r\n                    label={`${t(\r\n                        'teachery.wish.classNumbaer'\r\n                    )}: ${class_number}`}\r\n                >\r\n                    <option />\r\n                    <option value={'ok'}>Ok</option>\r\n                    <option value={'good'}>+</option>\r\n                    <option value={'bad'}>-</option>\r\n                </Field>\r\n            ))}\r\n            <div className=\"form-buttons-container wish-margin-top\">\r\n                <Button\r\n                    className=\"buttons-style\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    disabled={pristine || submitting}\r\n                >\r\n                    {t('save.button.label')}\r\n                </Button>\r\n                <Button\r\n                    className=\"buttons-style\"\r\n                    variant=\"contained\"\r\n                    type=\"button\"\r\n                    disabled={pristine || submitting}\r\n                    onClick={() => {\r\n                        reset();\r\n                        initializeTeacherId();\r\n                    }}\r\n                >\r\n                    {t('clear.button.label')}\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default reduxForm({\r\n    form: 'teacherWish'\r\n})(WishFrom);\r\n","import React, { useEffect, Fragment } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Card from '../../share/Card/Card';\r\nimport WishForm from '../../components/AddTeacherWishForm/WishForm';\r\n\r\nimport {\r\n    allTeachersWishesService,\r\n    createTeachersWishService,\r\n    removeTeacherWishService\r\n} from '../../services/teacherWishService';\r\n\r\nimport { getClassScheduleListService } from '../../services/classService';\r\n\r\nimport { MdDelete } from 'react-icons/md';\r\n\r\nimport './WishModal.scss';\r\n\r\nconst WishModal = props => {\r\n    const {\r\n        onCloseWish,\r\n        teacherWishId,\r\n        classScheduler,\r\n        teacherWishes,\r\n        openWish\r\n    } = props;\r\n\r\n    useEffect(() => allTeachersWishesService(), []);\r\n    useEffect(() => getClassScheduleListService(), []);\r\n\r\n    let class_names = [];\r\n\r\n    if (classScheduler.length - 1 > 0) {\r\n        classScheduler.map(classSchedulerOne => {\r\n            class_names.push(classSchedulerOne.class_name);\r\n        });\r\n    }\r\n\r\n    const teacherWishSubmit = values => {\r\n        let wish = {\r\n            id: Math.floor(Math.random() * 10001),\r\n            teacher_id: values.teacher_id,\r\n            teacherWishesList: [\r\n                {\r\n                    day_of_week: values.day_of_week,\r\n                    evenOdd: values.evenOdd,\r\n                    class_status: []\r\n                }\r\n            ]\r\n        };\r\n\r\n        for (let i = 0; i <= classScheduler.length - 1; i++) {\r\n            let newWish = {\r\n                class_id: class_names[i],\r\n                status: values[`class_number${class_names[i]}`]\r\n            };\r\n\r\n            wish.teacherWishesList[0].class_status.push(newWish);\r\n        }\r\n\r\n        createTeachersWishService(wish);\r\n    };\r\n\r\n    const removeWish = id => {\r\n        removeTeacherWishService(id);\r\n    };\r\n\r\n    const teacherWishOne = teacherWishes.filter(teacherWish => {\r\n        return teacherWishId === +teacherWish.teacher_id;\r\n    });\r\n\r\n    const handleClose = () => {\r\n        onCloseWish(teacherWishId);\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} open={openWish} maxWidth=\"lg\">\r\n            <h2 className=\"modal-teacher-title\">\r\n                Teacher wish for class schedule.\r\n            </h2>\r\n\r\n            <div className=\"cards-container\">\r\n                <Card class=\"wish-modal\">\r\n                    <WishForm\r\n                        teacherWishId={teacherWishId}\r\n                        classScheduler={classScheduler}\r\n                        onSubmit={teacherWishSubmit}\r\n                    />\r\n                </Card>\r\n                <section className=\"container-flex-wrap\">\r\n                    {teacherWishId !== undefined ? (\r\n                        <div className=\"wish-card\">\r\n                            {teacherWishOne.length > 0 ? (\r\n                                teacherWishOne.map((teacherWish, index) => (\r\n                                    <Card class=\"day-week-status\" key={index}>\r\n                                        <div className=\"cards-btns\">\r\n                                            <MdDelete\r\n                                                className=\"svg-btn delete-btn\"\r\n                                                onClick={() => {\r\n                                                    removeWish(teacherWish.id);\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        {teacherWish.teacherWishesList.map(\r\n                                            (arrayWish, index) => (\r\n                                                <Fragment key={index}>\r\n                                                    <h3 className=\"wish-title-day\">\r\n                                                        {arrayWish.day_of_week}\r\n                                                    </h3>\r\n                                                    <p className=\"wish-title-week\">\r\n                                                        Week:\r\n                                                        {arrayWish.evenOdd}\r\n                                                    </p>\r\n                                                    {arrayWish.class_status.map(\r\n                                                        (\r\n                                                            class_status,\r\n                                                            index\r\n                                                        ) => (\r\n                                                            <div\r\n                                                                className=\"class-status-block\"\r\n                                                                key={index}\r\n                                                            >\r\n                                                                <span>\r\n                                                                    class{' '}\r\n                                                                    {\r\n                                                                        class_status.class_id\r\n                                                                    }\r\n                                                                </span>\r\n                                                                :{' '}\r\n                                                                <span>\r\n                                                                    <span\r\n                                                                        className={`_${class_status.status}`}\r\n                                                                    >\r\n                                                                        {\r\n                                                                            class_status.status\r\n                                                                        }\r\n                                                                    </span>\r\n                                                                </span>\r\n                                                            </div>\r\n                                                        )\r\n                                                    )}\r\n                                                </Fragment>\r\n                                            )\r\n                                        )}\r\n                                    </Card>\r\n                                ))\r\n                            ) : (\r\n                                <p className=\"teacher-without-wishes\">\r\n                                    This Teacher dont have any wish for schedule\r\n                                </p>\r\n                            )}\r\n                        </div>\r\n                    ) : (\r\n                        <Card class=\"teacher-without-wishes\">\r\n                            <p>Some problem with Teacher id</p>\r\n                        </Card>\r\n                    )}\r\n                </section>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nWishModal.propTypes = {\r\n    onCloseWish: PropTypes.func.isRequired,\r\n    openWish: PropTypes.bool.isRequired,\r\n    teacherWishId: PropTypes.number.isRequired\r\n};\r\n\r\nexport default WishModal;\r\n","import { store } from '../index';\r\n\r\nimport teachersWish from '../containers/TeachersList/teacherWishes.json';\r\n\r\nimport { showAllWishes, deleteWish, addWish } from '../redux/actions';\r\n\r\nexport const allTeachersWishesService = () => {\r\n    store.dispatch(showAllWishes(teachersWish));\r\n};\r\n\r\nexport const createTeachersWishService = values => {\r\n    store.dispatch(addWish(values));\r\n};\r\n\r\nexport const removeTeacherWishService = id => {\r\n    store.dispatch(deleteWish(id));\r\n};\r\n","import * as actionsType from './actionsType';\r\n\r\nexport const addWish = wish => {\r\n    return {\r\n        type: actionsType.ADD_WISH,\r\n        result: wish\r\n    };\r\n};\r\n\r\nexport const deleteWish = id => {\r\n    return {\r\n        type: actionsType.DELETE_WISH,\r\n        result: id\r\n    };\r\n};\r\n\r\nexport const showAllWishes = wishes => {\r\n    return {\r\n        type: actionsType.SHOW_ALL_WISH,\r\n        result: wishes\r\n    };\r\n};\r\n","export const search = (items, term, arr) => {\r\n\r\n    if (term.length === 0) {\r\n        return items;\r\n    }\r\n\r\n    return items.filter((item) => {\r\n        let flag = false;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (String(item[arr[i]]).toLowerCase().indexOf(term.toLowerCase()) > -1) {\r\n                flag = true;\r\n            }\r\n        }\r\n        return flag;\r\n    });\r\n}","import React, {useState} from \"react\";\r\nimport {FaSearch} from 'react-icons/fa';\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nimport Card from \"../../share/Card/Card\";\r\nimport './SearchPanel.scss'\r\n\r\nconst SearchPanel = ({SearchChange}) => {\r\n    const { t } = useTranslation('formElements');\r\n    const [term, setTerm] = useState('');\r\n\r\n    const onSearchChange = (e) => {\r\n        const term = e.target.value;\r\n        setTerm(term);\r\n        SearchChange(term)\r\n    };\r\n\r\n    return (\r\n            <Card class=\"search-group\">\r\n                <TextField\r\n                    className='form-field'\r\n                    label={<FaSearch />}\r\n                    placeholder={t('type.to.search')}\r\n                    value={term}\r\n                    onChange={onSearchChange}/>\r\n            </Card>)\r\n};\r\n\r\n\r\nexport default SearchPanel;\r\n","import React from \"react\";\r\nimport { FaSadCry } from 'react-icons/fa';\r\nimport './NotFound.scss'\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst NotFound = ({name}) => {\r\n    const {t} = useTranslation('formElements');\r\n\r\n    return (\r\n        <div className=\"not-found__wrapper\">\r\n            <div>\r\n                <FaSadCry className=\"not-found__icon\"/>\r\n            </div>\r\n            <p className=\"not-found__text\">{t('there.is.no')} {name}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotFound;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport AddTeacherForm from '../../components/AddTeacherForm/AddTeacherForm';\r\nimport Card from '../../share/Card/Card';\r\nimport WishModal from '../WishModal/WishModal';\r\n\r\nimport ConfirmDialog from '../../share/modals/dialog';\r\nimport { cardType } from '../../constants/cardType';\r\n\r\nimport { FaEdit } from 'react-icons/fa';\r\nimport { MdDelete } from 'react-icons/md';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport './TeachersList.scss';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    showAllTeachersService,\r\n    handleTeacherService,\r\n    selectTeacherCardService,\r\n    removeTeacherCardService\r\n} from '../../services/teacherService';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\nimport { search } from '../../helper/search';\r\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\r\nimport NotFound from '../../share/NotFound/NotFound';\r\n\r\nconst TeacherList = props => {\r\n    const { t } = useTranslation('common');\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [teacherCardId, setTeacherId] = useState();\r\n    const [term, setTerm] = useState('');\r\n\r\n    useEffect(() => showAllTeachersService(), []);\r\n\r\n    const teachers = props.teachers;\r\n    const teacherLengs = teachers.length;\r\n\r\n    const teacherSubmit = values => {\r\n        handleTeacherService(values);\r\n    };\r\n\r\n    const selectTeacherCard = teacherCardId => {\r\n        selectTeacherCardService(teacherCardId);\r\n    };\r\n\r\n    const removeTeacherCard = id => {\r\n        removeTeacherCardService(id);\r\n    };\r\n\r\n    const handleClickOpen = teacherCardId => {\r\n        setTeacherId(teacherCardId);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = teacherCardId => {\r\n        setOpen(false);\r\n        if (!teacherCardId) {\r\n            return;\r\n        }\r\n        removeTeacherCard(teacherCardId);\r\n    };\r\n\r\n    const [openWish, setOpenWish] = useState(false);\r\n    const [teacherWishId, setTeacherWishId] = useState(0);\r\n\r\n    const handleClickOpenWish = wishId => {\r\n        setTeacherWishId(wishId);\r\n        setOpenWish(true);\r\n    };\r\n\r\n    const handleCloseWish = value => {\r\n        setOpenWish(false);\r\n    };\r\n\r\n    const visibleItems = search(teachers, term, ['name', 'surname', 'patronymic']);\r\n\r\n    const SearchChange = term => {\r\n        setTerm(term);\r\n    };\r\n\r\n    const handleToUpperCase = str => {\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n    };\r\n\r\n    return (\r\n        <div className=\"cards-container\">\r\n            <ConfirmDialog\r\n                selectedValue={''}\r\n                cardId={teacherCardId}\r\n                whatDelete={cardType.TEACHER}\r\n                open={open}\r\n                onClose={handleClose}\r\n            />\r\n\r\n            <WishModal\r\n                openWish={openWish}\r\n                onCloseWish={handleCloseWish}\r\n                teacherWishId={teacherWishId}\r\n                teacherWishes={props.teacherWishes}\r\n                classScheduler={props.classScheduler}\r\n            />\r\n\r\n            <aside className=\"search-list__panel\">\r\n                <SearchPanel SearchChange={SearchChange} />\r\n                <AddTeacherForm\r\n                    teachers={teachers}\r\n                    onSubmit={teacherSubmit}\r\n                    onSetSelectedCard={selectTeacherCard}\r\n                />\r\n            </aside>\r\n\r\n            <section className=\"container-flex-wrap\">\r\n                {visibleItems.length === 0 && (\r\n                    <NotFound name={t('teacher.label')} />\r\n                )}\r\n                {teacherLengs > 0 ? (\r\n                    visibleItems.map((teacher, index) => (\r\n                        <Card\r\n                            key={index}\r\n                            {...teacher}\r\n                            class=\"teacher-card done-card\"\r\n                        >\r\n                            <div className=\"cards-btns\">\r\n                                <FaEdit\r\n                                    className=\"svg-btn edit-btn\"\r\n                                    onClick={() =>\r\n                                        selectTeacherCard(teacher.id)\r\n                                    }\r\n                                />\r\n                                <MdDelete\r\n                                    className=\"svg-btn delete-btn\"\r\n                                    onClick={() => handleClickOpen(teacher.id)}\r\n                                />\r\n                            </div>\r\n\r\n                            <p className=\"teacher-subtitle\">\r\n                                {t('teacher.card.fullName')}\r\n                            </p>\r\n                            <h2 className=\"teacher-card-name\">\r\n                                {handleToUpperCase(teacher.surname)}{' '}\r\n                                {handleToUpperCase(teacher.name)}{' '}\r\n                                {handleToUpperCase(teacher.patronymic)}\r\n                            </h2>\r\n                            <p className=\"teacher-subtitle\">\r\n                                {t('teacher.card.position')}\r\n                            </p>\r\n                            <p className=\"teacher-card-title\">\r\n                                {teacher.position}\r\n                            </p>\r\n                            <div className=\"teacher-wish-block\">\r\n                                <Button\r\n                                    className=\"wish-button\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={() =>\r\n                                        handleClickOpenWish(teacher.id)\r\n                                    }\r\n                                >\r\n                                    {t('teacher.card.wish')}\r\n                                </Button>\r\n                            </div>\r\n                        </Card>\r\n                    ))\r\n                ) : (\r\n                    <h2>{t('teacher.card.noCards')}</h2>\r\n                )}\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    teachers: state.teachers.teachers,\r\n    classScheduler: state.classActions.classScheduler,\r\n    teacherWishes: state.teachersWish.wishes\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TeacherList);\r\n","import React from \"react\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport * as moment from \"moment\";\r\nimport { TimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\n\r\nconst renderTimePicker = ({\r\n  label,\r\n  input: { value, ...inputProps },\r\n  meta: { touched, invalid, error },\r\n  ...custom\r\n}) => {\r\n  return (\r\n    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n      <TimePicker\r\n        clearable\r\n        ampm={false}\r\n        value={value ? moment(value, \"HH:mm\").toDate() : null}\r\n        error={touched && invalid}\r\n        helperText={touched && error ? touched && error : label}\r\n        format=\"HH:mm\"\r\n        {...inputProps}\r\n        {...custom}\r\n      />\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n};\r\n\r\nexport default renderTimePicker;\r\n","import React, { useEffect } from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nimport Card from '../../share/Card/Card';\r\nimport { connect } from 'react-redux';\r\n\r\nimport '../LessonForm/LessonForm';\r\nimport './ClassForm.scss';\r\n\r\nimport renderTextField from '../../share/renderedFields/input';\r\nimport renderTimePicker from '../../share/renderedFields/time';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport {\r\n    required,\r\n    greaterThanTime,\r\n    lessThanTime,\r\n    uniqueClassName,\r\n    timeIntersect\r\n} from '../../validation/validateFields';\r\n\r\nimport { CLASS_FORM } from '../../constants/reduxForms';\r\nimport * as moment from 'moment';\r\nimport { CLASS_DURATION } from '../../constants/common';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    rootInput: {\r\n        width: '20em'\r\n    }\r\n}));\r\n\r\nlet ClassFormFunc = props => {\r\n    const { t } = useTranslation('formElements');\r\n    const { handleSubmit, pristine, onReset, submitting } = props;\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (props.classScheduleOne) {\r\n            if (props.classScheduleOne.id) {\r\n                props.initialize({\r\n                    class_name: props.classScheduleOne.class_name,\r\n                    startTime: props.classScheduleOne.startTime,\r\n                    endTime: props.classScheduleOne.endTime,\r\n                    id: props.classScheduleOne.id\r\n                });\r\n            } else {\r\n                props.initialize();\r\n            }\r\n        }\r\n    }, [props.classScheduleOne]);\r\n\r\n    const setEndTime = startTime =>\r\n        props.change(\r\n            'endTime',\r\n            moment(startTime, 'HH:mm')\r\n                .add(CLASS_DURATION, 'h')\r\n                .format('HH:mm')\r\n        );\r\n\r\n    return (\r\n        <Card class=\"form-card\">\r\n            <h2 className=\"form-title\">\r\n                {props.classScheduleOne.id\r\n                    ? t('edit.title')\r\n                    : t('create.title')}{' '}\r\n                {t('classy.label')}\r\n            </h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <Field\r\n                    component={renderTextField}\r\n                    className=\"form-field\"\r\n                    name=\"class_name\"\r\n                    id=\"class_name\"\r\n                    label={t('class.label')}\r\n                    type=\"text\"\r\n                    validate={[required, uniqueClassName]}\r\n                />\r\n                <div className=\"form-time-block\">\r\n                    <Field\r\n                        component={renderTimePicker}\r\n                        className=\"time-input\"\r\n                        name=\"startTime\"\r\n                        label={t('class.from.label')}\r\n                        type=\"time\"\r\n                        validate={[required, lessThanTime, timeIntersect]}\r\n                        onChange={(event, value) => {\r\n                            if (value) {\r\n                                setEndTime(value);\r\n                            }\r\n                        }}\r\n                    />\r\n                    <Field\r\n                        component={renderTimePicker}\r\n                        className=\"time-input\"\r\n                        name=\"endTime\"\r\n                        label={t('class.to.label')}\r\n                        type=\"time\"\r\n                        validate={[required, greaterThanTime, timeIntersect]}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-buttons-container\">\r\n                    <Button\r\n                        className=\"buttons-style\"\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={pristine || submitting}\r\n                    >\r\n                        {t('save.button.label')}\r\n                    </Button>\r\n                    <Button\r\n                        className=\"buttons-style\"\r\n                        type=\"button\"\r\n                        variant=\"contained\"\r\n                        disabled={pristine || submitting}\r\n                        onClick={onReset}\r\n                    >\r\n                        {t('clear.button.label')}\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    classScheduleOne: state.classActions.classScheduleOne\r\n});\r\n\r\nexport default connect(mapStateToProps)(\r\n    reduxForm({\r\n        form: CLASS_FORM\r\n    })(ClassFormFunc)\r\n);\r\n","export const CLASS_DURATION = \"1.3333333333333333333333333333\";\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { FaEdit } from 'react-icons/fa';\r\nimport { MdDelete } from 'react-icons/md';\r\n\r\nimport ClassForm from '../../components/ClassForm/ClassForm';\r\nimport Card from '../../share/Card/Card';\r\nimport ConfirmDialog from '../../share/modals/dialog';\r\nimport { cardType } from '../../constants/cardType';\r\n\r\nimport {\r\n    getClassScheduleListService,\r\n    addClassScheduleOneService,\r\n    getClassScheduleOneService,\r\n    deleteClassScheduleOneService,\r\n    clearClassScheduleOneService\r\n} from '../../services/classService';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\r\nimport { snackbarTypes } from '../../constants/snackbarTypes';\r\n\r\nexport const ClassSchedule = props => {\r\n    const { t } = useTranslation('formElements');\r\n    const [open, setOpen] = useState(false);\r\n    const [classId, setClassId] = React.useState(-1);\r\n    useEffect(() => getClassScheduleListService(), []);\r\n\r\n    const submit = values => {\r\n        if (!values.id && props.classScheduler.length >= 7)\r\n            return handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                'You reach maximum classes quantity'\r\n            );\r\n        addClassScheduleOneService(values);\r\n    };\r\n\r\n    const handleEdit = classId => {\r\n        getClassScheduleOneService(classId);\r\n    };\r\n\r\n    const handleFormReset = () => {\r\n        clearClassScheduleOneService();\r\n    };\r\n\r\n    const handleClickOpen = classId => {\r\n        setClassId(classId);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = classId => {\r\n        setOpen(false);\r\n        if (!classId) {\r\n            return;\r\n        }\r\n        deleteClassScheduleOneService(classId);\r\n    };\r\n\r\n    return (\r\n        <div className=\"cards-container\">\r\n            <ConfirmDialog\r\n                selectedValue={''}\r\n                cardId={classId}\r\n                whatDelete={cardType.CLASS.toLowerCase()}\r\n                open={open}\r\n                onClose={handleClose}\r\n            />\r\n            <ClassForm onSubmit={submit} onReset={handleFormReset} />\r\n            <section className=\"container-flex-wrap\">\r\n                {props.classScheduler.map(schedule => (\r\n                    <Card class=\"class-card-width\" key={schedule.id}>\r\n                        <div className=\"cards-btns\">\r\n                            <FaEdit\r\n                                className=\"svg-btn\"\r\n                                onClick={() => handleEdit(schedule.id)}\r\n                            />\r\n                            <MdDelete\r\n                                className=\"svg-btn\"\r\n                                onClick={() => handleClickOpen(schedule.id)}\r\n                            />\r\n                        </div>\r\n                        <p>\r\n                            {t('class.label')}: {schedule.class_name}\r\n                        </p>\r\n                        <p>\r\n                            {t('class.from.label')} - {t('class.to.label')}\r\n                        </p>\r\n                        <p>\r\n                            {schedule.startTime} - {schedule.endTime}\r\n                        </p>\r\n                    </Card>\r\n                ))}\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    classScheduler: state.classActions.classScheduler,\r\n    ClassScheduleOne: state.classActions.classScheduleOne\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(ClassSchedule);\r\n","import React from 'react';\r\n\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\n\r\nconst Alert = props => {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n};\r\n\r\nconst SnackbarComponent = props => {\r\n  const message = props.message;\r\n  const type = props.type;\r\n  const isOpen = props.isOpen;\r\n  const handleSnackbarClose = props.handleSnackbarClose;\r\n\r\n  return (\r\n    <Snackbar\r\n      open={isOpen}\r\n      autoHideDuration={3000}\r\n      onClose={handleSnackbarClose}\r\n    >\r\n      <Alert onClose={handleSnackbarClose} severity={type}>\r\n        {message}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n\r\nexport default SnackbarComponent;\r\n","import React, {useEffect} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport renderTextField from \"../../share/renderedFields/input\";\r\nimport {\r\n  required,\r\n  uniqueGroup,\r\n  minLengthValue\r\n} from \"../../validation/validateFields\";\r\nimport Card from \"../../share/Card/Card\";\r\n\r\nimport { GROUP_FORM } from '../../constants/reduxForms';\r\n\r\nimport './AddGroupForms.scss';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nlet AddGroup = props => {\r\n  const { t } = useTranslation('formElements');\r\n  const { handleSubmit, pristine, onReset, submitting } = props;\r\n\r\n  useEffect(() => {\r\n    if (props.group) {\r\n      if (props.group.id) {\r\n        props.initialize({\r\n          id: props.group.id,\r\n          title: props.group.title\r\n        });\r\n      } else {\r\n        props.initialize();\r\n      }\r\n    }\r\n  }, [props.group]);\r\n\r\n  return (\r\n    <Card class=\"form-card group-form\">\r\n      <h2 className=\"group-form__title\">\r\n        {props.group.id ? t('edit.title') : t('create.title')}\r\n        {t('groupy.label')}\r\n      </h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <Field\r\n          className=\"form-field\"\r\n          name=\"title\"\r\n          id=\"title\"\r\n          label={t('group.label')+':'}\r\n          component={renderTextField}\r\n          validate={[required, minLengthValue, uniqueGroup]}\r\n        />\r\n        <div className='form-buttons-container group-btns'>\r\n        <Button\r\n          variant=\"contained\"\r\n          className='buttons-style '\r\n          color=\"primary\"\r\n          disabled={pristine || submitting}\r\n          type=\"submit\">\r\n          {t('save.button.label')}\r\n        </Button>\r\n        <Button\r\n            type=\"button\"\r\n            className='buttons-style'\r\n            variant=\"contained\"\r\n            disabled={pristine || submitting}\r\n            onClick={onReset}>\r\n          {t('clear.button.label')}\r\n        </Button>\r\n        </div>\r\n      </form>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  group: state.groups.group\r\n});\r\n\r\nexport default connect(mapStateToProps)(\r\n    reduxForm({\r\n      form: GROUP_FORM\r\n    })(AddGroup)\r\n);\r\n","import React, {useEffect, useState} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { MdDelete } from \"react-icons/md\";\r\nimport { FaEdit } from 'react-icons/fa';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nimport {showAllGroupsService, removeGroupCardService, handleGroupService, selectGroupService, clearGroupService\r\n} from \"../../services/groupService\";\r\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\r\nimport {search} from \"../../helper/search\";\r\n\r\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\r\nimport ConfirmDialog from '../../share/modals/dialog';\r\nimport AddGroup from '../../components/AddGroupForm/AddGroupForm';\r\nimport SearchPanel from \"../../share/SearchPanel/SearchPanel\";\r\nimport './GroupList.scss';\r\nimport NotFound from \"../../share/NotFound/NotFound\";\r\n\r\nconst GroupList = (props) => {\r\n    useEffect(() => showAllGroupsService(), []);\r\n    const { t } = useTranslation('formElements');\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [groupId, setGroupId] = useState(-1);\r\n    const [term, setTerm] = useState('');\r\n\r\n    const { isSnackbarOpen, snackbarType, snackbarMessage } = props;\r\n\r\n    const submit = values => {\r\n        handleGroupService(values);\r\n    };\r\n\r\n    const handleEdit = groupId => {\r\n        selectGroupService(groupId)\r\n    };\r\n\r\n    const handleClickOpen = (groupId) => {\r\n        setGroupId(groupId);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (groupId) => {\r\n        setOpen(false);\r\n        if (!groupId) {\r\n            return;\r\n        }\r\n        removeGroupCardService(groupId);\r\n    };\r\n\r\n    const handleSnackbarClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        handleSnackbarCloseService();\r\n    };\r\n\r\n    const handleFormReset = () => {\r\n        clearGroupService();\r\n    };\r\n\r\n    const visibleItems = search(props.groups, term, ['title']);\r\n\r\n    const SearchChange = (term) => {\r\n        setTerm(term);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ConfirmDialog selectedValue={''} cardId={groupId} whatDelete={'group'} open={open} onClose={handleClose}/>\r\n            <div className=\"cards-container\">\r\n                <aside className=\"search-list__panel\">\r\n                <SearchPanel SearchChange={SearchChange}/>\r\n                <AddGroup className='form' onSubmit={submit} onReset={handleFormReset}/>\r\n                </aside>\r\n                <div className=\"group-wrapper group-list\">\r\n                    {visibleItems.length === 0 && <NotFound name={t('groupy.label')}/>}\r\n                    {visibleItems.map(group => (\r\n                        <section key={group.id} className=\"group-card\">\r\n\r\n                            <div className=\"group__buttons-wrapper\">\r\n                                <FaEdit className=\"group__buttons-edit\" title={t('edit.title')}\r\n                                        onClick={() => handleEdit(group.id)}/>\r\n                                <MdDelete className=\"group__buttons-delete\" title={t('delete.title')}\r\n                                          onClick={() => handleClickOpen(group.id)}/>\r\n                            </div>\r\n                            <p className=\"group-card__description\">{t('group.label')+':'}</p>\r\n                            <h1 className=\"group-card__number\">{group.title}</h1>\r\n\r\n                        </section>))}\r\n                </div>\r\n            </div>\r\n            <SnackbarComponent\r\n                message={snackbarMessage}\r\n                type={snackbarType}\r\n                isOpen={isSnackbarOpen}\r\n                handleSnackbarClose={handleSnackbarClose}\r\n            />\r\n        </>\r\n    );\r\n};\r\nconst mapStateToProps = state => ({\r\n    groups: state.groups.groups,\r\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\r\n    snackbarType: state.snackbar.snackbarType,\r\n    snackbarMessage: state.snackbar.message\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GroupList);\r\n","import React, {useEffect} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport renderTextField from '../../share/renderedFields/input';\r\nimport renderSelectField from '../../share/renderedFields/select';\r\n\r\nimport { ROOM_FORM } from '../../constants/reduxForms';\r\n\r\nimport { required, uniqueRoomName } from '../../validation/validateFields';\r\nimport Button from '@material-ui/core/Button';\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Card from '../../share/Card/Card';\r\n\r\nimport './AddRoomForm.scss';\r\n\r\nconst CreateBtn = styled(Button)({\r\n    marginTop: '20px'\r\n});\r\n\r\nlet AddRoom = props => {\r\n    const { t } = useTranslation('formElements')\r\n    const { handleSubmit, pristine, submitting, onReset, roomTypes } = props;\r\n\r\n    useEffect(() => {\r\n        if (props.oneRoom) {\r\n            if (props.oneRoom.id) {\r\n                props.initialize({\r\n                    name: props.oneRoom.name,\r\n                    type: props.oneRoom.type.id,\r\n                    id: props.oneRoom.id\r\n                });\r\n            } else {\r\n                props.initialize();\r\n            }\r\n        }\r\n    }, [props.oneRoom]);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Card class='form-card room-form'>\r\n            <form className='createGroupForm w-100' onSubmit={handleSubmit}>\r\n                <h2 className='form-title'>\r\n                    {props.oneRoom.id\r\n                        ? t('edit.title')\r\n                        : t('create.title')\r\n                    }{' '}\r\n                    {t('roomy.label')}\r\n                </h2>\r\n                <Field\r\n                    type='text'\r\n                    name='name'\r\n                    component={renderTextField}\r\n                    placeholder={t('number.label')}\r\n                    className='form-field'\r\n                    label={t('room.label')}\r\n                    validate={[required, uniqueRoomName]}\r\n                />\r\n                <Field\r\n                    className='form-field'\r\n                    component={renderSelectField}\r\n                    name='type'\r\n                    label={t('type.label')}\r\n                    validate={[required]}>\r\n                    <option value={''}></option>\r\n                    {props.roomTypes.map(roomType => (\r\n                        <option key={roomType.id} value={roomType.id}>\r\n                            {roomType.description}\r\n                        </option>\r\n                    ))}\r\n                </Field>\r\n                <div className='form-buttons-container'>\r\n                    <CreateBtn\r\n                        className='buttons-style'\r\n                        variant='contained'\r\n                        color='primary'\r\n                        disabled={pristine || submitting}\r\n                        type='submit'>\r\n                        {t('save.button.label')}\r\n                    </CreateBtn>\r\n                    <CreateBtn\r\n                        className='buttons-style'\r\n                        variant='contained'\r\n                        disabled={pristine || submitting}\r\n                        onClick={onReset}>\r\n                        {t('clear.button.label')}\r\n                    </CreateBtn>\r\n                </div>\r\n            </form>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    oneRoom: state.rooms.oneRoom,\r\n    roomTypes: state.roomTypes.roomTypes\r\n});\r\n\r\nAddRoom = reduxForm({\r\n    form: ROOM_FORM\r\n})(AddRoom);\r\n\r\nexport default connect(mapStateToProps)(AddRoom);\r\n","import { store } from '../index';\r\nimport { reset } from 'redux-form';\r\nimport { ROOMURL } from '../constants/axios';\r\nimport { ROOM_FORM_TYPE } from '../constants/reduxForms';\r\nimport axios from '../helper/axios';\r\n\r\nimport {\r\n    createNewType,\r\n    getAllRoomTypes,\r\n    selectOneType,\r\n    updateOneType,\r\n    deleteType\r\n} from '../redux/actions/roomTypes';\r\n\r\nimport { handleSnackbarOpenService } from './snackbarService';\r\nimport { snackbarTypes } from '../constants/snackbarTypes';\r\n\r\n\r\nimport i18n from '../helper/i18n';\r\n\r\nconst resetForm = form => {\r\n    store.dispatch(reset(form));\r\n};\r\n\r\nexport const createNewTypeService = values => {\r\n    if (values.id) {\r\n        updateOneTypeService(values);\r\n        return;\r\n    }\r\n    store.dispatch(createNewType(values));\r\n    resetForm(ROOM_FORM_TYPE);\r\n    handleSnackbarOpenService(\r\n        true,\r\n        snackbarTypes.SUCCESS,\r\n        i18n.t('serviceMessages:back.end.success.operation', {\r\n            cardType: i18n.t('formElements:type.label'),\r\n            actionType: i18n.t('serviceMessages:created.label')\r\n        })\r\n    );\r\n};\r\n\r\nexport const getAllRoomTypesService = () => {\r\n    axios\r\n        .get('room-types')\r\n        .then(res => {\r\n            store.dispatch(getAllRoomTypes(res.data));\r\n        })\r\n        .catch(error => {\r\n            handleSnackbarOpenService(\r\n                true,\r\n                snackbarTypes.ERROR,\r\n                i18n.t(error.response.data.message, error.response.data.message)\r\n            );\r\n        });\r\n};\r\n\r\nexport const deleteTypeService = values => {\r\n    store.dispatch(deleteType(values));\r\n    handleSnackbarOpenService(\r\n        true,\r\n        snackbarTypes.SUCCESS,\r\n        i18n.t('serviceMessages:back.end.success.operation', {\r\n            cardType: i18n.t('formElements:type.label'),\r\n            actionType: i18n.t('serviceMessages:deleted.label')\r\n        })\r\n    );\r\n};\r\n\r\nexport const selectOneTypeService = value => {\r\n    store.dispatch(selectOneType(value));\r\n};\r\n\r\nexport const updateOneTypeService = values => {\r\n    store.dispatch(updateOneType(values));\r\n    resetForm(ROOM_FORM_TYPE);\r\n    handleSnackbarOpenService(\r\n        true,\r\n        snackbarTypes.SUCCESS,\r\n        i18n.t('serviceMessages:back.end.success.operation', {\r\n            cardType: i18n.t('formElements:class.label'),\r\n            actionType: i18n.t('serviceMessages:updated.label')\r\n        })\r\n    );\r\n};\r\n","import * as actionsType from './actionsType';\r\nimport roomTypes from '../reducers/roomTypes';\r\nimport actions from 'redux-form/lib/actions';\r\n\r\n\r\n\r\n\r\nexport const createNewType = roomType => {\r\n   \r\n    return {\r\n        type: actionsType.CREATE_NEW_TYPE,\r\n        result: roomType\r\n    }\r\n};\r\n\r\nexport const getAllRoomTypes = roomType => {\r\n   \r\n    return {\r\n        type: actionsType.GET_ALL_ROOM_TYPES,\r\n        result: roomType\r\n    }\r\n}; \r\n\r\n\r\n\r\nexport const deleteType = roomType => {\r\n    return {\r\n        type: actionsType.DELETE_TYPE,\r\n        result: roomType\r\n    }\r\n}\r\n\r\nexport const selectOneType = roomTypeId => {\r\n    return {\r\n        type: actionsType.SELECT_ONE_TYPE,\r\n        result: roomTypeId\r\n    }\r\n}\r\n\r\nexport const updateOneType = roomType => {\r\n    return {\r\n        type: actionsType.UPDATE_ONE_TYPE,\r\n        result: roomType\r\n    }\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nimport { ROOM_FORM_TYPE } from '../../constants/reduxForms';\r\n\r\nimport ConfirmDialog from '../../share/modals/dialog';\r\nimport { cardType } from '../../constants/cardType';\r\nimport Card from '../../share/Card/Card';\r\nimport { useTranslation } from 'react-i18next';\r\nimport renderTextField from '../../share/renderedFields/input';\r\nimport Button from '@material-ui/core/Button';\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { MdDelete } from 'react-icons/md';\r\nimport { FaEdit } from 'react-icons/fa';\r\nimport { deleteTypeService, selectOneTypeService } from '../../services/roomTypesService';\r\nimport './AddNewRoomType.scss';\r\n\r\nlet NewRoomType = props => {\r\n    const { handleSubmit, pristine, submitting, roomTypes } = props;\r\n    const CreateBtn = styled(Button)({\r\n        marginTop: '20px'\r\n    });\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [typeId, setTypeId] = useState(-1);\r\n\r\n \r\n\r\n    useEffect(() => {\r\n        if (props.oneType.description) {\r\n            props.initialize({\r\n                description: props.oneType.description,\r\n                id: props.oneType.id\r\n            });\r\n        } else {\r\n            props.initialize({});\r\n        }\r\n    }, [props.oneType]);\r\n\r\n    const { t } = useTranslation('formElements');\r\n\r\n    const editHandler =  roomTypeId => {\r\n        selectOneTypeService(roomTypeId);\r\n    };\r\n\r\n    const handleClickOpen = typeId => {\r\n        setTypeId(typeId);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = typeId => {\r\n        setOpen(false);\r\n        if (!typeId) {\r\n            return;\r\n        }\r\n        deleteTypeService(typeId);\r\n    };\r\n    return (\r\n        <>\r\n            <ConfirmDialog\r\n                selectedValue={''}\r\n                cardId={typeId}\r\n                whatDelete={cardType.TYPE.toLowerCase()}\r\n                open={open}\r\n                onClose={handleClose}\r\n            />\r\n            <Card class=\"form-card room-form\">\r\n                <form className=\"new-type-container\" onSubmit={handleSubmit}>\r\n                    <Field\r\n                        type=\"text\"\r\n                        name=\"description\"\r\n                        component={renderTextField}\r\n                        placeholder={t(\"addType.label\")}\r\n                        label={t(\"newType.label\")}\r\n                        className=\"form-field\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <CreateBtn\r\n                        color=\"primary\"\r\n                        className=\"btnStyle\"\r\n                        disabled={pristine || submitting}\r\n                        variant=\"contained\"\r\n                        type=\"submit\"\r\n                    >\r\n                        {t('save.button.label')}\r\n                    </CreateBtn>\r\n                </form>\r\n\r\n                <ul className=\"new-types\">\r\n                    {roomTypes.map(roomType => (\r\n                        <li\r\n                            key={roomType.id}\r\n                            value={roomType.description}\r\n                            className=\"new-types-list\"\r\n                        >\r\n                            <span>{roomType.description}</span>\r\n                            <span className=\"buttons\">\r\n                                <FaEdit className=\"btn edit\"  onClick={() => editHandler(roomType.id)}/>\r\n                                <MdDelete\r\n                                    className=\"btn delete\"\r\n                                    onClick={() => handleClickOpen(roomType.id)}\r\n                                />\r\n                                \r\n                            </span>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    oneType: state.roomTypes.oneType,\r\n    roomTypes: state.roomTypes.roomTypes\r\n});\r\n\r\nNewRoomType = reduxForm({\r\n    form: ROOM_FORM_TYPE\r\n})(NewRoomType);\r\n\r\nexport default connect(mapStateToProps)(NewRoomType);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ConfirmDialog from '../../share/modals/dialog';\r\nimport { cardType } from '../../constants/cardType';\r\n\r\nimport AddRoom from '../../components/AddRoomForm/AddRoomForm';\r\nimport NewRoomType from '../../components/AddNewRoomType/AddNewRoomType';\r\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\r\nimport Card from '../../share/Card/Card';\r\nimport { FaEdit } from 'react-icons/fa';\r\nimport { MdDelete } from 'react-icons/md';\r\nimport './RoomList.scss';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { search } from '../../helper/search';\r\n\r\nimport {\r\n    createRoomService,\r\n    showListOfRoomsService,\r\n    deleteRoomCardService,\r\n    selectOneRoomService,\r\n    clearRoomOneService\r\n} from '../../services/roomService';\r\n\r\nimport {\r\n    createNewTypeService,\r\n    getAllRoomTypesService\r\n} from '../../services/roomTypesService';\r\n\r\nimport NotFound from '../../share/NotFound/NotFound';\r\n\r\nconst RoomList = props => {\r\n    useEffect(() => {\r\n        showListOfRoomsService();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getAllRoomTypesService();\r\n    }, [props.roomTypes]);\r\n\r\n    const { t } = useTranslation('formElements');\r\n    const [open, setOpen] = useState(false);\r\n    const [roomId, setRoomId] = useState(-1);\r\n    const [term, setTerm] = useState('');\r\n\r\n    const createRoom = values => {\r\n        createRoomService(values);\r\n    };\r\n\r\n    const createNewType = values => {\r\n        createNewTypeService(values);\r\n    };\r\n\r\n    const editHandler = roomId => {\r\n        selectOneRoomService(roomId);\r\n    };\r\n\r\n    const handleFormReset = () => {\r\n        clearRoomOneService();\r\n    };\r\n\r\n    const handleClickOpen = roomId => {\r\n        setRoomId(roomId);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = roomId => {\r\n        setOpen(false);\r\n        if (!roomId) {\r\n            return;\r\n        }\r\n        deleteRoomCardService(roomId);\r\n    };\r\n\r\n    const visibleItems = search(props.rooms, term, ['name', 'type']);\r\n\r\n    const SearchChange = term => {\r\n        setTerm(term);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ConfirmDialog\r\n                selectedValue={''}\r\n                cardId={roomId}\r\n                whatDelete={cardType.ROOM.toLowerCase()}\r\n                open={open}\r\n                onClose={handleClose}\r\n            />\r\n            <div className=\"cards-container\">\r\n                <aside className=\"search-list__panel\">\r\n                    <SearchPanel SearchChange={SearchChange} />\r\n                    <AddRoom onSubmit={createRoom} onReset={handleFormReset}/>\r\n                    <NewRoomType\r\n                        className=\"new-type\"\r\n                        onSubmit={createNewType}\r\n                    />{' '}\r\n                </aside>\r\n                <section className=\"container-flex-wrap wrapper\">\r\n                    {visibleItems.length === 0 && (\r\n                        <NotFound name={t('roomy.label')} />\r\n                    )}\r\n                    {visibleItems.map((room, index) => (\r\n                       \r\n                        <Card key={index} {...room} class=\"room-card done-card\">\r\n                            <div className=\"cards-btns\">\r\n                                <FaEdit\r\n                                    className=\"svg-btn\"\r\n                                    onClick={() => editHandler(room.id)}\r\n                                />\r\n                                <MdDelete\r\n                                    className=\"svg-btn\"\r\n                                    onClick={() => handleClickOpen(room.id)}\r\n                                />\r\n                            </div>\r\n                            <span> {t('room.label') + ':'} </span>\r\n                            <h2 className=\"room-card__number\">{room.name}</h2>\r\n                            <span>{t('type.label') + ':'}</span>\r\n                            <h2 className=\"room-card__number\">{room.type.description}</h2>\r\n                        </Card>\r\n                    ))}\r\n                </section>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    rooms: state.rooms.rooms,\r\n    oneRoom: state.rooms.oneRoom\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(RoomList);\r\n","import React, {useEffect} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport renderTextField from \"../../share/renderedFields/input\";\r\nimport {\r\n    required,\r\n    uniqueSubject,\r\n    maxLengthValue\r\n} from \"../../validation/validateFields\";\r\nimport Card from \"../../share/Card/Card\";\r\n\r\nimport { SUBJECT_FORM } from '../../constants/reduxForms';\r\n\r\nimport './AddSubjectForm.scss';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nlet AddSubject = props => {\r\n    const { t } = useTranslation('formElements');\r\n    const { handleSubmit, pristine, onReset, submitting } = props;\r\n\r\n    useEffect(() => {\r\n        if (props.subject) {\r\n            if (props.subject.id) {\r\n                props.initialize({\r\n                    id: props.subject.id,\r\n                    name: props.subject.name\r\n                });\r\n            } else {\r\n                props.initialize();\r\n            }\r\n        }\r\n    }, [props.subject]);\r\n\r\n    return (\r\n        <Card class=\"form-card subject-form\">\r\n            <h2 style={{ textAlign: \"center\" }}>\r\n                {props.subject.id ? t('edit.title') : t('create.title')}\r\n                {t('subjecty.label')}\r\n            </h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <Field\r\n                    className=\"form-field\"\r\n                    name=\"name\"\r\n                    component={renderTextField}\r\n                    label={t('subject.label')+':'}\r\n                    validate={[required, uniqueSubject, maxLengthValue]}\r\n                />\r\n                <div className='form-buttons-container subject-btns'>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className='buttons-style '\r\n                    disabled={pristine || submitting}\r\n                    type=\"submit\">\r\n                    {t('save.button.label')}\r\n                </Button>\r\n                <Button\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    className='buttons-style'\r\n                    disabled={pristine || submitting}\r\n                    onClick={onReset}>\r\n                    {t('clear.button.label')}\r\n                </Button>\r\n                </div>\r\n            </form>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    subject: state.subjects.subject\r\n});\r\n\r\nexport default connect(mapStateToProps)(\r\n    reduxForm({\r\n        form: SUBJECT_FORM\r\n    })(AddSubject)\r\n);\r\n","import React, {useEffect, useState} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\r\nimport ConfirmDialog from '../../share/modals/dialog';\r\n\r\nimport AddSubject from \"../../components/AddSubjectForm/AddSubjectForm\";\r\nimport {\r\n    showAllSubjectsService,\r\n    removeSubjectCardService,\r\n    handleSubjectService,\r\n    selectSubjectService,\r\n    clearSubjectService\r\n} from '../../services/subjectService'\r\n\r\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\r\nimport {search} from \"../../helper/search\";\r\nimport './SubjectPage.scss';\r\nimport SearchPanel from \"../../share/SearchPanel/SearchPanel\";\r\nimport { MdDelete } from \"react-icons/md\";\r\nimport { FaEdit } from 'react-icons/fa';\r\nimport Card from \"../../share/Card/Card\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport NotFound from \"../../share/NotFound/NotFound\";\r\n\r\nconst SubjectPage = (props) => {\r\n    const { t } = useTranslation('formElements');\r\n    const [open, setOpen] = useState(false);\r\n    const [subjectId, setSubjectId] = useState(-1);\r\n    const [term, setTerm] = useState('');\r\n\r\n    useEffect(() => showAllSubjectsService(), []);\r\n\r\n    const { isSnackbarOpen, snackbarType, snackbarMessage } = props;\r\n\r\n    const submit = values => {\r\n        handleSubjectService(values);\r\n    };\r\n\r\n    const handleEdit = subjectId => {\r\n        selectSubjectService(subjectId)\r\n    };\r\n\r\n    const handleClickOpen = (subjectId) => {\r\n        setSubjectId(subjectId);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (subjectId) => {\r\n        setOpen(false);\r\n        if (!subjectId) {\r\n            return;\r\n        }\r\n        removeSubjectCardService(subjectId);\r\n    };\r\n\r\n    const handleSnackbarClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        handleSnackbarCloseService();\r\n    };\r\n\r\n    const handleFormReset = () => {\r\n        clearSubjectService()\r\n    };\r\n\r\n    const visibleItems = search(props.subjects, term, ['name']);\r\n\r\n    const SearchChange = (term) => {\r\n        setTerm(term);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ConfirmDialog selectedValue={''} cardId={subjectId} whatDelete={'subject'} open={open} onClose={handleClose}/>\r\n            <div className=\"cards-container\">\r\n                <aside className=\"search-list__panel\">\r\n                <SearchPanel SearchChange={SearchChange}/>\r\n            \r\n                <AddSubject className='form' onSubmit={submit} onReset={handleFormReset}/>\r\n                </aside>\r\n                <section className='container-flex-wrap wrapper'>\r\n                {visibleItems.length === 0 && <NotFound name={t('subjecty.label')}/>}\r\n                    {visibleItems.map(subject => (\r\n                        <Card key={subject.id} class='subject-card done-card'>\r\n\r\n                            <div className=\"cards-btns\">\r\n                                <FaEdit className=\"svg-btn edit-btn\" title={t('edit.title')}\r\n                                        onClick={() => handleEdit(subject.id)}/>\r\n                                <MdDelete className=\"svg-btn delete-btn\" title={t('delete.title')}\r\n                                          onClick={() => handleClickOpen(subject.id)}/>\r\n                            </div>\r\n                            <p className=\"subject-card__description\">{t('subject.label')+':'} </p>\r\n                            <h2 className=\"subject-card__name\">{subject.name}</h2>\r\n                        </Card>))}\r\n                </section>\r\n            </div>\r\n            <SnackbarComponent\r\n                message={snackbarMessage}\r\n                type={snackbarType}\r\n                isOpen={isSnackbarOpen}\r\n                handleSnackbarClose={handleSnackbarClose}\r\n            />\r\n        </>\r\n    );\r\n};\r\nconst mapStateToProps = state => ({\r\n    subjects: state.subjects.subjects,\r\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\r\n    snackbarType: state.snackbar.snackbarType,\r\n    snackbarMessage: state.snackbar.message\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(SubjectPage);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport LessonPage from '../LessonPage/LessonPage';\r\nimport TeacherList from '../TeachersList/TeachersList';\r\nimport ClassSchedule from '../ClassSchedule/ClassSchedule';\r\nimport GroupList from '../GroupList/GroupList';\r\nimport RoomList from '../RoomList/RoomList';\r\nimport SubjectPage from \"../SubjectPage/SubjectPage\";\r\n\r\nimport { connect } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box p={3}>{children}</Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper\r\n    }\r\n}));\r\n\r\nconst SimpleTabs = props => {\r\n    const { t } = useTranslation('common');\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    aria-label=\"simple tabs example\"\r\n                >\r\n                    <Tab\r\n                        label={t('lesson.management.title')}\r\n                        {...a11yProps(0)}\r\n                    />\r\n                    <Tab\r\n                        label={t('teacher.management.title')}\r\n                        {...a11yProps(1)}\r\n                    />\r\n                    <Tab\r\n                        label={t('group.management.title')}\r\n                        {...a11yProps(2)}\r\n                    />\r\n                    <Tab\r\n                        label={t('class.management.title')}\r\n                        {...a11yProps(3)}\r\n                    />\r\n                    <Tab label={t('room.management.title')}\r\n                         {...a11yProps(4)} />\r\n                    <Tab\r\n                        label={t('subject.management.title')}\r\n                        {...a11yProps(5)}\r\n                    />\r\n                </Tabs>\r\n            </AppBar>\r\n\r\n            <TabPanel value={value} index={0}>\r\n                <LessonPage />\r\n            </TabPanel>\r\n\r\n            <TabPanel value={value} index={1}>\r\n                <TeacherList />\r\n            </TabPanel>\r\n\r\n            <TabPanel value={value} index={2}>\r\n                <GroupList />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={3}>\r\n                <ClassSchedule />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={4}>\r\n                <RoomList />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={5}>\r\n                <SubjectPage />\r\n            </TabPanel>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    classScheduler: state.classActions.classScheduler,\r\n    ClassScheduleOne: state.classActions.classScheduleOne\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(SimpleTabs);\r\n","import React, { useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { logout } from '../../../redux/actions/index';\r\n\r\nconst Logout = props => {\r\n    useEffect(() => {\r\n        props.onLogout();\r\n    }, []);\r\n\r\n    return <Redirect to=\"/\" />;\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLogout: () => dispatch(logout())\r\n    };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Logout);\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { activateUser } from '../../redux/actions';\r\n\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { links } from '../../constants/links';\r\n\r\nimport './ActivationPage.scss';\r\n\r\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\r\nimport { snackbarTypes } from '../../constants/snackbarTypes';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst ActivationPage = props => {\r\n    const { t } = useTranslation('common');\r\n\r\n    const params = new URLSearchParams(props.location.search);\r\n    const token = params.get('token');\r\n\r\n    const error = props.error;\r\n\r\n    const response = props.response;\r\n    let redirect = null;\r\n\r\n    if (response && response.data.hasOwnProperty('message')) {\r\n        redirect = <Redirect to={links.AUTH} />;\r\n        handleSnackbarOpenService(\r\n            true,\r\n            snackbarTypes.SUCCESS,\r\n            response.data.message\r\n        );\r\n    }\r\n\r\n    let main = (\r\n        <>\r\n            <h2>{t('verifying.token')}</h2>\r\n            <CircularProgress />\r\n        </>\r\n    );\r\n\r\n    if (error) {\r\n        main = (\r\n            <>\r\n                <h2>{t('token.error')}</h2>\r\n                <p>{error}</p>\r\n            </>\r\n        );\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            props.onActivate(token);\r\n        }\r\n    }, [token]);\r\n    return (\r\n        <>\r\n            <section className=\"activation-page-container\">\r\n                {redirect}\r\n                <section className=\"card activation-section\">{main}</section>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    response: state.auth.response,\r\n    error: state.auth.activationError\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onActivate: data => dispatch(activateUser(data))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivationPage);\r\n","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Redirect,\r\n    Route,\r\n    Switch\r\n} from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Header from '../components/Header/Header';\r\n\r\nimport HomePage from '../containers/Home/Home';\r\nimport Auth from '../containers/Auth/Auth';\r\nimport SchedulePage from '../containers/SchedulePage/SchedulePage';\r\nimport AdminPage from '../containers/AdminPage/AdminPage';\r\nimport Logout from '../containers/Auth/Logout/Logout';\r\nimport ActivationPage from '../containers/ActivationPage/ActivationPage';\r\n\r\nimport { links } from '../constants/links';\r\nimport { userRoles } from '../constants/userRoles';\r\n\r\nconst Routers = props => {\r\n    const userRole = props.userRole;\r\n\r\n    let routes = (\r\n        <Switch>\r\n            <Route path={links.HOME_PAGE} exact component={HomePage} />\r\n            <Route path={links.SCHEDULE_PAGE}>\r\n                <Redirect to={links.AUTH} />\r\n            </Route>\r\n\r\n            <Route path={links.ADMIN_PAGE}>\r\n                <Redirect to={links.AUTH} />\r\n            </Route>\r\n            <Route path={links.AUTH} component={Auth} />\r\n            <Route path={links.ACTIVATION_PAGE} component={ActivationPage} />\r\n        </Switch>\r\n    );\r\n\r\n    if (userRole === userRoles.MANAGER) {\r\n        routes = (\r\n            <Switch>\r\n                <Route path={links.HOME_PAGE} exact component={HomePage} />\r\n                <Route path={links.SCHEDULE_PAGE} component={SchedulePage} />\r\n                <Route path={links.ACTIVATION_PAGE}>\r\n                    <Redirect to={links.ADMIN_PAGE} />\r\n                </Route>\r\n                <Route path={links.AUTH} component={Auth} />\r\n                <Route path={links.ADMIN_PAGE} component={AdminPage} />\r\n                <Route path={links.LOGOUT} component={Logout} />\r\n            </Switch>\r\n        );\r\n    } else if (userRole === userRoles.USER) {\r\n        routes = (\r\n            <Switch>\r\n                <Route path={links.HOME_PAGE} exact component={HomePage} />\r\n                <Route path={links.SCHEDULE_PAGE}>\r\n                    <Redirect to={links.AUTH} />\r\n                </Route>\r\n                <Route path={links.ADMIN_PAGE}>\r\n                    <Redirect to={links.AUTH} />\r\n                </Route>\r\n                <Route path={links.AUTH} component={Auth} />\r\n                <Route path={links.ACTIVATION_PAGE}>\r\n                    <Redirect to={links.HOME_PAGE} />\r\n                </Route>\r\n                <Route path={links.LOGOUT} component={Logout} />\r\n            </Switch>\r\n        );\r\n    }\r\n    return (\r\n        <Router>\r\n            <Header userRole={userRole} roles={userRoles} />\r\n            {routes}\r\n        </Router>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({ userRole: state.auth.role });\r\n\r\nexport default connect(mapStateToProps)(Routers);\r\n","import React from 'react';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst LanguageSelector = props => {\r\n    const { t, i18n } = useTranslation();\r\n\r\n    const changeLanguage = event => {\r\n        i18n.changeLanguage(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <RadioGroup\r\n            row\r\n            aria-label=\"lang\"\r\n            name=\"lang\"\r\n            value={i18n.language}\r\n            onChange={changeLanguage}\r\n        >\r\n            <FormControlLabel value=\"en\" control={<Radio />} label=\"Eng\" />\r\n            <FormControlLabel value=\"uk\" control={<Radio />} label=\"Укр\" />\r\n        </RadioGroup>\r\n    );\r\n};\r\n\r\nexport default LanguageSelector;\r\n","import React, { Suspense, useEffect } from 'react';\r\nimport './App.scss';\r\nimport Routers from './router/Routers';\r\nimport './helper/i18n';\r\nimport { connect } from 'react-redux';\r\nimport LanguageSelector from './components/LanguageSelector/LanguageSelector';\r\n\r\nimport { authCheckState } from './redux/actions/index';\r\nimport { handleSnackbarCloseService } from './services/snackbarService';\r\nimport SnackbarComponent from './share/Snackbar/SnackbarComponent';\r\n\r\nconst App = props => {\r\n    const { isSnackbarOpen, snackbarType, snackbarMessage } = props;\r\n    const handleSnackbarClose = (event, reason) => {\r\n        if (!reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        handleSnackbarCloseService();\r\n    };\r\n\r\n    useEffect(() => {\r\n        props.onTryAutoLogin();\r\n    }, [props]);\r\n    return (\r\n        <Suspense fallback={null}>\r\n            <div className=\"container\">\r\n                <LanguageSelector />\r\n                <Routers />\r\n                <SnackbarComponent\r\n                    message={snackbarMessage}\r\n                    type={snackbarType}\r\n                    isOpen={isSnackbarOpen}\r\n                    handleSnackbarClose={handleSnackbarClose}\r\n                />\r\n            </div>\r\n        </Suspense>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\r\n    snackbarType: state.snackbar.snackbarType,\r\n    snackbarMessage: state.snackbar.message\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onTryAutoLogin: () => dispatch(authCheckState()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    window.location.hostname === '[::1]' ||\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              console.log('Content is cached for offline use.');\r\n\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootReducer from './redux/reducers/index';\r\nimport rootSaga from './sagas';\r\n\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './index.scss';\r\n\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst composeEnhancers =\r\n    (process.env.NODE_ENV === 'development'\r\n        ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n        : null) || compose;\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(sagaMiddleware))\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}