{"version":3,"sources":["redux/reducers/teachers.js","redux/actions/actionsType.js","redux/utility.js","redux/reducers/lesson.js","redux/reducers/temporarySchedule.js","redux/reducers/snackbar.js","helper/axios.js","constants/tokenBegin.js","redux/reducers/auth.js","redux/reducers/loadingIndicator.js","redux/reducers/schedule.js","redux/reducers/class.js","redux/reducers/subjects.js","redux/reducers/groups.js","redux/reducers/rooms.js","redux/reducers/roomTypes.js","redux/reducers/busyRooms.js","redux/reducers/semesters.js","redux/reducers/users.js","redux/reducers/freeRooms.js","redux/reducers/departments.js","redux/reducers/students.js","redux/reducers/index.js","services/authService.js","constants/axios.js","helper/i18n.js","sagas/authSaga.js","sagas/logoutSaga.js","sagas/checkAuthTimeoutSaga.js","sagas/checkAuthStateSaga.js","sagas/registrationSaga.js","sagas/activateUserSaga.js","sagas/resetUserPasswordSaga.js","sagas/watchers.js","sagas/index.js","validation/validateFields.js","constants/links.js","components/LanguageSelector/LanguageSelector.js","constants/schedule/colors.js","redux/actions/snackbar.js","redux/actions/users.js","redux/actions/loadingIndicator.js","redux/actions/schedule.js","redux/actions/teachers.js","redux/actions/class.js","redux/actions/groups.js","redux/actions/semesters.js","services/snackbarService.js","constants/snackbarTypes.js","helper/handlerAxios.js","services/loadingService.js","helper/formHelper.js","services/scheduleService.js","services/busyRooms.js","redux/actions/busyRooms.js","constants/schedule/cssClasses.js","share/Card/Card.js","validation/storeValidation.js","constants/validation.js","share/renderedFields/select.js","share/renderedFields/error.js","services/semesterService.js","constants/reduxForms.js","constants/schedule/days.js","components/FreeRoomForm/freeRoomForm.js","services/classService.js","containers/FreeRooms/freeRooms.js","services/freeRoomsService.js","redux/actions/freeRooms.js","components/Header/Header.js","constants/userRoles.js","helper/prepareSchedule.js","constants/disabledCard.js","share/modals/modal/linkToMeetingDialog.js","components/LinkToMeeting/LinkToMeeting.js","constants/places.js","helper/renderTeacher.js","helper/renderScheduleTable.js","components/GroupSchedulePageTop/GroupSchedulePageTop.js","components/GroupSchedulePage/GroupSchedulePage.js","containers/Home/Home.js","share/renderedFields/timeSemester.js","components/TeacherScheduleForm/TeacherScheduleForm.js","components/TeacherSchedule/TeacherSchedule.js","services/groupService.js","helper/ObjectRevision.js","services/teacherService.js","services/lessonService.js","redux/actions/lesson.js","services/roomService.js","redux/actions/rooms.js","components/Board/Board.js","components/ScheduleItem/ScheduleItem.js","helper/strings.js","components/ScheduleLessonsList/ScheduleLessonsList.js","components/ScheduleDialog/ScheduleDialog.js","components/Schedule/Schedule.js","containers/SchedulePage/SchedulePage.js","share/renderedFields/input.js","redux/actions/departments.js","services/departmentService.js","helper/disableComponent.js","components/AddTeacherForm/AddTeacherForm.js","share/modals/dialog.js","constants/cardType.js","helper/search.js","share/SearchPanel/SearchPanel.js","share/NotFound/NotFound.js","components/AddGroupForm/AddGroupForm.js","share/Snackbar/SnackbarComponent.js","services/subjectService.js","redux/actions/subjects.js","services/studentService.js","redux/actions/students.js","helper/pageRedirection.js","share/modals/modal/AddStudentDialog.js","helper/renderStudentTable.js","services/uploadFile.js","components/UploadFile/UploadFile.js","share/modals/modal/showStudentsDialog.js","helper/shortTitle.js","containers/GroupList/GroupList.js","components/AddRoomForm/AddRoomForm.js","services/roomTypesService.js","redux/actions/roomTypes.js","components/AddNewRoomType/AddNewRoomType.js","containers/RoomList/RoomList.js","components/AddSubjectForm/AddSubjectForm.js","containers/SubjectPage/SubjectPage.js","share/modals/modal/modal.js","share/renderedFields/checkbox.js","helper/MultiselectForGroups.js","components/SemesterForm/SemesterForm.js","components/SemesterCopyForm/SemesterCopyForm.js","share/modals/modal/setDefaultDialog.js","containers/SemesterPage/SemesterPage.js","services/userService.js","containers/MergeRolePage/MergeRolePage.js","components/ChangePasswordForm/ChangePasswordForm.js","containers/BusyRooms/BusyRooms.js","constants/navigation.js","helper/multiselect.js","containers/TeachersList/TeachersList.js","share/renderedFields/renderMultiselect.js","components/LessonForm/LessonForm.js","helper/reduxFormHelper.js","share/renderedFields/time.js","components/ClassForm/ClassForm.js","constants/common.js","containers/ClassSchedule/ClassSchedule.js","components/AddDepartmentForm/AddDepartmentForm.js","helper/renderTeacherTable.js","share/modals/modal/showDataDialog.js","containers/DepartmentPage/DepartmentPage.js","constants/navigationComponents.js","components/Navigation/NavigationPage.js","share/modals/chooseGroupDialog/CopyLessonDialog.js","components/LessonsList/LessonsList.js","components/CopyLessonsFromSemesterForm/CopyLessonsFromSemesterForm.js","containers/LessonPage/LessonPage.js","containers/AdminPage/AdminPage.js","containers/Auth/Logout/Logout.js","redux/actions/auth.js","containers/ActivationPage/ActivationPage.js","containers/ProfilePage/ProfilePage.js","constants/auth.js","components/LoginForm/LoginForm.js","components/RegistrationForm/RegistrationForm.js","components/ResetPasswordForm/ResetPasswordForm.js","containers/Auth/Auth.js","components/Register/Register.js","components/ResetPassword/ResetPassword.js","components/Login/Login.js","router/Routers.js","App.js","serviceWorker.js","index.js"],"names":["compare","a","b","comparison","surname","teachers","state","teacher","disabledTeachers","action","type","result","sort","filter","id","updatedTeacher","forEach","push","updateObject","oldObject","updatedValues","initialState","lessons","lessonTypes","lesson","groupId","uniqueError","reducer","concat","updatedLessons","temporarySchedules","temporarySchedule","vacation","schedulesAndTemporarySchedules","teacherId","changedScheduleId","isSnackbarOpen","snackbarType","message","isOpen","REACT_APP_API_BASE_URL","undefined","process","trim","instance","axios","create","baseURL","token","localStorage","getItem","includes","defaults","headers","common","Authorization","role","error","activationError","response","login","removeItem","registration","reg","resetPasswordResponse","loading","scheduleLoading","semesterLoading","items","availability","itemsIds","fullSchedule","groupSchedule","scheduleType","scheduleGroupId","currentSemester","defaultSemester","viewTeacherScheduleResults","itemArr","index","findIndex","item","splice","newType","itemGroupId","scheduleTeacherId","newArr","teacherSchedule","semesters","scheduleSemesterId","semesterId","teacherRangeSchedule","classActions","classScheduler","classScheduleOne","classSchedulOne","one","classScheduleItem","classSchedulerstate","classItem","subjects","subject","disabledSubjects","updatedSubjects","groups","group","disabledGroups","Number","updatedGroups","name","rooms","oneRoom","disabledRooms","roomItem","roomState","roomTypes","oneType","updateTypeState","typeItem","roomTypeItem","busyRooms","semester","disabledSemesters","archivedSemesters","updatedSemesters","archivedSemester","find","users","user","freeRooms","freeRoom","departments","department","disabledDepartments","disable","updatedDepartments","updatedDefaultDepartments","students","student","updatedStudents","rootReducer","combineReducers","auth","snackbar","schedule","loadingIndicator","form","formReducer","authUserService","request","hasOwnProperty","authType","data","email","post","then","registerUserService","resetUserPasswordService","put","activateUserService","logoutUserService","userLang","navigator","language","userLanguage","slice","lang","i","i18n","use","LanguageDetector","initReactI18next","Backend","init","lng","backend","loadPath","fallbackLng","debug","ns","defaultNS","keySeparator","useDataAttrOptions","interpolation","escapeValue","formatSeparator","react","wait","authSaga","payload","call","jwtDecode","require","decodedJWT","expirationDate","Date","exp","setItem","roles","sub","expirationTime","getTime","t","logoutSaga","checkAuthTimeoutSaga","delay","checkAuthStateSaga","registrationSaga","activateUserSaga","resetUserPasswordSaga","watchUserAuthentication","takeLatest","takeEvery","startForman","fork","min","max","links","HOME_PAGE","ADMIN_PAGE","SCHEDULE_PAGE","LOGIN","ACTIVATION_PAGE","LOGOUT","TEACHER_SCHEDULE","MY_PROFILE","LessonPage","TeacherList","GroupList","Group","Student","Edit","Delete","AddStudent","SetDisable","ShowStudents","IdParam","IdStudentParam","ClassScheduleTitle","RoomList","SubjectPage","BusyRooms","SemesterPage","MergeRolePage","Changes","ScheduleFor","Registration","RESET_PASSWORD","Departments","LanguageSelector","props","useTranslation","radioLangClasses","languages","changeLanguage","event","target","value","RadioGroup","row","aria-label","className","img","title","map","langItem","FormControlLabel","key","control","Radio","color","onChange","src","alt","renderLangControls","colors","setOpenSnackbar","res","setUser","setLoading","setCurrentSemester","setDefaultSemester","checkAvailabilitySchedule","setFullSchedule","setScheduleType","setTeacher","deleteTeacher","showAllTeachers","setClassScheduleList","showAllGroups","updateSemester","handleSnackbarOpenService","store","dispatch","handleSnackbarCloseService","snackbarStore","getState","snackbarTypes","errorHandler","successHandler","setLoadingService","isLoading","setScheduleLoadingService","setSemesterLoadingService","resetFormHandler","formName","reset","getCurrentSemesterService","get","catch","err","getDefaultSemesterService","getScheduleItemsService","getScheduleItemsServiceBySemester","BUSY_ROOMS","deleteItemFromScheduleService","itemId","delete","setScheduleGroupIdService","setScheduleGroupId","setScheduleTypeService","getFullSchedule","getGroupSchedule","getTeacherSchedule","setScheduleTeacherIdService","setScheduleTeacherId","showAllPublicSemestersService","setScheduleSemesterIdService","setScheduleSemesterId","showAllPublicGroupsService","length","cardType","actionType","showAllPublicTeachersByDepartmentService","departmentId","filtered","setTeacherServiceViewType","setTeacherViewType","cssClasses","Card","class","card","children","dragItemNode","useRef","dragItem","draggable","handleDragEnd","e","JSON","parse","childNodes","groupTitleEl","document","getElementById","allBoards","getElementsByClassName","groupTitles","boards","style","backgroundColor","board","background","display","current","removeEventListener","onDragStart","groupTitle","setTimeout","classList","contains","setItemGroupIdService","addEventListener","dataTransfer","setData","checkUniqSemester","storeSemester","year","description","toUpperCase","validation","EMAIL","PASSWORD","required","lessThanZero","minLengthValue","maxLengthValue","lessThanTime","previousValue","allValues","values","moment","toDate","field","greaterThanTime","uniqueClassName","classId","some","_arr","class_name","checkUniqClassName","uniqueGroup","checkUniqueGroup","uniqueSubject","subjectTitle","checkUniqueSubject","uniqueDepartment","departmentTitle","checkUniqueDepartment","timeIntersect","startTime","endTime","extendMoment","Moment","incomeRange","range","intersect","timeIntersectService","uniqueRoomName","roomName","roomdId","checkUniqueRoomName","test","password","minYearValue","minYear","getFullYear","lessThanDate","greaterThanDate","renderSelectField","input","label","meta","touched","custom","FormControl","InputLabel","htmlFor","Select","native","FormHelperText","renderFromHelper","selectSemesterService","showAllSemestersService","dataGroup","semester_groups","console","log","reverse","switchSaveActions","putSemester","postSemester","handleSemesterService","isUniqueError","semester_days","semester_classes","prop","Object","prototype","indexOf","substring","startDay","endDay","cardSemester","checkSemesterYears","currentScheduleOld","findCurrentSemester","dateEndYear","dateStartYear","conf","window","confirm","getDisabledSemestersService","getArchivedSemestersService","semesterItem","setDisabledSemesters","daysUppercase","day","FreeRoomForm","useEffect","handleSubmit","pristine","submitting","onReset","class_names","classSchedulerOne","onSubmit","Field","component","validate","week","toLowerCase","classNum","Button","variant","disabled","onClick","reduxForm","connect","getClassScheduleListService","bufferArray","results","getPublicClassScheduleListService","putAddClassScheduleOneService","postAddClassScheduleOneService","useState","open","setOpen","Dialog","onClose","maxWidth","aria-labelledby","elem","FREE_ROOMS_URL","dayOfWeek","evenOdd","StyledMenu","withStyles","paper","border","Menu","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuItem","theme","root","palette","primary","main","white","MenuItem","React","anchorEl","setAnchorEl","handleClick","currentTarget","handleClose","anchorElUser","setAnchorElUser","handleClickUserMenu","handleCloseUserMenu","userRole","MANAGER","leftLinks","menu","userMenu","to","aria-controls","aria-haspopup","ListItemIcon","fontSize","keepMounted","Boolean","textDecoration","TEACHER","getUserMenu","CircularProgress","size","userRoles","USER","makeFullSchedule","groupsCount","groupList","groupListId","Map","daysPrepArrayFull","done","set","prep_schedule_array","oddArray","evenArray","groupItem","groupIndex","classFull","groupFullIterate","days","dayFullIterate","classes","dayFullIterable","weeks","odd","even","cards","resultArray","disabledCard","LinkToMeetingDialog","cardId","isHide","linkToMeeting","disableBackdropClick","DialogTitle","href","LinkToMeeting","openDialog","setOpenDialog","focus","places","TOGETHER","AUDITORY","ONLINE","getFirstLetter","word","charAt","getTeacherFullName","patronymic","getTeacherForSite","position","shortid","currentDay","now","getDay","matchDayNumberSysytemToDayName","setLink","place","getHref","printWeekNumber","startScheduleDate","date","parsed","Array","from","numberOfDays","Math","floor","ceil","getWeekNumber","isOddFunction","num","currentWeekType","renderClassCell","prepareLessonCardCell","inner","subjectForSite","prepareLessonSubCardCell","room","i18next","lessonType","link","prepareLessonTemporaryCardCell","temporary_schedule","prepareTeacherCardRegularCell","buildLessonWithRoom","prepareTeacherCardCell","renderScheduleGroupHeader","TableHead","TableRow","TableCell","generate","renderGroupTable","isOdd","TableContainer","Table","TableBody","classDay","classIndex","isOddWeek","entries","renderGroupDayClass","renderGroupCells","isCurrentDay","colspan","rowspan","classname","skip_render","weekly_render","colSpan","rowSpan","renderDay","dayName","dayItem","semesterClassesCount","cardIndex","prepareForRender","day_name","classesCount","dayClassName","oddWeekClass","evenWeekClass","Fragment","renderFirstDayFirstClassFirstCardLine","renderFirstDayOtherClassFirstCardLine","renderFullSchedule","fullResultSchedule","scheduleTitle","renderScheduleDays","renderTeacherClassCell","teacherLessonAddCellClass","buildGroupNumber","prepareTeacherTemporaryCardCell","renderWeekTable","scheduleRow","clas","renderClassRow","renderTeacherRangeSchedule","dayIndex","renderTeacherRangeDay","renderFirstLineTable","lessonItem","subject_for_site","group_name","lessonClassName","lessonIndex","renderLessonsRestLines","useStyles","makeStyles","margin","spacing","initialValues","groupDisabled","setGroupDisabled","setSemesterId","loadingContainer","initialize","renderSemesterList","change","labelId","setPlace","history","useHistory","location","useLocation","emptySchedule","renderDownloadLink","entity","entityId","languageToRequest","PUBLIC_DOWNLOAD_GROUP_SCHEDULE_URL","PUBLIC_DOWNLOAD_TEACHER_SCHEDULE_URL","rel","download","renderSchedule","resultArrays","evenDaysPrepArray","oddDaysPrepArray","evenDayPrep","oddDayPrep","oddDay","oddClas","clasIndex","dayArr","evenDay","evenClas","makeGroupSchedule","renderGroupScheduleTitle","oddDays","evenDays","oddClasses","evenClasses","dayTeacher","oddClass","evenClass","makeTeacherSchedule","getTeacherWithPosition","renderTeacherScheduleTitle","archive","groupPath","teacherPath","submitSearchSchedule","changePlace","pathname","params","URLSearchParams","search","getSchedule","renderMounthPicker","inputProps","invalid","utils","MomentUtils","DatePicker","minDate","clearable","format","helperText","add","renderMonthPicker","FOR_TEACHER_SCHEDULE_URL","replace","getTeacherScheduleService","selectGroupService","showAllGroupsService","createGroupService","updateGroupService","getDisabledGroupsService","setDisabledGroups","isObjectEmpty","object","toString","stringify","showAllTeachersService","getTeachersWithoutAccount","updateTeacherService","updateTeacherCard","getDisabledTeachersService","selectTeacherCardService","handleTeacherService","cardTeacher","createTeacherService","teacherCardId","getLessonsByGroupService","handleLessonCardService","cardObj","groupData","lessonCardId","hours","grouped","cardObjectHandler","storeLesson","checkUniqLesson","setUniqueErrorService","isCopy","updateLessonCard","selectLessonCardService","updateLessonHandler","selectGroupIdService","showListOfRoomsService","getDisabledRoomsService","createRoomService","newValue","typeDescription","Board","onDrop","preventDefault","card_id","getData","arr","split","obj","lessonId","periodId","SCHEDULE_CHECK_AVAILABILITY_URL","checkAvailabilityScheduleService","setModalData","onDragOver","onDragLeave","parent","parentNode","onMouseOver","onMouseLeave","remove","ScheduleItem","translation","fStrLetterCapital","addition","itemNodeId","deleteNodeId","isGroupped","inBoard","deleteItem","editItem","firstStringLetterCapital","str","c","GroupField","styled","TextField","width","ScheduleLessonsList","defaultProps","options","getOptionLabel","option","firstStringLetterCapitalHandle","Autocomplete","clearOnEscape","openOnFocus","groupFinderHandle","renderInput","els","hoursInSchedule","lessonItems","roomField","ScheduleDialog","itemData","setRoom","sure","setSure","x","y","available","classSuitsToTeacher","teacherAvailable","Schedule","setItemData","prevGroupId","ref","usePrevious","el","scrollIntoView","block","inline","setNewItemHandle","addItemToScheduleService","roomId","setEditItemHandle","SCHEDULE_ITEM_ROOM_CHANGE","handleClickOpen","dayContainerHeight","elClasses","dayContainer","height","maxHeight","deleteItemFromScheduleHandler","editItemOnScheduleHandler","period","ROOMS_AVAILABILITY","checkAvailabilityChangeRoomScheduleService","conditionFunc","classNumber","addDeleteBtnToItem","itemNode","deleteNode","allLessons","itemInBoard","scheduleItems","handleClearSchedule","CLEAR_SCHEDULE_URL","renderTextField","placeholder","setEnabledDepartment","getAllDepartmentsService","setDisabledDepartmentService","clearDepartment","getDepartmentByIdService","setDisableButton","getClearOrCancelTitle","AddTeacher","initializeFormHandler","onSetSelectedCard","ConfirmDialog","whatDelete","LESSON","CLASS","GROUP","ROOM","TYPE","TEMPORARY_SCHEDULE","SUBJECT","SEMESTER","term","String","SearchPanel","SearchChange","showDisabled","showArchived","setTerm","checkedB","checkedArchived","setState","handleChange","checked","Switch","NotFound","match","url","Alert","SnackbarComponent","handleSnackbarClose","Snackbar","autoHideDuration","severity","selectSubjectService","subjectId","showAllSubjectsService","createSubjectService","updateSubjectService","getDisabledSubjectsService","setDisabledSubjects","getAllStudentsByGroupId","updateStudentService","selectStudentService","prevGroup","studentId","goToGroupPage","AddStudentDialog","useStyles1","flexShrink","marginLeft","RenderStudentTableActions","useTheme","count","page","rowsPerPage","onPageChange","IconButton","direction","useStyles2","table","minWidth","StyledTableCell","head","black","body","StyledTableRow","hover","RenderStudentTable","onDeleteStudent","checkBoxStudents","handleCheckElement","handleAllChecked","handleAllClear","handleChangeCheckedAllBtn","handleClearCheckedAllBtn","checkedAllBtn","handleAllCheckedBtn","setPage","setRowsPerPage","openDeleteDialog","setOpenDeleteDialog","openEditDialog","setOpenEditDialog","path","handleEdit","emptyRows","deleteStudent","handleCloseEditDialog","sendObject","getCorrectRowCount","pageItemsCount","resRows","detectCheckingCheckAllBtn","rowsCount","handleCheckElem","Paper","scope","align","mailto","sendMail","selectedValue","TableFooter","TablePagination","labelRowsPerPage","rowsPerPageOptions","SelectProps","newPage","onRowsPerPageChange","parseInt","ActionsComponent","UploadFile","selectedFile","setSelectedFile","fileInputRef","handleCloseDialogFile","accept","files","lastModifiedDate","toLocaleDateString","file","formData","FormData","append","alert","uploadStudentsToGroupFile","ShowStudentsDialog","setCheckBoxStudents","checkedAll","setCheckedAll","openUploadFile","setOpenUploadFile","groupOption","setGroupOption","defaultGroup","setDefaultGroup","parseStudentToCheckBox","groupsOption","changeStudentItem","resData","getExistingGroupStudent","defaultValue","isOptionDisabled","resChecked","setSelectDisabled","studentsTmp","prevState","start","finish","currentStudents","resItem","getShortTitle","MAX_LENGTH","snackbarMessage","setGroupId","hideDialog","setHideDialog","addStudentDialog","setAddStudentDialog","setDisabled","showStudents","setShowStudents","handleAddUser","handleSetDisable","onShowStudentByGroup","idStudent","visibleGroups","studentSubmit","sendData","createStudentService","navigationNames","GROUP_LIST","val","navigation","GROUPS","setEnabledGroupService","setDisabledGroupService","removeGroupCardService","deleteStudentService","handleGroupService","reason","AddRoom","roomType","putNewType","postNewType","NewRoomType","typeId","setTypeId","getOneNewTypeService","roomTypeId","setRoomId","editHandler","selectOneRoomService","visibleItems","ROOM_LIST","ROOMS","setEnabledRoomsService","setDisabledRoomsService","deleteRoom","addNewTypeService","textAlign","setSubjectId","visibleSubjects","SUBJECT_PAGE","SUBJECTS","setDisabledSubjectsService","removeSubjectCardService","handleSubjectService","ModalWindow","windowTitle","isOkButton","isNoButton","okButtonLabel","renderOkButton","noButtonLabel","renderNoButton","renderModalButtons","renderCheckboxField","labelPlacement","Checkbox","MultiselectForGroups","valueRef","onCancel","selectAllOption","isSelectAllSelected","isOptionSelected","actionMeta","removedValue","hideSelectedOptions","closeMenuOnSelect","isMulti","clearCheckboxes","setCurrent","setByDefault","setCheckedDates","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY","selected","setSelected","selectedGroups","setSelectedGroups","openGroupDialog","setOpenGroupDialog","getGroupOptions","groupOptions","semesterOptions","closeDialogForGroup","prepSetCheckedClasses","useForm","setValue","setCheckedClasses","getToday","byDefault","tomorrow","setDate","getDate","getTomorrow","finishTime","setFinishTime","startValue","setStartValue","finishValue","setFinishValue","disabledFinishDate","setDisabledFinishDate","checkedDates","checkedClasses","setMinFinishDate","time","new_date","setCheckedDaysHandler","useCallback","changedDay","setCheckedClassesHandler","classid","changedClass","newDays","reduce","classFullItem","newClasses","isSameOrBefore","setEndTime","keys","semesterDay","scheduleItem","available_semesters_for_copy","submitButtonLabel","SetChangeDialog","openDefault","setOpenDefault","openModal","setOpenModal","openGroupsDialog","setOpenGroupsDialog","setSemesterOptions","edit","setEdit","hideDialogModal","setHideDialogModal","archived","setArchived","handleCreateArchive","CREATE_ARCHIVE_SEMESTER","createArchiveSemesterService","searchArr","setDelete","setDefault","dataId","setEnabledSemestersService","setDisabledSemestersService","removeSemesterCardService","handleSemesterArchivedPreview","viewArchivedSemester","setClassNameForDefaultSemester","SEMESTER_PAGE","SEMESTERS","SEMESTER_COPY_URL","fromSemesterId","toSemesterId","semesterCopy","sem_days","handleClickOpenModal","handleClickOpenDefault","join","arr1","arr2","isEqualsArrObjects","groupIds","setGroupsToSemester","getUsersService","autoCompleteField","defaultPropsTeachers","defaultPropsUsers","mergeUserAndTeacherHandle","mergeObj","userId","USERS","CHANGES","busyRoomsLength","renderWeekRoomInfo","scheduleClass","in_arrayIndex","class_id","classOne","intersectClass","grouppedLessonClass","lessonOne","hoverInfo","teacher_for_site","busyRoom","room_id","room_name","room_type","schedules","renderRoomDay","TEACHER_LIST","CLASS_SCHEDULE_TITLE","DEPARTMENTS","LESSON_PAGE","MERGE_ROLE_PAGE","GENERAL","MultiSelect","onChangeSemesterValue","onSentTeachers","isEnabledSentBtn","setTeacherId","openSelect","setOpenSelect","teacherLength","selectedSemester","setSelectedSemester","departmentOptions","selectTeacherCard","removeTeacherCard","removeTeacherCardService","closeSelectionDialog","clearSelection","TEACHERS","setEnabledTeachersService","setDisabledTeachersService","teachersId","sendTeachersScheduleService","RenderMultiselect","hidePlaceholder","displayValue","selectedValues","alwaysDisplayedItem","onBlur","onSelect","onRemove","preSelectedValues","disablePreSelectedValues","notSelected","LessonForm","setChecked","handleTeacherInfo","setValueToSubjectForSiteHandler","rowsMax","multiline","Accordion","AccordionSummary","expandIcon","Typography","AccordionDetails","renderTimePicker","TimePicker","ampm","rootInput","ClassScheduleOne","setClassId","getClassScheduleOneService","PERIOD","deleteClassScheduleOneService","addClassScheduleOneService","clear","editDepartment","RenderTeacherTableActions","RenderTeacherTable","isDisabled","setIsDisabled","deleteDialog","setDeleteDialog","setDepartmentId","setDepartment","teacherDialog","setTeacherDialog","setEditDepartment","clearDepartmentForm","visibleDepartments","deleteDepartment","setDepartmentIntoForm","deleteDepartmentsService","prev","createDepartmentService","updateDepartmentService","general","tabs_components","a11yProps","flexGrow","header","info","dark","nav","select","btn","gen","setGen","document_title","AppBar","Tabs","indicatorColor","scrollButtons","tab_one","Tab","groupField","CopyLessonDialog","setGroup","setError","multiple","LessonsList","getUkWordHours","number","getHour","getEnHour","lastChar","getUkHour","onCopyLesson","onSelectLesson","onClickOpen","getTitle","getTeacherName","openCopyLessonDialog","setOpenCopyLessonDialog","setLessonId","copiedLesson","setCopiedLesson","lessonLength","selectLessonCardHandler","submitCopy","LESSONS_FROM_SEMESTER_COPY_URL","CopyLessonsFromSemesterService","cardsContainer","groupHandle","groupTitleHandle","lessonGroupObj","copyLessonCardService","deleteLessonCard","constructor","renderCopyLessonsForm","LESSONS","onLogout","onActivate","redirect","AUTH","submitTeacherChange","teacher_name","teacher_surname","teacher_patronymic","teacher_position","updateUserTeacher","handlePasswordFormReset","handleTeacherFormReset","new_password","confirm_password","current_password","updateUserPassword","passwords","renderTeacherdataForm","authTypes","LoginForm","loginError","switchAuthMode","RegistrationForm","registrationError","emailValidate","emailErrorCondition","emailAdvancedValidate","passwordValidate","passwordsCondition","passwordValidateAdvanced","retypePasswordValidate","retypePasswordValidateAdvanced","ResetPasswordForm","resetPasswordError","onAuth","onRegister","onResetPassword","setAuthType","parser","URL","social","isToken","param","splitedParam","replaceState","isSuccess","loginHandler","loginData","commonCondition","authRedirect","authPage","switchAuthModeHandler","registrationData","retypePassword","resetPasswordData","Register","ResetPassword","Login","routes","exact","HomePage","GroupSchedulePage","ActivationPage","ProfilePage","SchedulePage","DepartmentPage","AdminPage","ClassSchedule","ChangePasswordForm","Logout","TeacherSchedule","onTryAutoLogin","authCheckState","fallback","hostname","sagaMiddleware","createSagaMiddleware","composeEnhancers","compose","createStore","applyMiddleware","run","rootSaga","ReactDOM","render","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.3da662f3.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionsType';\nfunction compare(a, b) {\n    let comparison = 0;\n    if (a.surname > b.surname) {\n        comparison = 1;\n    } else if (a.surname < b.surname) {\n        comparison = -1;\n    }\n    return comparison;\n}\n\nconst teachers = (\n    state = {\n        teachers: [],\n        teacher: {},\n        disabledTeachers: []\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.ADD_TEACHER:\n            return {\n                ...state,\n                teachers: [...state.teachers, action.result].sort(compare)\n            };\n\n        case actionTypes.DELETE_TEACHER:\n            return {\n                ...state,\n                teachers: [\n                    ...state.teachers.filter(\n                        teachers => teachers.id !== action.result\n                    )\n                ]\n            };\n\n        case actionTypes.SET_TEACHER:\n            return {\n                ...state,\n                teacher: action.result\n            };\n        case actionTypes.SELECT_TEACHER:\n            let teacher = state.teachers.filter(\n                teacher => teacher.id === action.result\n            )[0];\n            if (!teacher) {\n                teacher = { id: null };\n            }\n            return {\n                ...state,\n                teacher: teacher\n            };\n\n        case actionTypes.UPDATE_TEACHER:\n            const updatedTeacher = [];\n            state.teachers.forEach(teacher => {\n                if (teacher.id === action.result.id) {\n                    teacher = { ...teacher, ...action.result };\n                }\n                updatedTeacher.push(teacher);\n            });\n            return {\n                ...state,\n                teacher: {},\n                teachers: updatedTeacher\n            };\n\n        case actionTypes.SHOW_ALL:\n            return {\n                ...state,\n                teachers: [...action.result]\n            };\n        case actionTypes.SET_DISABLED_TEACHERS:\n            return {\n                ...state,\n                disabledTeachers: [...action.result]\n            };\n        case actionTypes.GET_TEACHERS_BY_DEPARTMENT:\n            return {\n            ...state,\n            teachers: [...action.result]\n        };\n\n        default:\n            return state;\n    }\n};\n\nexport default teachers;\n","export const ADD_LESSON_CARD = 'ADD_LESSON_CARD';\nexport const SET_LESSONS_CARDS = 'SET_LESSONS_CARDS';\nexport const SET_LESSON_TYPES = 'SET_LESSON_TYPES';\nexport const DELETE_LESSON_CARD = 'DELETE_LESSON_CARD';\nexport const SELECT_LESSON_CARD = 'SELECT_LESSON_CARD';\nexport const UPDATE_LESSON_CARD = 'UPDATE_LESSON_CARD';\nexport const SELECT_GROUP_ID = 'SELECT_GROUP_ID';\nexport const SET_UNIQUE_ERROR = 'SET_UNIQUE_ERROR';\n\nexport const SET_TEMPORARY_SCHEDULES = 'SET_TEMPORARY_SCHEDULES';\nexport const SET_SCHEDULES_AND_TEMPORARY_SCHEDULES = 'SET_SCHEDULES_AND_TEMPORARY_SCHEDULES';\nexport const SELECT_TEMPORARY_SCHEDULE = 'SELECT_TEMPORARY_SCHEDULE';\nexport const SELECT_VACATION = 'SELECT_VACATION';\nexport const SELECT_TEACHER_ID = 'SELECT_TEACHER_ID';\n\nexport const SET_OPEN_SNACKBAR = 'SET_OPEN_SNACKBAR';\n\nexport const SET_USERS = 'SET_USERS';\nexport const SET_USER = 'SET_USER';\n\nexport const AUTH_USER = 'AUTH_USER';\nexport const AUTH_USER_SUCCESS = 'AUTH_USER_SUCCESS';\nexport const AUTH_USER_ERROR = 'AUTH_USER_ERROR';\nexport const AUTH_USER_INITIATE_LOGOUT = 'AUTH_USER_INITIATE_LOGOUT';\nexport const AUTH_USER_LOGOUT = 'AUTH_USER_LOGOUT';\nexport const AUTH_USER_AUTO_LOGOUT = 'AUTH_USER_AUTO_LOGOUT';\nexport const AUTH_USER_CHECK_STATE = 'AUTH_USER_CHECK_STATE';\nexport const SET_AUTH_ERROR = 'SET_AUTH_ERROR';\n\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const REGISTER_USER_ERROR = 'REGISTER_USER_ERROR';\n\nexport const RESET_USER_PASSWORD = 'RESET_USER_PASSWORD';\nexport const RESET_USER_PASSWORD_SUCCESS = 'RESET_USER_PASSWORD_SUCCESS';\nexport const RESET_USER_PASSWORD_ERROR = 'RESET_USER_PASSWORD_ERROR';\n\nexport const ACTIVATE_USER = 'ACTIVATE_USER';\nexport const ACTIVATE_USER_SUCCESS = 'ACTIVATE_USER_SUCCESS';\nexport const ACTIVATE_USER_ERROR = 'ACTIVATE_USER_ERROR';\n\nexport const SET_LOADING_INDICATOR = 'SET_LOADING_INDICATOR';\nexport const SET_SCHEDULE_LOADING_INDICATOR = 'SET_SCHEDULE_LOADING_INDICATOR';\nexport const SET_SEMESTER_LOADING_INDICATOR = 'SET_SEMESTER_LOADING_INDICATOR';\n\nexport const SET_SCHEDULE_ITEMS = 'SET_SCHEDULE_ITEMS';\nexport const SET_CURRENT_SEMESTER = 'SET_CURRENT_SEMESTER';\nexport const SET_DEFAULT_SEMESTER = 'SET_DEFAULT_SEMESTER';\nexport const ADD_ITEM_TO_SCHEDULE = 'ADD_ITEM_TO_SCHEDULE';\nexport const CHECK_AVAILABILITY_SCHEDULE = 'CHECK_AVAILABILITY_SCHEDULE';\nexport const SET_FULL_SCHEDULE = 'SET_FULL_SCHEDULE';\nexport const SET_GROUP_SCHEDULE = 'SET_GROUP_SCHEDULE';\nexport const SET_SCHEDULE_TYPE = 'SET_SCHEDULE_TYPE';\nexport const DELETE_ITEM_FROM_SCHEDULE = 'DELETE_ITEM_FROM_SCHEDULE';\nexport const SET_ITEM_GROUP_ID = 'SET_ITEM_GROUP_ID';\n\nexport const ADD_TEACHER = 'ADD_TEACHER';\nexport const SELECT_TEACHER = 'SELECT_TEACHER';\nexport const SET_TEACHER = 'SET_TEACHER';\nexport const UPDATE_TEACHER = 'UPDATE_TEACHER';\nexport const DELETE_TEACHER = 'DELETE_TEACHER';\nexport const SHOW_ALL = 'SHOW_ALL';\nexport const GET_TEACHERS_BY_DEPARTMENT='GET_TEACHERS_BY_DEPARTMENT';\n\n\nexport const SHOW_ALL_BUSY_ROOMS = 'SHOW_ALL_BUSY_ROOMS';\n\nexport const SET_CLASS_SCHEDULE_LIST = 'SET_CLASS_SCHEDULE_LIST';\nexport const ADD_CLASS_SCHEDULE_ONE = 'ADD_CLASS_SCHEDULE_ONE';\nexport const GET_CLASS_SCHEDULE_LIST = 'GET_CLASS_SCHEDULE_LIST';\nexport const GET_CLASS_SCHEDULE_ONE = 'GET_CLASS_SCHEDULE_ONE';\nexport const DELETE_CLASS_SCHEDULE_ONE = 'DELETE_CLASS_SCHEDULE_ONE';\nexport const UPDATE_CLASS_SCHEDULE_ONE = 'UPDATE_CLASS_SCHEDULE_ONE';\nexport const CLEAR_CLASS_SCHEDULE_ONE = 'CLEAR_CLASS_SCHEDULE_ONE';\n\nexport const ADD_GROUP = 'ADD_GROUP';\nexport const DELETE_GROUP = 'DELETE_GROUP';\nexport const SHOW_ALL_GROUPS = 'SHOW_ALL_GROUPS';\nexport const SELECT_GROUP = 'SELECT_GROUP';\nexport const UPDATE_GROUP = 'UPDATE_GROUP';\nexport const CLEAR_GROUP = 'CLEAR_GROUP';\n\nexport const ADD_STUDENT='ADD_STUDENT';\nexport const SHOW_ALL_STUDENTS_BY_GROUP_ID='SHOW_ALL_STUDENTS_BY_GROUP_ID';\nexport const SHOW_ALL_STUDENTS='SHOW_ALL_STUDENTS';\nexport const DELETE_STUDENT='DELETE_STUDENT';\nexport const SET_STUDENT='SET_STUDENT';\nexport const UPDATE_STUDENT='UPDATE_STUDENT';\n\nexport const ADD_ROOM = 'ADD_ROOM';\nexport const DELETE_ROOM = 'DELETE_ROOM';\nexport const SHOW_LIST_OF_ROOMS = 'SHOW_LIST_OF_ROOMS';\nexport const SELECT_ONE_ROOM = 'SELECT_ONE_ROOM';\nexport const UPDATE_ONE_ROOM = 'UPDATE_ONE_ROOM';\nexport const CLEAR_ROOM_ONE = 'CLEAR_ROOM_ONE';\nexport const GET_ALL_ROOM_TYPES = 'GET_ALL_ROOM_TYPES';\nexport const POST_NEW_TYPE = 'POST_NEW_TYPE';\nexport const DELETE_TYPE = 'DELETE_TYPE';\nexport const GET_ONE_NEW_TYPE = 'GET_ONE_NEW_TYPE';\nexport const UPDATE_ONE_TYPE = 'UPDATE_ONE_TYPE';\nexport const CLEAR_ONE_NEW_TYPE = 'CLEAR_ONE_NEW_TYPE';\nexport const SHOW_FREE_ROOMS = 'SHOW_FREE_ROOMS';\nexport const CLEAR_FREE_ROOM = 'CLEAR_FREE_ROOM';\n\nexport const ADD_SUBJECT = 'ADD_SUBJECT';\nexport const DELETE_SUBJECT = 'DELETE_SUBJECT';\nexport const SHOW_ALL_SUBJECTS = 'SHOW_ALL_SUBJECT';\nexport const SELECT_SUBJECT = 'SELECT_SUBJECT';\nexport const UPDATE_SUBJECT = 'UPDATE_SUBJECT';\nexport const CLEAR_SUBJECT = 'CLEAR_SUBJECT';\n\nexport const ADD_DEPARTMENT='ADD_DEPARTMENT';\nexport const GET_ALL_DEPARTMENTS='GET_ALL_DEPARTMENTS';\nexport const CLEAR_DEPARTMENT_FORM='CLEAR_DEPARTMENT_FORM';\nexport const DELETE_DEPARTMENT='DELETE_DEPARTMENT';\nexport const GET_DISABLED_DEPARTMENTS='GET_DISABLED_DEPARTMENTS';\nexport const SET_DISABLED_DEPARTMENT='SET_DISABLED_DEPARTMENT';\nexport const SET_ENABLED_DEPARTMENT='SET_ENABLED_DEPARTMENT';\nexport const GET_DEPARTMENT_BY_ID='GET_DEPARTMENT_BY_ID';\nexport const UPDATE_DEPARTMENT='UPDATE_DEPARTMENT';\n\nexport const SET_SCHEDULE_GROUP_ID = 'SET_SCHEDULE_GROUP_ID';\n\nexport const ADD_SEMESTER = 'ADD_SEMESTER';\nexport const DELETE_SEMESTER = 'DELETE_SEMESTER';\nexport const SHOW_ALL_SEMESTERS = 'SHOW_ALL_SEMESTER';\nexport const SELECT_SEMESTER = 'SELECT_SEMESTER';\nexport const UPDATE_SEMESTER = 'UPDATE_SEMESTER';\nexport const CLEAR_SEMESTER = 'CLEAR_SEMESTER';\nexport const SET_ERROR = 'SET_ERROR';\nexport const SET_ARCHIVED_SEMESTERS = 'SET_ARCHIVED_SEMESTERS';\n\nexport const SET_DISABLED_ROOMS = 'SET_DISABLED_ROOMS';\nexport const SET_DISABLED_TEACHERS = 'SET_DISABLED_TEACHERS';\nexport const SET_DISABLED_GROUPS = 'SET_DISABLED_GROUPS';\nexport const SET_DISABLED_SEMESTERS = 'SET_DISABLED_SEMESTERS';\nexport const SET_DISABLED_SUBJECTS = 'SET_DISABLED_SUBJECTS';\n\nexport const SET_SCHEDULE_TEACHER_ID = 'SET_SCHEDULE_TEACHER_ID';\nexport const SET_TEACHER_SCHEDULE = 'SET_TEACHER_SCHEDULE';\nexport const SET_SEMESTER_LIST = 'SET_SEMESTER_LIST';\nexport const SET_SCHEDULE_SEMESTER_ID = 'SET_SCHEDULE_SEMESTER_ID';\nexport const SET_TEACHER_RANGE_SCHEDULE = 'SET_TEACHER_RANGE_SCHEDULE';\nexport const SET_TEACHER_VIEW_TYPE = 'SET_TEACHER_VIEW_TYPE';\nexport const MOVE_SEMESTER_TO_ARCHIVE = 'MOVE_SEMESTER_TO_ARCHIVE';\n","export const updateObject = (oldObject, updatedValues) => {\n  return {\n    ...oldObject,\n    ...updatedValues\n  };\n};\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    lessons: [],\n    lessonTypes: [],\n    lesson: {},\n    groupId: null,\n    uniqueError: false\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_LESSON_CARD:\n            return updateObject(state, {\n                lessons: state.lessons.concat(action.result)\n            });\n        case actionTypes.SET_LESSONS_CARDS:\n            return updateObject(state, {\n                lessons: action.result\n            });\n        case actionTypes.SET_LESSON_TYPES:\n            return updateObject(state, {\n                lessonTypes: action.result\n            });\n        case actionTypes.DELETE_LESSON_CARD:\n            state.lessons = state.lessons.filter(\n                lesson => lesson.id !== action.result\n            );\n            return updateObject(state, {\n                lessons: state.lessons\n            });\n        case actionTypes.SELECT_LESSON_CARD:\n            let lesson = state.lessons.filter(\n                lesson => lesson.id === action.result\n            )[0];\n            if (!lesson) {\n                lesson = { id: null };\n            }\n            return updateObject(state, {\n                lesson: lesson\n            });\n        case actionTypes.UPDATE_LESSON_CARD:\n            const updatedLessons = [];\n            state.lessons.forEach(lesson => {\n                if (lesson.id === action.result.id) {\n                    lesson = { ...lesson, ...action.result };\n                }\n                updatedLessons.push(lesson);\n            });\n            return updateObject(state, {\n                lessons: updatedLessons,\n                lesson: {}\n            });\n        case actionTypes.SELECT_GROUP_ID:\n            return updateObject(state, {\n                lesson: {},\n                groupId: action.result\n            });\n        case actionTypes.SET_UNIQUE_ERROR:\n            return updateObject(state, {\n                uniqueError: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    temporarySchedules: [],\n    temporarySchedule: {},\n    vacation: {},\n    schedulesAndTemporarySchedules: [],\n    teacherId: null,\n    changedScheduleId: null\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_TEMPORARY_SCHEDULES:\n            return updateObject(state, {\n                temporarySchedules: action.result\n            });\n        case actionTypes.SET_SCHEDULES_AND_TEMPORARY_SCHEDULES:\n            return updateObject(state, {\n                schedulesAndTemporarySchedules: action.result\n            });\n        case actionTypes.SELECT_TEMPORARY_SCHEDULE:\n            return updateObject(state, {\n                temporarySchedule: action.result\n            });\n        case actionTypes.SELECT_VACATION:\n            return updateObject(state, {\n                vacation: action.result\n            });\n        case actionTypes.SELECT_TEACHER_ID:\n            return updateObject(state, {\n                teacherId: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    isSnackbarOpen: false,\n    snackbarType: null,\n    message: null\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_OPEN_SNACKBAR:\n            let type = action.result.type;\n            let message = action.result.message;\n            return updateObject(state, {\n                isSnackbarOpen: action.result.isOpen,\n                snackbarType: type,\n                message: message\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import axios from 'axios';\nimport { TOKEN_BEGIN } from '../constants/tokenBegin';\n\nlet REACT_APP_API_BASE_URL = \"/\";\nif(process.env.REACT_APP_API_BASE_URL !== undefined){\n    REACT_APP_API_BASE_URL = process.env.REACT_APP_API_BASE_URL.trim();\n}\nconst instance = axios.create({\n    baseURL: REACT_APP_API_BASE_URL\n});\n\nconst token = localStorage.getItem('token');\nif (token && token.includes(TOKEN_BEGIN)) {\n    instance.defaults.headers.common.Authorization = token;\n}\n\nexport default instance;\n","export const TOKEN_BEGIN= 'Bearer_';\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\nimport axios from '../../helper/axios';\n\nconst initialState = {\n    token: null,\n    role: null,\n    error: null,\n    activationError: null\n};\n\nconst reducer = (state = initialState, action) => {\n    const response = action.response;\n\n    switch (action.type) {\n        case actionTypes.AUTH_USER_SUCCESS:\n            return updateObject(state, {\n                token: response.token,\n                role: response.role,\n                error: null\n            });\n        case actionTypes.AUTH_USER_ERROR:\n            return updateObject(state, {\n                response,\n                error: { login: action.error }\n            });\n        case actionTypes.AUTH_USER_LOGOUT:\n            delete axios.defaults.headers.common.Authorization;\n\n            localStorage.removeItem('token');\n            localStorage.removeItem('expirationDate');\n            localStorage.removeItem('userRole');\n            return updateObject(state, {\n                response: null,\n                token: null,\n                error: null,\n                role: null\n            });\n        case actionTypes.REGISTER_USER_SUCCESS:\n            return updateObject(state, {\n                response\n            });\n        case actionTypes.REGISTER_USER_ERROR:\n            return updateObject(state, {\n                error: { registration: { reg: action.error } }\n            });\n        case actionTypes.RESET_USER_PASSWORD_SUCCESS:\n            return updateObject(state, {\n                resetPasswordResponse: response\n            });\n        case actionTypes.RESET_USER_PASSWORD_ERROR:\n            return updateObject(state, {\n                error: action.error\n            });\n        case actionTypes.ACTIVATE_USER_SUCCESS:\n            return updateObject(state, {\n                response\n            });\n        case actionTypes.ACTIVATE_USER_ERROR:\n            return updateObject(state, {\n                activationError: action.error\n            });\n        case actionTypes.SET_AUTH_ERROR:\n            return updateObject(state, {\n                error: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    loading: false,\n    scheduleLoading: false,\n    semesterLoading: false\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_LOADING_INDICATOR:\n            return updateObject(state, {\n                loading: action.result\n            });\n        case actionTypes.SET_SCHEDULE_LOADING_INDICATOR:\n            return updateObject(state, {\n                scheduleLoading: action.result\n            });\n        case actionTypes.SET_SEMESTER_LOADING_INDICATOR:\n            return updateObject(state, {\n                semesterLoading: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    items: [],\n    availability: {},\n    itemsIds: [],\n    fullSchedule: [],\n    groupSchedule: {},\n    scheduleType: '',\n    scheduleGroupId: 0,\n    currentSemester: {},\n    defaultSemester:{},\n    viewTeacherScheduleResults: 'block-view'\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_SCHEDULE_ITEMS:\n            return updateObject(state, {\n                items: action.result\n            });\n        case actionTypes.SET_CURRENT_SEMESTER:\n            return updateObject(state, {\n                currentSemester: action.result\n            });\n        case actionTypes.SET_DEFAULT_SEMESTER:\n            return updateObject(state, {\n                defaultSemester: action.result\n            });\n        case actionTypes.CHECK_AVAILABILITY_SCHEDULE:\n            return updateObject(state, {\n                availability: action.result\n            });\n        case actionTypes.ADD_ITEM_TO_SCHEDULE:\n            const id = action.result.id;\n            let itemArr;\n            if (id) {\n                const index = state.items.findIndex(item => {\n                    return item.id === id;\n                });\n                if (index < 0) {\n                    itemArr = state.items.concat(action.result);\n                } else {\n                    state.items.splice(index, 1, action.result);\n                    itemArr = state.items;\n                }\n            } else {\n                itemArr = state.items.concat(action.result);\n            }\n            return updateObject(state, {\n                items: itemArr\n            });\n        case actionTypes.SET_SCHEDULE_TYPE:\n            return updateObject(state, {\n                groupSchedule: {},\n                fullSchedule: [],\n                scheduleType: action.newType\n            });\n        case actionTypes.SET_FULL_SCHEDULE:\n            updateObject(state, {\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n            return updateObject(state, {\n                fullSchedule: action.result\n            });\n        case actionTypes.SET_GROUP_SCHEDULE:\n            return updateObject(state, {\n                groupSchedule: action.result,\n                fullSchedule: [],\n\n            });\n        case actionTypes.SET_ITEM_GROUP_ID:\n            return updateObject(state, {\n                itemGroupId: action.result\n            });\n        case actionTypes.SET_SCHEDULE_GROUP_ID:\n            return updateObject(state, {\n                scheduleGroupId: action.groupId,\n                scheduleTeacherId: null,\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n        case actionTypes.DELETE_ITEM_FROM_SCHEDULE:\n            const index = state.items.findIndex(\n                item => item.id === action.result\n            );\n            state.items.splice(index, 1);\n            const newArr = state.items;\n            return updateObject(state, {\n                items: newArr\n            });\n\n        case actionTypes.SET_SCHEDULE_TEACHER_ID:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                scheduleTeacherId: action.teacherId,\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n        case actionTypes.SET_TEACHER_SCHEDULE:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                teacherSchedule: action.result,\n                scheduleTeacherId:`${action.result.teacher.id}`,\n                groupSchedule: {},\n                fullSchedule: []\n            });\n        case actionTypes.SET_SEMESTER_LIST:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                scheduleTeacherId: null,\n                teacherSchedule: {},\n                groupSchedule: {},\n                fullSchedule: [],\n                semesters: action.result\n            });\n        case actionTypes.SET_SCHEDULE_SEMESTER_ID:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                scheduleTeacherId: null,\n                scheduleSemesterId: action.semesterId,\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n        case actionTypes.SET_TEACHER_RANGE_SCHEDULE:\n            return updateObject(state, {\n                teacherRangeSchedule: action.result,\n                scheduleGroupId: null,\n                teacherSchedule: [],\n                groupSchedule: {},\n                fullSchedule: []\n            });\n        case actionTypes.SET_TEACHER_VIEW_TYPE:\n            return updateObject(state, {\n                viewTeacherScheduleResults: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from \"../actions/actionsType\";\nconst classActions = (\n  state = {\n    classScheduler: [],\n    classScheduleOne: {}\n  },\n  action\n) => {\n  switch (action.type) {\n    case actionTypes.SET_CLASS_SCHEDULE_LIST:\n      return {\n        ...state,\n        classScheduler: [...action.classScheduler]\n      };\n    case actionTypes.ADD_CLASS_SCHEDULE_ONE:\n      return {\n        ...state,\n        classScheduleOne: {},\n        classScheduler: [...state.classScheduler, action.classSchedulOne]\n      };\n    case actionTypes.GET_CLASS_SCHEDULE_LIST:\n      return state;\n    case actionTypes.GET_CLASS_SCHEDULE_ONE:\n      const one = state.classScheduler.filter(\n        classScheduleItem => classScheduleItem.id === action.classSchedulOne\n      );\n      return {\n        ...state,\n        classScheduleOne: one[0]\n      };\n    case actionTypes.DELETE_CLASS_SCHEDULE_ONE:\n      return {\n        ...state,\n        classScheduler: state.classScheduler.filter(\n          classScheduleItem => classScheduleItem.id !== action.classSchedulOne\n        )\n      };\n    case actionTypes.UPDATE_CLASS_SCHEDULE_ONE:\n      let classSchedulerstate = [...state.classScheduler];\n      classSchedulerstate[\n        classSchedulerstate.findIndex(\n          classItem => classItem.id === action.classSchedulOne.id\n        )\n      ] = action.classSchedulOne;\n      return {\n        ...state,\n        classScheduleOne: {},\n        classScheduler: [...classSchedulerstate]\n      };\n    case actionTypes.CLEAR_CLASS_SCHEDULE_ONE:\n      return {\n        ...state,\n        classScheduleOne: {}\n      };\n    default:\n      return state;\n  }\n};\nexport default classActions;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    subjects: [],\n    subject: {},\n    disabledSubjects: []\n};\n\nconst subjects = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_SUBJECT:\n            return updateObject(state, {\n                subjects: state.subjects.concat(action.result),\n                subject: state.subject\n            });\n\n        case actionTypes.DELETE_SUBJECT:\n            state.subjects = state.subjects.filter(\n                subject => subject.id !== action.result\n            );\n            return updateObject(state, {\n                subjects: state.subjects,\n                subject: state.subject\n            });\n\n        case actionTypes.SHOW_ALL_SUBJECTS:\n            return updateObject(state, {\n                subjects: action.result,\n                subject: state.subject\n            });\n\n        case actionTypes.SET_DISABLED_SUBJECTS:\n            return updateObject(state, {\n                disabledSubjects: action.result\n            });\n\n        case actionTypes.SELECT_SUBJECT:\n            let subject = state.subjects.filter(\n                subject => subject.id === action.result\n            )[0];\n            if (!subject) {\n                subject = { id: null };\n            }\n            return updateObject(state, {\n                subjects: state.subjects,\n                subject: subject\n            });\n\n        case actionTypes.UPDATE_SUBJECT:\n            const updatedSubjects = [];\n            state.subjects.forEach(subject => {\n                if (subject.id === action.result.id) {\n                    subject = { ...subject, ...action.result };\n                }\n                updatedSubjects.push(subject);\n            });\n            return updateObject(state, {\n                subjects: updatedSubjects,\n                subject: {}\n            });\n\n        case actionTypes.CLEAR_SUBJECT:\n            return {\n                ...state,\n                subject: {}\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default subjects;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    groups: [],\n    group: {},\n    disabledGroups: []\n};\n\nconst groups = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_GROUP:\n            return updateObject(state, {\n                groups: state.groups.concat(action.result),\n                group: state.group\n            });\n\n        case actionTypes.DELETE_GROUP:\n            state.groups = state.groups.filter(\n                group => group.id !== action.result\n            );\n            return updateObject(state, {\n                groups: state.groups,\n                group: state.group\n            });\n\n        case actionTypes.SHOW_ALL_GROUPS:\n            return updateObject(state, {\n                ...state,\n                groups: action.result\n            });\n        case actionTypes.SET_DISABLED_GROUPS:\n            return updateObject(state, {\n                ...state,\n                disabledGroups: action.result\n            });\n\n        case actionTypes.SELECT_GROUP:\n            let group = state.groups.filter(\n                group => group.id === Number(action.result)\n            )[0];\n\n            if (!group) {\n                group = { id: null };\n            }\n            return updateObject(state, {\n                groups: state.groups,\n                group: group\n            });\n\n        case actionTypes.UPDATE_GROUP:\n            const updatedGroups = [];\n            state.groups.forEach(group => {\n                if (group.id === action.result.id) {\n                    group = { ...group, ...action.result };\n                }\n                updatedGroups.push(group);\n            });\n            return updateObject(state, {\n                groups: updatedGroups,\n                group: {}\n            });\n\n        case actionTypes.CLEAR_GROUP:\n            return {\n                ...state,\n                group: {}\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default groups;\n","import * as actionTypes from '../actions/actionsType';\nfunction compare(a, b) {\n    let comparison = 0;\n    if (a.name > b.name) {\n        comparison = 1;\n    } else if (a.name < b.name) {\n        comparison = -1;\n    }\n    return comparison;\n}\nconst rooms = (\n    state = {\n        rooms: [],\n        oneRoom: {},\n        disabledRooms: []\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.ADD_ROOM:\n            return {\n                ...state,\n                oneRoom: {},\n                rooms: [...state.rooms, action.result].sort(compare)\n            };\n        case actionTypes.DELETE_ROOM:\n            return {\n                ...state,\n                oneRoom: {},\n                rooms: [\n                    ...state.rooms.filter(rooms => rooms.id !== action.result)\n                ]\n            };\n\n        case actionTypes.SHOW_LIST_OF_ROOMS:\n            return {\n                ...state,\n                rooms: [...action.result]\n            };\n        case actionTypes.SET_DISABLED_ROOMS:\n            return {\n                ...state,\n                disabledRooms: [...action.result]\n            };\n        case actionTypes.SELECT_ONE_ROOM:\n            const one = state.rooms.filter(\n                roomItem => roomItem.id === action.result\n            );\n            return {\n                ...state,\n                oneRoom: one[0]\n            };\n        case actionTypes.UPDATE_ONE_ROOM:\n            let roomState = [...state.rooms];\n            roomState[\n                roomState.findIndex(\n                    roomItem => roomItem.id === action.result.id\n                )\n            ] = action.result;\n            return {\n                ...state,\n                oneRoom: {},\n                rooms: [...roomState]\n            };\n        case actionTypes.CLEAR_ROOM_ONE:\n            return {\n                ...state,\n                oneRoom: {}\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default rooms;\n","import * as actionTypes from '../actions/actionsType';\nimport actions from 'redux-form/lib/actions';\nimport { actionType } from '../../constants/actionTypes';\n\nconst roomTypes = (\n    state = {\n        roomTypes: [],\n        oneType: {}\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.POST_NEW_TYPE:\n            return {\n                ...state,\n                roomTypes: [...state.roomTypes, action.result]\n            };\n\n        case actionTypes.GET_ALL_ROOM_TYPES:\n            return {\n                ...state,\n                roomTypes: [...action.result]\n            };\n        case actionTypes.DELETE_TYPE:\n            return {\n                ...state,\n                roomTypes: [\n                    ...state.roomTypes.filter(\n                        roomTypes => roomTypes.id !== action.result\n                    )\n                ]\n            };\n\n            case actionTypes.UPDATE_ONE_TYPE:\n                let updateTypeState = [...state.roomTypes];\n                updateTypeState[\n                    updateTypeState.findIndex(\n                        typeItem => typeItem.id === action.result.id\n                    )\n                ] = action.result;\n                return {\n                    ...state,\n                    oneType: {},\n                    roomTypes: [...updateTypeState]\n                };\n                case actionTypes.GET_ONE_NEW_TYPE:\n                    const one = state.roomTypes.filter(\n                        roomTypeItem => roomTypeItem.id === action.result\n                    );\n                    return {\n                        ...state,\n                        oneType: one[0]\n                    };\n        default:\n            return state;\n    }\n};\n\nexport default roomTypes;\n","import * as actionTypes from '../actions/actionsType';\n\nconst busyRooms = (\n    state = {\n        busyRooms: []\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.SHOW_ALL_BUSY_ROOMS:\n            return {\n                ...state,\n                busyRooms: [action.result]\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default busyRooms;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    semesters: [],\n    semester: {},\n    disabledSemesters: [],\n    archivedSemesters: []\n};\n\nconst semesters = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_SEMESTER:\n            return updateObject(state, {\n                semesters: state.semesters.concat(action.result),\n                semester: state.semester\n            });\n\n        case actionTypes.DELETE_SEMESTER:\n            state.semesters = state.semesters.filter(\n                semester => semester.id !== action.result\n            );\n            return updateObject(state, {\n                semesters: state.semesters,\n                semester: state.semester\n            });\n\n        case actionTypes.SHOW_ALL_SEMESTERS:\n            return updateObject(state, {\n                semesters: action.result,\n                semester: state.semester\n            });\n        case actionTypes.SET_DISABLED_SEMESTERS:\n            return updateObject(state, {\n                disabledSemesters: action.result\n            });\n        case actionTypes.SET_ARCHIVED_SEMESTERS:\n            return updateObject(state, {\n                archivedSemesters: action.result\n            });\n\n        case actionTypes.SELECT_SEMESTER:\n            let semester = state.semesters.filter(\n                semester => semester.id === action.result\n            )[0];\n            if (!semester) {\n                semester = { id: null };\n            }\n            return updateObject(state, {\n                semesters: state.semesters,\n                semester: semester\n            });\n\n        case actionTypes.UPDATE_SEMESTER:\n            const updatedSemesters = [];\n            state.semesters.forEach(semester => {\n                if (semester.id === action.result.id) {\n                    semester = { ...semester, ...action.result };\n                }\n                updatedSemesters.push(semester);\n            });\n            return updateObject(state, {\n                semesters: updatedSemesters,\n                semester: {}\n            });\n\n        case actionTypes.MOVE_SEMESTER_TO_ARCHIVE:\n            const archivedSemester = state.semesters.find(\n                semester => semester.id === action.result\n            );\n            state.semesters = state.semesters.filter(\n                semester => semester.id !== action.result\n            );\n            return updateObject(state, {\n                semesters: state.semesters,\n                archivedSemesters: [\n                    ...state.archivedSemesters,\n                    archivedSemester\n                ]\n            });\n        case actionTypes.CLEAR_SEMESTER:\n            return {\n                ...state,\n                semester: {}\n            };\n        case actionTypes.SET_ERROR:\n            return updateObject(state, {\n                uniqueError: action.result\n            });\n\n        default:\n            return state;\n    }\n};\n\nexport default semesters;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    users: [],\n    user: {}\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_USERS:\n            return updateObject(state, {\n                users: action.result\n            });\n        case actionTypes.SET_USER:\n            return updateObject(state, {\n                user: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport actions from 'redux-form/lib/actions';\n\nconst freeRooms = (\n    state = {\n        freeRooms : [],\n        freeRoom : {}\n    }, \n    action\n) => {\n    switch(action.type) {\n        case actionTypes.SHOW_FREE_ROOMS:\n            return {\n                ...state,\n                freeRooms: action.result\n            };\n        case actionTypes.CLEAR_FREE_ROOM:\n            return {\n                ...state,\n                freeRoom: {}\n            };\n        default:\n            return state;    \n    }\n};\n\nexport default freeRooms;","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    departments: [],\n    department: {},\n    disabledDepartments: []\n};\n\nconst departments = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_DEPARTMENT:\n            return updateObject(state, {\n                departments: state.departments.concat(action.result),\n                department: state.department\n            });\n        case actionTypes.GET_ALL_DEPARTMENTS:\n            let departments = action.result.filter(\n                department => department.disable ===false\n            );\n            let disabledDepartments = action.result.filter(\n                department => department.disable ===true\n            );\n            return updateObject(state, {\n                departments: departments,\n                department: state.department,\n                disabledDepartments: disabledDepartments\n            });\n        case actionTypes.CLEAR_DEPARTMENT_FORM:\n            return {\n                ...state,\n                department: {}\n            };\n        case actionTypes.DELETE_DEPARTMENT:\n            state.departments = state.departments.filter(\n                department => department.id !== action.result.id\n            );\n            state.disabledDepartments = state.disabledDepartments.filter(\n                department => department.id !== action.result.id\n            );\n            return updateObject(state, {\n                departments: state.departments,\n                department: state.department,\n                disabledDepartments: state.disabledDepartments\n            });\n        case actionTypes.GET_DISABLED_DEPARTMENTS:\n            return updateObject(state, {\n                departments: state.departments,\n                department: state.department,\n                disabledDepartments: action.result\n            });\n        case actionTypes.SET_DISABLED_DEPARTMENT:\n            state.departments = state.departments.filter(\n                department => department.id !== action.result.id\n            );\n            state.disabledDepartments.push(action.result)\n            return updateObject(state, {\n                departments: state.departments,\n                department: state.department,\n                disabledDepartments: state.disabledDepartments\n            });\n        case actionTypes.SET_ENABLED_DEPARTMENT:\n            state.disabledDepartments = state.disabledDepartments.filter(\n                department => department.id !== action.result.id\n            );\n            state.departments.push(action.result)\n            return updateObject(state, {\n                departments: state.departments,\n                department: state.department,\n                disabledDepartments: state.disabledDepartments\n            });\n        case actionTypes.GET_DEPARTMENT_BY_ID:\n            let department = state.departments.filter(\n                department => department.id === action.result\n            )[0];\n            if (!department) {\n                department = { id: null };\n            }\n            return updateObject(state, {\n                departments: state.departments,\n                department: department\n            });\n        case actionTypes.UPDATE_DEPARTMENT:\n            let updatedDepartments = [];\n            state.departments.forEach(department => {\n                if (department.id === action.result.id) {\n                    department = { ...department, ...action.result };\n                }\n                updatedDepartments.push(department);\n            });\n            let updatedDefaultDepartments = [];\n            state.disabledDepartments.forEach(department => {\n                if (department.id === action.result.id) {\n                    department = { ...department, ...action.result };\n                }\n                updatedDefaultDepartments.push(department);\n            });\n\n            return updateObject(state, {\n                departments:updatedDepartments,\n                disabledDepartments:updatedDefaultDepartments,\n                department: {}\n            });\n\n        default:\n            return state;\n    }\n};\n\nexport default departments;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    students: [],\n    student: {}\n};\n\nconst students = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_STUDENT:\n            return updateObject(state, {\n                students: state.students.concat(action.result),\n                student: state.student\n            });\n        case actionTypes.SHOW_ALL_STUDENTS_BY_GROUP_ID:\n            return updateObject(state, {\n                ...state,\n                students: action.result\n            });\n        case actionTypes.SHOW_ALL_STUDENTS:\n            return updateObject(state, {\n                ...state,\n                students: action.result\n            });\n        case actionTypes.DELETE_STUDENT:\n            state.students = state.students.filter(\n                student => student.id !== action.result\n            );\n            return updateObject(state, {\n                students: state.students,\n                student: state.student\n            });\n        case actionTypes.SET_STUDENT:\n            let student = state.students.filter(\n                student => student.id === Number(action.result)\n            )[0];\n\n            if (!student) {\n                student = { id: null };\n            }\n            return updateObject(state, {\n                students: state.students,\n                student: student\n            });\n        case actionTypes.UPDATE_STUDENT:\n            const updatedStudents = [];\n            state.students.forEach(student => {\n                if (student.id === action.result.id) {\n                    student = { ...student, ...action.result };\n                }\n                updatedStudents.push(student);\n            });\n            return updateObject(state, {\n                students: updatedStudents,\n                student: {}\n            });\n        default:\n            return state;\n    }\n};\n\nexport default students;","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport teachers from './teachers';\nimport lesson from './lesson';\nimport temporarySchedule from './temporarySchedule';\nimport snackbar from './snackbar';\nimport auth from './auth';\nimport loadingIndicator from './loadingIndicator';\nimport schedule from './schedule';\nimport classActions from './class';\nimport subjects from './subjects';\nimport groups from './groups';\nimport rooms from './rooms';\nimport roomTypes from './roomTypes';\nimport busyRooms from './busyRooms';\nimport semesters from './semesters';\nimport users from './users';\nimport freeRooms from './freeRooms';\nimport departments from './departments';\nimport students from './students';\n\nconst rootReducer = combineReducers({\n    lesson,\n    temporarySchedule,\n    auth,\n    snackbar,\n    schedule,\n    users,\n    loadingIndicator,\n    classActions,\n    teachers,\n    subjects,\n    groups,\n    rooms,\n    roomTypes,\n    busyRooms,\n    semesters,\n    freeRooms,\n    departments,\n    students,\n\n    form: formReducer\n});\n\nexport default rootReducer;\n","import axios from '../helper/axios';\n\nimport {\n    ACTIVATE_ACCOUNT_URL,\n    LOGIN_URL,\n    LOGOUT_URL,\n    REGISTRATION_URL,\n    RESET_PASSWORD_URL\n} from '../constants/axios';\n\nexport const authUserService = request => {\n    if (\n        request.result.hasOwnProperty('authType') &&\n        request.result.authType === 'google'\n    ) {\n        const response = { data: { token: request.result.token, email: '' } };\n        return response;\n    }\n    return axios.post(LOGIN_URL, request.result).then(response => {\n        return response;\n    });\n};\n\nexport const registerUserService = request => {\n    return axios.post(REGISTRATION_URL, request.result).then(response => {\n        return response;\n    });\n};\n\nexport const resetUserPasswordService = request => {\n    return axios\n        .put(\n            `${RESET_PASSWORD_URL}?email=${request.result.email}`,\n            request.result\n        )\n        .then(response => {\n            return response;\n        });\n};\n\nexport const activateUserService = request => {\n    return axios\n        .put(`${ACTIVATE_ACCOUNT_URL}?token=${request.result}`)\n        .then(response => response);\n};\n\nexport const logoutUserService = () => {\n    return axios.post(LOGOUT_URL).then(response => response);\n};\n","export const CLASS_URL = 'classes';\nexport const GROUP_URL = 'groups';\nexport const LESSON_URL = 'lessons';\nexport const LESSON_TYPES_URL = 'lessons/types';\nexport const LOGIN_URL = 'auth/sign-in';\nexport const GOOGLE_LOGIN_URL = 'auth/google';\nexport const LOGOUT_URL = 'auth/sign-out';\nexport const REGISTRATION_URL = 'auth/sign-up';\nexport const RESET_PASSWORD_URL = 'auth/reset-password';\nexport const ACTIVATE_ACCOUNT_URL = 'auth/activation-account';\nexport const TEACHER_URL = 'teachers';\nexport const ROOM_URL = 'rooms';\nexport const ROOM_TYPES_URL = 'room-types';\nexport const FREE_ROOMS_URL = 'rooms/free';\nexport const SUBJECT_URL = 'subjects';\nexport const STUDENT_URL = 'students';\n\nexport const FULL_SCHEDULE_URL = 'schedules/full/semester?semesterId=';\nexport const GROUP_SCHEDULE_URL = 'schedules/full/groups?semesterId=';\nexport const SCHEDULE_SEMESTER_ITEMS_URL = 'schedules/semester';\nexport const SCHEDULE_ITEMS_URL = 'schedules';\nexport const CURRENT_SEMESTER_URL = 'semesters/current';\nexport const DEFAULT_SEMESTER_URL = 'semesters/default';\nexport const SEND_PDF_TO_EMAIL = 'send-pdf-to-email';\n\nexport const TEMPORARY_SCHEDULE_URL = 'temporary-schedules';\nexport const TEMPORARY_SCHEDULE_RANGE_URL = 'temporary-schedules/add-range';\nexport const TEACHER_TEMPORARY_SCHEDULE = 'schedules/full/teachers/date-range';\n\nexport const STUDENTS_TO_GROUP_FILE = 'students/import?groupId=';\n\nexport const SCHEDULE_CHECK_AVAILABILITY_URL = 'schedules/data-before';\nexport const BUSY_ROOMS = 'schedules/full/rooms';\nexport const ROOMS_AVAILABILITY = 'rooms/available';\nexport const SEMESTERS_URL = 'semesters';\nexport const GROUPS_URL = 'groups';\nexport const TEACHER_SCHEDULE_URL = 'schedules/full/teachers?semesterId=';\n\nexport const DISABLED_ROOMS_URL = 'rooms/disabled';\nexport const DISABLED_TEACHERS_URL = 'teachers/disabled';\nexport const DISABLED_GROUPS_URL = 'groups/disabled';\nexport const DISABLED_SEMESTERS_URL = 'semesters/disabled';\nexport const DISABLED_SUBJECTS_URL = 'subjects/disabled';\n\nexport const USERS_URL = 'users/with-role-user';\nexport const USER_PROFILE = 'users/profile';\nexport const UPDATE_USER_PROFILE = 'users/change-profile';\nexport const TEACHERS_WITHOUT_ACCOUNT_URL = 'not-registered-teachers';\nexport const MERGE_USER_AND_TEACHER_URL = 'managers/teacher_credentials';\n\nexport const PUBLIC_CLASSES_URL = 'public/classes';\nexport const PUBLIC_GROUP_URL = 'public/groups';\nexport const PUBLIC_TEACHER_URL = 'public/teachers';\nexport const PUBLIC_SEMESTERS_URL = 'public/semesters';\n\nexport const PUBLIC_DOWNLOAD_GROUP_SCHEDULE_URL =\n    '/download/schedule-for-group-in-pdf';\nexport const PUBLIC_DOWNLOAD_TEACHER_SCHEDULE_URL =\n    '/download/schedule-for-teacher-in-pdf';\n\nexport const FOR_TEACHER_SCHEDULE_URL = 'schedules/teacher';\nexport const SEMESTER_COPY_URL = '/schedules/copy-schedule';\nexport const CLEAR_SCHEDULE_URL = '/schedules/delete-schedules';\nexport const TEACHER_SCHEDULE_BY_DATE_RANGE_URL = 'schedules/full/teachers/date-range';\n\nexport const COPY_LESSON_URL = '/lessons/copy-lesson-for-groups';\nexport const LESSONS_FROM_SEMESTER_COPY_URL = '/lessons/copy-lessons';\nexport const SCHEDULE_ITEM_ROOM_CHANGE = '/schedules/by-room';\nexport const CREATE_ARCHIVE_SEMESTER = '/archive';\nexport const ARCHIVED_SEMESTERS_URL = '/archive/all-semesters';\n\nexport const DEPARTMENT_URL = '/departments';\n","import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nvar supportedLangs = ['en', 'uk'];\nvar userLang = (navigator.language || navigator.userLanguage).slice(0, 2);\nexport const lang = supportedLangs.find(i => i === userLang) || 'en';\n\ni18n.use(LanguageDetector)\n    .use(initReactI18next)\n    .use(Backend)\n    .init({\n        lng: lang,\n        backend: {\n            loadPath: '/assets/i18n/translations/{{lng}}/{{ns}}.json'\n        },\n        fallbackLng: 'en',\n        debug: false,\n        ns: ['formElements', 'validationMessages', 'common', 'serviceMessages'],\n        defaultNS: 'common',\n        keySeparator: false,\n        useDataAttrOptions: true,\n        interpolation: {\n            escapeValue: false,\n            formatSeparator: ','\n        },\n        react: {\n            wait: true\n        }\n    });\n\nexport default i18n;\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { authUserService } from '../services/authService';\n\nimport { TOKEN_BEGIN } from '../constants/tokenBegin';\n\nimport axios from '../helper/axios';\nimport i18n from '../helper/i18n';\n\nexport function* authSaga(payload) {\n    try {\n        const response = yield call(authUserService, payload);\n\n        const jwtDecode = require('jwt-decode');\n        const token = response.data.token;\n        const email = response.data.email;\n        const decodedJWT = jwtDecode(token);\n        const expirationDate = new Date(decodedJWT.exp * 1000);\n\n        axios.defaults.headers.common.Authorization = TOKEN_BEGIN + token;\n\n        yield localStorage.setItem('token', TOKEN_BEGIN + token);\n        yield localStorage.setItem('expirationDate', expirationDate);\n        yield localStorage.setItem('userRole', decodedJWT.roles);\n        yield localStorage.setItem('email', email ? email : decodedJWT.sub);\n\n        yield put({\n            type: actionTypes.AUTH_USER_SUCCESS,\n            response: { token, role: decodedJWT.roles, email }\n        });\n\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n\n        yield put({\n            type: actionTypes.AUTH_USER_AUTO_LOGOUT,\n            expirationTime: decodedJWT.exp * 1000 - new Date().getTime()\n        });\n    } catch (error) {\n        yield put({\n            type: actionTypes.AUTH_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { logoutUserService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* logoutSaga(payload) {\n    try {\n        yield call(logoutUserService, payload);\n        yield put({\n            type: actionTypes.AUTH_USER_LOGOUT\n        });\n    } catch (error) {\n        yield put({\n            type: actionTypes.AUTH_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n    }\n}\n","import { call, delay } from 'redux-saga/effects';\n\nimport { logoutSaga } from './logoutSaga';\n\nexport function* checkAuthTimeoutSaga(action) {\n    yield delay(action.expirationTime);\n    yield call(logoutSaga);\n}\n","import { put } from 'redux-saga/effects';\n\nimport * as actionTypes from '../redux/actions/actionsType';\n\nexport function* checkAuthStateSaga(payload) {\n    if (!payload.token) {\n        yield put({ type: actionTypes.AUTH_USER_LOGOUT });\n    } else {\n        const expirationDate = new Date(localStorage.getItem('expirationDate'));\n        if (expirationDate <= new Date()) {\n            yield put({ type: actionTypes.AUTH_USER_LOGOUT });\n        } else {\n            yield put({\n                type: actionTypes.AUTH_USER_SUCCESS,\n                response: {\n                    token: payload.token,\n                    role: payload.role\n                }\n            });\n        }\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { registerUserService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* registrationSaga(payload) {\n    try {\n        const response = yield call(registerUserService, payload);\n        yield put({ type: actionTypes.REGISTER_USER_SUCCESS, response });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    } catch (error) {\n        yield put({\n            type: actionTypes.REGISTER_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { activateUserService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* activateUserSaga(payload) {\n    try {\n        const response = yield call(activateUserService, payload);\n        yield put({ type: actionTypes.ACTIVATE_USER_SUCCESS, response });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    } catch (error) {\n        yield put({\n            type: actionTypes.ACTIVATE_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { resetUserPasswordService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* resetUserPasswordSaga(payload) {\n    try {\n        const response = yield call(resetUserPasswordService, payload);\n        yield put({ type: actionTypes.RESET_USER_PASSWORD_SUCCESS, response });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    } catch (error) {\n        yield put({\n            type: actionTypes.RESET_USER_PASSWORD_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { takeLatest, takeEvery } from 'redux-saga/effects';\n\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { authSaga } from './authSaga';\nimport { logoutSaga } from './logoutSaga';\nimport { checkAuthTimeoutSaga } from './checkAuthTimeoutSaga';\nimport { checkAuthStateSaga } from './checkAuthStateSaga';\nimport { registrationSaga } from './registrationSaga';\nimport { activateUserSaga } from './activateUserSaga';\nimport { resetUserPasswordSaga } from './resetUserPasswordSaga';\n\nexport default function* watchUserAuthentication() {\n    yield takeLatest(actionTypes.REGISTER_USER, registrationSaga);\n    yield takeLatest(actionTypes.ACTIVATE_USER, activateUserSaga);\n    yield takeLatest(actionTypes.RESET_USER_PASSWORD, resetUserPasswordSaga);\n    yield takeLatest(actionTypes.AUTH_USER, authSaga);\n    yield takeEvery(actionTypes.AUTH_USER_CHECK_STATE, checkAuthStateSaga);\n    yield takeEvery(actionTypes.AUTH_USER_AUTO_LOGOUT, checkAuthTimeoutSaga);\n    yield takeLatest(actionTypes.AUTH_USER_INITIATE_LOGOUT, logoutSaga);\n}\n","import { fork } from 'redux-saga/effects';\nimport watchUserAuthentication from './watchers';\n\nexport default function* startForman() {\n  yield fork(watchUserAuthentication);\n}","import * as moment from 'moment';\nimport {\n    checkUniqClassName,\n    checkUniqueGroup,\n    checkUniqueRoomName,\n    checkUniqueSubject,\n    timeIntersectService,\n    checkUniqSemester, checkUniqueDepartment\n} from './storeValidation';\nimport i18n from '../helper/i18n';\nimport { validation } from '../constants/validation';\n\nexport const required = value =>\n    value ? undefined : i18n.t('validationMessages:required_message');\n\nexport const lessThanZero = value =>\n    value > 0\n        ? undefined\n        : i18n.t('validationMessages:bigger_than_zero_message');\n\nconst minLength = min => value =>\n    value && value.length < min\n        ? i18n.t('validationMessages:bigger_than_char_message', { min: min })\n        : undefined;\n\nexport const minLengthValue = minLength(3);\n\nconst maxLength = max => value =>\n    value && value.length > max\n        ? i18n.t('validationMessages:less_than_char_message', {\n              max: max\n          })\n        : undefined;\n\nexport const maxLengthValue = maxLength(55);\n\nexport const lessThanTime = (value, previousValue, allValues) => {\n    const otherField = 'endTime';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'HH:mm').toDate() <=\n        moment(allValues.values[otherField], 'HH:mm').toDate() &&\n        allValues.values[otherField] !== undefined\n        ? undefined\n        : i18n.t('validationMessages:less_than_field_message', {\n              field: i18n.t('formElements:class_to_label')\n          });\n};\n\nexport const greaterThanTime = (value, previousValue, allValues) => {\n    const otherField = 'startTime';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'HH:mm').toDate() >=\n        moment(allValues.values[otherField], 'HH:mm').toDate()\n        ? undefined\n        : i18n.t('validationMessages:bigger_than_field_message', {\n              field: i18n.t('formElements:class_from_label')\n          });\n};\n\nexport const uniqueClassName = value => {\n    return checkUniqClassName(value);\n};\n\nexport const uniqueGroup = value => {\n    return checkUniqueGroup(value);\n};\n\nexport const uniqueSubject = value => {\n    return checkUniqueSubject(value);\n};\nexport const uniqueDepartment = value => {\n    return checkUniqueDepartment(value);\n};\nexport const timeIntersect = (value, previousValue, allValues) => {\n    return timeIntersectService(\n        allValues.values['startTime'],\n        allValues.values['endTime']\n    );\n};\n\nexport const uniqueRoomName = value => {\n    return checkUniqueRoomName(value);\n};\n\n\n\nexport const email = value =>\n    value && !validation.EMAIL.test(value)\n        ? i18n.t('validationMessages:email')\n        : undefined;\n\nexport const password = value =>\n    value && !validation.PASSWORD.test(value)\n        ? i18n.t('validationMessages:password')\n        : undefined;\n\nconst minYear = min => value =>\n    value < min\n        ? i18n.t('validationMessages:bigger_than_this_year_message', {\n              min: min\n          })\n        : undefined;\nvar today = new Date();\nvar year = today.getFullYear();\nexport const minYearValue = minYear(year);\n\nexport const lessThanDate = (value, previousValue, allValues) => {\n    const otherField = 'endDay';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'DD/MM/YYYY').toDate() <=\n        moment(allValues.values[otherField], 'DD/MM/YYYY').toDate() &&\n        allValues.values[otherField] !== undefined\n        ? undefined\n        : i18n.t('validationMessages:less_than_field_message', {\n              field: i18n.t('formElements:class_to_label')\n          });\n};\n\nexport const greaterThanDate = (value, previousValue, allValues) => {\n    const otherField = 'startDay';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'DD/MM/YYYY').toDate() >=\n        moment(allValues.values[otherField], 'DD/MM/YYYY').toDate()\n        ? undefined\n        : i18n.t('validationMessages:bigger_than_field_message', {\n              field: i18n.t('formElements:class_from_label')\n          });\n};\n\nexport const uniquesSemesterName = value => checkUniqSemester(value);\n","export const links = {\n    HOME_PAGE: '/',\n    ADMIN_PAGE: '/admin',\n    SCHEDULE_PAGE: '/schedules',\n    LOGIN: '/login',\n    ACTIVATION_PAGE: '/activation-page',\n    LOGOUT: '/logout',\n    TEACHER_SCHEDULE: '/teacher-schedule',\n    MY_PROFILE: '/my-profile',\n    LessonPage: \"/lessons\",\n    TeacherList: \"/teachers\",\n    GroupList: \"/groups\",\n    Group:\"/group\",\n    Student:\"/student\",\n    Edit:\"/edit\",\n    Delete:\"/delete\",\n    AddStudent:\"/add-student\",\n    SetDisable:\"/set-disable\",\n    ShowStudents:\"/show-students\",\n    IdParam:\"/:id\",\n    IdStudentParam:\"/:idStudent\",\n    ClassScheduleTitle: \"/period\",\n    RoomList: \"/rooms\",\n    SubjectPage: \"/subjects\",\n    BusyRooms: \"/busy-rooms\",\n    SemesterPage: \"/semesters\",\n    MergeRolePage: \"/users\",\n    Changes: \"/changes\",\n    ScheduleFor:\"/schedule\",\n    Registration:\"/registration\",\n    RESET_PASSWORD:\"/reset-password\",\n    Departments:\"/departments\"\n\n};\n","import React from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { useTranslation } from 'react-i18next';\nimport './LanguageSelector.scss';\n\nconst LanguageSelector = props => {\n    const { i18n } = useTranslation();\n    const langFlags = [\n        {\n            lang: 'en',\n            img: 'https://image.flaticon.com/icons/svg/555/555417.svg',\n            title: 'English'\n        },\n        {\n            lang: 'uk',\n            img: 'https://image.flaticon.com/icons/svg/321/321267.svg',\n            title: 'Українська'\n        }\n    ];\n    let radioLangClasses = {};\n    i18n.languages.forEach(lang => {\n        radioLangClasses[lang] = 'languageItem ';\n    });\n    radioLangClasses[i18n.language] += ' activeLanguage';\n\n    const changeLanguage = event => {\n        radioLangClasses[i18n.language] = 'languageItem ';\n        radioLangClasses[event.target.value] += ' activeLanguage';\n        i18n.changeLanguage(event.target.value);\n    };\n    const renderLangControls = langItem => (\n        <FormControlLabel\n            key={langItem.lang}\n            control={\n                <>\n                    <Radio\n                        color=\"primary\"\n                        value={langItem.lang}\n                        onChange={changeLanguage}\n                    />\n                    <img\n                        className=\"language-icon\"\n                        src={langItem.img}\n                        alt={langItem.lang}\n                        title={langItem.title}\n                    />\n                </>\n            }\n            className={radioLangClasses[langItem.lang]}\n        />\n    );\n\n    return (\n        <RadioGroup\n            row\n            aria-label=\"lang\"\n            name=\"lang\"\n            value={i18n.language}\n            className=\"lang_selector\"\n        >\n            {langFlags.map(langItem => renderLangControls(langItem))}\n        </RadioGroup>\n    );\n};\n\nexport default LanguageSelector;\n","export const colors = {\n    POSSIBILITY: '#f7f7c1',\n    DANGER: '#ff5e54',\n    ALLOW: '#68f271',\n    NOTHING: '#fff',\n    BORDER: '#d3d4d5'\n};\n","import * as actionTypes from \"./actionsType\";\n\nexport const setOpenSnackbar = res => {\n  return {\n    type: actionTypes.SET_OPEN_SNACKBAR,\n    result: res\n  };\n};\n","import * as actionTypes from './actionsType';\n\nexport const setUsers = res => {\n    return {\n        type: actionTypes.SET_USERS,\n        result: res\n    };\n};\nexport const setUser = res => {\n    return {\n        type: actionTypes.SET_USER,\n        result: res\n    };\n};\n","import * as actionTypes from './actionsType';\n\nexport const setLoading = res => {\n    return {\n        type: actionTypes.SET_LOADING_INDICATOR,\n        result: res\n    };\n};\n\nexport const setScheduleLoading = res => {\n    return {\n        type: actionTypes.SET_SCHEDULE_LOADING_INDICATOR,\n        result: res\n    };\n};\n\nexport const setSemesterLoading = res => {\n    return {\n        type: actionTypes.SET_SEMESTER_LOADING_INDICATOR,\n        result: res\n    };\n};\n","import * as actionTypes from './actionsType';\n\nexport const setScheduleItems = res => {\n    return {\n        type: actionTypes.SET_SCHEDULE_ITEMS,\n        result: res\n    };\n};\n\nexport const setCurrentSemester = res => {\n    return {\n        type: actionTypes.SET_CURRENT_SEMESTER,\n        result: res\n    };\n};\nexport const setDefaultSemester = res => {\n    return {\n        type: actionTypes.SET_DEFAULT_SEMESTER,\n        result: res\n    };\n};\n\nexport const addItemToSchedule = res => {\n    return {\n        type: actionTypes.ADD_ITEM_TO_SCHEDULE,\n        result: res\n    };\n};\n\nexport const checkAvailabilitySchedule = res => {\n    return {\n        type: actionTypes.CHECK_AVAILABILITY_SCHEDULE,\n        result: res\n    };\n};\n\nexport const setFullSchedule = result => {\n    return {\n        type: actionTypes.SET_FULL_SCHEDULE,\n        result: result\n    };\n};\nexport const setItemGroupId = res => {\n    return {\n        type: actionTypes.SET_ITEM_GROUP_ID,\n        result: res\n    };\n};\n\nexport const setGroupSchedule = result => {\n    return {\n        type: actionTypes.SET_GROUP_SCHEDULE,\n        result: result\n    };\n};\nexport const deleteItemFromSchedule = res => {\n    return {\n        type: actionTypes.DELETE_ITEM_FROM_SCHEDULE,\n        result: res\n    };\n};\n\nexport const setScheduleType = result => {\n    return {\n        type: actionTypes.SET_SCHEDULE_TYPE,\n        newType: result\n    };\n};\n\nexport const setScheduleGroupId = groupId => {\n    return {\n        type: actionTypes.SET_SCHEDULE_GROUP_ID,\n        groupId: groupId\n    };\n};\n\nexport const setScheduleTeacherId = teacherId => {\n    return {\n        type: actionTypes.SET_SCHEDULE_TEACHER_ID,\n        teacherId: teacherId\n    };\n};\nexport const setTeacherSchedule = result => {\n    return {\n        type: actionTypes.SET_TEACHER_SCHEDULE,\n        result: result\n    };\n};\n\nexport const setSemesterList = result => {\n    return {\n        type: actionTypes.SET_SEMESTER_LIST,\n        result: result\n    };\n};\nexport const setScheduleSemesterId = semesterId => {\n    return {\n        type: actionTypes.SET_SCHEDULE_SEMESTER_ID,\n        semesterId: semesterId\n    };\n};\n\nexport const setTeacherRangeSchedule = result => {\n    return {\n        type: actionTypes.SET_TEACHER_RANGE_SCHEDULE,\n        result: result\n    };\n};\n\nexport const setTeacherViewType = type => {\n    return {\n        type: actionTypes.SET_TEACHER_VIEW_TYPE,\n        result: type\n    };\n};\n","import * as actionsType from './actionsType';\n\nexport const addTeacher = teacher => {\n    return {\n        type: actionsType.ADD_TEACHER,\n        result: teacher\n    };\n};\n\nexport const setTeacher = teacher => {\n    return {\n        type: actionsType.SET_TEACHER,\n        result: teacher\n    };\n};\n\nexport const deleteTeacher = id => {\n    return {\n        type: actionsType.DELETE_TEACHER,\n        result: id\n    };\n};\n\nexport const selectTeacherCard = res => {\n    return {\n        type: actionsType.SELECT_TEACHER,\n        result: res\n    };\n};\n\nexport const updateTeacherCard = res => {\n    return {\n        type: actionsType.UPDATE_TEACHER,\n        result: res\n    };\n};\n\nexport const showAllTeachers = teachers => {\n    return {\n        type: actionsType.SHOW_ALL,\n        result: teachers\n    };\n};\nexport const getAllTeachersByDepartmentId=teachers=>{\n    return{\n        type:actionsType.GET_TEACHERS_BY_DEPARTMENT,\n        result:teachers\n    }\n}\n\nexport const setDisabledTeachers = teachers => {\n    return {\n        type: actionsType.SET_DISABLED_TEACHERS,\n        result: teachers\n    };\n};\n","import * as actionTypes from \"./actionsType\";\n\nexport const setClassScheduleList = classScheduler => ({\n  type: actionTypes.SET_CLASS_SCHEDULE_LIST,\n  classScheduler\n});\n\nexport const addClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.ADD_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const getClassScheduleList = () => ({\n  type: actionTypes.GET_CLASS_SCHEDULE_LIST\n});\n\nexport const getClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.GET_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const deleteClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.DELETE_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const updateClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.UPDATE_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const clearClassScheduleOne = () => ({\n  type: actionTypes.CLEAR_CLASS_SCHEDULE_ONE\n});\n","import * as actionTypes from './actionsType';\n\nexport const showAllGroups = res => {\n    return {\n        type: actionTypes.SHOW_ALL_GROUPS,\n        result: res\n    };\n};\n\nexport const setDisabledGroups = res => {\n    return {\n        type: actionTypes.SET_DISABLED_GROUPS,\n        result: res\n    };\n};\n\nexport const addGroup = res => {\n    return {\n        type: actionTypes.ADD_GROUP,\n        result: res\n    };\n};\n\nexport const deleteGroup = res => {\n    return {\n        type: actionTypes.DELETE_GROUP,\n        result: res\n    };\n};\n\nexport const selectGroup = res => {\n    return {\n        type: actionTypes.SELECT_GROUP,\n        result: res\n    };\n};\n\nexport const updateGroup = res => {\n    return {\n        type: actionTypes.UPDATE_GROUP,\n        result: res\n    };\n};\n\nexport const clearGroup = () => ({\n    type: actionTypes.CLEAR_GROUP\n});\n","import * as actionTypes from './actionsType';\n\nexport const showAllSemesters = res => {\n\n    return {\n        type: actionTypes.SHOW_ALL_SEMESTERS,\n        result: res\n    };\n};\n\nexport const setDisabledSemesters = res => {\n    return {\n        type: actionTypes.SET_DISABLED_SEMESTERS,\n        result: res\n    };\n};\nexport const setArchivedSemesters = res => {\n    return {\n        type: actionTypes.SET_ARCHIVED_SEMESTERS,\n        result: res\n    };\n};\n\nexport const addSemester = res => {\n    return {\n        type: actionTypes.ADD_SEMESTER,\n        result: res\n    };\n};\n\nexport const deleteSemester = res => {\n    return {\n        type: actionTypes.DELETE_SEMESTER,\n        result: res\n    };\n};\n\nexport const selectSemester = res => {\n\n    return {\n        type: actionTypes.SELECT_SEMESTER,\n        result: res\n    };\n};\n\nexport const updateSemester = res => {\n    return {\n        type: actionTypes.UPDATE_SEMESTER,\n        result: res\n    };\n};\n\nexport const moveToArchivedSemester = res => {\n    return {\n        type: actionTypes.MOVE_SEMESTER_TO_ARCHIVE,\n        result: res\n    };\n};\n\nexport const clearSemester = () => ({\n    type: actionTypes.CLEAR_SEMESTER\n});\n\nexport const setError = res => {\n    return {\n        type: actionTypes.SET_ERROR,\n        result: res\n    };\n};\n","import { store } from '../index';\n\nimport { setOpenSnackbar } from '../redux/actions/index';\n\nexport const handleSnackbarOpenService = (isOpen, type, message) => {\n    store.dispatch(\n        setOpenSnackbar({\n            isOpen: isOpen,\n            type: type,\n            message: message\n        })\n    );\n};\n\nexport const handleSnackbarCloseService = () => {\n    const snackbarStore = store.getState().snackbar;\n    store.dispatch(\n        setOpenSnackbar({\n            isOpen: false,\n            type: snackbarStore.snackbarType,\n            message: null\n        })\n    );\n};\n","export const snackbarTypes = {\n    ERROR: 'error',\n    WARNING: 'warning',\n    INFO: 'info',\n    SUCCESS: 'success'\n};\n","import { handleSnackbarOpenService } from '../services/snackbarService';\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport i18n from './i18n';\n\nexport const errorHandler = error => {\n    handleSnackbarOpenService(\n        true,\n        snackbarTypes.ERROR,\n        error.response\n            ? i18n.t(error.response.data.message, error.response.data.message)\n            : 'Error'\n    );\n};\n\nexport const successHandler = message => {\n    handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n};\n\nexport const infoHandler = message => {\n    handleSnackbarOpenService(true, snackbarTypes.INFO, message);\n};","import { store } from '../index';\n\nimport {\n    setLoading,\n    setScheduleLoading,\n    setSemesterLoading\n} from '../redux/actions/index';\n\nexport const setLoadingService = isLoading => {\n    store.dispatch(setLoading(isLoading));\n};\n\nexport const setScheduleLoadingService = isLoading => {\n    store.dispatch(setScheduleLoading(isLoading));\n};\n\nexport const setSemesterLoadingService = isLoading => {\n    store.dispatch(setSemesterLoading(isLoading));\n};\n","import { reset } from 'redux-form';\nimport { store } from '../index';\n\nexport const resetFormHandler = formName => {\n    store.dispatch(reset(formName));\n};\n","import { store } from '../index';\nimport React, { useEffect } from 'react';\nimport axios from '../helper/axios';\nimport i18n from '../helper/i18n';\nimport { errorHandler, infoHandler, successHandler } from '../helper/handlerAxios';\n\nimport {\n    checkAvailabilitySchedule,\n    deleteItemFromSchedule,\n    setCurrentSemester,\n    setDefaultSemester,\n    setFullSchedule,\n    setGroupSchedule,\n    setItemGroupId,\n    setScheduleGroupId,\n    setScheduleItems,\n    setScheduleSemesterId,\n    setScheduleTeacherId,\n    setScheduleType,\n    setSemesterList,\n    setTeacherSchedule,\n    showAllGroups,\n    showAllTeachers,\n    setTeacherRangeSchedule,\n    setTeacherViewType\n} from '../redux/actions/index';\n\nimport {\n    setLoadingService,\n    setScheduleLoadingService,\n    setSemesterLoadingService\n} from './loadingService';\nimport { handleSnackbarOpenService } from './snackbarService';\n\nimport {\n    CURRENT_SEMESTER_URL,\n    DEFAULT_SEMESTER_URL,\n    FULL_SCHEDULE_URL,\n    GROUP_SCHEDULE_URL,\n    SCHEDULE_CHECK_AVAILABILITY_URL,\n    SCHEDULE_ITEMS_URL,\n    SCHEDULE_SEMESTER_ITEMS_URL,\n    PUBLIC_SEMESTERS_URL,\n    TEACHER_SCHEDULE_URL,\n    PUBLIC_GROUP_URL,\n    PUBLIC_TEACHER_URL,\n    FOR_TEACHER_SCHEDULE_URL,\n    CLEAR_SCHEDULE_URL,\n    ROOMS_AVAILABILITY,\n    SCHEDULE_ITEM_ROOM_CHANGE, TEACHER_URL, SEMESTERS_URL, GROUPS_URL, SEND_PDF_TO_EMAIL\n} from '../constants/axios';\n\nimport { snackbarTypes } from '../constants/snackbarTypes';\n\nimport { showBusyRooms } from './busyRooms';\nimport { TEACHER_SCHEDULE_FORM } from '../constants/reduxForms';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { useHistory } from 'react-router-dom';\nimport { getAllTeachersByDepartmentId } from '../redux/actions/teachers';\nimport departments from '../redux/reducers/departments';\n\nexport const getCurrentSemesterService = () => {\n    axios\n        .get(CURRENT_SEMESTER_URL)\n        .then(response => {\n            setSemesterLoadingService(false);\n            store.dispatch(setCurrentSemester(response.data));\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t('common:no_current_semester_error')\n            );\n            setSemesterLoadingService(false);\n        });\n};\nexport const getDefaultSemesterService = () => {\n    axios\n        .get(DEFAULT_SEMESTER_URL)\n        .then(response => {\n            setSemesterLoadingService(false);\n            store.dispatch(setDefaultSemester(response.data));\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t('common:no_current_semester_error')\n            );\n            setSemesterLoadingService(false);\n        });\n};\n\nexport const disableDefaultSemesterService = () => {\n    store.dispatch(setDefaultSemester({}));\n};\n\nexport const getScheduleItemsService = () => {\n    axios\n        .get(CURRENT_SEMESTER_URL)\n        .then(response => {\n            store.dispatch(setCurrentSemester(response.data));\n            getScheduleItemsServiceBySemester(response.data.id);\n            showBusyRooms(response.data.id);\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t('common:no_current_semester_error')\n            );\n            setLoadingService(false);\n        });\n};\n\nconst getScheduleItemsServiceBySemester = semesterId => {\n    axios\n        .get(`${SCHEDULE_SEMESTER_ITEMS_URL}?semesterId=${semesterId}`)\n        .then(response => {\n            store.dispatch(setScheduleItems(response.data));\n            setScheduleLoadingService(false);\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const checkAvailabilityScheduleService = item => {\n    axios\n        .get(\n            SCHEDULE_CHECK_AVAILABILITY_URL +\n            '?classId=' +\n            item.periodId +\n            '&dayOfWeek=' +\n            item.dayOfWeek +\n            '&evenOdd=' +\n            item.evenOdd +\n            '&lessonId=' +\n            item.lessonId +\n            '&semesterId=' +\n            item.semesterId\n        )\n        .then(response => {\n            setLoadingService(false);\n            store.dispatch(checkAvailabilitySchedule(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\nexport const checkAvailabilityChangeRoomScheduleService = item => {\n    axios\n        .get(\n            ROOMS_AVAILABILITY +\n            '?classId=' +\n            item.periodId +\n            '&dayOfWeek=' +\n            item.dayOfWeek +\n            '&evenOdd=' +\n            item.evenOdd +\n            '&semesterId=' +\n            item.semesterId\n        )\n        .then(response => {\n            setLoadingService(false);\n            store.dispatch(\n                checkAvailabilitySchedule({\n                    classSuitsToTeacher: true,\n                    teacherAvailable: true,\n                    rooms: response.data\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\nexport const addItemToScheduleService = item => {\n    axios\n        .post(SCHEDULE_ITEMS_URL, item)\n        .then(response => {\n            getScheduleItemsService();\n        })\n        .catch(err => errorHandler(err));\n};\nexport const editRoomItemToScheduleService = item => {\n    axios\n        .put(\n            SCHEDULE_ITEM_ROOM_CHANGE +\n            '?roomId=' +\n            item.roomId +\n            '&scheduleId=' +\n            item.itemId\n        )\n        .then(response => {\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('common:schedule_title'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n            getScheduleItemsService();\n        })\n        .catch(err => errorHandler(err));\n};\nexport const deleteItemFromScheduleService = itemId => {\n    axios\n        .delete(`${SCHEDULE_ITEMS_URL}/${itemId}`)\n        .then(response => {\n            store.dispatch(deleteItemFromSchedule(itemId));\n            getScheduleItemsService();\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const submitSearchSchedule = values => {\n\n    setScheduleSemesterIdService(values.semester);\n\n    if (values.hasOwnProperty('group') && +values.group > 0) {\n        setScheduleTypeService('group');\n        setScheduleGroupIdService(values.group);\n        getGroupSchedule(values.group, values.semester);\n\n        return;\n    }\n    if (values.hasOwnProperty('teacher') && +values.teacher > 0) {\n        setScheduleTypeService('teacher');\n        // setScheduleGroupIdService(values.teacher);\n        setScheduleTeacherIdService(values.teacher);\n        getTeacherSchedule(values.teacher, values.semester);\n        return;\n    }\n    if (\n        (!values.hasOwnProperty('group') &&\n            !values.hasOwnProperty('teacher')) ||\n        (values.hasOwnProperty('group') &&\n            !values.hasOwnProperty('teacher') &&\n            +values.group === 0) ||\n        (!values.hasOwnProperty('group') &&\n            values.hasOwnProperty('teacher') &&\n            +values.teacher === 0) ||\n        (values.hasOwnProperty('group') &&\n            values.hasOwnProperty('teacher') &&\n            +values.teacher === 0 &&\n            +values.group === 0)\n    ) {\n        setScheduleTypeService('full');\n        getFullSchedule(values.semester);\n        return;\n    }\n};\n\n\nexport const sendTeachersScheduleService = (data) => {\n    const teachersId = data.teachersId.map(teacherId => `teachersId=${teacherId}`).join('&');//teachersId=65&teachersId=12\n    const { semesterId, language } = data;\n    axios\n        .get(`${SEND_PDF_TO_EMAIL}/semester/${semesterId}?language=${language}&${teachersId}`)\n        .then(response => {\n            setLoadingService(false);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:schedule_label'),\n                    actionType: i18n.t('serviceMessages:sent_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const setItemGroupIdService = groupId => {\n    store.dispatch(setItemGroupId(groupId));\n};\n\nexport const setScheduleGroupIdService = groupId => {\n\n    store.dispatch(setScheduleGroupId(groupId));\n};\n\nexport const setScheduleTypeService = item => {\n    store.dispatch(setScheduleType(item));\n};\n\n\nexport const getFullSchedule = semesterId => {\n    if (semesterId !== undefined)\n        axios\n            .get(FULL_SCHEDULE_URL + semesterId)\n            .then(response => {\n                store.dispatch(setFullSchedule(response.data));\n            })\n            .catch(err => errorHandler(err));\n\n};\n\n\nexport const getGroupSchedule = (groupId, semesterId) => {\n    if (groupId > 0) {\n        axios\n            .get(GROUP_SCHEDULE_URL + semesterId + '&groupId=' + groupId)\n            .then(response => {\n                store.dispatch(setGroupSchedule(response.data));\n            })\n            .catch(err => errorHandler(err));\n    }\n};\n\n\nexport const getTeacherSchedule = (teacherId, semesterId) => {\n    if (teacherId > 0) {\n        axios\n            .get(TEACHER_SCHEDULE_URL + semesterId + '&teacherId=' + teacherId)\n            .then(response => {\n                store.dispatch(setTeacherSchedule(response.data));\n            })\n            .catch(err => errorHandler(err));\n    }\n};\nexport const setScheduleTeacherIdService = teacherId => {\n    store.dispatch(setScheduleTeacherId(teacherId));\n};\n\nexport const showAllPublicSemestersService = () => {\n    axios\n        .get(PUBLIC_SEMESTERS_URL)\n        .then(response => {\n            store.dispatch(setSemesterList(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\nexport const setScheduleSemesterIdService = semesterId => {\n    store.dispatch(setScheduleSemesterId(semesterId));\n};\n\nexport const showAllPublicGroupsService = (id) => {\n    if (id !== null && id !== undefined)\n        axios\n            .get(`/${SEMESTERS_URL}/${id}/${GROUPS_URL}`)\n            .then(response => {\n                store.dispatch(showAllGroups(response.data.sort((a, b) => a - b)));\n                if (response.data.length === 0) {\n                    infoHandler(\n                        i18n.t('serviceMessages:chosen_semester_has_not_groups', {\n                            cardType: i18n.t('formElements:chosen_semester_label'),\n                            actionType: i18n.t('serviceMessages:group_label')\n                        })\n                    );\n                }\n            })\n            .catch(err => errorHandler(err));\n};\n\nexport const showAllPublicTeachersService = () => {\n    axios\n        .get(PUBLIC_TEACHER_URL)\n        .then(response => {\n            store.dispatch(showAllTeachers(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\nexport const showAllPublicTeachersByDepartmentService = (departmentId) => {\n    const data = [\n\n        {\n            'department': {\n                'id': 41,\n                'name': 'mat analysi',\n                'disable': false\n            },\n            'id': 49,\n            'name': 'Svitlana',\n            'surname': 'Боднарук',\n            'patronymic': 'Богданівна',\n            'position': 'доцент',\n            'disable': false,\n            'email': 'nasta_2000@i.ua'\n        },\n\n        {\n            'department': {\n                'id': 41,\n                'name': 'mat analysi',\n                'disable': false\n            },\n            'id': 78,\n            'name': 'Anna',\n            'surname': 'Романенко',\n            'patronymic': 'Богданівна',\n            'position': 'доцент',\n            'disable': false,\n            'email': 'nasta_2000@i.ua'\n\n        },\n        {\n            'department': {\n                'id': 41,\n                'name': 'mat analysi',\n                'disable': false\n            },\n            'id': 79,\n            'name': 'Анна',\n            'surname': 'Івах',\n            'patronymic': 'Іванівна',\n            'position': 'доцент',\n            'disable': false,\n            'email': 'nasta_2000@i.ua'\n\n        },\n        {\n            'department': {\n                'id': 44,\n                'name': 'Computer Science1',\n                'disable': false\n            },\n            'id': 39,\n            'name': 'Ірина',\n            'surname': 'Вернигора',\n            'patronymic': 'Володимирівна',\n            'position': 'доцент',\n            'disable': false,\n            'email': 'nasta_2000@i.ua'\n        },\n        {\n            'department': {\n                'id': 41,\n                'name': 'mat analysi',\n                'disable': false\n            },\n            'id': 50,\n            'name': 'Світлана',\n            'surname': 'Боднарук',\n            'patronymic': 'Богданівна',\n            'position': 'доцент',\n            'disable': false,\n            'email': 'nasta_2000@i.ua'\n        },\n\n        {\n            'department': {\n                'id': 41,\n                'name': 'mat analysi',\n                'disable': false\n            },\n            'id': 51,\n            'name': 'Наталія',\n            'surname': 'Романенко',\n            'patronymic': 'Богданівна',\n            'position': 'доцент',\n            'disable': false,\n            'email': 'nasta_2000@i.ua'\n\n        },\n        {\n            'department': {\n                'id': 41,\n                'name': 'mat analysi',\n                'disable': false\n            },\n            'id': 52,\n            'name': 'Анна',\n            'surname': 'Івах',\n            'patronymic': 'Іванівна',\n            'position': 'доцент',\n            'disable': false,\n            'email': 'nasta_2000@i.ua'\n\n        },\n        {\n            'department': {\n                'id': 44,\n                'name': 'Computer Science1',\n                'disable': false\n            },\n            'id': 53,\n            'name': 'Ірина',\n            'surname': 'Вернигора',\n            'patronymic': 'Володимирівна',\n            'position': 'доцент',\n            'disable': false,\n            'email': 'nasta_2000@i.ua'\n        }\n    ];\n\n    function isDepartment(value) {\n        return value === departmentId;\n    }\n\n    let filtered = data.filter(({ department }) => isDepartment(department.id));\n    store.dispatch(getAllTeachersByDepartmentId(filtered));\n    // axios\n    //     .get(`${PUBLIC_TEACHER_URL}/departmentId=${departmentId}`)\n    //     .then(response => {\n    //         store.dispatch(getAllTeachersByDepartmentId(response.data));\n    //     })\n    //     .catch(err => errorHandler(err));\n};\n\nexport const clearTeacherScheduleFormService = () => {\n    resetFormHandler(TEACHER_SCHEDULE_FORM);\n};\n\nexport const getTeacherScheduleService = values => {\n    axios\n        .get(\n            FOR_TEACHER_SCHEDULE_URL +\n            '?from=' +\n            values.startDay.replace(/\\//g, '-') +\n            '&to=' +\n            values.endDay.replace(/\\//g, '-')\n        )\n        .then(response => {\n            setLoadingService(false);\n            store.dispatch(setTeacherRangeSchedule(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const getTeacherScheduleByDateRangeService = (teacherId, to, from) => {\n    axios\n        .get(\n            FOR_TEACHER_SCHEDULE_URL +\n            '?teacherId' +\n            teacherId +\n            '&from=' +\n            from.replace(/\\//g, '-') +\n            '&to=' +\n            to.replace(/\\//g, '-')\n        )\n        .then(response => {\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const setTeacherServiceViewType = type => {\n    store.dispatch(setTeacherViewType(type));\n};\n\nexport const clearSchedule = semesterId => {\n    axios\n        .delete(CLEAR_SCHEDULE_URL + '?semesterId=' + semesterId)\n        .then(response => {\n            getScheduleItemsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('common:schedule_title'),\n                    actionType: i18n.t('serviceMessages:cleared_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n","import { store } from '../index';\n\nimport { BUSY_ROOMS } from '../constants/axios';\nimport axios from '../helper/axios';\n\nimport { showAllBusyRooms } from '../redux/actions';\nimport { errorHandler } from '../helper/handlerAxios';\n\nexport const showBusyRooms = semesterId => {\n    axios\n        .get(BUSY_ROOMS + '?semesterId=' + semesterId)\n        .then(response => {\n            store.dispatch(showAllBusyRooms(response.data));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n","import * as actionsType from './actionsType';\n\nexport const showAllBusyRooms = data => {\n    return {\n        type: actionsType.SHOW_ALL_BUSY_ROOMS,\n        result: data\n    };\n};\n","export const cssClasses = {\n    SCHEDULE_BOARD: 'schedule-board',\n    IN_BOARD_SECTION: 'in-board-section',\n    IN_BOARD_CARD: 'in-board-card',\n    MORE_ICON: 'more-icon'\n};\n","import React, { useRef } from 'react';\n\nimport './Card.scss';\nimport { colors } from '../../constants/schedule/colors';\n\nimport { setItemGroupIdService } from '../../services/scheduleService';\nimport { cssClasses } from '../../constants/schedule/cssClasses';\n\nconst Card = props => {\n    let className = 'card';\n    if (props.class) {\n        className = className.concat(' ' + props.class);\n    }\n\n    let card = <div className={className}>{props.children}</div>;\n\n    const dragItemNode = useRef();\n    const dragItem = useRef();\n\n    if (props.draggable) {\n        const dragStart = e => {\n            const item = JSON.parse(e.target.childNodes[0].value);\n            const groupId = item.lesson.group.id;\n            const groupTitle = document.getElementById(`group-${groupId}`);\n            groupTitle.style.backgroundColor = colors.ALLOW;\n            const boards = document.getElementsByClassName(`group-${groupId}`);\n\n            setTimeout(() => {\n                groupTitle.style.display = 'flex';\n\n                for (const board of boards) {\n                    board.style.display = 'flex';\n                    if (\n                        board.childNodes[0].classList.contains(\n                            cssClasses.MORE_ICON\n                        ) &&\n                        !board.childNodes[1]\n                    ) {\n                        board.style.background = colors.POSSIBILITY;\n                    }\n                }\n            }, 50);\n\n            setItemGroupIdService(groupId);\n\n            dragItemNode.current = e.target;\n            dragItemNode.current.addEventListener('dragend', handleDragEnd);\n\n            e.dataTransfer.setData('card_id', dragItemNode.current.id);\n        };\n\n        const handleDragEnd = e => {\n            const groupId = +JSON.parse(e.target.childNodes[0].value).lesson\n                .group.id;\n            const groupTitleEl = document.getElementById(`group-${groupId}`);\n\n            const allBoards = document.getElementsByClassName('schedule-board');\n            const groupTitles = document.getElementsByClassName('group-title');\n\n            const boards = document.getElementsByClassName(`group-${groupId}`);\n\n            if (groupTitleEl) {\n                groupTitleEl.style.backgroundColor = colors.NOTHING;\n            }\n            for (const board of boards) {\n                if (board) {\n                    board.style.background = colors.NOTHING;\n                }\n            }\n\n            for (let board of allBoards) {\n                board.style.display = 'flex';\n            }\n\n            for (const groupTitle of groupTitles) {\n                groupTitle.style.display = 'flex';\n            }\n\n            dragItem.current = null;\n            dragItemNode.current.removeEventListener('dragend', handleDragEnd);\n            dragItemNode.current = null;\n        };\n\n        card = (\n            <div\n                id={props.id}\n                className={className}\n                onDragStart={dragStart}\n                draggable={props.draggable}\n            >\n                {props.children}\n            </div>\n        );\n    }\n\n    return <>{card}</>;\n};\n\nexport default Card;\n","import { store } from '../index';\n\nimport Moment from 'moment';\nimport { extendMoment } from 'moment-range';\nimport i18n from '../helper/i18n';\n\nexport const checkUniqClassName = className => {\n    const classId = store.getState().classActions.classScheduleOne.id;\n    var find = false;\n    if (classId) {\n        find = store\n            .getState()\n            .classActions.classScheduler.some(function (value, index, _arr) {\n                return value.class_name === className && value.id !== classId;\n            });\n    } else {\n        find = store\n            .getState()\n            .classActions.classScheduler.some(function (value, index, _arr) {\n                return value.class_name === className;\n            });\n    }\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const timeIntersectService = (startTime, endTime) => {\n    const classId = store.getState().classActions.classScheduleOne.id;\n    const moment = extendMoment(Moment);\n    let find = false;\n    if (startTime && endTime) {\n        const incomeRange = moment.range(\n            moment(startTime, 'HH:mm').toDate(),\n            moment(endTime, 'HH:mm').toDate()\n        );\n        if (classId) {\n            find = store\n                .getState()\n                .classActions.classScheduler.some(function (\n                    value,\n                    index,\n                    _arr\n                ) {\n                    return (\n                        incomeRange.intersect(\n                            moment.range(\n                                moment(value.startTime, 'HH:mm').toDate(),\n                                moment(value.endTime, 'HH:mm').toDate()\n                            )\n                        ) !== null && value.id !== classId\n                    );\n                });\n        } else {\n            find = store\n                .getState()\n                .classActions.classScheduler.some(function (\n                    value,\n                    index,\n                    _arr\n                ) {\n                    return (\n                        incomeRange.intersect(\n                            moment.range(\n                                moment(value.startTime, 'HH:mm').toDate(),\n                                moment(value.endTime, 'HH:mm').toDate()\n                            )\n                        ) !== null\n                    );\n                });\n        }\n    }\n    return find\n        ? i18n.t('validationMessages:intersect_time_error_message')\n        : undefined;\n};\n\nexport const checkUniqLesson = lesson => {\n    const lessons = store.getState().lesson.lessons;\n    let isNotUnique;\n    if (!lesson.id) {\n        isNotUnique = !!lessons.find(\n            storeLesson =>\n                storeLesson.subject.id === +lesson.subject.id &&\n                storeLesson.teacher.id === +lesson.teacher.id &&\n                storeLesson.lessonType === lesson.lessonType\n        );\n    } else {\n        isNotUnique = !!lessons.find(\n            storeLesson =>\n                storeLesson.subject.id === +lesson.subject.id &&\n                storeLesson.teacher.id === +lesson.teacher.id &&\n                storeLesson.lessonType === lesson.lessonType &&\n                storeLesson.id !== +lesson.id\n        );\n    }\n    return !isNotUnique;\n};\n\nexport const checkUniqueRoomName = roomName => {\n    const roomdId = store.getState().rooms.oneRoom.id;\n    let find = false;\n    if (roomdId) {\n        find = store\n        .getState()\n        .rooms.rooms.some(function (value, index, _arr) {\n            return value.name.toUpperCase() === roomName.toUpperCase() && value.id !== roomdId;\n        });\n    } else {\n     find = store\n        .getState()\n        .rooms.rooms.some(function (value, index, _arr) {\n            return value.name.toUpperCase() === roomName.toUpperCase()  ;\n        });\n    }\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const checkUniqueGroup = groupTitle => {\n    if (!groupTitle) {\n        return;\n    }\n    const find = store.getState().groups.groups.some(function (value) {\n        return (\n            value.title.toUpperCase().trim() === groupTitle.toUpperCase().trim()\n        );\n    });\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const checkUniqueSubject = subjectTitle => {\n    if (!subjectTitle) {\n        return;\n    }\n    const find = store.getState().subjects.subjects.some(function (value) {\n        return (\n            value.name.toUpperCase().trim() ===\n            subjectTitle.toUpperCase().trim()\n        );\n    });\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\nexport const checkUniqueDepartment = departmentTitle => {\n    if (!departmentTitle) {\n        return;\n    }\n    const find = store.getState().departments.departments.some(function (value) {\n        return (\n            value.name.toUpperCase().trim() ===\n            departmentTitle.toUpperCase().trim()\n        );\n    });\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\n\n\nexport const checkUniqSemester = semester => {\n    const semesters = store.getState().semesters.semesters;\n    let isNotUnique;\n    if (!semester.id) {\n        isNotUnique = !!semesters.find(\n            storeSemester =>\n                storeSemester.year === +semester.year &&\n                storeSemester.description.toUpperCase().trim() === semester.description.toUpperCase().trim()\n        );\n    } else {\n        isNotUnique = !!semesters.find(\n            storeSemester =>\n            storeSemester.year=== +semester.year &&\n            storeSemester.description.toUpperCase().trim() === semester.description.toUpperCase().trim() && \n            storeSemester.id !== +semester.id\n        );\n    }\n    \n    return !isNotUnique\n};\n","export const validation = {\n    EMAIL: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n    PASSWORD: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?=.*[!@#$%^&*]).{8,}$/\n};\n","import React from \"react\";\n\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport InputLabel from '@material-ui/core/InputLabel'\n\nimport {renderFromHelper} from './error';\n\nconst renderSelectField = ({\n  input,\n  label,\n  name,\n  id,\n  meta: { touched, error },\n  children,\n  ...custom\n}) => (\n  <FormControl error={touched && !!error}>\n    <InputLabel htmlFor={id}>{label}</InputLabel>\n    <Select\n      native\n      {...input}\n      {...custom}\n      name={name}\n      id={id}\n    >\n      {children}\n    </Select>\n    {renderFromHelper({ touched, error })}\n  </FormControl>\n)\n\nexport default renderSelectField;\n","import React from \"react\";\n\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\n\nexport const renderFromHelper = ({ touched, error }) => {\n  if (!(touched && error)) {\n    return;\n  } else {\n    return <FormHelperText>{touched && error}</FormHelperText>;\n  }\n};\n","import i18n from '../helper/i18n';\nimport { store } from '../index';\nimport axios from '../helper/axios';\nimport {\n    DISABLED_SEMESTERS_URL,\n    SEMESTERS_URL,\n    SEMESTER_COPY_URL,\n    LESSONS_FROM_SEMESTER_COPY_URL,\n    CREATE_ARCHIVE_SEMESTER,\n    ARCHIVED_SEMESTERS_URL, DEFAULT_SEMESTER_URL, SCHEDULE_SEMESTER_ITEMS_URL, GROUPS_URL\n} from '../constants/axios';\nimport { setDisabledSemesters, setError } from '../redux/actions/semesters';\nimport { SEMESTER_FORM } from '../constants/reduxForms';\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { checkUniqSemester } from '../validation/storeValidation';\nimport {\n    addSemester,\n    clearSemester,\n    deleteSemester,\n    selectSemester,\n    showAllSemesters,\n    updateSemester,\n    setArchivedSemesters,\n    moveToArchivedSemester,\n    setScheduleType,\n    setFullSchedule, setScheduleItems\n} from '../redux/actions/index';\n\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { setLoadingService, setScheduleLoadingService } from './loadingService';\n\nexport const selectSemesterService = semesterId =>\n    store.dispatch(selectSemester(semesterId));\n\nexport const setUniqueErrorService = isUniqueError =>\n    store.dispatch(setError(isUniqueError));\n\nexport const clearSemesterService = () => {\n    store.dispatch(clearSemester());\n    resetFormHandler(SEMESTER_FORM);\n};\n\nexport const showAllSemestersService = () => {\n    axios\n        .get(SEMESTERS_URL)\n        .then(response => {\n            const dataGroup=[{\n                id: 30,\n                title: '101-Аh'\n            },{\n                id: 5,\n                title: '101-B'\n            }];\n            const data=response.data.map(item=>({...item,semester_groups:dataGroup}));\n            console.log(data)\n            store.dispatch(\n                showAllSemesters(\n                        data\n                        .sort((a, b) => (a.year > b.year ? 1 : -1))\n                        .reverse()\n                )\n            );\n        })\n        .catch(error => errorHandler(error));\n\n};\nexport const setGroupsToSemester=(semesterId,groups)=>{\n    const groupIds=groups.map(item=>`groupId=${item.id}`).join('&');\n    axios\n        .put(`${SEMESTERS_URL}/${semesterId}/groups?${groupIds}`)\n        .then(response => {\n            store.dispatch(updateSemester(response.data));\n            selectSemesterService(null);\n            getDisabledSemestersService();\n            getArchivedSemestersService();\n            showAllSemestersService();\n            resetFormHandler(SEMESTER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n}\nasync function getGroupsBySemesterId  (id)  {\n\n\n        try {\n            const result= await axios.get(`${SEMESTERS_URL}/5/${GROUPS_URL}`)\n            //use data destructuring to get data from the promise object\n\n            return result;\n\n        }\n\n        catch (error) {\n            console.log(error);\n        }\n}\nconst cardSemester = semester => {\n    const semester_days = [];\n    const semester_classes = [];\n    for (let prop in semester) {\n        if (Object.prototype.hasOwnProperty.call(semester, prop)) {\n            if (\n                prop.indexOf('semester_days_markup_') >= 0 &&\n                semester[prop] === true\n            ) {\n                semester_days.push(prop.substring(21));\n            }\n        }\n        if (Object.prototype.hasOwnProperty.call(semester, prop)) {\n            if (\n                prop.indexOf('semester_classes_markup_') >= 0 &&\n                semester[prop] === true\n            ) {\n                semester_classes.push(\n                    store\n                        .getState()\n                        .classActions.classScheduler.find(\n                            schedule => schedule.id === +prop.substring(24)\n                        )\n                );\n            }\n        }\n\n    }\n\n    return {\n        id: semester.id,\n        year: +semester.year,\n        description: semester.description,\n        startDay: semester.startDay,\n        endDay: semester.endDay,\n        currentSemester: semester.currentSemester,\n        defaultSemester: semester.defaultSemester,\n        semester_days: semester_days,\n        semester_classes: semester_classes,\n        semester_groups:semester.semester_groups,\n\n    };\n};\n\nexport const removeSemesterCardService = semesterId => {\n    const semester = store\n        .getState()\n        .semesters.semesters.find(item => item.id === semesterId);\n    if (semester.currentSemester === true) {\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.ERROR,\n            i18n.t('serviceMessages:semester_service_is_active')\n        );\n        return;\n    }\n    axios\n        .delete(SEMESTERS_URL + `/${semesterId}`)\n        .then(response => {\n            store.dispatch(deleteSemester(semesterId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nconst switchSaveActions = semester => {\n    if (semester.id) {\n        putSemester(semester);\n    } else {\n        postSemester(semester);\n    }\n};\n\nexport const handleSemesterService = values => {\n    console.log(values)\n    let semester = cardSemester(values);\n    if (!checkUniqSemester(semester)) {\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.ERROR,\n            i18n.t('common:semester_service_is_not_unique')\n        );\n        setUniqueErrorService(true);\n        return;\n    }\n    if (!checkSemesterYears(semester.endDay, semester.startDay, semester.year))\n        return;\n\n    if (semester.currentSemester) {\n        const currentScheduleOld = findCurrentSemester(semester.id);\n        if (currentScheduleOld) {\n            currentScheduleOld.currentSemester = false;\n            axios\n                .put(SEMESTERS_URL, currentScheduleOld)\n                .then(response => {\n                    store.dispatch(updateSemester(response.data));\n                    switchSaveActions(semester);\n                })\n                .catch(error => errorHandler(error));\n        } else {\n            switchSaveActions(semester);\n        }\n    } else {\n        switchSaveActions(semester);\n    }\n};\n\nconst checkSemesterYears = (endDay, startDay, year) => {\n    const dateEndYear = +endDay.substring(endDay.length - 4);\n    const dateStartYear = +startDay.substring(startDay.length - 4);\n    let conf = true;\n    if (year !== dateEndYear || year !== dateStartYear) {\n        conf = window.confirm(\n            i18n.t('serviceMessages:semester_service_not_as_begin_or_end')\n        );\n    }\n    return conf;\n};\nexport const setDefaultSemesterById = dataId => {\n     axios\n    .put(`${DEFAULT_SEMESTER_URL}?semesterId=${dataId}`)\n        .then(response => {\n           store.dispatch(updateSemester(response.data));\n            selectSemesterService(null);\n             getDisabledSemestersService();\n            getArchivedSemestersService();\n             showAllSemestersService();\n             resetFormHandler(SEMESTER_FORM);\n             successHandler(\n                 i18n.t('serviceMessages:back_end_success_operation', {\n                     cardType: i18n.t('formElements:semester_label'),\n                     actionType: i18n.t('serviceMessages:updated_label')\n                 })\n             );\n         })\n        .catch(error => errorHandler(error));\n}\n\nconst putSemester = data => {\n     axios\n    .put(SEMESTERS_URL, data)\n        .then(response => {\n           store.dispatch(updateSemester(response.data));\n            selectSemesterService(null);\n             getDisabledSemestersService();\n            getArchivedSemestersService();\n             showAllSemestersService();\n             resetFormHandler(SEMESTER_FORM);\n             successHandler(\n                 i18n.t('serviceMessages:back_end_success_operation', {\n                     cardType: i18n.t('formElements:semester_label'),\n                     actionType: i18n.t('serviceMessages:updated_label')\n                 })\n             );\n         })\n        .catch(error => errorHandler(error));\n};\nconst postSemester = data => {\n    axios\n        .post(SEMESTERS_URL, data)\n        .then(response => {\n            store.dispatch(addSemester(response.data));\n            resetFormHandler(SEMESTER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nconst findCurrentSemester = semesterId => {\n    return store\n        .getState()\n        .semesters.semesters.find(\n            semesterItem =>\n                semesterItem.currentSemester === true &&\n                semesterItem.id !== semesterId\n        );\n};\nconst findDefaultSemester = semesterId => {\n    return store\n        .getState()\n        .semesters.semesters.find(\n            semesterItem =>\n                semesterItem.defaultSemester === true &&\n                semesterItem.id !== semesterId\n        );\n};\nexport const getDisabledSemestersService = () => {\n    axios\n        .get(DISABLED_SEMESTERS_URL)\n        .then(res => {\n            store.dispatch(setDisabledSemesters(res.data));\n        })\n        .catch(err => errorHandler(err));\n};\n\nexport const setDisabledSemestersService = semester => {\n    semester.disable = true;\n    putSemester(semester);\n};\n\nexport const setEnabledSemestersService = semester => {\n    semester.disable = false;\n    putSemester(semester);\n};\n\nexport const semesterCopy = values => {\n    axios\n        .post(\n            SEMESTER_COPY_URL +\n                '?fromSemesterId=' +\n                values.fromSemesterId +\n                '&toSemesterId=' +\n                values.toSemesterId\n        )\n        .then(response => {\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:copied_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const CopyLessonsFromSemesterService = values => {\n    axios\n        .post(\n            LESSONS_FROM_SEMESTER_COPY_URL +\n                '?fromSemesterId=' +\n                values.fromSemesterId +\n                '&toSemesterId=' +\n                values.toSemesterId\n        )\n        .then(response => {\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:copied_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createArchiveSemesterService = semesterId => {\n    axios\n        .post(CREATE_ARCHIVE_SEMESTER + '/' + semesterId)\n        .then(response => {\n            store.dispatch(moveToArchivedSemester(semesterId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:archived_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getArchivedSemestersService = () => {\n    axios\n        .get(ARCHIVED_SEMESTERS_URL)\n        .then(response => {\n            store.dispatch(setArchivedSemesters(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\n\nexport const viewArchivedSemester = semesterId => {\n    setScheduleType('archived');\n    axios\n        .get(CREATE_ARCHIVE_SEMESTER + '/' + semesterId)\n        .then(response => {\n            store.dispatch(setFullSchedule(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\n","export const LESSON_FORM = 'lessonForm';\nexport const TEMPORARY_SCHEDULE_FORM = 'temporaryScheduleForm';\nexport const TEMPORARY_SCHEDULE_VACATION_FORM = 'temporaryScheduleVacationForm';\nexport const GROUP_FORM = 'addGroup';\nexport const ROOM_FORM = 'AddRoom';\nexport const ROOM_FORM_TYPE = 'roomType';\nexport const FREE_ROOMS = 'FREE_ROOMS';\nexport const TEACHER_FORM = 'addTeacher';\nexport const STUDENT_FORM=\"addStudent\";\nexport const CLASS_FORM = 'classForm';\nexport const LOGIN_FORM = 'loginForm';\nexport const REGISTRATION_FORM = 'registrationForm';\nexport const RESET_PASSWORD_FORM = 'resetPasswordForm';\nexport const SUBJECT_FORM = 'addSubject';\nexport const DEPARTMENT_FORM = 'addDepartment';\nexport const SEMESTER_FORM = 'addSemester';\nexport const TEACHER_SCHEDULE_FORM = 'teacherScheduleForm';\nexport const SCHEDULE_SEARCH_FORM = 'GroupSchedulePageTop';\nexport const PROFILE_FORM = 'ProfilePage';\nexport const SEMESTER_COPY_FORM = 'SemesterCopyForm';\nexport const COPY_LESSONS_FROM_SEMESTER_FORM = 'CopyLessonsFromSemesterForm';\n","export const days = [\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n    'Sunday'\n];\n\nexport const daysUppercase = [];\ndays.map(day => daysUppercase.push(day.toUpperCase()));\n","import React, { useEffect } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport { required } from '../../validation/validateFields';\nimport renderSelectField from '../../share/renderedFields/select';\nimport { FREE_ROOMS } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\nimport { showAllSemestersService } from '../../services/semesterService';\nimport './freeRoomForm.scss';\nimport { daysUppercase } from '../../constants/schedule/days';\n\nlet FreeRoomForm = props => {\n\n    const { t } = useTranslation('formElements');\n\n    const weeks = ['ODD', 'EVEN', 'WEEKLY'];\n\n    useEffect(() => showAllSemestersService(), []);\n\n    const {\n        handleSubmit,\n        classScheduler,\n        pristine,\n        submitting,\n        onReset\n    } = props;\n\n    const class_names = [];\n\n    if (classScheduler.length - 1 > 0) {\n        classScheduler.map(classSchedulerOne => {\n            class_names.push(classSchedulerOne.class_name);\n        });\n    }\n\n    return (\n        <>\n            <form className=\"freeRoomsItems\" onSubmit={handleSubmit}>\n                <div className=\"roomsItems\">\n                    <Field\n                        name=\"semesterId\"\n                        component={renderSelectField}\n                        label={t('formElements:semester_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {props.semesters.map((semesters, index) => (\n                            <option key={index} value={semesters.id}>\n                                {semesters.description}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"evenOdd\"\n                        component={renderSelectField}\n                        label={t('formElements:week_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {weeks.map((week, index) => (\n                            <option key={index} value={`${week}`}>\n                                {t(`common:${week.toLowerCase()}_week`)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"dayOfWeek\"\n                        component={renderSelectField}\n                        label={t('formElements:day_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {daysUppercase.map((day, index) => (\n                            <option key={index} value={`${day}`}>\n                                {t(`common:day_of_week_${day}`)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"class\"\n                        component={renderSelectField}\n                        label={t('formElements:class_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {class_names.map((classNum, index) => (\n                            <option key={index} value={`${classNum}`}>\n                                {classNum}\n                            </option>\n                        ))}\n                    </Field>\n                </div>\n                <div className=\"form-buttons-container freeRoomsButtons\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                        className=\"buttons-style\"\n                        type=\"submit\"\n                    >\n                        {t('formElements:submit_button_label')}\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        disabled={pristine || submitting}\n                        className=\"buttons-style\"\n                        onClick={onReset}\n                    >\n                        {t('formElements:clear_button_label')}\n                    </Button>\n                </div>\n            </form>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    freeRooms: state.freeRooms.freeRooms,\n    semesters: state.semesters.semesters\n});\n\nFreeRoomForm = reduxForm({\n    form: FREE_ROOMS\n})(FreeRoomForm);\n\nexport default connect(mapStateToProps)(FreeRoomForm);\n","import axios from '../helper/axios';\nimport { store } from '../index';\nimport { CLASS_URL, PUBLIC_CLASSES_URL } from '../constants/axios';\n\nimport { CLASS_FORM } from '../constants/reduxForms';\n\nimport {\n    addClassScheduleOne,\n    setClassScheduleList,\n    getClassScheduleOne,\n    deleteClassScheduleOne,\n    updateClassScheduleOne,\n    clearClassScheduleOne\n} from '../redux/actions/class';\n\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { setLoadingService } from './loadingService';\n\nexport const getClassScheduleListService = dispatch => {\n    axios\n        .get(CLASS_URL)\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(setClassScheduleList(bufferArray));\n            setLoadingService(false);\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getPublicClassScheduleListService = dispatch => {\n    axios\n        .get(PUBLIC_CLASSES_URL)\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(setClassScheduleList(bufferArray));\n        })\n        .catch(error => {\n            errorHandler(error);\n            setLoadingService(false);\n        });\n};\n\nexport const addClassScheduleOneService = values => {\n    if (values.id) {\n        putAddClassScheduleOneService(values);\n    } else {\n        postAddClassScheduleOneService(values);\n    }\n};\n\nexport const putAddClassScheduleOneService = values => {\n    axios\n        .put(CLASS_URL, values)\n        .then(response => {\n            store.dispatch(updateClassScheduleOne(response.data));\n            resetFormHandler(CLASS_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:class_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const postAddClassScheduleOneService = values => {\n    axios\n        .post(CLASS_URL, values)\n        .then(response => {\n            store.dispatch(addClassScheduleOne(response.data));\n            resetFormHandler(CLASS_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:class_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getClassScheduleOneService = classId => {\n    store.dispatch(getClassScheduleOne(classId));\n};\n\nexport const deleteClassScheduleOneService = classId => {\n    axios\n        .delete(CLASS_URL + `/${classId}`)\n        .then(response => {\n            store.dispatch(deleteClassScheduleOne(classId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:class_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const clearClassScheduleOneService = () => {\n    store.dispatch(clearClassScheduleOne());\n    resetFormHandler(CLASS_FORM);\n};\n","import React, { useEffect, useState } from 'react';\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport Dialog from '@material-ui/core/Dialog';\n\nimport FreeRoomForm from '../../components/FreeRoomForm/freeRoomForm';\nimport { GiCancel } from 'react-icons/gi';\nimport { useTranslation } from 'react-i18next';\nimport { clearFreeRoomsService } from '../../services/freeRoomsService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { showFreeRoomsService } from '../../services/freeRoomsService';\n\nimport './freeRooms.scss';\n\nconst FreeRooms = props => {\n    const { t } = useTranslation('formElements');\n\n    const [open, setOpen] = useState(false);\n\n    const { classScheduler } = props;\n\n    useEffect(() => getClassScheduleListService(), []);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleFormReset = () => {\n        clearFreeRoomsService();\n    };\n\n    const submit = values => {\n        showFreeRoomsService(values);\n    };\n\n    return (\n        <>\n            <span className=\"navLinks\" onClick={handleClickOpen}>\n                {t('find_free_room')}\n            </span>\n\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                maxWidth=\"lg\"\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <div className=\"cards-container \">\n                    <aside className=\"free-rooms__panel\">\n                        <Card className=\"free-rooms-wrapper freeRoomCard\">\n                            <div className=\"freeRoomForms\">\n                                <h2 id=\"form-dialog-title\">\n                                    {t('find_free_room')}\n                                </h2>\n                                <FreeRoomForm\n                                    classScheduler={classScheduler}\n                                    onReset={handleFormReset}\n                                    onSubmit={submit}\n                                />\n                            </div>\n                        </Card>\n                    </aside>\n                    <section className=\"container-flex-wrap wrapper\">\n                        {props.freeRooms.map(freeRoom => (\n                            <Card key={freeRoom.id} className=\"container\">\n                                <div className=\"freeRoomCard\">\n                                    <span> {t('room_label') + ':'} </span>\n                                    <h2 className=\"room-card__number\">\n                                        {freeRoom.name}\n                                    </h2>\n                                    <span>{t('type_label') + ':'}</span>\n                                    <h2 className=\"room-card__number\">\n                                        {freeRoom.type.description}\n                                    </h2>\n                                </div>\n                            </Card>\n                        ))}\n                    </section>\n                </div>\n            </Dialog>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    freeRooms: state.freeRooms.freeRooms\n});\n\nexport default connect(mapStateToProps)(FreeRooms);\n","import axios from '../helper/axios';\nimport { store } from '../index';\n\nimport { showFreeRooms, clearFreeRooms } from '../redux/actions/freeRooms';\nimport { FREE_ROOMS_URL } from '../constants/axios';\nimport { FREE_ROOMS } from '../constants/reduxForms';\n\nimport { errorHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const showFreeRoomsService = elem => {\n    axios\n        .get(\n            FREE_ROOMS_URL +\n                '?dayOfWeek=' +\n                elem.dayOfWeek +\n                '&evenOdd=' +\n                elem.evenOdd +\n                '&classId=' +\n                elem.class +\n                '&semesterId=' +\n                elem.semesterId\n        )\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(showFreeRooms(bufferArray));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const clearFreeRoomsService = () => {\n    store.dispatch(clearFreeRooms());\n    resetFormHandler(FREE_ROOMS);\n};\n","import * as actionsType from './actionsType';\n\nexport const showFreeRooms = freeRooms => {\n    return {\n        type: actionsType.SHOW_FREE_ROOMS,\n        result: freeRooms\n    };\n};\n\nexport const clearFreeRooms = () => ({\n    type: actionsType.CLEAR_FREE_ROOM\n});\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {\n    FaCaretDown,\n    FaClipboardList,\n    FaClock,\n    FaDoorOpen,\n    FaHome,\n    FaRunning,\n    FaSignOutAlt,\n    FaUser\n} from 'react-icons/fa';\nimport Menu from '@material-ui/core/Menu';\nimport Button from '@material-ui/core/Button';\nimport { useTranslation } from 'react-i18next';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { withStyles } from '@material-ui/core/styles';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\n\nimport '../../App.scss';\nimport './Header.scss';\nimport { links } from '../../constants/links';\n\nimport LanguageSelector from '../LanguageSelector/LanguageSelector';\nimport * as colors from '../../constants/schedule/colors';\n\nimport { getCurrentSemesterService } from '../../services/scheduleService';\n\nimport FreeRooms from '../../containers/FreeRooms/freeRooms';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { setSemesterLoadingService } from '../../services/loadingService';\n\nconst StyledMenu = withStyles({\n    paper: {\n        border: `1px solid ${colors.colors.BORDER}`\n    }\n})(props => (\n    <Menu\n        elevation={0}\n        getContentAnchorEl={null}\n        anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center'\n        }}\n        transformOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center'\n        }}\n        {...props}\n    />\n));\n\nconst StyledMenuItem = withStyles(theme => ({\n    root: {\n        '&:focus': {\n            backgroundColor: theme.palette.primary.main,\n            color: theme.palette.common.white\n        }\n    }\n}))(MenuItem);\n\nconst Header = props => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const handleClick = event => setAnchorEl(event.currentTarget);\n    const handleClose = () => setAnchorEl(null);\n\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\n    const handleClickUserMenu = event => setAnchorElUser(event.currentTarget);\n    const handleCloseUserMenu = () => setAnchorElUser(null);\n\n    const { t } = useTranslation('common');\n    const [teacher, setTeacher] = useState(0);\n\n    useEffect(() => {\n        if (props.userRole === roles.MANAGER) {\n            setSemesterLoadingService(true);\n            getCurrentSemesterService();\n        }\n    }, [props.userRole]);\n\n\n\n\n    const getUserMenu = userRole => {\n        let userMenu = null;\n        if (userRole === null || userRole === undefined) {\n            return (\n                <Link to={links.LOGIN} className=\"navLinks\">\n                    {t('login_title')}\n                </Link>\n            );\n        }\n        switch (userRole) {\n            case roles.MANAGER:\n                userMenu = (\n                    <div className=\"user-menu\">\n                        <Button\n                            aria-controls=\"customized-menu\"\n                            aria-haspopup=\"true\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={handleClickUserMenu}\n                        >\n                            {localStorage.getItem('email')}\n                            <ListItemIcon>\n                                <FaCaretDown fontSize=\"normall\" />\n                            </ListItemIcon>\n                        </Button>\n                        <StyledMenu\n                            id=\"customized-menu\"\n                            anchorEl={anchorElUser}\n                            keepMounted\n                            open={Boolean(anchorElUser)}\n                            onClose={handleCloseUserMenu}\n                        >\n                            <Link\n                                to={links.ADMIN_PAGE}\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaUser fontSize=\"normall\" />\n                                    </ListItemIcon>\n                                    {t('admin_title')}\n                                </StyledMenuItem>\n                            </Link>\n                            <Link\n                                to={links.SCHEDULE_PAGE}\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaClock fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    {t('schedule_title')}\n                                </StyledMenuItem>\n                            </Link>\n                            <span\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaDoorOpen fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    <FreeRooms\n                                        classScheduler={props.classScheduler}\n                                    />\n                                </StyledMenuItem>\n                            </span>\n                            <Link\n                                to={links.MY_PROFILE}\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaUser fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    {t('my_profile')}\n                                </StyledMenuItem>\n                            </Link>\n                            <Link\n                                to={links.LOGOUT}\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaSignOutAlt fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    {t('logout_title')}\n                                </StyledMenuItem>\n                            </Link>\n                        </StyledMenu>\n                    </div>\n                );\n                break;\n            case roles.TEACHER:\n                userMenu = (\n                    <div className=\"user-menu\">\n                        <Button\n                            aria-controls=\"customized-menu\"\n                            aria-haspopup=\"true\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={handleClickUserMenu}\n                        >\n                            {localStorage.getItem('email')}\n                            <ListItemIcon>\n                                <FaCaretDown fontSize=\"normal\" />\n                            </ListItemIcon>\n                        </Button>\n                        <StyledMenu\n                            id=\"customized-menu\"\n                            anchorEl={anchorElUser}\n                            keepMounted\n                            open={Boolean(anchorElUser)}\n                            onClose={handleCloseUserMenu}\n                        >\n                            <Link\n                                to={links.TEACHER_SCHEDULE}\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaClock fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    {t('schedule_title')}\n                                </StyledMenuItem>\n                            </Link>\n                            <span\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={() => {\n\n                                    handleCloseUserMenu();\n                                }}\n                            >\n\n                            </span>\n                            <Link\n                                to={links.MY_PROFILE}\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaUser fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    {t('my_profile')}\n                                </StyledMenuItem>\n                            </Link>\n                            <Link\n                                to={links.LOGOUT}\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaSignOutAlt fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    {t('logout_title')}\n                                </StyledMenuItem>\n                            </Link>\n                        </StyledMenu>\n                    </div>\n                );\n                break;\n            default:\n                userMenu = (\n                    <div className=\"user-menu\">\n                        <Button\n                            aria-controls=\"customized-menu\"\n                            aria-haspopup=\"true\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={handleClickUserMenu}\n                        >\n                            {localStorage.getItem('email')}\n                        </Button>\n                        <StyledMenu\n                            id=\"customized-menu\"\n                            anchorEl={anchorElUser}\n                            keepMounted\n                            open={Boolean(anchorElUser)}\n                            onClose={handleCloseUserMenu}\n                        >\n                            <Link\n                                to={links.LOGOUT}\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaSignOutAlt fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    {t('logout_title')}\n                                </StyledMenuItem>\n                            </Link>\n                        </StyledMenu>\n                    </div>\n                );\n        }\n        return userMenu;\n    };\n\n    const roles = props.roles;\n\n    let leftLinks = null;\n    let menu = null;\n    let userMenu = getUserMenu(props.userRole);\n    if (props.userRole === roles.MANAGER) {\n        leftLinks = (\n            <>\n                {props.loading ? (\n                    <span className=\"navLinks nav-semester\">\n                        <CircularProgress size={20} />\n                    </span>\n                ) : (\n                    <span className=\"navLinks nav-semester\">\n                        {t('formElements:semester_label')}:{' '}\n                        {props.currentSemester.description}\n                    </span>\n                )}\n            </>\n        );\n        menu = (\n            <div className=\"menu\">\n                <Button\n                    aria-controls=\"customized-menu\"\n                    aria-haspopup=\"true\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleClick}\n                >\n                    {t('menu_button')}\n                </Button>\n\n                <StyledMenu\n                    id=\"customized-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    <span className=\"navLinks menu-semester\">\n                        {props.currentSemester.description}\n                    </span>\n                    <Link\n                        to={links.HOME_PAGE}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaHome fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('home_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        to={links.SCHEDULE_PAGE}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaClock fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('schedule_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        to={links.ADMIN_PAGE}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaUser fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('admin_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <span\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaDoorOpen fontSize=\"normall\" />\n                            </ListItemIcon>\n                            <FreeRooms classScheduler={props.classScheduler} />\n                        </StyledMenuItem>\n                    </span>\n\n                    <Link\n                        to={links.LOGOUT}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaSignOutAlt fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('logout_title')}\n                        </StyledMenuItem>\n                    </Link>\n                </StyledMenu>\n            </div>\n        );\n    } else if (props.userRole === roles.TEACHER) {\n        menu = (\n            <div className=\"menu\">\n                <Button\n                    aria-controls=\"customized-menu\"\n                    aria-haspopup=\"true\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleClick}\n                >\n                    {t('menu_button')}\n                </Button>\n\n                <StyledMenu\n                    id=\"customized-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    <Link\n                        to={links.HOME_PAGE}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaHome fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('home_title')}\n                        </StyledMenuItem>\n                    </Link>\n                    <StyledMenuItem>\n                        <ListItemIcon>\n                            <FaClipboardList fontSize=\"normall\" />\n                        </ListItemIcon>\n\n                    </StyledMenuItem>\n\n                    <Link\n                        to={links.TEACHER_SCHEDULE}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaClock fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('schedule_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        to={links.LOGOUT}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaSignOutAlt fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('logout_title')}\n                        </StyledMenuItem>\n                    </Link>\n                </StyledMenu>\n            </div>\n        );\n    } else if (props.userRole === null || props.userRole === undefined) {\n        menu = (\n            <div className=\"menu\">\n                <Button\n                    aria-controls=\"customized-menu\"\n                    aria-haspopup=\"true\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleClick}\n                >\n                    {t('menu_button')}\n                </Button>\n                <StyledMenu\n                    id=\"customized-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    <Link\n                        to={links.HOME_PAGE}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={ () => {\n                            setAnchorEl(null);\n                        }}\n\n                    >\n                        <StyledMenuItem>\n\n                            <ListItemIcon>\n                                <FaHome fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('home_title')}\n                        </StyledMenuItem>\n                    </Link>\n                    <Link\n                        to={links.LOGIN}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaRunning fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('login_title')}\n                        </StyledMenuItem>\n                    </Link>\n                </StyledMenu>\n            </div>\n        );\n    }\n\n    return (\n        <>\n\n            <header className=\"header\">\n                {menu}\n                <nav className=\"header-blocks header-blocks_one\">\n                    <Link to={links.HOME_PAGE} className=\"navLinks\">\n\n                        {t('home_title')}\n                    </Link>\n                    {leftLinks}\n                </nav>\n                <nav className=\"header-blocks header-blocks_two\">\n                    {userMenu}\n                </nav>\n                <nav className=\"header-blocks header-blocks_three\">\n                    <LanguageSelector />\n                </nav>\n            </header>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    currentSemester: state.schedule.currentSemester,\n    loading: state.loadingIndicator.semesterLoading\n});\n\nexport default connect(mapStateToProps, {})(Header);\n","export const userRoles = {\n    USER: 'ROLE_USER',\n    MANAGER: 'ROLE_MANAGER',\n    TEACHER: 'ROLE_TEACHER'\n};\n","import { daysUppercase } from '../constants/schedule/days';\n\nexport const makeGroupSchedule = groupSchedule => {\n    let evenArray = [];\n    let oddArray = [];\n    let group = {};\n    let done = false;\n\n    const evenDaysPrepArray = [\n        { day: 'MONDAY', class: [] },\n        { day: 'TUESDAY', class: [] },\n        { day: 'WEDNESDAY', class: [] },\n        { day: 'THURSDAY', class: [] },\n        { day: 'FRIDAY', class: [] },\n        { day: 'SATURDAY', class: [] },\n        { day: 'SUNDAY', class: [] }\n    ];\n    const oddDaysPrepArray = [\n        { day: 'MONDAY', class: [] },\n        { day: 'TUESDAY', class: [] },\n        { day: 'WEDNESDAY', class: [] },\n        { day: 'THURSDAY', class: [] },\n        { day: 'FRIDAY', class: [] },\n        { day: 'SATURDAY', class: [] },\n        { day: 'SUNDAY', class: [] }\n    ];\n\n    if (groupSchedule.schedule && groupSchedule.schedule.length > 0) {\n        group = groupSchedule.schedule[0].group;\n        groupSchedule.schedule[0].days.map(day => {\n            day.classes.map(classItem => {\n                evenDaysPrepArray.map(evenDayPrep => {\n                    if (evenDayPrep.day === day.day) {\n                        evenDayPrep.class[classItem.class.id] = {\n                            class: classItem.class,\n                            card: classItem.weeks.even\n                        };\n                    }\n                });\n\n                oddDaysPrepArray.map(oddDayPrep => {\n                    if (oddDayPrep.day === day.day) {\n                        oddDayPrep.class[classItem.class.id] = {\n                            class: classItem.class,\n                            card: classItem.weeks.odd\n                        };\n                    }\n                });\n            });\n        });\n    }\n\n    oddDaysPrepArray.map(oddDay => {\n        oddDay.class.map((oddClas, clasIndex) => {\n            if (!oddArray.hasOwnProperty(clasIndex)) {\n                oddArray[clasIndex] = { class: oddClas.class, cards: {} };\n            }\n\n            daysUppercase.map(dayArr => {\n                if (!oddArray[clasIndex].cards.hasOwnProperty(dayArr)) {\n                    oddArray[clasIndex].cards[dayArr] = {};\n                }\n            });\n            if (oddClas.card !== null && oddClas.card !== undefined) {\n                // if (oddClas.card.hasOwnProperty('teacherForSite')) {\n                if (oddClas.card.hasOwnProperty('teacher')) {\n                    oddArray[clasIndex].cards[oddDay.day] = {\n                        card: oddClas.card\n                    };\n                }\n            }\n        });\n    });\n\n    evenDaysPrepArray.map(evenDay => {\n        evenDay.class.map((evenClas, clasIndex) => {\n            if (!evenArray.hasOwnProperty(clasIndex)) {\n                evenArray[clasIndex] = { class: evenClas.class, cards: {} };\n            }\n\n            daysUppercase.map(dayArr => {\n                if (!evenArray[clasIndex].cards.hasOwnProperty(dayArr)) {\n                    evenArray[clasIndex].cards[dayArr] = {};\n                }\n            });\n            if (evenClas.card !== null && evenClas.card !== undefined) {\n                // if (evenClas.card.hasOwnProperty('teacherForSite')) {\n                if (evenClas.card.hasOwnProperty('teacher')) {\n                    evenArray[clasIndex].cards[evenDay.day] = {\n                        card: evenClas.card\n                    };\n                }\n            }\n        });\n    });\n    done = true;\n    return {\n        semester: groupSchedule.semester,\n        oddArray,\n        evenArray,\n        group,\n        done\n    };\n};\n\nexport const makeFullSchedule = fullSchedule => {\n    let groupsCount = 0;\n    let groupList = [];\n    let groupListId = new Map([]);\n    let daysPrepArrayFull = [];\n    let done = false;\n    let semester_days = [];\n    let semester_classes = [];\n\n    if (fullSchedule.schedule) {\n        groupsCount = fullSchedule.schedule.length;\n        semester_days = fullSchedule.semester.semester_days;\n        semester_classes = fullSchedule.semester.semester_classes;\n\n        fullSchedule.schedule.map(group => {\n            groupList.push(group.group);\n            groupListId.set(group.group.id, {});\n        });\n        groupList = groupList.sort((a, b) =>\n            a.title > b.title ? 1 : b.title > a.title ? -1 : 0\n        );\n\n        fullSchedule.semester.semester_days.map(day => {\n            let prep_schedule_array = [];\n            fullSchedule.semester.semester_classes.map(classItem => {\n                const oddArray = [];\n                const evenArray = [];\n                groupList.forEach((groupItem, groupIndex) => {\n                    const groupFull = fullSchedule.schedule.find(\n                        groupFullIterate =>\n                            groupFullIterate.group.id === groupItem.id\n                    );\n                    const dayFull = groupFull.days.find(\n                        dayFullIterate => dayFullIterate.day === day\n                    );\n                    const classFull = dayFull.classes.find(\n                        dayFullIterable =>\n                            dayFullIterable.class.id === classItem.id\n                    );\n                    oddArray.push({\n                        group: groupItem,\n                        card: classFull.weeks.odd\n                    });\n                    evenArray.push({\n                        group: groupItem,\n                        card: classFull.weeks.even\n                    });\n                });\n                prep_schedule_array.push({\n                    class: classItem,\n                    cards: { odd: oddArray, even: evenArray }\n                });\n            });\n            daysPrepArrayFull.push({ day, classes: prep_schedule_array });\n        });\n        done = true;\n    }\n\n    return {\n        semester: fullSchedule.semester,\n        schedule: fullSchedule.schedule,\n        semester_classes,\n        semester_days,\n        groupsCount: groupsCount,\n        groupList: groupList,\n        resultArray: daysPrepArrayFull,\n        done\n    };\n};\n\nexport const makeTeacherSchedule = teacherSchedule => {\n    let teacher = {};\n    let evenArray = [];\n    let oddArray = [];\n    let oddDays = [];\n    let evenDays = [];\n    let oddClasses = [];\n    let evenClasses = [];\n    let done = false;\n\n    if (teacherSchedule && teacherSchedule.days) {\n        teacher = teacherSchedule.teacher;\n\n        teacherSchedule.days.map(dayTeacher => {\n            dayTeacher.odd.classes.map(clas => {\n                if (\n                    oddClasses.findIndex(\n                        oddClass => oddClass.id === clas.class.id\n                    ) < 0\n                ) {\n                    oddClasses.push(clas.class);\n                }\n                if (oddDays.indexOf(dayTeacher.day) < 0) {\n                    oddDays.push(dayTeacher.day);\n                }\n                if (!(clas.class.id in oddArray)) {\n                    oddArray[clas.class.id] = [];\n                }\n\n                oddArray[clas.class.id].push({\n                    day: dayTeacher.day,\n                    cards: clas.lessons\n                });\n            });\n\n            dayTeacher.even.classes.map(clas => {\n                if (\n                    evenClasses.findIndex(\n                        evenClass => evenClass.id === clas.class.id\n                    ) < 0\n                ) {\n                    evenClasses.push(clas.class);\n                }\n                if (evenDays.indexOf(dayTeacher.day) < 0) {\n                    evenDays.push(dayTeacher.day);\n                }\n                if (!(clas.class.id in evenArray)) {\n                    evenArray[clas.class.id] = [];\n                }\n\n                evenArray[clas.class.id].push({\n                    day: dayTeacher.day,\n                    cards: clas.lessons\n                });\n            });\n        });\n        done = true;\n    }\n\n\n    return {\n        done,\n        teacher,\n        semester: teacherSchedule.semester,\n        odd: {\n            days: oddDays,\n            classes: oddClasses.sort((a, b) =>\n                a.startTime > b.startTime\n                    ? 1\n                    : b.startTime > a.startTime\n                    ? -1\n                    : 0\n            ),\n            cards: oddArray\n        },\n        even: {\n            days: evenDays,\n            classes: evenClasses.sort((a, b) =>\n                a.startTime > b.startTime\n                    ? 1\n                    : b.startTime > a.startTime\n                    ? -1\n                    : 0\n            ),\n            cards: evenArray\n        }\n    };\n};\n","export const disabledCard = {\n    SHOW: 'show',\n    HIDE: 'hide'\n};\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './modal.scss';\n\nimport i18n from 'i18next';\nimport { disabledCard } from '../../../constants/disabledCard';\nimport './linkToMeetingDialog.scss'\nexport const LinkToMeetingDialog = props => {\n    const { onClose, cardId, isHide, open,linkToMeeting} = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n\n    return (\n        <Dialog id=\"my-dialog\"\n\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\" className=\"confirm-dialog\">\n                <>\n                    {isHide ? (\n                        <>\n                            {isHide === disabledCard.HIDE ? (\n                                <>{i18n.t('common:do_you_wanna_disable')}</>\n                            ) : (\n                                <>{i18n.t('common:do_you_wanna_show')}</>\n                            )}\n                        </>\n                    ) : (\n                        <>\n                            {i18n.t('common:do_you_wanna')}{' '}\n                            <span>\n                                <a className=\"go-to-meeting\" href={linkToMeeting} target=\"_blank\" title={linkToMeeting}>\n                                    {i18n.t(`common:go_to_meeting_word`)}\n                                </a>\n                            </span>{' '}\n                        </>\n                    )}\n\n                    {i18n.t('common:by_this_card_type', {\n                        cardType: i18n.t(`formElements:reference_element`)\n                    })}\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => onClose(cardId)}\n                >\n                    {i18n.t('common:yes_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                >\n                    {i18n.t('common:no_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nLinkToMeetingDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default LinkToMeetingDialog;\n","import React, { useState } from 'react';\nimport { IoMdLink } from 'react-icons/all';\nimport LinkToMeetingDialog from '../../share/modals/modal/linkToMeetingDialog';\nimport './LinkToMeeting.scss'\nconst LinkToMeeting=(props)=>{\n   const {linkToMeeting}=props;\n   const [openDialog,setOpenDialog]=useState(false);\n   const openWindowByUrl=(url)=>{\n      let win = window.open(linkToMeeting, '_blank');\n       win.focus();\n   }\n    const handleClose = semesterId => {\n        setOpenDialog(false);\n        if (semesterId !== '') {\n           openWindowByUrl(linkToMeeting);\n        }\n    };\n\n    return (<>\n                    <IoMdLink\n                        color={\"blue\"}\n                        className=\"svg-btn copy-btn link\"\n                        onClick={() => {\n                            setOpenDialog(true);\n                        }}\n                        title={linkToMeeting}\n\n                    />\n                <LinkToMeetingDialog\n                    cardId={1}\n                    isHide={false}\n                    open={openDialog}\n                    onClose={handleClose}\n                    linkToMeeting={linkToMeeting}\n                />\n                </>\n           )\n\n}\nexport {LinkToMeeting}","export const places={\n    TOGETHER:\"auditory+online\",\n    AUDITORY:\"auditory\",\n    ONLINE:\"online\"\n}","export const getFirstLetter=(word)=>{\n    return word!==null?`${word.charAt(0)}.`:\"\";\n}\nexport const getTeacherName=( teacher )=>{\n    const {name,surname,patronymic}=teacher;\n    return `${surname} ${getFirstLetter(name)} ${getFirstLetter(patronymic)}`;\n\n}\nexport const getTeacherFullName=( teacher )=>{\n    const {name,surname,patronymic}=teacher;\n    return `${surname} ${name} ${patronymic}`;\n\n}\nexport const getTeacherForSite=(teacher)=>{\n    const {name,surname,patronymic,position}=teacher;\n    return `${position} ${surname} ${getFirstLetter(name)} ${getFirstLetter(patronymic)}\\n`;\n\n}\nexport const handleTeacherInfo = (teacher) => {\n    const {name,surname,patronymic,position}=teacher;\n    return `${surname} ${name} ${patronymic} (${position})`;\n};\nexport const getTeacherWithPosition = (teacher) => {\n    const {name,surname,patronymic,position}=teacher;\n    return `${position} ${surname} ${name} ${patronymic}`;\n};","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport Card from '../share/Card/Card';\n\nimport i18next from './i18n';\n\nimport { daysUppercase } from '../constants/schedule/days';\nimport { LinkToMeeting } from '../components/LinkToMeeting/LinkToMeeting';\nimport { places } from '../constants/places';\nimport i18n from 'i18next';\nimport './renderScheduleTable.scss'\nimport { getFirstLetter, getTeacherForSite, getTeacherFullName } from './renderTeacher';\nconst shortid = require('shortid');\n\nconst matchDayNumberSysytemToDayName = () => {\n    let now = new Date();\n    return daysUppercase[now.getDay() - 1];\n};\nconst currentDay = matchDayNumberSysytemToDayName();\nconst setLink=(card,place)=>{\n    if(place===places.TOGETHER){\n        return <LinkToMeeting {...card} />\n    }\n    else if(place===places.ONLINE){\n        return getHref(card.linkToMeeting)\n    }\n    return null;\n}\n\nconst getWeekNumber = (startScheduleDate, date) => {\n    const parsed = Array.from(startScheduleDate);\n\n    const startDay = new Date(\n        parsed[3] +\n            parsed[4] +\n            parsed[5] +\n            parsed[0] +\n            parsed[1] +\n            parsed[2] +\n            parsed[6] +\n            parsed[7] +\n            parsed[8] +\n            parsed[9]\n    );\n\n    const numberOfDays = Math.floor((date - startDay) / (24 * 60 * 60 * 1000));\n    return Math.ceil((date.getDay() + 1 + numberOfDays) / 7);\n};\nconst printWeekNumber = startScheduleDate => {\n    let date = new Date();\n    let result = getWeekNumber(startScheduleDate, date);\n    return result;\n};\nfunction isOddFunction(num) {\n    return num % 2;\n}\nlet currentWeekType = 0;\n\nconst renderClassCell = classItem => {\n   return (classItem.class_name +\n    '\\n\\r\\n\\r' +\n    classItem.startTime +\n    ' - ' +\n    classItem.endTime);\n}\n\nexport const prepareLessonCardCell = card => {\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        inner = getTeacherForSite(card.teacher) + '\\n' + card.subjectForSite+'\\n';\n    }\n    return inner;\n};\nexport const prepareLessonSubCardCell = (card,place) => {\n    const room=place!==places.ONLINE?card.room:\"\";\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        inner =\n            i18next.t(\n                `formElements:lesson_type_${card.lessonType.toLowerCase()}_label`\n            );\n        if (room!==\"\") {\n            inner=`(${inner}, ${card.room.name})`\n        }\n    }\n    return inner;\n};\nconst getHref=(link)=>{\n    return (<a title={link} className=\"link-to-meeting\" href={link} target=\"_blank\">{i18n.t(`common:link_to_meeting_word`)}</a>);\n}\n\nexport const prepareLessonTemporaryCardCell = (card,place) => {\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        if (card.temporary_schedule) {\n            if (card.temporary_schedule.vacation === true) {\n                inner +=\n                    card.temporary_schedule.date +\n                    '\\n\\r' +\n                    i18next.t(`common:vacation_label`);\n            } else {\n                inner +=\n                    card.temporary_schedule.date +\n                    '\\n\\r' +\n                    getTeacherForSite(card.temporary_schedule)+\n                    '\\n' +\n                    card.temporary_schedule.subjectForSite;\n                if (card.temporary_schedule.room) {\n                    inner += ', ' + card.temporary_schedule.room.name + ' )';\n                }\n            }\n            let title =\n                i18next.t(`common:regular_lesson_label`) +\n                '\\r' +\n                prepareLessonCardCell(card, place) +\n                '\\r' +\n                prepareLessonSubCardCell(card, place) +\n                '\\r'\n\n            return inner.length > 0 ? (\n                <>\n                    <p className=\"temporary-class\" title={title}>\n                        {inner}\n                    </p>\n                    {setLink(card,place)}\n                </>\n\n            ) : (\n                ''\n            );\n        } else {\n            return (\n                <>\n                    <p>{prepareLessonCardCell(card,place)}</p>\n                    <p>{prepareLessonSubCardCell(card,place)}</p>\n                    {setLink(card,place)}\n                </>\n            );\n        }\n    }else {\n        return '';\n    }\n};\n\nexport const prepareTeacherCardCell = card => {\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        inner = card.subjectForSite;\n    }\n    return inner;\n};\n\nexport const prepareTeacherCardRegularCell = (card,place) => {\n    let inner=buildLessonWithRoom(card,place);\n    inner+='\\n' +\n        card.group.title+'\\n';\n    return inner;\n\n}\n\nexport const buildLessonWithRoom = (card,place) => {\n    const room=place!==places.ONLINE?card.room:\"\";\n    let inner=\"\";\n    inner+=   prepareTeacherCardCell(card)+\n        '\\n';\n\n    if (room!==\"\") {\n        inner+=`(${ i18next.t(\n            `formElements:lesson_type_${card.lessonType.toLowerCase()}_label`\n        )} ,${card.room})\\n`\n    }\n    else {\n        inner+= i18next.t(\n                `formElements:lesson_type_${card.lessonType.toLowerCase()}_label`\n            )+'\\n';\n    }\n    return inner;\n\n\n\n}\nexport const buildGroupNumber = card => {\n\n    return    card.group.title+'\\n';\n}\n\nexport const prepareTeacherTemporaryCardCell = (cards,place) => {\n\n    let inner = '';\n    let title = '';\n    if (!cards) {\n        return '';\n    }\n\n    if (cards.length === 1) {\n        if (cards[0] === undefined || cards[0] === null) {\n            return '';\n        }\n        const card = cards[0];\n\n        if (!card.temporary_schedule) {\n            return <>\n                {prepareTeacherCardRegularCell(card,place)}\n                {setLink(card,place)}\n            </>\n\n        }\n        if (card.temporary_schedule.vacation === true) {\n            inner +=\n                card.temporary_schedule.date +\n                '\\n' +\n                i18next.t(`common:vacation_label`);\n        } else {\n\n            inner +=\n                card.temporary_schedule.date +\n                '\\n' ;\n            if (card.temporary_schedule.room) {\n                inner +=`(${card.temporary_schedule.subjectForSite}, ${card.temporary_schedule.room.name})\\n`;\n            }\n            else {\n                inner+=card.temporary_schedule.subjectForSite+'\\n';\n            }\n        }\n        title =\n            i18next.t(`common:regular_lesson_label`) +\n            '\\r' +\n            prepareTeacherCardRegularCell(card,place);\n        return inner.length > 0 ? (\n            <p className=\"temporary-class\" title={title}>\n                {inner}\n                {setLink(card,place)}\n            </p>\n        ) : (\n            ''\n        );\n    }\n    let card=cards[0];\n\n    inner+=buildLessonWithRoom(card,place);\n    cards.map(card => {\n        if (!card.temporary_schedule) {\n            inner+=\n               buildGroupNumber(card);\n        }\n\n       else if (card.temporary_schedule.vacation === true) {\n\n            inner +=\n                card.temporary_schedule.date +\n                '\\n' +\n                i18next.t(`common:vacation_label`) +\n                '\\n';\n        } else {\n            inner +=\n                card.temporary_schedule.date +\n                '\\n' +\n                getTeacherFullName(card.temporary_schedule.teacher)+\n                '\\n';\n            if (card.temporary_schedule.room) {\n                inner +=`${card.temporary_schedule.subjectForSite}, ${card.temporary_schedule.room.name}\\n`;\n            }\n            else {\n                inner+=card.temporary_schedule.subjectForSite+'\\n';\n            }\n        }\n        title +=\n            i18next.t(`common:regular_lesson_label`) +\n            '\\r' +\n            prepareTeacherCardRegularCell(card,place) +\n            '\\r';\n    });\n\n    return inner.length > 0 ? (\n        <p className=\"temporary-class\" title={title}>\n            {inner}\n            {setLink(card,place)}\n        </p>\n    ) : (\n        ''\n    );\n};\n\nexport const renderGroupDayClass = (classDay, isOddWeek,place) => {\n    let res = [];\n    for (let [key, value] of Object.entries(classDay.cards)) {\n        value.day = key;\n        res.push(value);\n    }\n    return (\n        <TableRow key={shortid.generate()}>\n            <TableCell className=\" lesson groupLabelCell\">\n                {renderClassCell(classDay.class)}\n            </TableCell>\n            {res.map(day => {\n                let className = 'lesson ';\n                if (currentDay === day.day && currentWeekType === isOddWeek) {\n                    className += ' currentDay';\n                }\n                return (\n                    <TableCell key={shortid.generate()} className={className}>\n                        {/* <p>{prepareLessonCardCell(day.card, currentDay)}</p>\n                        <p>{prepareLessonSubCardCell(day.card, currentDay)}</p> */}\n                        {prepareLessonTemporaryCardCell(day.card,place)}\n\n                    </TableCell>\n                );\n            })}\n        </TableRow>\n    );\n};\n\nexport const renderScheduleGroupHeader = daysUppercase => (\n    <TableHead>\n        <TableRow>\n            <TableCell className=\"groupLabelCell\"></TableCell>\n            {daysUppercase.map(day => (\n                <TableCell key={shortid.generate()}>\n                    {i18next.t(`day_of_week_${day}`)}\n                </TableCell>\n            ))}\n        </TableRow>\n    </TableHead>\n);\n\nexport const renderGroupTable = (classes, isOdd, semester,place) => {\n    if (semester) {\n        currentWeekType = isOddFunction(printWeekNumber(semester.startDay));\n    }\n\n    return (\n        <TableContainer>\n            <Table aria-label=\"sticky table\">\n                {renderScheduleGroupHeader(daysUppercase)}\n                <TableBody>\n                    {classes.map((classDay, classIndex) => {\n                        if (classDay) {\n                            return renderGroupDayClass(classDay, isOdd,place);\n                        }\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nexport const renderGroupCells = (\n    groups,\n    place,\n    isOdd = 0,\n    currentWeekType = 0,\n    isCurrentDay = 0,\n\n) => {\n    return groups.map((group, groupIndex) => {\n        let colspan = 1;\n        let rowspan = 1;\n        let classname = 'lesson';\n\n        if (currentWeekType === isOdd && isCurrentDay) {\n            classname += ' currentDay';\n        }\n        if (group.card !== null && group.card.skip_render === 1) {\n            return;\n        }\n        if (group.card !== null && group.card.weekly_render === 1) {\n            rowspan = 2;\n            classname += ' weekly';\n        }\n        for (let i = groupIndex+1; i < groups.length; i++) {\n            if (\n                group &&\n                groups[i] &&\n                group.card !== null &&\n                groups[i].card !== null\n\n            ) {\n                if (\n                    group.card.teacher &&\n                    group.card.teacher.surname ===\n                    groups[i].card.surname &&\n                    group.card.teacher.name ===\n                    groups[i].card.name &&\n                    group.card.subjectForSite ===\n                    groups[i].card.subjectForSite &&\n                    group.card.room.id === groups[i].card.room.id\n                    &&\n                    group.card.weekly_render ===\n                    groups[i].card.weekly_render\n\n\n                ) {\n\n                    groups[i].card.skip_render = 1;\n                    colspan++;\n                    classname += ' grouped';\n                }\n                else break ;\n\n            }\n            else break;\n\n        }\n\n        return (\n\n            <TableCell\n\n                key={shortid.generate()}\n                colSpan={colspan}\n                rowSpan={rowspan}\n                className={classname}\n            >\n                {prepareLessonTemporaryCardCell(group.card,place)}\n            </TableCell>\n        );\n    });\n};\n\nexport const renderScheduleHeader = groups => (\n    <TableHead>\n        <TableRow>\n            <TableCell className=\"groupLabelCell\" colSpan={3}>\n                {i18next.t('group_y_label')}\n            </TableCell>\n            {groups.map(group => (\n                <TableCell key={shortid.generate()}>{group}</TableCell>\n            ))}\n        </TableRow>\n    </TableHead>\n);\n\nexport const renderFirstDayFirstClassFirstCardLine = (\n\n    day_name,\n    classItem,\n    groups,\n    classesCount,\n    place\n) => {\n    let dayClassName = 'dayNameCell ';\n    let classClassName = 'classNameCell ';\n\n    let oddWeekClass = '';\n    let evenWeekClass = '';\n    if (currentDay === day_name) {\n        dayClassName += ' currentDay';\n\n        if (currentWeekType === 1) {\n            oddWeekClass = ' currentDay';\n        } else {\n            evenWeekClass = ' currentDay';\n        }\n    }\n\n    if (groups.even.length <= 2 || groups.odd.length <= 2) {\n        dayClassName += ' minHeightDouble';\n    }\n\n    return (\n        <React.Fragment key={shortid.generate()}>\n            <TableRow>\n                <TableCell rowSpan={classesCount * 2} className={dayClassName}>\n                    <span className=\"dayName\">\n                        <b>{i18next.t(`common:day_of_week_${day_name}`)}</b>\n                    </span>\n                </TableCell>\n                <TableCell className={classClassName} rowSpan={2}>\n                    {renderClassCell(classItem)}\n\n                </TableCell>\n                <TableCell\n                    className={classClassName + oddWeekClass + ' subClassName'}\n                >\n                    1\n                </TableCell>\n                {renderGroupCells(groups.odd,place)}\n            </TableRow>\n            <TableRow>\n                <TableCell\n                    className={classClassName + evenWeekClass + ' subClassName'}\n                >\n                    2\n                </TableCell>\n                {renderGroupCells(groups.even,place)}\n            </TableRow>\n        </React.Fragment>\n    );\n};\n\nexport const renderFirstDayOtherClassFirstCardLine = (\n    day_name,\n    classItem,\n    groups,\n    place\n) => {\n\n    let classClassName = 'classNameCell ';\n    let oddWeekClass = '';\n    let evenWeekClass = '';\n\n    if (currentDay === day_name) {\n        if (currentWeekType === 1) {\n            oddWeekClass = ' currentDay';\n        } else {\n            evenWeekClass = ' currentDay';\n        }\n    }\n\n    return (\n        <React.Fragment key={shortid.generate()}>\n            <TableRow>\n                <TableCell className={classClassName} rowSpan={2}>\n                    {renderClassCell(classItem)}\n                </TableCell>\n                <TableCell\n                    className={classClassName + oddWeekClass + ' subClassName'}\n                >\n                    1\n                </TableCell>\n                {renderGroupCells(groups.odd, place,1)}\n            </TableRow>\n            <TableRow>\n                <TableCell\n                    className={classClassName + evenWeekClass + ' subClassName'}\n                >\n                    2\n                </TableCell>\n                {renderGroupCells(groups.even, place,0)}\n            </TableRow>\n        </React.Fragment>\n    );\n};\n\nconst prepareForRender = classItem => {\n    if (classItem.cards) {\n        classItem.cards.odd.forEach((card, cardIndex, map) => {\n            if (\n                classItem.cards.even[cardIndex] &&\n                card.group.id === classItem.cards.even[cardIndex].group.id\n            ) {\n                if (\n                    card.card !== null &&\n                    classItem.cards.even[cardIndex].card !== null\n                ) {\n                    if (\n                        card.card.teacher.name ===\n                            classItem.cards.even[cardIndex].card\n                                .teacher.name &&\n                        card.card.teacher.surname ===\n                        classItem.cards.even[cardIndex].card\n                            .teacher.surname &&\n                        card.card.subjectForSite ===\n                            classItem.cards.even[cardIndex].card\n                                .subjectForSite &&\n                        card.card.room.id ===\n                            classItem.cards.even[cardIndex].card.room.id\n                    ) {\n                        classItem.cards.odd[cardIndex].card.weekly_render = 1;\n                        classItem.cards.even[cardIndex].card.skip_render = 1;\n                    }\n                }\n            }\n        });\n    }\n    return classItem;\n};\n\nexport const renderDay = (dayName, dayItem, semesterClassesCount,place) => {\n\n\n    return dayItem.map((classItem, classIndex) => {\n      const t= prepareForRender(classItem);\n        if (classIndex === 0) {\n            return renderFirstDayFirstClassFirstCardLine(\n                dayName,\n                classItem.class,\n                classItem.cards,\n                semesterClassesCount,\n                place\n            );\n        } else {\n            return renderFirstDayOtherClassFirstCardLine(\n                dayName,\n                classItem.class,\n                classItem.cards,\n                place\n            );\n        }\n    });\n};\n\nexport const renderScheduleFullHeader = groupList => (\n    <TableHead>\n        <TableRow>\n            <TableCell colSpan={3}>\n                {i18next.t('formElements:group_label')}\n            </TableCell>\n            {groupList.map(group => (\n                <TableCell key={shortid.generate()} className=\"groupLabelCell\">\n                    {group.title}\n                </TableCell>\n            ))}\n        </TableRow>\n    </TableHead>\n);\n\nconst renderScheduleDays = (fullResultSchedule,place) => {\n   return  fullResultSchedule.resultArray.map((dayItem, dayName) => {\n        return renderDay(\n            dayItem.day,\n            dayItem.classes,\n            fullResultSchedule.semester_classes.length,\n            place\n        );\n    });\n}\n\nexport const renderFullSchedule = (fullResultSchedule,place) => {\n    currentWeekType = isOddFunction(\n        printWeekNumber(fullResultSchedule.semester.startDay)\n    );\n    let scheduleTitle = '';\n    if (fullResultSchedule.semester) {\n        scheduleTitle =\n            fullResultSchedule.semester.description +\n            ' (' +\n            fullResultSchedule.semester.startDay +\n            '-' +\n            fullResultSchedule.semester.endDay +\n            ')';\n    }\n\n    return (\n        <>\n            <h1>{scheduleTitle}</h1>\n            <TableContainer>\n                <Table aria-label=\"sticky table\">\n                    {renderScheduleFullHeader(fullResultSchedule.groupList)}\n                    <TableBody>\n                        {renderScheduleDays(fullResultSchedule,place)}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n};\n\nconst renderClassRow = (classItem, days, scheduleRow,place) => (\n\n    <TableRow key={shortid.generate()}>\n        <TableCell className=\"lesson groupLabelCell\">\n\n            {renderClassCell(classItem)}\n        </TableCell>\n        {days.map(dayName => {\n\n            if (scheduleRow) {\n                return renderTeacherClassCell(\n                    scheduleRow.find(clas => clas.day === dayName),place\n                );\n            }\n        })}\n    </TableRow>\n);\nconst renderTeacherClassCell = (cards,place) => {\n    let teacherLessonAddCellClass = '';\n\n    if (cards !== undefined) {\n        if (cards.cards.length > 1) {\n            cards.cards.map((card, cardIndex) => {\n                if (\n                    cards.cards[cardIndex + 1] &&\n                    card.room !== cards.cards[cardIndex + 1].room\n                ) {\n                    teacherLessonAddCellClass += 'intersection-on-schedule';\n                }\n            });\n        }\n    }\n    return (\n        <TableCell\n            key={shortid.generate()}\n            className={`lesson ${teacherLessonAddCellClass}`}\n        >\n\n            {prepareTeacherTemporaryCardCell(cards && cards.cards,place)}\n        </TableCell>\n    );\n};\nexport const renderWeekTable = (schedule, isOdd,place) => {\n    if (schedule) {\n        return (\n            <TableContainer>\n                <Table aria-label=\"sticky table\">\n                    {renderScheduleGroupHeader(schedule.days)}\n                    <TableBody>\n                        {schedule.classes.map(classItem => {\n                            return renderClassRow(\n                                classItem,\n                                schedule.days,\n                                schedule.cards[classItem.id],\n                                place\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n};\n\nexport const renderTeacherRangeSchedule = (\n    schedule,\n    viewTeacherScheduleResults\n) => {\n    if (schedule === undefined) return;\n    if (schedule) {\n        if (schedule.length === 0) {\n            return i18next.t('empty_schedule');\n        }\n        return schedule.map((dayItem, dayIndex) => {\n            const parsed = Array.from(dayItem.date);\n\n            const startDay = new Date(\n                parsed[3] +\n                    parsed[4] +\n                    parsed[5] +\n                    parsed[0] +\n                    parsed[1] +\n                    parsed[2] +\n                    parsed[6] +\n                    parsed[7] +\n                    parsed[8] +\n                    parsed[9]\n            );\n            return (\n                <Card\n                    class={\n                        viewTeacherScheduleResults +\n                        ' ' +\n                        'form-card teacher-schedule-day-card'\n                    }\n                    key={shortid.generate()}\n                >\n                    <h3>\n                        {dayItem.date +\n                            ' ( ' +\n                            i18next.t(`day_of_week_${startDay.getDay() + 1}`) +\n                            ' )'}\n                    </h3>\n                    {renderTeacherRangeDay(dayItem.schedule)}\n                </Card>\n            );\n        });\n    }\n};\n\nconst renderLessonsFirstLine = lessonItem => {\n    return (\n        <>\n            <TableCell>{lessonItem.lesson.subject_for_site}</TableCell>\n            <TableCell>{lessonItem.lesson.group_name}</TableCell>\n            <TableCell>{lessonItem.lesson.room.name}</TableCell>\n        </>\n    );\n};\n\nconst renderLessonsRestLines = lessons => {\n    if (lessons.length === 1) {\n        return;\n    }\n    let lessonClassName = '';\n    lessonClassName = 'groupped';\n    lessons.forEach((lessonItem, lessonIndex) => {\n        if (\n            lessons[lessonIndex + 1] &&\n            (lessonItem.lesson.subject_for_site !==\n                lessons[lessonIndex + 1].lesson.subject_for_site ||\n                lessonItem.lesson.room.id !==\n                    lessons[lessonIndex + 1].lesson.room.id)\n        ) {\n            lessonClassName = 'overlap';\n        }\n    });\n    return lessons.map((lessonItem, lessonIndex) => {\n        if (lessonIndex === 0) {\n            return;\n        }\n        return (\n            <TableRow className={lessonClassName} key={shortid.generate()}>\n                <TableCell>{lessonItem.lesson.subject_for_site}</TableCell>\n                <TableCell>{lessonItem.lesson.group_name}</TableCell>\n                <TableCell>{lessonItem.lesson.room.name}</TableCell>\n            </TableRow>\n        );\n    });\n};\n\nconst renderFirstLineTable = classItem => {\n    return (\n        <TableRow key={shortid.generate()}>\n            <TableCell rowSpan={classItem.lessons.length}>\n                {classItem.class.class_name +\n                    ' ( ' +\n                    classItem.class.startTime +\n                    ' - ' +\n                    classItem.class.endTime +\n                    ')'}\n            </TableCell>\n            {renderLessonsFirstLine(classItem.lessons[0])}\n        </TableRow>\n    );\n};\n\nexport const renderTeacherRangeDay = schedule => {\n    if (schedule) {\n        return (\n            <TableContainer key={shortid.generate()}>\n                <Table aria-label=\"sticky table\">\n                    <TableBody>\n                        {schedule.map(classItem => {\n                            return (\n                                <React.Fragment key={shortid.generate()}>\n                                    {renderFirstLineTable(classItem)}\n                                    {renderLessonsRestLines(classItem.lessons)}\n                                </React.Fragment>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n};\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\n\nimport Button from '@material-ui/core/Button';\nimport { MdPlayArrow } from 'react-icons/md';\n\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport {\n    showAllPublicSemestersService,\n    showAllPublicGroupsService,\n    showAllPublicTeachersService, getFullSchedule\n} from '../../services/scheduleService';\n\nimport './GroupSchedulePageTop.scss';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Card from '../../share/Card/Card';\n\nimport { SCHEDULE_SEARCH_FORM } from '../../constants/reduxForms';\nimport { required } from '../../validation/validateFields';\nimport { MenuItem, Select } from '@material-ui/core';\nimport { places } from '../../constants/places';\nimport { getTeacherFullName } from '../../helper/renderTeacher';\nconst shortid = require('shortid');\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    }\n}));\n\nconst GroupSchedulePageTop = props => {\n    const [groupDisabled,setGroupDisabled]=useState(true);\n    const classes = useStyles();\n    const { t } = useTranslation('common');\n    const {\n        groups,\n        teachers,\n        semesters,\n        handleSubmit,\n        pristine,\n        submitting\n    } = props;\n    const isLoading = props.loading;\n    const [semesterId,setSemesterId]=useState(props.initialValues.semester);\n    let loadingContainer = '';\n    if (isLoading) {\n        loadingContainer = (\n            <section className=\"centered-container\">\n                <CircularProgress />\n            </section>\n        );\n    }\n    useEffect(() => showAllPublicGroupsService(semesterId), [semesterId]);\n    useEffect(() => showAllPublicTeachersService(), []);\n    useEffect(() => showAllPublicSemestersService(), []);\n    useEffect(() => {\n        if(groups.length!==0){\n            setGroupDisabled(false)\n        }\n        else {\n            setGroupDisabled(true)\n        }\n    }, [groups]);\n    const renderSemesterList = () => {\n        if (semesters) {\n            if (semesters.length > 1) {\n\n                return (\n                    <Field\n                        id=\"semester\"\n                        name=\"semester\"\n                        component={renderSelectField}\n                        label={t('formElements:semester_label')}\n                        type=\"text\"\n                        validate={[required]}\n                        onChange={(e)=>setSemesterId(e.target.value)}\n                    >\n                        <option />\n                        {semesters.map((semester, index) => (\n\n                            <option\n                                key={shortid.generate()}\n                                value={semester.id}\n\n                            >\n                                {semester.description}\n                            </option>\n\n                        ))}\n                    </Field>\n                );\n            }\n            else if (semesters.length === 1) {\n                handleSubmit({ semester: semesters[0].id });\n                return <p>{semesters[0].description}</p>;\n            }\n        }\n    };\n    const renderTeacherList=()=>{\n      return  (<Field\n            id=\"teacher\"\n            name=\"teacher\"\n            component={renderSelectField}\n            label={t('formElements:teacher_label')}\n            type=\"text\"\n            onChange={() => props.change('group', 0)}\n\n        >\n            <option />\n            {teachers.map((teacher, index) => (\n                <option\n                    key={shortid.generate()}\n                    value={teacher.id}\n                >\n                    {getTeacherFullName(teacher)}\n                </option>\n            ))}\n        </Field>)\n    };\n    const renderGroupList=()=>{\n       return (<Field\n            disabled={groupDisabled}\n            id=\"group\"\n            name=\"group\"\n            component={renderSelectField}\n            label={t('formElements:group_label')}\n            type=\"text\"\n            onChange={() => {\n                props.change('teacher', 0);\n            }}\n        >\n            <option />\n            {groups.map((group, index) => (\n                <option\n                    key={shortid.generate()}\n                    value={group.id}\n                >\n                    {group.title}\n                </option>\n            ))}\n        </Field>)\n    }\n\n    useEffect(()=>{\n\n        props.initialize({\n            semester:props.initialValues.semester,\n            group: props.initialValues.group,\n            teacher:props.initialValues.teacher\n        })\n    },[])\n\n    return (\n        <section className={classes.root}>\n            <p>{t('greetings_schedule_message')}</p>\n            <p>{t('greetings_schedule_message_hint')}</p>\n            <section className=\"form-buttons-container top\">\n                <Card class=\"form-card width-auto\">\n                    <form onSubmit={handleSubmit}>\n                        {renderSemesterList()}\n                        {renderGroupList()}\n                        {renderTeacherList()}\n\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            disabled={pristine || submitting}\n\n                        >\n\n                            <MdPlayArrow\n                                title={t('teacher_schedule_label')}\n                                className=\"svg-btn\"\n                            />\n                        </Button>\n\n                    </form>\n\n                </Card>\n                <span id=\"select-place\">\n                    <label htmlFor={\"demo-controlled-open-select\"}>{t('place_for_class_label')}</label>\n                <Select className=\"place\"\n                        labelId=\"demo-controlled-open-select-label\"\n                        id=\"demo-controlled-open-select\"\n                        value={props.place}\n                        onChange={props.onChange}\n\n                >\n\n                    {\n                        Object.entries(places).map(function(data, index) {\n                            return <MenuItem value={data[1]} key={data[0]}>{t(`${data[1]}_label`)}</MenuItem>\n                        }, this)\n                    }\n\n                </Select>\n                </span>\n\n            </section>\n            {loadingContainer}\n        </section>\n    );\n};\n\nconst mapStateToProps = state => ({\n    groups: state.groups.groups,\n    teachers: state.teachers.teachers,\n    semesters: state.schedule.semesters,\n    loading: state.loadingIndicator.loading,\n    initialValues:{semester: state.schedule.scheduleSemesterId,group: state.schedule.scheduleGroupId,teacher: state.schedule.scheduleTeacherId},\n\n});\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SCHEDULE_SEARCH_FORM\n    })(GroupSchedulePageTop)\n);\n\n\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport {\n    PUBLIC_DOWNLOAD_GROUP_SCHEDULE_URL,\n    PUBLIC_DOWNLOAD_TEACHER_SCHEDULE_URL\n} from '../../constants/axios';\n\nimport './GroupSchedulePage.scss';\nimport { MdPictureAsPdf } from 'react-icons/md';\n\nimport {\n    makeGroupSchedule,\n    makeFullSchedule,\n    makeTeacherSchedule\n} from '../../helper/prepareSchedule';\nimport {\n    renderGroupTable,\n    renderFullSchedule,\n    renderWeekTable\n} from '../../helper/renderScheduleTable';\nimport {\n    getDefaultSemesterService,\n    getFullSchedule, getGroupSchedule, getTeacherSchedule,\n    setScheduleGroupIdService,\n    setScheduleSemesterIdService,\n    setScheduleTeacherIdService, showAllPublicSemestersService,\n    submitSearchSchedule, submitSearchSchedule1\n} from '../../services/scheduleService';\n\nimport GroupSchedulePageTop from '../GroupSchedulePageTop/GroupSchedulePageTop';\nimport { setLoadingService } from '../../services/loadingService';\nimport {useHistory,useLocation} from 'react-router-dom';\nimport { links } from '../../constants/links';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { FormLabel, InputLabel, MenuItem, Select } from '@material-ui/core';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport { places } from '../../constants/places';\nimport i18n from 'i18next';\nimport { Contactless } from '@material-ui/icons';\nimport { getTeacherWithPosition } from '../../helper/renderTeacher';\nconst GroupSchedulePage = props => {\n\n    const [place,setPlace]=useState(places.TOGETHER);\n    let {scheduleType, groupSchedule, fullSchedule, teacherSchedule,groupId,teacherId ,semesterId,loading,defaultSemester,semesters} = props;\n    let history = useHistory();\n\n    const location = useLocation();\n    const emptySchedule = () => (\n        <p className=\"empty_schedule\">{t('common:empty_schedule')}</p>\n    );\n    const { t } = useTranslation('common');\n    const renderDownloadLink = (entity, semesterId, entityId) => {\n        let link = '';\n        const {language}=i18n;\n        const languageToRequest=`&language=${language}`;\n        if (semesterId && entityId) {\n            switch (entity) {\n                case 'group':\n                    link =\n                        PUBLIC_DOWNLOAD_GROUP_SCHEDULE_URL +\n                        '?groupId=' +\n                        entityId +\n                        '&semesterId=' +\n                        semesterId+\n                        languageToRequest;\n                    break;\n                case 'teacher':\n                    link =\n                        PUBLIC_DOWNLOAD_TEACHER_SCHEDULE_URL +\n                        '?teacherId=' +\n                        entityId +\n                        '&semesterId=' +\n                        semesterId+\n                        languageToRequest;\n                    break;\n                default:\n                    break;\n            }\n            return (\n                <a\n                    href={link}\n                    target=\"_blank\"\n                    rel=\"noreferrer noopener\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className=\"pdf_link\"\n                    download\n                >\n                    <MdPictureAsPdf className=\"svg-btn\" />\n                    {t('common:download_pdf')}\n                </a>\n            );\n        }\n    };\n\n    const renderGroupScheduleTitle = (semester, group) => {\n        let title = '';\n        if (semester) {\n            title +=\n                semester.description +\n                ' (' +\n                semester.startDay +\n                '-' +\n                semester.endDay +\n                ') : ';\n        }\n        if (group) {\n            title += group.title ? group.title : '';\n        }\n        return title;\n    };\n    const renderTeacherScheduleTitle = (semester, teacher) => {\n        let title = '';\n        if (semester) {\n            title +=\n                semester.description +\n                ' (' +\n                semester.startDay +\n                '-' +\n                semester.endDay +\n                ') : ';\n        }\n        if (teacher) {\n            title +=\n                getTeacherWithPosition(teacher);\n        }\n        return title;\n    };\n\n    const renderSchedule = () => {\n        switch (props.scheduleType) {\n            case 'group':\n                if (\n                    (!groupSchedule ||\n                        (groupSchedule.schedule &&\n                            groupSchedule.schedule.length === 0)) &&\n                    !props.loading\n                ) {\n                    return emptySchedule();\n                }\n\n                const resultArrays = makeGroupSchedule(groupSchedule);\n                if (resultArrays.done) {\n                    setLoadingService(false);\n                    return (\n                        <>\n                            <h1>\n                                {renderGroupScheduleTitle(\n                                    resultArrays.semester,\n                                    resultArrays.group\n                                )}\n                                {renderDownloadLink(\n                                    'group',\n                                    props.semesterId,\n                                    props.groupId\n                                )}\n                            </h1>\n                            <h2>{t('common:odd_week')}</h2>\n                            {renderGroupTable(\n                                resultArrays.oddArray,\n                                1,\n                                resultArrays.semester,\n                                place\n                            )}\n                            <h2>{t('common:even_week')}</h2>\n                            {renderGroupTable(\n                                resultArrays.evenArray,\n                                0,\n                                resultArrays.semester,\n                                place\n                            )}\n                        </>\n                    );\n                }\n                else setLoadingService(false)\n                break;\n            case 'teacher':\n                if (\n                    (!teacherSchedule ||\n                        !teacherSchedule.days ||\n                        teacherSchedule.days.length === 0) &&\n                    !props.loading\n                ) {\n                    return emptySchedule();\n                }\n                    if(teacherSchedule) {\n                        const teacher = makeTeacherSchedule(teacherSchedule);\n                        if (teacher.done) {\n                            setLoadingService(false);\n                            return (\n                                <>\n                                    <h1>\n                                        {renderTeacherScheduleTitle(\n                                            teacher.semester,\n                                            teacher.teacher\n                                        )}\n                                        {renderDownloadLink(\n                                            'teacher',\n                                            props.semesterId,\n                                            props.teacherId\n                                        )}\n                                    </h1>\n                                    <h2>{t('common:odd_week')}</h2>\n                                    {renderWeekTable(teacher.odd, 1,place)}\n                                    <h2>{t('common:even_week')}</h2>\n                                    {renderWeekTable(teacher.even, 0,place)}\n                                </>\n                            );\n                        }\n                    }\n                    else setLoadingService(false)\n                break;\n            case 'full':\n\n                if (\n                    (!fullSchedule.schedule ||\n                        fullSchedule.schedule.length === 0) &&\n                    !props.loading\n                ) {\n                    return emptySchedule();\n                }\n                const result = makeFullSchedule(fullSchedule);\n\n                if (result.groupsCount || result.done) {\n                    setLoadingService(false);\n                    return renderFullSchedule(result,place);\n                }\n                else setLoadingService(false)\n                break;\n            case 'archived':\n                if (\n                    (!fullSchedule.schedule ||\n                        fullSchedule.schedule.length === 0) &&\n                    !props.loading\n                ) {\n                    return '';\n                }\n                const archive = makeFullSchedule(fullSchedule);\n                if (archive.groupsCount || archive.done) {\n                    setLoadingService(false);\n                    return renderFullSchedule(archive,place);\n                }\n                else setLoadingService(false)\n                break;\n\n\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = values => {\n        const {semester,group,teacher}=values\n        const groupPath=group?\"&group=\"+group:\"\";\n        const teacherPath=teacher?\"&teacher=\"+teacher:\"\";\n        setLoadingService('true');\n        submitSearchSchedule(values, history);\n        history.push(links.ScheduleFor+\"?semester=\"+semester+groupPath+teacherPath);\n\n    };\n    useEffect(()=>getFullSchedule(),[place])\n\n\n    useEffect(()=> {\n         if(scheduleType===\"group\")\n         getGroupSchedule(groupId, semesterId);\n     },[groupId])\n     useEffect(()=> {\n         if(scheduleType===\"teacher\")\n         getTeacherSchedule(teacherId, semesterId);\n     },[teacherId])\n\n    useEffect(()=> {\n        if((scheduleType===\"full\"&&fullSchedule.length===0)) {\n            getFullSchedule();\n        }\n    },)\n    useEffect(()=>{\n        getDefaultSemesterService()\n    },[])\n\n   const getSchedule=()=>{\n       if((props.scheduleType===\"\")&&(props.defaultSemester.id!==undefined)){\n           const semester=`${props.defaultSemester.id}`;\n           handleSubmit({ \"semester\":semester });\n\n           return\n       }\n       if(props.scheduleType!==\"\"|| location.pathname===links.HOME_PAGE){\n\n           return renderSchedule();\n\n       }\n\n\n       const params = new URLSearchParams(location.search);\n\n       const semester= params.get(\"semester\");\n       const teacher=params.get(\"teacher\");\n       const group=params.get(\"group\");\n\n       if(semester!==null) {\n           handleSubmit({ semester, 'group': group != null ? group : 0, 'teacher': teacher != null ? teacher : 0 });\n        return null\n       }\n       else return null;\n    }\n\n    const getTop=()=>{\n\n       if(props.scheduleType !== 'archived') {\n\n         return (\n             <GroupSchedulePageTop\n                  scheduleType={props.scheduleType}\n                 onSubmit={handleSubmit} place={place} onChange={changePlace}\n             />\n         );\n\n\n       }\n       return null;\n    }\n    const changePlace=(e)=>{\n        if(e.target) {\n            setPlace(e.target.value);}\n    }\n\n\n    return (\n        <>\n            {getTop()}\n            {getSchedule()}\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    scheduleType: state.schedule.scheduleType,\n    groupSchedule: state.schedule.groupSchedule,\n    fullSchedule: state.schedule.fullSchedule,\n    teacherSchedule: state.schedule.teacherSchedule,\n    groupId: state.schedule.scheduleGroupId,\n    teacherId: state.schedule.scheduleTeacherId,\n    semesterId: state.schedule.scheduleSemesterId,\n    loading: state.loadingIndicator.loading,\n    defaultSemester: state.schedule.defaultSemester,\n    semesters: state.schedule.semesters,\n\n\n});\nexport default connect(mapStateToProps)(GroupSchedulePage);\n","import React, { Fragment, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\n\nimport { userRoles } from '../../constants/userRoles';\n\nimport GroupSchedulePage from '../../components/GroupSchedulePage/GroupSchedulePage';\n\n\nimport {\n    getDefaultSemesterService,\n\n    setScheduleSemesterIdService,\n    setScheduleTypeService,\n} from '../../services/scheduleService';\nimport { getPublicClassScheduleListService } from '../../services/classService';\n\nconst HomePage = props => {\n    const { t } = useTranslation('common');\n\n    useEffect(() => getPublicClassScheduleListService(), []);\n    setScheduleSemesterIdService(null)\n    setScheduleTypeService(\"\")\n\n    // useEffect(() => showAllPublicSemestersService(), []);\n\n    useEffect(() => {\n        if (props.userRole === null) {\n            //disableDefaultSemesterService();\n            getDefaultSemesterService();\n            setScheduleTypeService(\"\");\n        }\n    }, []);\n    useEffect(() => {\n        if (props.userRole === userRoles.TEACHER) {\n            //disableDefaultSemesterService();\n            getDefaultSemesterService();\n            setScheduleTypeService(\"\");\n        }\n    }, []);\n    useEffect(() => {\n        if (props.userRole === userRoles.MANAGER) {\n           // disableDefaultSemesterService();\n            getDefaultSemesterService();\n            setScheduleTypeService(\"\");\n        }\n    }, []);\n\n    return (\n\n        <Fragment>\n\n            <h1>{t('home_title')}</h1>\n            <GroupSchedulePage scheduleType=\"default\"  />\n        </Fragment>\n    );\n};\n\nconst mapStateToProps = state => ({\n    userRole: state.auth.role ,\n});\n\nexport default connect(mapStateToProps)(HomePage);\n","import React from 'react';\nimport MomentUtils from '@date-io/moment';\nimport * as moment from 'moment';\nimport { MuiPickersUtilsProvider, DatePicker } from '@material-ui/pickers';\n\nconst renderMounthPicker = ({\n    label,\n    input: { value, ...inputProps },\n    meta: { touched, invalid, error },\n    ...custom\n}) => {\n    return (\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n            <DatePicker\n                minDate={new Date()}\n                clearable\n                value={value ? moment(value, 'DD/MM/YYYY').toDate() : null}\n                format=\"DD/MM/YYYY\"\n                error={touched && invalid}\n                helperText={touched && error ? touched && error : label}\n                {...inputProps}\n                {...custom}\n            />\n        </MuiPickersUtilsProvider>\n    );\n};\nexport default renderMounthPicker;\n","import React, { useEffect } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport './TeacherScheduleForm.scss';\n\nimport renderMonthPicker from '../../share/renderedFields/timeSemester';\nimport { MdPlayArrow, MdViewModule, MdViewHeadline } from 'react-icons/md';\n\nimport Button from '@material-ui/core/Button';\n\nimport {\n    required,\n    lessThanDate,\n    greaterThanDate\n} from '../../validation/validateFields';\n\nimport { TEACHER_SCHEDULE_FORM } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\nimport * as moment from 'moment';\nimport { setTeacherServiceViewType } from '../../services/scheduleService';\n\nlet TeacherScheduleForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n    const isSchedule = false;\n\n    useEffect(() => {\n        props.initialize({\n            startDay: moment(new Date(), 'DD/MM/YYYY').format('DD/MM/YYYY'),\n            endDay: moment(new Date(), 'DD/MM/YYYY')\n                .add(7, 'd')\n                .format('DD/MM/YYYY')\n        });\n    }, [isSchedule]);\n    return (\n        <Card class={'form-card teacher-schedule-form'}>\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-line-block\">\n                    <h2 className=\"form-title\">\n                        {t('common:select_dates_for_teacher_schedule')}\n                    </h2>\n                    <Field\n                        className=\"time-input\"\n                        name=\"startDay\"\n                        component={renderMonthPicker}\n                        label={t('class_from_label') + ':'}\n                        validate={[required, lessThanDate]}\n                    />\n                    <Field\n                        className=\"time-input\"\n                        name=\"endDay\"\n                        component={renderMonthPicker}\n                        label={t('class_to_label') + ':'}\n                        validate={[required, greaterThanDate]}\n                    />\n                    <div className=\"form-buttons-container\">\n                        <Button\n                            className=\"buttons-style\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >\n                            <MdPlayArrow\n                                title={t('full_schedule_label')}\n                                className=\"svg-btn\"\n                            />\n                        </Button>\n                        <Button\n                            className=\"view-type-icon first-view-type-button\"\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            title={t('common:block_view')}\n                            onClick={() =>\n                                setTeacherServiceViewType('blocks-view')\n                            }\n                        >\n                            <MdViewModule className=\"svg-btn\" />\n                        </Button>\n                        <Button\n                            className=\"view-type-icon\"\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            title={t('common:list_view')}\n                            onClick={() =>\n                                setTeacherServiceViewType('list-view')\n                            }\n                        >\n                            <MdViewHeadline className=\"svg-btn\" />\n                        </Button>\n                    </div>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: TEACHER_SCHEDULE_FORM\n    })(TeacherScheduleForm)\n);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport './TeacherSchedule.scss';\n\nimport TeacherScheduleForm from '../TeacherScheduleForm/TeacherScheduleForm';\nimport {\n    clearTeacherScheduleFormService,\n    getTeacherScheduleService\n} from '../../services/scheduleService';\n\nimport { renderTeacherRangeSchedule } from '../../helper/renderScheduleTable';\nconst TeacherSchedule = props => {\n    const handleFormReset = () => {\n        clearTeacherScheduleFormService();\n    };\n    const submit = values => {\n        getTeacherScheduleService(values);\n    };\n\n    useEffect(() => {\n        renderTeacherRangeSchedule(\n            props.schedule,\n            props.viewTeacherScheduleResults\n        );\n    }, [props.viewTeacherScheduleResults]);\n\n    return (\n        <>\n            <TeacherScheduleForm onSubmit={submit} onReset={handleFormReset} />\n            <section>\n                {renderTeacherRangeSchedule(\n                    props.schedule,\n                    props.viewTeacherScheduleResults\n                )}\n            </section>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    loading: state.loadingIndicator.loading,\n    schedule: state.schedule.teacherRangeSchedule,\n    viewTeacherScheduleResults: state.schedule.viewTeacherScheduleResults\n});\nexport default connect(mapStateToProps)(TeacherSchedule);\n","import { reset } from 'redux-form';\n\nimport { store } from '../index';\nimport axios from '../helper/axios';\nimport { DISABLED_GROUPS_URL, GROUP_URL } from '../constants/axios';\nimport { GROUP_FORM } from '../constants/reduxForms';\nimport {\n    showAllGroups,\n    deleteGroup,\n    addGroup,\n    selectGroup,\n    updateGroup,\n    clearGroup,\n    setDisabledGroups\n} from '../redux/actions/index';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport i18n from '../helper/i18n';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const selectGroupService = groupId => {\n    store.dispatch(selectGroup(groupId));\n}\n\nexport const handleGroupService = values =>\n    values.id ? updateGroupService(values) : createGroupService(values);\n\nexport const clearGroupService = () => {\n    store.dispatch(clearGroup());\n    resetFormHandler(GROUP_FORM);\n};\n\nexport const showAllGroupsService = () => {\n    axios\n        .get(GROUP_URL)\n        .then(response => {\n            store.dispatch(showAllGroups(response.data.sort((a, b) => a - b)));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const removeGroupCardService = groupId => {\n    axios\n        .delete(GROUP_URL + `/${groupId}`)\n        .then(response => {\n            store.dispatch(deleteGroup(groupId));\n            getDisabledGroupsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:group_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createGroupService = data => {\n    axios\n        .post(GROUP_URL, data)\n        .then(response => {\n            store.dispatch(addGroup(response.data));\n            resetFormHandler(GROUP_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:group_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const updateGroupService = data => {\n    return axios\n        .put(GROUP_URL, data)\n        .then(response => {\n            store.dispatch(updateGroup(response.data));\n            selectGroupService(null);\n            getDisabledGroupsService();\n            showAllGroupsService();\n            resetFormHandler(GROUP_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:group_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getDisabledGroupsService = () => {\n    axios\n        .get(DISABLED_GROUPS_URL)\n        .then(res => {\n            store.dispatch(setDisabledGroups(res.data));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const setDisabledGroupService = group => {\n    group.disable = true;\n    updateGroupService(group);\n};\n\nexport const setEnabledGroupService = group => {\n    group.disable = false;\n    updateGroupService(group);\n};\n","export const isObjectEmpty=(object)=> {\n    return (\n        Object.prototype.toString.call(object) === '[object Object]' &&\n        JSON.stringify(object) === '{}'\n    );\n}","import { store } from '../index';\nimport {\n    DISABLED_TEACHERS_URL,\n    TEACHER_URL,\n    TEACHERS_WITHOUT_ACCOUNT_URL\n} from '../constants/axios';\nimport { TEACHER_FORM } from '../constants/reduxForms';\n\nimport axios from '../helper/axios';\n\nimport i18n from '../helper/i18n';\n\nimport {\n    addTeacher,\n    deleteTeacher,\n    selectTeacherCard,\n    setDisabledTeachers,\n    showAllTeachers,\n    updateTeacherCard\n} from '../redux/actions';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { setLoadingService } from './loadingService';\nimport { isObjectEmpty } from '../helper/ObjectRevision';\n\nexport const showAllTeachersService = () => {\n    axios\n        .get(TEACHER_URL)\n        .then(response => {\n            store.dispatch(showAllTeachers(response.data));\n            setLoadingService(false);\n        })\n        .catch(error => errorHandler(error));\n};\n\n\n\nexport const getTeachersWithoutAccount = () => {\n    axios\n        .get(TEACHERS_WITHOUT_ACCOUNT_URL)\n        .then(response => {\n            store.dispatch(showAllTeachers(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createTeacherService = values => {\n    let result= {... values };\n   if(isObjectEmpty(values.department)||values.department.id===null){\n       const {department,...res}=values;\n       result= { ...res };\n   }\n    axios\n        .post(TEACHER_URL, result)\n        .then(response => {\n            store.dispatch(addTeacher(response.data));\n            resetFormHandler(TEACHER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_a_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nconst cardTeacher = teacher => {\n    return {\n        teacher: {\n            id: teacher.id,\n            name: teacher.name,\n            surname: teacher.surname,\n            patronymic: teacher.patronymic,\n            position: teacher.position,\n            email:teacher.email,\n            department: teacher.department\n        }\n    };\n};\n\nexport const updateTeacherService = data => {\n    let result={...data.teacher};\n    if(result.department.id===null){\n        const {department,...res}=result;\n        result={...res};\n    }\n    return axios\n        .put(TEACHER_URL, result)\n        .then(response => {\n            store.dispatch(updateTeacherCard(response.data));\n            if (response.data.disable) {\n                store.dispatch(deleteTeacher(response.data.id));\n            }\n            showAllTeachersService();\n            getDisabledTeachersService();\n\n            selectTeacherCardService(null);\n            resetFormHandler(TEACHER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_a_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const handleTeacherService = values => {\n    const teacher = cardTeacher(values);\n\n    if (values.id) {\n        updateTeacherService(teacher);\n    } else {\n        createTeacherService(values);\n    }\n};\n\nexport const removeTeacherCardService = id => {\n    axios\n        .delete(TEACHER_URL + `/${id}`)\n        .then(response => {\n            store.dispatch(deleteTeacher(id));\n            getDisabledTeachersService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_a_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const selectTeacherCardService = teacherCardId => {\n    store.dispatch(selectTeacherCard(teacherCardId));\n};\n\nexport const getDisabledTeachersService = () => {\n    axios\n        .get(DISABLED_TEACHERS_URL)\n        .then(res => {\n            store.dispatch(setDisabledTeachers(res.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const setDisabledTeachersService = teacher => {\n    teacher.disable = true;\n    updateTeacherService({ teacher });\n};\n\nexport const setEnabledTeachersService = teacher => {\n    teacher.disable = false;\n    updateTeacherService({ teacher });\n};\n","import axios from '../helper/axios';\nimport { store } from '../index';\n\nimport {\n    LESSON_TYPES_URL,\n    LESSON_URL,\n    COPY_LESSON_URL\n} from '../constants/axios';\nimport { LESSON_FORM } from '../constants/reduxForms';\n\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { setLoadingService } from './loadingService';\n\nimport {\n    deleteLessonCard,\n    selectGroupId,\n    selectLessonCard,\n    setLessonsCards,\n    setLessonTypes,\n    setUniqueError,\n    storeLessonCard,\n    updateLessonCard\n} from '../redux/actions/index';\n\nimport { snackbarTypes } from '../constants/snackbarTypes';\n\nimport { checkUniqLesson } from '../validation/storeValidation';\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { getTeacherById } from './teacherService';\n\nexport const getLessonsByGroupService = groupId => {\n    axios\n        .get(LESSON_URL + `?groupId=${Number(groupId)}`)\n        .then(response => {\n            store.dispatch(setLessonsCards(response.data));\n            setLoadingService(false);\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const getLessonTypesService = () => {\n    axios\n        .get(LESSON_TYPES_URL)\n        .then(response => {\n            store.dispatch(setLessonTypes(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\nconst cardObjectHandler = (card, groupId, semester) => {\n    const groupData = (card.groups.map(group => group.id).includes(groupId) && card.groups.length !== 1) ? { groups: card.groups } : { groups: [{ id: groupId }] };\n    return {\n        ...groupData,\n        id: Number(card.lessonCardId),\n        hours: Number(card.hours),\n        subject: {\n            id: Number(card.subject)\n        },\n        lessonType: card.type,\n        subjectForSite: card.subjectForSite,\n        teacher: { id: Number(card.teacher) },\n        linkToMeeting: card.linkToMeeting,\n        grouped: card.grouped,\n        semester\n    };\n};\n\nconst updateLessonHandler = (data, groupId) => {\n    let res = { ...data };\n    const { groups, ...result } = res;\n    res = { ...result };\n    res.group = { id: groupId };\n    return axios\n        .put(LESSON_URL, res)\n        .then(response => {\n            store.dispatch(updateLessonCard(response.data));\n            selectLessonCardService(null);\n            resetFormHandler(LESSON_FORM);\n\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nconst createLessonHandler = (data, isCopy) => {\n    return axios\n        .post(LESSON_URL, data)\n        .then(response => {\n            if (!isCopy) {\n                store.dispatch(storeLessonCard(response.data));\n            }\n            resetFormHandler(LESSON_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const handleLessonCardService = (card, groupId, semester) => {\n\n    let cardObj = cardObjectHandler(card, groupId, semester);\n    if (!checkUniqLesson(cardObj)) {\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.ERROR,\n            i18n.t('common:lesson_service_is_not_unique')\n        );\n        setUniqueErrorService(true);\n        return;\n    }\n\n    axios\n        .get(`teachers/${cardObj.teacher.id}`)\n        .then(res => {\n            cardObj = { ...cardObj, teacher: res.data };\n            cardObj.id ? updateLessonHandler(cardObj, groupId) : createLessonHandler(cardObj, false);\n        })\n        .catch(error => errorHandler(error));\n};\nexport const removeLessonCardService = lessonCardId => {\n    axios\n        .delete(LESSON_URL + `/${lessonCardId}`)\n        .then(res => {\n            store.dispatch(deleteLessonCard(lessonCardId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const selectLessonCardService = lessonCardId => {\n    store.dispatch(selectLessonCard(lessonCardId));\n};\n\nexport const copyLessonCardService = lessonGroupObj => {\n    const groupList = [];\n    lessonGroupObj.group.map(groupItem => groupList.push(groupItem.id));\n    axios\n        .post(\n            COPY_LESSON_URL + `?lessonId=${lessonGroupObj.lesson.id}`,\n            groupList\n        )\n        .then(response => {\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:copied_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const selectGroupIdService = groupId => {\n    store.dispatch(selectGroupId(groupId));\n};\n\nexport const setUniqueErrorService = isUniqueError => {\n    store.dispatch(setUniqueError(isUniqueError));\n};\n","import * as actionTypes from './actionsType';\n\nexport const storeLessonCard = res => {\n    return {\n        type: actionTypes.ADD_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const setLessonsCards = res => {\n    return {\n        type: actionTypes.SET_LESSONS_CARDS,\n        result: res\n    };\n};\n\nexport const setLessonTypes = res => {\n    return {\n        type: actionTypes.SET_LESSON_TYPES,\n        result: res\n    };\n};\n\nexport const deleteLessonCard = res => {\n    return {\n        type: actionTypes.DELETE_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const selectLessonCard = res => {\n    return {\n        type: actionTypes.SELECT_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const updateLessonCard = res => {\n    return {\n        type: actionTypes.UPDATE_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const selectGroupId = res => {\n    return {\n        type: actionTypes.SELECT_GROUP_ID,\n        result: res\n    };\n};\n\nexport const setUniqueError = res => {\n    return {\n        type: actionTypes.SET_UNIQUE_ERROR,\n        result: res\n    };\n};\n","import { store } from '../index';\nimport { DISABLED_ROOMS_URL, ROOM_URL } from '../constants/axios';\nimport { ROOM_FORM } from '../constants/reduxForms';\nimport axios from '../helper/axios';\n\nimport {\n    showListOfRooms,\n    deleteRoom,\n    addRoom,\n    selectOneRoom,\n    updateOneRoom,\n    clearRoomOne,\n    setDisabledRooms\n} from '../redux/actions/rooms';\n\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nimport i18n from '../helper/i18n';\n\nexport const showListOfRoomsService = () => {\n    axios\n        .get(ROOM_URL)\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(showListOfRooms(bufferArray));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const deleteRoomCardService = id => {\n    axios\n        .delete(ROOM_URL + `/${id}`)\n        .then(res => {\n            store.dispatch(deleteRoom(id));\n            getDisabledRoomsService();\n            showListOfRoomsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:room_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getDisabledRoomsService = () => {\n    axios\n        .get(DISABLED_ROOMS_URL)\n        .then(res => {\n            store.dispatch(setDisabledRooms(res.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const setDisabledRoomsService = room => {\n    room.disable = true;\n    put(room);\n};\n\nexport const setEnabledRoomsService = room => {\n    room.disable = false;\n    put(room);\n};\n\nconst put = values => {\n    axios\n        .put(ROOM_URL, values)\n        .then(result => {\n            store.dispatch(updateOneRoom(result.data));\n            resetFormHandler(ROOM_FORM);\n            getDisabledRoomsService();\n            showListOfRoomsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:room_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nconst post = values => {\n    axios\n        .post(ROOM_URL, values)\n        .then(res => {\n            store.dispatch(addRoom(res.data));\n            resetFormHandler(ROOM_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:room_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createRoomService = values => {\n    if (values.id) {\n        const newValue = {\n            id: values.id,\n            name: values.name,\n            type: { id: +values.type, description: values.typeDescription }\n        };\n        put(newValue);\n    } else {\n        const newValue = {\n            name: values.name,\n            type: { id: +values.type, description: values.typeDescription }\n        };\n\n        post(newValue);\n    }\n};\n\nexport const selectOneRoomService = roomId => {\n    store.dispatch(selectOneRoom(roomId));\n};\n\nexport const clearRoomOneService = () => {\n    store.dispatch(clearRoomOne());\n    resetFormHandler(ROOM_FORM);\n};\n","import * as actionsType from './actionsType';\n\nexport const addRoom = room => {\n    return {\n        type: actionsType.ADD_ROOM,\n        result: room\n    };\n};\n\nexport const deleteRoom = id => {\n    return {\n        type: actionsType.DELETE_ROOM,\n        result: id\n    };\n};\n\nexport const showListOfRooms = rooms => {\n    return {\n        type: actionsType.SHOW_LIST_OF_ROOMS,\n        result: rooms\n    };\n};\n\nexport const  setDisabledRooms = rooms => {\n    return {\n        type: actionsType.SET_DISABLED_ROOMS,\n        result: rooms\n    };\n};\n\nexport const selectOneRoom = id => {\n    return {\n        type: actionsType.SELECT_ONE_ROOM,\n        result: id\n    };\n};\n\nexport const updateOneRoom = room => {\n    return {\n        type: actionsType.UPDATE_ONE_ROOM,\n        result: room\n    };\n};\n\nexport const clearRoomOne = () => ({\n    type: actionsType.CLEAR_ROOM_ONE\n});\n\n\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport { colors } from '../../constants/schedule/colors';\nimport { cssClasses } from '../../constants/schedule/cssClasses';\nimport { checkAvailabilityScheduleService } from '../../services/scheduleService';\nimport { setLoadingService } from '../../services/loadingService';\n\nconst Board = props => {\n    const itemGroupId = props.itemGroupId;\n    const {day}=props;\n    const drop = e => {\n        e.preventDefault();\n        const card_id = e.dataTransfer.getData('card_id');\n\n        const card = document.getElementById(card_id);\n        if (card) card.style.display = 'block';\n\n        const arr = e.target.id.split('-');\n        const day = arr[3];\n        const classId = arr[5];\n        const week = arr[7];\n\n        const item = JSON.parse(card.childNodes[0].value);\n        let itemId = item.id;\n\n        let obj = {\n            lessonId: item.lesson.id,\n            dayOfWeek: day.toUpperCase(),\n            periodId: +classId,\n            evenOdd: week.toUpperCase(),\n            semesterId: props.currentSemester.id\n        };\n\n        checkAvailabilityScheduleService(obj);\n\n        setLoadingService(true);\n        if (itemId) obj = { ...obj, id: itemId };\n\n        props.setModalData({ item: obj, groupId: item.lesson.group.id });\n        props.openDialog();\n    };\n\n    const dragOver = e => {\n        const target = e.target;\n        const children = target.childNodes;\n        const arr = target.id.split('-');\n        const borderGroupId = +arr[1];\n\n        if (\n            borderGroupId !== itemGroupId &&\n            target.classList.contains(cssClasses.SCHEDULE_BOARD)\n        ) {\n            target.style.backgroundColor = colors.DANGER;\n        } else if (\n            target.classList.contains(cssClasses.SCHEDULE_BOARD) &&\n            children[1]\n        ) {\n            children[1].style.backgroundColor = colors.DANGER;\n            target.style.backgroundColor = colors.DANGER;\n        } else if (\n            !children[1] &&\n            target.classList.contains(cssClasses.SCHEDULE_BOARD)\n        ) {\n            target.style.backgroundColor = colors.ALLOW;\n            e.preventDefault();\n        }\n    };\n\n    const dragLeave = e => {\n        const target = e.target;\n        const children = target.childNodes;\n        const parent = target.parentNode;\n\n        const arr = target.id.split('-');\n        const borderGroupId = +arr[1];\n\n        if (borderGroupId === itemGroupId && !target.childNodes[1]) {\n            target.style.backgroundColor = colors.POSSIBILITY;\n        } else if (\n            target.classList.contains(cssClasses.SCHEDULE_BOARD) &&\n            children[1]\n        ) {\n            target.style.backgroundColor = colors.NOTHING;\n            children[1].style.backgroundColor = colors.NOTHING;\n        } else if (\n            parent &&\n            parent.classList.contains(cssClasses.SCHEDULE_BOARD)\n        ) {\n            parent.style.backgroundColor = colors.NOTHING;\n            parent.parentNode.style.backgroundColor = colors.NOTHING;\n        } else {\n            target.style.backgroundColor = colors.NOTHING;\n        }\n    };\n\nconst addDay=()=>{\n    if(props.children[1]){\n        if(day!==null&&day!==undefined) {\n            const tmp=document.getElementById(day.toUpperCase());\n            tmp.classList.add(\"day\");\n        }\n    }\n}\nconst removeDay = () => {\n    if(day!==null&&day!==undefined) {\n        const tmp=document.getElementById(day.toUpperCase());\n        tmp.classList.remove(\"day\");\n    }\n}\n    return (\n        <>\n\n            <div\n\n                id={props.id}\n                onDrop={drop}\n                onDragOver={dragOver}\n                onDragLeave={dragLeave}\n                className={props.className}\n               onMouseOver={addDay}\n                onMouseLeave={removeDay}\n            >\n                {props.children}\n            </div>\n        </>\n\n    );\n};\n\nexport default Board;\n","import React from 'react';\nimport { MdDelete, MdEdit } from 'react-icons/md';\n\nimport Card from '../../share/Card/Card';\nimport { FaUserPlus } from 'react-icons/fa';\nimport { getTeacherFullName } from '../../helper/renderTeacher';\n\nconst ScheduleItem = props => {\n    let lesson = props.lesson;\n    let itemId;\n\n    const item = props.item || null;\n    const t = props.translation;\n    const { fStrLetterCapital } = props;\n\n    if (item) {\n        lesson = item.lesson;\n        itemId = item.id;\n    }\n\n    const addition = props.addition;\n\n    const itemNodeId = `card-${lesson.id}-group-${lesson.group.id}-${addition}`;\n    const deleteNodeId = `delete-${lesson.id}-${lesson.group.id}-${addition}`;\n\n    const isGroupped = grouped =>\n        grouped ? (\n            <FaUserPlus\n                title={t('formElements:grouped_label')}\n                className=\"svg-btn copy-btn align-left info-btn\"\n            />\n        ) : (\n            ''\n        );\n\n    return (\n        <Card id={itemNodeId} class={props.class} draggable={true}>\n            <input\n                type=\"hidden\"\n                value={JSON.stringify({\n                    lesson: lesson,\n                    id: itemId\n                })}\n            />\n            {props.inBoard ? (\n                <>\n                    <div className=\"cards-btns delete-item\" id={deleteNodeId}>\n                        <MdDelete\n                            title={t('common:delete_schedule_item')}\n                            className=\"svg-btn delete-btn\"\n                            onClick={() =>\n                                props.deleteItem(itemId, item.lesson.group.id)\n                            }\n                        />\n                        <MdEdit\n                            title={t('common:edit_schedule_item')}\n                            className=\"svg-btn edit-btn\"\n                            onClick={() => props.editItem(item)}\n                        />\n                    </div>\n                </>\n            ) : (\n                ''\n            )}\n\n            <p>\n                {fStrLetterCapital(lesson.subjectForSite)} (\n                {t(\n                    `formElements:lesson_type_${lesson.lessonType.toLowerCase()}_label`\n                )}\n                )\n            </p>\n            <p>{getTeacherFullName(lesson.teacher)}</p>\n            {props.inBoard ? (\n                <p>\n                    {isGroupped(lesson.grouped)}\n                    <b>{item.room.name}</b>\n                </p>\n            ) : (\n                <p>\n                    {isGroupped(lesson.grouped)}\n                    <b>1</b> {t('formElements:hours_label')}\n                </p>\n            )}\n        </Card>\n    );\n};\n\nexport default ScheduleItem;\n","export const firstStringLetterCapital = str => {\n    return str.replace(/^\\w/, c => c.toUpperCase());\n};\n","import React from 'react';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { styled } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nimport Board from '../Board/Board';\nimport ScheduleItem from '../ScheduleItem/ScheduleItem';\n\nimport { selectGroupIdService } from '../../services/lessonService';\n\nimport { firstStringLetterCapital } from '../../helper/strings';\n\nconst GroupField = styled(TextField)({\n    width: '150px'\n});\n\nconst ScheduleLessonsList = props => {\n    const { groups, groupId } = props;\n\n    let lessons = props.lessons;\n    const items = props.items;\n\n    const t = props.translation;\n\n    const handleGroupSelect = group => {\n        if (group) selectGroupIdService(group.id);\n    };\n\n    const groupFinderHandle = groupId => {\n        if (groupId) return groups.find(group => group.id === groupId);\n        else return '';\n    };\n\n    const defaultProps = {\n        options: groups,\n        getOptionLabel: option => (option ? option.title : '')\n    };\n\n    const firstStringLetterCapitalHandle = str => {\n        return firstStringLetterCapital(str);\n    };\n\n    const lessonItems = lesson => {\n        let hours = lesson.hours;\n        const lessonItem = [];\n        let els = [];\n        let hoursInSchedule = 0;\n\n        if (items.length > 0) {\n            els = items.filter(item => item.lesson.id === lesson.id);\n        }\n\n        els.forEach(() => {\n            hoursInSchedule += 1;\n        });\n\n        for (let i = 0; i < hours - hoursInSchedule; i++) {\n            lessonItem.push(\n                <section key={lesson.id + i}>\n                    <ScheduleItem\n                        index={i}\n                        lesson={lesson}\n                        fStrLetterCapital={firstStringLetterCapitalHandle}\n                        translation={t}\n                        classScheduler={props.classScheduler}\n                    />\n                </section>\n            );\n        }\n        return lessonItem;\n    };\n\n    return (\n        <>\n            {t('common:select_group_schedule')}\n            <Autocomplete\n                {...defaultProps}\n                id=\"group\"\n                clearOnEscape\n                openOnFocus\n                value={groupFinderHandle(groupId)}\n                onChange={(event, newValue) => {\n                    handleGroupSelect(newValue);\n                }}\n                renderInput={params => (\n                    <GroupField\n                        {...params}\n                        label={t('formElements:group_label')}\n                        margin=\"normal\"\n                    />\n                )}\n            />\n            {lessons.length > 0 ? (\n                <Board className=\"board lesson-board\">\n                    {lessons.map(lesson => lessonItems(lesson))}\n                </Board>\n            ) : groupId ? (\n                t('lesson_no_lesson_for_group_label')\n            ) : (\n                ''\n            )}\n        </>\n    );\n};\n\nexport default ScheduleLessonsList;\n","import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from '@material-ui/core';\n\nimport '../../share/modals/dialog.scss';\n\nconst useStyles = makeStyles(() => ({\n    roomField: {\n        '&': {\n            margin: '0 auto',\n            width: 250\n        }\n    }\n}));\n\nconst ScheduleDialog = props => {\n    const {\n        onClose,\n        itemData,\n        open,\n        rooms,\n        availability,\n        translation,\n        isLoading\n    } = props;\n\n    const [room, setRoom] = useState('');\n    const [sure, setSure] = useState(true);\n\n    const classes = useStyles();\n\n    const handleClose = () => {\n        onClose();\n    };\n\n    const chooseClickHandle = () => {\n        if (!room) return;\n\n        if (\n            !room.available ||\n            !availability.teacherAvailable ||\n            !availability.classSuitsToTeacher\n        ) {\n            setSure(false);\n            return;\n        }\n        onClose({ itemData, room });\n        setRoom(null);\n    };\n\n    const groupByAvailability = arr => {\n        arr.sort((x, y) => {\n            return x === y ? 0 : x ? 1 : -1;\n        });\n        return arr;\n    };\n\n    const defaultProps = {\n        options: availability.rooms\n            ? groupByAvailability(availability.rooms)\n            : rooms,\n        getOptionLabel: option =>\n            option\n                ? option.available\n                    ? option.name + ` (${translation('common:available')})`\n                    : option.name + ` (${translation('common:unavailable')})`\n                : ''\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"simple-dialog-title\"\n            open={open}\n        >\n            {sure ? (\n                <>\n                    {isLoading ? (\n                        <div className=\"circular-progress-dialog\">\n                            <CircularProgress />\n                        </div>\n                    ) : (\n                        <>\n                            <DialogTitle id=\"simple-dialog-title\">\n                                {translation('common:schedule_dialog_title')}\n                            </DialogTitle>\n                            <div className=\"availability-info\">\n                                {!availability.classSuitsToTeacher ? (\n                                    <p className=\"availability-warning\">\n                                        {translation(\n                                            'common:class_does_not_suit_for_teacher'\n                                        )}\n                                    </p>\n                                ) : (\n                                    ''\n                                )}\n                                {!availability.teacherAvailable ? (\n                                    <p className=\"availability-warning\">\n                                        {translation(\n                                            'common:teacher_is_unavailable'\n                                        )}{' '}\n                                    </p>\n                                ) : (\n                                    ''\n                                )}\n                            </div>\n                            <Autocomplete\n                                {...defaultProps}\n                                id=\"group\"\n                                clearOnEscape\n                                openOnFocus\n                                className={classes.roomField}\n                                onChange={(event, newValue) => {\n                                    setRoom(newValue);\n                                }}\n                                renderInput={params => (\n                                    <TextField\n                                        {...params}\n                                        label={translation(\n                                            'formElements:room_label'\n                                        )}\n                                        margin=\"normal\"\n                                    />\n                                )}\n                            />\n                            <div className=\"buttons-container\">\n                                <Button\n                                    className=\"dialog-button\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => chooseClickHandle()}\n                                >\n                                    {translation(\n                                        'formElements:choose_button_title'\n                                    )}\n                                </Button>\n                                <Button\n                                    className=\"dialog-button\"\n                                    variant=\"contained\"\n                                    onClick={() => onClose()}\n                                >\n                                    {translation(\n                                        'formElements:cancel_button_title'\n                                    )}\n                                </Button>\n                            </div>\n                        </>\n                    )}\n                </>\n            ) : (\n                <>\n                    <DialogTitle id=\"simple-dialog-title\">\n                        <p className=\"availability-warning\">\n                            {!room.available\n                                ? translation('common:room_is_unavailable') +\n                                  '. '\n                                : ''}\n                        </p>\n                        <p className=\"availability-warning\">\n                            {!availability.teacherAvailable\n                                ? translation('common:teacher_is_unavailable') +\n                                  '. '\n                                : ''}\n                        </p>\n\n                        <p className=\"availability-warning\">\n                            {!availability.classSuitsToTeacher\n                                ? translation(\n                                      'common:class_does_not_suit_for_teacher'\n                                  ) + '. '\n                                : ''}\n                        </p>\n\n                        {translation('common:are_you_sure')}\n                    </DialogTitle>\n                    <div className=\"buttons-container\">\n                        <Button\n                            className=\"dialog-button\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                onClose({ itemData, room });\n                                setSure(true);\n                            }}\n                        >\n                            {translation('common:yes_button_title')}\n                        </Button>\n                        <Button\n                            className=\"dialog-button\"\n                            variant=\"contained\"\n                            onClick={() => setSure(true)}\n                        >\n                            {translation('common:no_button_title')}\n                        </Button>\n                    </div>\n                </>\n            )}\n        </Dialog>\n    );\n};\n\nScheduleDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    rooms: PropTypes.array.isRequired,\n    availability: PropTypes.object.isRequired\n};\n\nexport default ScheduleDialog;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { IoMdMore } from 'react-icons/all';\n\nimport Board from '../Board/Board';\nimport ScheduleItem from '../ScheduleItem/ScheduleItem';\nimport ScheduleDialog from '../ScheduleDialog/ScheduleDialog';\n\nimport { firstStringLetterCapital } from '../../helper/strings';\n\nimport {\n    addItemToScheduleService,\n    deleteItemFromScheduleService,\n    checkAvailabilityChangeRoomScheduleService,\n    editRoomItemToScheduleService\n} from '../../services/scheduleService';\n\nimport {\n    getLessonsByGroupService,\n    selectGroupIdService\n} from '../../services/lessonService';\nimport { setLoadingService } from '../../services/loadingService';\n\nimport { cssClasses } from '../../constants/schedule/cssClasses';\nimport { colors } from '../../constants/schedule/colors';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport './Schedule.scss'\n\nconst Schedule = props => {\n    const { groups, itemGroupId,groupId } = props;\n    const [open, setOpen] = useState(false);\n    const [itemData, setItemData] = useState(null);\n    const prevGroupId = usePrevious(groupId)\n    function usePrevious(value) {\n        const ref = useRef();\n        useEffect(() => {\n            ref.current = value;\n        });\n        return ref.current;\n    }\n    useEffect(() => {\n        if(groupId!==null) {\n            const el = document.getElementById(`group-${groupId}`);\n            el.scrollIntoView({block: \"center\", inline:\"center\"});\n            const parent =el.parentNode;\n            parent.classList.add(\"selected-group\");\n        }\n        if(prevGroupId){\n            const prevEl = document.getElementById(`group-${prevGroupId}`);\n            const parent =prevEl.parentNode;\n            parent.classList.remove(\"selected-group\")\n        }\n    }, [groupId])\n\n    const setNewItemHandle = (item, room, groupId) => {\n        getLessonsByGroupService(groupId);\n        selectGroupIdService(groupId);\n        if (item.id) deleteItemFromScheduleService(item.id);\n\n        addItemToScheduleService({ ...item, roomId: room.id });\n    };\n\n    const setEditItemHandle = (itemId, roomId, groupId) => {\n        getLessonsByGroupService(groupId);\n        selectGroupIdService(groupId);\n        editRoomItemToScheduleService({ itemId, roomId });\n    };\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = value => {\n        setOpen(false);\n        if (value) {\n            setLoadingService(true);\n            let el = '';\n            if (value.itemData.item.id) {\n                setEditItemHandle(\n                    value.itemData.item.id,\n                    value.room.id,\n                    value.itemData.groupId\n                );\n\n                el = document.getElementById(\n                    'card-' +\n                        value.itemData.item.lesson.id +\n                        '-group-' +\n                        value.itemData.groupId +\n                        '-in-day-' +\n                        value.itemData.item.dayOfWeek.toLowerCase() +\n                        '-class-' +\n                        value.itemData.item.period.id +\n                        '-week-' +\n                        value.itemData.item.evenOdd.toLowerCase()\n                );\n            } else {\n                setNewItemHandle(\n                    value.itemData.item,\n                    value.room,\n                    value.itemData.groupId\n                );\n                el = document.getElementById(\n                    'group-' +\n                        value.itemData.groupId +\n                        '-day-' +\n                        value.itemData.item.dayOfWeek.toLowerCase() +\n                        '-class-' +\n                        value.itemData.item.periodId +\n                        '-week-' +\n                        value.itemData.item.evenOdd.toLowerCase()\n                );\n            }\n            el.scrollIntoView();\n            setTimeout(() => {\n                el.style.backgroundColor = colors.ALLOW;\n            }, 1000);\n\n            setTimeout(() => {\n                el.style.backgroundColor = colors.NOTHING;\n            }, 3000);\n        }\n    };\n\n    const items = props.items;\n\n    const currentSemester = props.currentSemester;\n    const days = currentSemester.semester_days;\n    const classes = currentSemester.semester_classes;\n\n    const t = props.translation;\n\n    //const dayContainerHeight = classes.length * 185.5 + 4.6 * classes.length;\n    const dayContainerHeight = classes.length * 150;\n\n    const useStyles = makeStyles({\n        dayContainer: {\n            // height: dayContainerHeight,\n            // maxHeight: dayContainerHeight\n        },\n        day: {\n            height: dayContainerHeight,\n            maxHeight: dayContainerHeight\n        }\n    });\n    const elClasses = useStyles();\n\n    const firstStringLetterCapitalHandle = str => {\n        return firstStringLetterCapital(str);\n    };\n\n    const deleteItemFromScheduleHandler = (itemId, groupId) => {\n        deleteItemFromScheduleService(itemId);\n        getLessonsByGroupService(groupId);\n        selectGroupIdService(groupId);\n    };\n    const editItemOnScheduleHandler = item => {\n        setItemData({ item: item, groupId: item.lesson.group.id });\n        getLessonsByGroupService(item.lesson.group.id);\n        selectGroupIdService(item.lesson.group.id);\n\n        let itemId = item.id;\n\n        let obj = {\n            dayOfWeek: item.dayOfWeek,\n            periodId: +item.period.id,\n            evenOdd: item.evenOdd,\n            semesterId: item.lesson.semester.id\n        };\n        checkAvailabilityChangeRoomScheduleService(obj);\n        setLoadingService(true);\n        if (itemId) obj = { ...obj, id: itemId };\n        setOpen(true);\n    };\n\n    const conditionFunc = (item, lesson, group) => {\n        return (\n            `group-${\n                item.lesson.group.id\n            }-day-${item.dayOfWeek.toLowerCase()}-class-${\n                item.period.id\n            }-week-${item.evenOdd.toLowerCase()}` ===\n            `group-${group.id}-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`\n        );\n    };\n\n    const addDeleteBtnToItem = (item, group, lesson) => {\n        const addition = `in-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`;\n        const itemNodeId = `card-${item.lesson.id}-group-${group.id}-${addition}`;\n        const deleteNodeId = `delete-${item.lesson.id}-${group.id}-${addition}`;\n        setTimeout(() => {\n            const itemNode = document.getElementById(itemNodeId);\n            const deleteNode = document.getElementById(deleteNodeId);\n            if (deleteNode && itemNode) {\n                itemNode.addEventListener('mouseenter', () => {\n                    deleteNode.style.display = 'block';\n                });\n                itemNode.addEventListener('mouseleave', () => {\n                    deleteNode.style.display = 'none';\n                });\n            }\n        }, 1000);\n    };\n\n    const itemInBoard = (group, lesson, index) => {\n        for (let item of items) {\n            if (conditionFunc(item, lesson, group)) {\n                const addition = `in-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`;\n                addDeleteBtnToItem(item, group, lesson);\n                return (\n                    <section\n                        key={group.id + index + item.id}\n                        className={cssClasses.IN_BOARD_SECTION}\n                    >\n                        <ScheduleItem\n                            inBoard={true}\n                            addition={addition}\n                            class={cssClasses.IN_BOARD_CARD}\n                            item={item}\n                            deleteItem={deleteItemFromScheduleHandler}\n                            editItem={editItemOnScheduleHandler}\n                            fStrLetterCapital={firstStringLetterCapitalHandle}\n                            translation={t}\n                        />\n                    </section>\n                );\n            }\n        }\n    };\n\n    const allLessons = [];\n    days.forEach(day => {\n        classes.forEach(classNumber => {\n            for (let i = 0; i < 2; i++) {\n                if ((i + 1) % 2 === 0) {\n                    allLessons.push({\n                        day: { name: day.toLowerCase() },\n                        classNumber,\n                        week: 'even'\n                    });\n                } else {\n                    allLessons.push({\n                        day: { name: day.toLowerCase() },\n                        classNumber,\n                        week: 'odd'\n                    });\n                }\n            }\n        });\n    });\n\n    return (\n        <section className=\"cards-container schedule\">\n\n            <ScheduleDialog\n                translation={t}\n                itemData={itemData}\n                rooms={props.rooms}\n                availability={props.availability}\n                open={open}\n                isLoading={props.isLoading}\n                onClose={handleClose}\n            />\n            <aside className=\"day-classes-aside\">\n                <section className=\"card empty-card\">Група</section>\n                {days.map(day => (\n\n                    <section\n                        className={\n                            elClasses.dayContainer +\n                            ' cards-container day-container'\n                        }\n                        key={day}\n                    >\n                        <section\n                            id={day}\n                            className={\n                                elClasses.day + ' card schedule-day card'\n                            }\n                        >\n                            {t(`day_of_week_${day}`)}\n                        </section>\n                        <section className=\"class-section\">\n                            {classes.map(classScheduler => (\n                                <section\n                                    className=\"card schedule-class\"\n                                    key={classScheduler.id}\n                                >\n                                    {classScheduler.class_name}\n                                </section>\n                            ))}\n                        </section>\n                    </section>\n                ))}\n            </aside>\n\n\n            <section className=\"groups-section \">\n                {groups.map(group => (\n                    <section\n                        key={'group-' + group.id}\n                        className=\"group-section\"\n                    >\n\n                        <div\n                            className=\"group-title card\"\n                            id={`group-${group.id}`}\n                        >\n\n\n                            {group.title}\n                        </div>\n                        {allLessons.map((lesson, index) => (\n                            <div\n                                key={group + '-' + index}\n                                className=\"board-div\"\n                            >\n                                <Board\n                                    day={lesson.day.name}\n                                    currentSemester={currentSemester}\n                                    setModalData={setItemData}\n                                    openDialog={handleClickOpen}\n                                    itemGroupId={itemGroupId}\n                                    id={`group-${group.id}-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`}\n                                    className={`board card ${cssClasses.SCHEDULE_BOARD} group-${group.id} schedule-board`}\n                                >\n                                    <IoMdMore\n                                        className=\"more-icon\"\n                                        title={\n                                            `${t(\n                                                `formElements:day_label`\n                                            )}: ` +\n                                            t(\n                                                `day_of_week_${lesson.day.name.toUpperCase()}`\n                                            ).toLowerCase() +\n                                            `\\n${t(`week_label`)}: ` +\n                                            t(`week_${lesson.week}_title`) +\n                                            `\\n${t('class_schedule')}: ` +\n                                            lesson.classNumber.class_name\n                                        }\n                                    />\n                                    {itemInBoard(group, lesson, index)}\n                                </Board>\n                            </div>\n                        ))}\n                        <div\n                            className=\"group-title card\"\n                            id={`group-${group.id}`}\n                        >\n\n\n                            {group.title}\n                        </div>\n                    </section>\n                ))}\n\n            </section>\n        </section>\n    );\n};\n\nexport default Schedule;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\n\nimport { showAllGroupsService } from '../../services/groupService';\nimport { getLessonsByGroupService } from '../../services/lessonService';\nimport {\n    setLoadingService,\n    setScheduleLoadingService\n} from '../../services/loadingService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport {\n    getScheduleItemsService,\n    clearSchedule, showAllPublicGroupsService\n} from '../../services/scheduleService';\nimport { showListOfRoomsService } from '../../services/roomService';\n\nimport ScheduleLessonsList from '../../components/ScheduleLessonsList/ScheduleLessonsList';\nimport Schedule from '../../components/Schedule/Schedule';\n\nimport { CircularProgress } from '@material-ui/core';\n\nimport './SchedulePage.scss';\n\nconst SchedulePage = props => {\n    const { t } = useTranslation('common');\n\n    document.title = t('schedule_title');\n\n    const { groups, groupId } = props;\n\n    const itemGroupId = props.itemGroupId;\n\n    const scheduleItems = props.scheduleItems;\n\n    let lessons = props.lessons;\n\n    const isLoading = props.loading;\n\n    useEffect(() => {\n        setLoadingService(true);\n        setScheduleLoadingService(true);\n        getScheduleItemsService();\n    }, []);\n\n    useEffect(() => {\n        showAllGroupsService();\n    }, []);\n    // useEffect(() => showAllPublicGroupsService(props.currentSemester.id), [props.currentSemester.id]);\n\n    useEffect(() => {\n        if (groupId) {\n            setLoadingService(true);\n            getLessonsByGroupService(groupId);\n        }\n    }, [groupId]);\n\n    useEffect(() => getClassScheduleListService(), []);\n\n    useEffect(() => showListOfRoomsService(), []);\n    const handleClearSchedule = () => {\n        if (props.currentSemester.id) {\n            clearSchedule(props.currentSemester.id);\n            if (groupId) {\n                setLoadingService(true);\n                getLessonsByGroupService(groupId);\n            }\n        }\n    };\n\n    return (\n        <>\n\n            <section className=\"cards-container schedule-page\">\n                <section className=\"flexbox card \">\n                    {props.scheduleLoading ? (\n                        <CircularProgress />\n                    ) : (\n                        <>\n                            {!props.currentSemester.id ? (\n                                <h2 className=\"no-current-semester\">\n                                    {t('no_current_semester')}\n                                </h2>\n                            ) : (\n                                <Schedule\n                                    groupId={groupId}\n                                    currentSemester={props.currentSemester}\n                                    groups={groups}\n                                    itemGroupId={itemGroupId}\n                                    items={scheduleItems}\n                                    translation={t}\n                                    rooms={props.rooms}\n                                    availability={props.availability}\n                                    isLoading={isLoading}\n                                />\n                            )\n                            }\n                        </>\n                    )}\n                </section>\n                <aside className=\"lesson-list card\">\n                    {isLoading ? (\n                        <CircularProgress />\n                    ) : (\n                        <>\n                            <Button\n                                className=\"buttons-style\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => handleClearSchedule()}\n                            >\n                                {t('clear_schedule_label')}\n                            </Button>\n                            <ScheduleLessonsList\n                                items={scheduleItems}\n                                groups={groups}\n                                lessons={lessons}\n                                groupId={groupId}\n                                translation={t}\n                                classScheduler={\n                                    props.currentSemester.semester_classes\n                                }\n                            />\n                        </>\n                    )}\n                </aside>\n            </section>\n            <section className=\"for-phones-and-tablets card\">\n                <h1>{t('use_pc')}</h1>\n            </section>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    groups: state.groups.groups,\n    lessons: state.lesson.lessons,\n    groupId: state.lesson.groupId,\n    loading: state.loadingIndicator.loading,\n    scheduleLoading: state.loadingIndicator.scheduleLoading,\n    scheduleItems: state.schedule.items,\n    itemGroupId: state.schedule.itemGroupId,\n    availability: state.schedule.availability,\n    currentSemester: state.schedule.currentSemester,\n    semester:state.schedule.semester,\n    rooms: state.rooms.rooms\n});\n\nexport default connect(mapStateToProps)(SchedulePage);\n","import React from \"react\";\n\nimport TextField from \"@material-ui/core/TextField\";\n\nconst renderTextField = ({\n  label,\n  input,\n  meta: { touched, invalid, error },\n  ...custom\n}) => {\n  return (\n    <TextField\n      label={label}\n      placeholder={label}\n      error={touched && invalid}\n      helperText={touched && error}\n      {...input}\n      {...custom}\n    />\n  );\n};\n\nexport default renderTextField;\n","import * as actionTypes from './actionsType';\n\nexport const addDepartment = res => {\n    return {\n        type: actionTypes.ADD_DEPARTMENT,\n        result: res\n    };\n};\nexport const getAllDepartments=res=>{\n    return{\n        type:actionTypes.GET_ALL_DEPARTMENTS,\n        result:res\n    }\n}\nexport const getDisabledDepartments=res=>{\n    return{\n        type:actionTypes.GET_DISABLED_DEPARTMENTS,\n        result:res\n    }\n}\nexport const setDisabledDepartment=res=>{\n    return{\n        type:actionTypes.SET_DISABLED_DEPARTMENT,\n        result:res\n    }\n}\nexport const setEnabledDepartment=res=>{\n    return{\n        type:actionTypes.SET_ENABLED_DEPARTMENT,\n        result:res\n    }\n}\nexport const clearDepartmentForm=()=>{\n    return{\n        type:actionTypes.CLEAR_DEPARTMENT_FORM\n    }\n}\nexport const deleteDepartment=res=>{\n    return{\n        type:actionTypes.DELETE_DEPARTMENT,\n        result:res\n    }\n}\nexport const getDepartItemById=res=>{\n    return {\n        type:actionTypes.GET_DEPARTMENT_BY_ID,\n        result:res\n    }\n}\nexport const updateDepart=res=>{\n    return {\n        type:actionTypes.UPDATE_DEPARTMENT,\n        result:res\n    }\n}","import axios from '../helper/axios';\nimport { DEPARTMENT_URL, SUBJECT_URL } from '../constants/axios';\nimport { store } from '../index';\nimport { addSubject } from '../redux/actions';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { DEPARTMENT_FORM, SUBJECT_FORM } from '../constants/reduxForms';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport i18n from '../helper/i18n';\nimport {\n    addDepartment,\n    clearDepartmentForm,\n    deleteDepartment,\n    getAllDepartments, getDepartItemById,\n    getDisabledDepartments, setDisabledDepartment, setEnabledDepartment, updateDepart\n} from '../redux/actions/departments';\n\nexport const createDepartmentService = data => {\n    axios\n        .post(DEPARTMENT_URL, data)\n        .then(response => {\n            store.dispatch(addDepartment(response.data));\n            resetFormHandler(DEPARTMENT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:department_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getAllDepartmentsService = () => {\n    axios\n        .get(DEPARTMENT_URL)\n        .then(response => {\n            store.dispatch(getAllDepartments(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const getDisabledDepartmentsService = () => {\n    axios\n        .get(`${DEPARTMENT_URL}/disabled`)\n        .then(response => {\n            store.dispatch(getDisabledDepartments(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const setDisabledDepartmentService = (data) => {\n    axios\n        .put(`${DEPARTMENT_URL}`,data)\n        .then(response => {\n            store.dispatch(setDisabledDepartment(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const setEnabledDepartmentService = (data) => {\n    console.log(data);\n    axios\n        .put(`${DEPARTMENT_URL}`,data)\n        .then(response => {\n            store.dispatch(setEnabledDepartment(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const updateDepartmentService = (data) => {\n    axios\n        .put(`${DEPARTMENT_URL}`,data)\n        .then(response => {\n            store.dispatch(updateDepart(response.data));\n            resetFormHandler(DEPARTMENT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:department_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const deleteDepartmentsService = (id) => {\n    axios\n        .delete(`${DEPARTMENT_URL}/${id}`)\n        .then(response => {\n            store.dispatch(deleteDepartment(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const clearDepartment=()=>{\n    store.dispatch(clearDepartmentForm());\n    resetFormHandler(DEPARTMENT_FORM);\n}\nexport const getDepartmentByIdService=(id)=>{\n    store.dispatch(getDepartItemById(Number(id)));\n}\n","export const setDisableButton = (pristine,submitting,id) => {\n    if(id!==undefined){\n        return false\n    }\n    if(!pristine){\n        return false\n    }\n    if (submitting){\n        return true\n    }\n    if(id===undefined){\n        return true\n    }\n}\nexport const getClearOrCancelTitle = ( id ,t) => {\n    console.log(\"id\",id)\n   return  id===undefined?t('clear_button_label'):t('cancel_button_title')\n}","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport { required } from '../../validation/validateFields';\n\nimport Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/core/styles';\n\nimport Card from '../../share/Card/Card';\n\nimport { TEACHER_FORM } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\n\nimport './AddTeacherForm.scss';\nimport Select from 'react-select';\nimport { ReduxFormSelect } from '../../helper/ReduxFormSelect';\nimport renderSelectField from '../../share/renderedFields/select';\nimport { getDepartmentByIdService } from '../../services/departmentService';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nlet AddTeacher = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, submitting, reset,departments,teacher } = props;\n\n    const teacherId = teacher.id;\n\n    useEffect(() => {\n        if (teacherId) {\n            initializeFormHandler(teacher);\n        } else {\n            props.initialize();\n        }\n    }, [teacherId]);\n\n    const initializeFormHandler = teacher => {\n        const department=teacher.department?teacher.department.id:0;\n        props.initialize({\n            id: teacher.id,\n            surname: teacher.surname,\n            name: teacher.name,\n            patronymic: teacher.patronymic,\n            position: teacher.position,\n            email:teacher.email,\n            department\n        });\n    };\n\n    return (\n        <Card class=\"form-card teacher-form\">\n            <form className=\"createTeacherForm w-100\" onSubmit={handleSubmit}>\n                <h2 className=\"form-title\">\n                    {teacherId ? t('edit_title') : t('create_title')}{' '}\n                    {t('teacher_a_label')}\n                </h2>\n\n                <Field\n                    className=\"form-field\"\n                    name=\"surname\"\n                    id=\"surname\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_surname')}\n                    label={t('teacher_surname')}\n                    validate={[required]}\n                />\n\n                <Field\n                    className=\"form-field\"\n                    name=\"name\"\n                    id=\"name\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_first_name')}\n                    label={t('teacher_first_name')}\n                    validate={[required]}\n                />\n\n                <Field\n                    className=\"form-field\"\n                    name=\"patronymic\"\n                    id=\"patronymic\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_patronymic')}\n                    label={t('teacher_patronymic')}\n                    validate={[required]}\n                />\n\n                <Field\n                    className=\"form-field\"\n                    name=\"position\"\n                    id=\"position\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_position')}\n                    label={t('teacher_position')}\n                    validate={[required]}\n                />\n                <Field\n                    className=\"form-field\"\n                    name=\"email\"\n                    id=\"email\"\n                    component={renderTextField}\n                    type=\"email\"\n                    placeholder={t('email_field')}\n                    label={t('email_field')}\n                />\n                <Field\n                    name=\"department\"\n                    className=\"week-days\"\n                    component={renderSelectField}\n                    label={t('department_teachers_label')}\n                    type=\"text\"\n                    onChange={({target})=> {\n                        getDepartmentByIdService(target.value)\n                    }}\n                >\n                    <option />\n                    {departments.map((item) => (\n                        <option key={item.id} value={item.value}>\n                            {item.label}\n                        </option>\n                    ))}\n                </Field>\n\n                <div className=\"form-buttons-container\">\n                    <Button\n                        className=\"buttons-style\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                        type=\"submit\"\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        className=\"buttons-style\"\n                        variant=\"contained\"\n                        disabled={setDisableButton(pristine,submitting,teacher.id)}\n                        onClick={() => {\n                            reset();\n                            props.onSetSelectedCard(null);\n                        }}\n                    >\n                        {getClearOrCancelTitle(teacher.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({ teacher: state.teachers.teacher });\n\nAddTeacher = reduxForm({\n    form: TEACHER_FORM\n})(AddTeacher);\n\nexport default connect(mapStateToProps)(AddTeacher);\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './dialog.scss';\n\nimport i18n from '../../helper/i18n';\nimport { disabledCard } from '../../constants/disabledCard';\n\nexport const ConfirmDialog = props => {\n    const { onClose, whatDelete, cardId, isHide, open } = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">\n                <>\n                    {isHide ? (\n                        <>\n                            {isHide === disabledCard.HIDE ? (\n                                <>{i18n.t('common:do_you_wanna_disable')}</>\n                            ) : (\n                                <>{i18n.t('common:do_you_wanna_show')}</>\n                            )}\n                        </>\n                    ) : (\n                        <>\n                            {i18n.t('common:do_you_wanna')}{' '}\n                            <span className=\"delete-word\">\n                                {i18n.t('common:delete_word')}\n                            </span>{' '}\n                        </>\n                    )}\n\n                    {i18n.t('common:this_card_type', {\n                        cardType: i18n.t(`formElements:${whatDelete}_element`)\n                    })}\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => onClose(cardId)}\n                >\n                    {i18n.t('common:yes_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                >\n                    {i18n.t('common:no_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nConfirmDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default ConfirmDialog;\n","export const cardType = {\n    LESSON: 'Lesson',\n    TEACHER: 'Teacher',\n    CLASS: 'Class',\n    GROUP: 'Group',\n    ROOM: 'Room',\n    TYPE: 'Type',\n    TEMPORARY_SCHEDULE: 'temporary_schedule',\n    SUBJECT: 'Subject',\n    SEMESTER: 'Semester'\n};\n","export const search = (items, term, arr) => {\n\n    if (term.length === 0) return items;\n    \n    return items.filter( item => {\n        for (let i = 0; i < arr.length; i++) {\n            if (String(item[arr[i]]).toLowerCase().indexOf(term.toLowerCase()) > -1) return true;\n        }\n        return false\n    })\n}","import React, { useState } from 'react';\nimport { FaSearch } from 'react-icons/fa';\nimport { TextField } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport './SearchPanel.scss';\nimport Card from '../../share/Card/Card';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nconst SearchPanel = ({ SearchChange, showDisabled, showArchived }) => {\n    const { t } = useTranslation('formElements');\n    const [term, setTerm] = useState('');\n\n    const [state, setState] = React.useState({\n        checkedB: false,\n        checkedArchived: false\n    });\n\n    const handleChange = event => {\n        switch (event.target.name) {\n            case 'checkedArchived':\n                setState({\n                    ...state,\n                    checkedB: false,\n                    [event.target.name]: event.target.checked\n                });\n                showArchived();\n                break;\n            default:\n                setState({\n                    ...state,\n                    checkedArchived: false,\n                    [event.target.name]: event.target.checked\n                });\n\n                break;\n        }\n        showDisabled();\n\n    };\n\n    const onSearchChange = e => {\n        const term = e.target.value;\n        setTerm(term);\n        SearchChange(term);\n    };\n\n    return (\n        <Card class=\"search-group\">\n            <FormControlLabel\n                control={\n                    <Switch\n                        checked={state.checkedB}\n                        onChange={handleChange}\n                        name=\"checkedB\"\n                        color=\"primary\"\n                    />\n                }\n                label={\n                    !state.checkedB\n                        ? t('common:show_disabled')\n                        : t('common:show_enabled')\n                }\n            />\n            {showArchived ? (\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={state.checkedArchived}\n                            onChange={handleChange}\n                            name=\"checkedArchived\"\n                            color=\"secondary\"\n                        />\n                    }\n                    label={\n                        !state.checkedArchived\n                            ? t('show_archived')\n                            : t('show_regular')\n                    }\n                />\n            ) : (\n                ''\n            )}\n\n            <TextField\n                className=\"form-field\"\n                label={<FaSearch />}\n                placeholder={t('type_to_search')}\n                value={term}\n                onChange={onSearchChange}\n            />\n        </Card>\n    );\n};\n\nexport default SearchPanel;\n","import React from 'react'\nimport { FaSadCry } from 'react-icons/fa'\nimport { useTranslation } from 'react-i18next'\n\nimport './NotFound.scss'\n\nconst NotFound = ({name}) => {\n    const {t} = useTranslation('formElements')\n\n    return (\n        <div className='not-found__wrapper'>\n            <div>\n                <FaSadCry className='not-found__icon'/>\n            </div>\n            <p className='not-found__text'>{t('there_is_no')} {name}</p>\n        </div>\n    )\n}\n\nexport default NotFound\n","import { connect } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport Button from '@material-ui/core/Button';\nimport { useTranslation } from 'react-i18next';\n\nimport './AddGroupForms.scss';\nimport Card from '../../share/Card/Card';\nimport { GROUP_FORM } from '../../constants/reduxForms';\nimport renderTextField from '../../share/renderedFields/input';\nimport {\n    required,\n    uniqueGroup,\n    minLengthValue\n} from '../../validation/validateFields';\nimport { links } from '../../constants/links';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nlet AddGroup = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting,match,group } = props;\n\n    useEffect(() => {\n        if (group&&match.url.includes(links.Edit)&&!match.url.includes(links.Student)) {\n            if (group.id) {\n                props.initialize({\n                    id: group.id,\n                    title: group.title\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [group.id]);\n\n    return (\n        <Card class=\"form-card group-form\">\n            <h2 className=\"group-form__title\">\n                {group.id ? t('edit_title') : t('create_title')}\n                {t('group_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    className=\"form-field\"\n                    name=\"title\"\n                    id=\"title\"\n                    label={t('group_label') + ':'}\n                    component={renderTextField}\n                    validate={[required, minLengthValue, uniqueGroup]}\n                />\n                <div className=\"form-buttons-container group-btns\">\n                    <Button\n                        variant=\"contained\"\n                        className=\"buttons-style \"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                        type=\"submit\"\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        type=\"button\"\n                        className=\"buttons-style\"\n                        variant=\"contained\"\n                        disabled={setDisableButton(pristine,submitting,group.id)}\n                        onClick={onReset}\n                    >\n                        {getClearOrCancelTitle(group.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    group: state.groups.group\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: GROUP_FORM\n    })(AddGroup)\n);\n","import React from 'react';\n\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nconst Alert = props => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n};\n\nconst SnackbarComponent = props => {\n    const message = props.message;\n    const type = props.type;\n    const isOpen = props.isOpen;\n    const handleSnackbarClose = props.handleSnackbarClose;\n\n    return (\n        <Snackbar\n            open={isOpen}\n            autoHideDuration={3000}\n            onClose={handleSnackbarClose}\n        >\n            <Alert onClose={handleSnackbarClose} severity={type}>\n                {message}\n            </Alert>\n        </Snackbar>\n    );\n};\n\nexport default SnackbarComponent;\n","import { store } from '../index';\nimport axios from '../helper/axios';\nimport { DISABLED_SUBJECTS_URL, SUBJECT_URL } from '../constants/axios';\nimport { SUBJECT_FORM } from '../constants/reduxForms';\nimport {\n    addSubject,\n    clearSubject,\n    deleteSubject,\n    selectSubject,\n    setDisabledSubjects,\n    showAllSubjects,\n    updateSubject\n} from '../redux/actions/index';\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const selectSubjectService = subjectId =>\n    store.dispatch(selectSubject(subjectId));\n\nexport const handleSubjectService = values =>\n    values.id ? updateSubjectService(values) : createSubjectService(values);\n\nexport const clearSubjectService = () => {\n    store.dispatch(clearSubject());\n    resetFormHandler(SUBJECT_FORM);\n};\n\nexport const showAllSubjectsService = () => {\n    axios\n        .get(SUBJECT_URL)\n        .then(response => {\n            store.dispatch(showAllSubjects(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const removeSubjectCardService = subjectId => {\n    axios\n        .delete(SUBJECT_URL + `/${subjectId}`)\n        .then(response => {\n            store.dispatch(deleteSubject(subjectId));\n            getDisabledSubjectsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:subject_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createSubjectService = data => {\n    axios\n        .post(SUBJECT_URL, data)\n        .then(response => {\n            store.dispatch(addSubject(response.data));\n            resetFormHandler(SUBJECT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:subject_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const updateSubjectService = data => {\n    return axios\n        .put(SUBJECT_URL, data)\n        .then(response => {\n            store.dispatch(updateSubject(response.data));\n            selectSubjectService(null);\n            showAllSubjectsService();\n            getDisabledSubjectsService();\n            resetFormHandler(SUBJECT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:subject_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getDisabledSubjectsService = () => {\n    axios\n        .get(DISABLED_SUBJECTS_URL)\n        .then(res => {\n            store.dispatch(setDisabledSubjects(res.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const setDisabledSubjectsService = subject => {\n    subject.disable = true;\n    updateSubjectService(subject);\n};\n\nexport const setEnabledSubjectsService = subject => {\n    subject.disable = false;\n    updateSubjectService(subject);\n};\n","import * as actionTypes from './actionsType';\n\nexport const showAllSubjects = res => {\n    return {\n        type: actionTypes.SHOW_ALL_SUBJECTS,\n        result: res\n    };\n};\n\nexport const setDisabledSubjects = res => {\n    return {\n        type: actionTypes.SET_DISABLED_SUBJECTS,\n        result: res\n    };\n};\n\nexport const addSubject = res => {\n    return {\n        type: actionTypes.ADD_SUBJECT,\n        result: res\n    };\n};\n\nexport const deleteSubject = res => {\n    return {\n        type: actionTypes.DELETE_SUBJECT,\n        result: res\n    };\n};\n\nexport const selectSubject = res => {\n    return {\n        type: actionTypes.SELECT_SUBJECT,\n        result: res\n    };\n};\n\nexport const updateSubject = res => {\n    return {\n        type: actionTypes.UPDATE_SUBJECT,\n        result: res\n    };\n};\n\nexport const clearSubject = () => {\n    return{\n        type: actionTypes.CLEAR_SUBJECT\n    }\n\n};\n\n","import axios from '../helper/axios';\nimport { STUDENT_URL, SUBJECT_URL } from '../constants/axios';\nimport { store } from '../index';\nimport { addSubject, deleteSubject, selectGroup, updateSubject } from '../redux/actions';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { STUDENT_FORM, SUBJECT_FORM } from '../constants/reduxForms';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport i18n from '../helper/i18n';\nimport {\n    addStudent,\n    deleteStudent,\n    setStudent, showAllStudents,\n    showAllStudentsByGroupId,\n    updateStudent\n} from '../redux/actions/students';\nimport { getDisabledSubjectsService, selectSubjectService, showAllSubjectsService } from './subjectService';\n\nexport const createStudentService = data => {\n\n    axios\n        .post(STUDENT_URL, data)\n        .then(response => {\n            store.dispatch(addStudent(response.data));\n            resetFormHandler(STUDENT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:student_a_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const getAllStudentsByGroupId = groupId => {\n    axios\n        .get(STUDENT_URL)\n        .then(response => {\n            let result=response.data.filter(({ group })=>group.id===groupId)\n            store.dispatch(showAllStudentsByGroupId(result));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const getAllStudentsService = () => {\n    axios\n        .get(STUDENT_URL)\n        .then(response => {\n            store.dispatch(showAllStudents(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const deleteStudentService = student => {\n    axios\n        .delete(STUDENT_URL + `/${student.id}`)\n        .then(response => {\n            store.dispatch(deleteStudent(student.id));\n            getAllStudentsByGroupId(student.group.id)\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:student_a_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const updateStudentService = data => {\n    return axios\n        .put(STUDENT_URL, data)\n        .then(response => {\n            store.dispatch(updateStudent(response.data));\n            selectStudentService(null);\n            getAllStudentsByGroupId(data.prevGroup.id)\n            resetFormHandler(STUDENT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:student_a_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const selectStudentService = studentId =>\n    store.dispatch(setStudent(studentId));","import * as actionTypes from './actionsType';\n\nexport const addStudent = res => {\n    return {\n        type: actionTypes.ADD_STUDENT,\n        result: res\n    };\n};\nexport const showAllStudents=res=>{\n    return{\n        type:actionTypes.SHOW_ALL_STUDENTS,\n        result:res\n    };\n}\nexport const showAllStudentsByGroupId=res=>{\n    return{\n        type:actionTypes.SHOW_ALL_STUDENTS_BY_GROUP_ID,\n        result:res\n    };\n}\nexport const deleteStudent=res=>{\n    return{\n        type:actionTypes.DELETE_STUDENT,\n        result:res\n    }\n}\nexport const setStudent=res=>{\n    return{\n        type:actionTypes.SET_STUDENT,\n        result:res\n    }\n}\nexport const updateStudent = res => {\n    return {\n        type: actionTypes.UPDATE_STUDENT,\n        result: res\n    };\n};","import { useHistory } from 'react-router-dom/cjs/react-router-dom';\nimport { links } from '../constants/links';\n\n export const  goToGroupPage =(history) =>{\n        history.push(links.GroupList);\n    }\n","import React, { useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport '../dialog.scss';\nimport './showDataDialog.scss'\nimport './addStudentDialog.scss'\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport Card from '../../Card/Card';\nimport { Field, reduxForm } from 'redux-form';\nimport renderTextField from '../../renderedFields/input';\nimport { required } from '../../../validation/validateFields';\nimport { STUDENT_FORM, TEACHER_FORM } from '../../../constants/reduxForms';\nimport { FaWindowClose } from 'react-icons/fa';\nimport renderSelectField from '../../renderedFields/select';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom';\nimport { goToGroupPage } from '../../../helper/pageRedirection';\n let AddStudentDialog =( props) => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, submitting, reset,open,groups,student,match} = props;\n    const studentId = student.id;\n    const history =useHistory();\n    useEffect(() => {\n        if (studentId) {\n            initializeFormHandler(student);\n        } else {\n            props.initialize();\n        }\n    },[studentId]);\n\n\n    const initializeFormHandler = student => {\n        props.initialize({\n            id: student.id,\n            surname: student.surname,\n            name: student.name,\n            patronymic: student.patronymic,\n            email:student.email,\n            group:student.group.id\n        });\n    };\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n\n            <FaWindowClose\n                title={t('close_label')}\n                className=\"close-dialog\"\n                variant=\"contained\"\n                onClick={() => {\n                    //reset();\n                    props.onSetSelectedCard(null);\n                    goToGroupPage(history);\n                }}\n\n            />\n            <DialogTitle id=\"confirm-dialog-title\">\n                <Card class=\"form-card teacher-form\">\n\n                    <form className=\"createTeacherForm w-100\" onSubmit={handleSubmit}>\n\n                        <h2 className=\"form-title\">\n                            {studentId ? t('edit_title') : t('create_title')}{' '}\n                            {t('student_a_label')}\n                        </h2>\n\n\n                        <Field\n                            className=\"form-field\"\n                            name=\"surname\"\n                            id=\"surname\"\n                            component={renderTextField}\n                            type=\"text\"\n                            placeholder={t('surname_placeholder')}\n                            label={t('surname_placeholder')}\n                            validate={[required]}\n                        />\n\n                        <Field\n                            className=\"form-field\"\n                            name=\"name\"\n                            id=\"name\"\n                            component={renderTextField}\n                            type=\"text\"\n                            placeholder={t('name_placeholder')}\n                            label={t('name_placeholder')}\n                            validate={[required]}\n                        />\n\n                        <Field\n                            className=\"form-field\"\n                            name=\"patronymic\"\n                            id=\"patronymic\"\n                            component={renderTextField}\n                            type=\"text\"\n                            placeholder={t('patronymic_placeholder')}\n                            label={t('patronymic_placeholder')}\n                            validate={[required]}\n                        />\n\n\n                        <Field\n                            className=\"form-field\"\n                            name=\"email\"\n                            id=\"email\"\n                            component={renderTextField}\n                            type=\"email\"\n                            placeholder={t('email_field')}\n                            label={t('email_field')}\n                            validate={[required]}\n                        />\n                        {studentId?\n\n                            <Field\n                                className='form-field'\n                                component={renderSelectField}\n                                name='group'\n                                label={t('type_label')}\n                                validate={[required]}>\n                                defaultValue={student.group.id}\n                                {groups.map(group => (\n                                    <option key={group.id} value={group.id}>\n                                        {group.title}\n                                    </option>\n                                ))}\n                            </Field>\n                            :null\n                        }\n\n\n                        <div className=\"form-buttons-container\">\n                            <Button\n                                className=\"buttons-style\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={pristine || submitting}\n                                type=\"submit\"\n                            >\n                                {t('save_button_label')}\n                            </Button>\n                            <Button\n                                className=\"buttons-style\"\n                                variant=\"contained\"\n                                disabled={pristine || submitting}\n                                onClick={() => {\n                                   reset();\n                                   goToGroupPage(history);\n                                    //props.onSetSelectedCard(null);\n                                }}\n                            >\n                                {studentId?t('cancel_button_label'):t('clear_button_label')}\n                            </Button>\n                        </div>\n                    </form>\n                </Card>\n            </DialogTitle>\n        </Dialog>\n    );\n};\n\nAddStudentDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\nconst mapStateToProps = state => ({\n    student: state.students.student,\n    groups: state.groups.groups,\n    group: state.groups.group,\n});\n\n\n\nAddStudentDialog = reduxForm({\n    form: STUDENT_FORM\n})(AddStudentDialog);\nexport default connect(mapStateToProps, {})(AddStudentDialog);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { getTeacherFullName } from './renderTeacher';\nimport { useTranslation } from 'react-i18next';\nimport { FaEnvelope } from 'react-icons/fa';\nimport TableHead from '@material-ui/core/TableHead';\nimport { Checkbox, withStyles } from '@material-ui/core';\nimport { FaEdit } from 'react-icons/all';\nimport { Delete } from '@material-ui/icons';\nimport ConfirmDialog from '../share/modals/dialog';\nimport  AddStudentDialog  from '../share/modals/modal/AddStudentDialog';\nimport { selectStudentService } from '../services/studentService';\nimport './renderStudentTable.scss'\nimport { links } from '../constants/links';\nimport { connect } from 'react-redux';\nimport {Link} from 'react-router-dom';\n\nconst useStyles1 = makeStyles((theme) => ({\n    root: {\n        flexShrink: 0,\n        marginLeft: theme.spacing(2.5),\n    },\n}));\n\nfunction RenderStudentTableActions(props) {\n    const classes = useStyles1();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onPageChange } = props;\n\n    const handleFirstPageButtonClick = (event) => {\n        onPageChange(event, 0);\n    };\n\n    const handleBackButtonClick = (event) => {\n        onPageChange(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event) => {\n        onPageChange(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event) => {\n        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.root}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nRenderStudentTableActions.propTypes = {\n    count: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nconst useStyles2 = makeStyles({\n    table: {\n        minWidth: 500,\n    },\n});\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.white,\n        color: theme.palette.common.black,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport default function RenderStudentTable(props) {\n    const ALL_ROWS=-1;\n    const classes = useStyles2();\n    const {students,onDeleteStudent,onSubmit,group,\n           match,student,checkBoxStudents,handleCheckElement,\n           handleAllChecked,handleAllClear,handleChangeCheckedAllBtn,\n        handleClearCheckedAllBtn,checkedAllBtn,handleAllCheckedBtn}=props;\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [openDeleteDialog,setOpenDeleteDialog]=useState(false);\n    const [openEditDialog,setOpenEditDialog]=useState(false);\n    const { t } = useTranslation('formElements');\n    useEffect(()=>{\n        if(match.path.includes(links.Student)&&match.path.includes(links.Edit)) {\n            handleEdit(student.id)\n        }\n    },[props.group.id])\n    useEffect(()=>{\n        if(match.path.includes(links.Student)&&match.path.includes(links.Delete)) {\n            setOpenDeleteDialog(true)\n        }\n    },[props.group.id]);\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, students.length - page * rowsPerPage);\n\n\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n        handleAllClear();\n        handleClearCheckedAllBtn();\n\n    };\n    const sendMail = (email) => {\n        const mailto =\n            `mailto:${email}`;\n        window.location.href = mailto;\n    }\n    const deleteStudent = (student) => {\n        setOpenDeleteDialog(false);\n        onDeleteStudent(student);\n    }\n    const handleEdit=(studentId)=>{\n        setOpenEditDialog(true);\n        selectStudentService(studentId)\n    }\n    const handleCloseEditDialog=()=>{\n        setOpenEditDialog(false);\n        selectStudentService(null)\n    }\n    const handleSubmit=(data)=>{\n        setOpenEditDialog(false);\n        const sendObject={...data,prevGroup:group}\n        onSubmit(sendObject);\n    }\n    const getCorrectRowCount = (pageItemsCount) => {\n        const resRows=checkBoxStudents.length-pageItemsCount*page;\n       if  (pageItemsCount>resRows||pageItemsCount===ALL_ROWS){\n         return   resRows;\n       }\n       return pageItemsCount;\n    }\nconst handleAllOnPageClick = (event) => {\n        const rowsCount=getCorrectRowCount(rowsPerPage)\n        handleChangeCheckedAllBtn();\n        handleAllChecked(event,rowsCount,page,rowsPerPage);\n}\n    const detectCheckingCheckAllBtn=()=>{\n        const rowsCount=getCorrectRowCount(rowsPerPage);\n        handleAllCheckedBtn (rowsCount,page,rowsPerPage);\n    }\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n\n\n    };\n    const handleCheckElem = (event) => {\n        handleCheckElement(event);\n        detectCheckingCheckAllBtn();\n    }\n    useEffect(()=>{\n        detectCheckingCheckAllBtn()\n    },[page])\n\n\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"custom pagination table\">\n\n                <TableHead>\n\n                    <TableRow>\n                        <StyledTableCell className=\"check-box\">\n                            <span className={'checked-all'}>\n                            <input\n                                id={'checked-all-input'}\n                                type=\"checkbox\"\n                                checked={checkedAllBtn}\n                                onClick={handleAllOnPageClick}\n                                value=\"checkedAll\"\n                                title={`${t('select_all')}`}\n                            />\n                            </span>\n                        </StyledTableCell>\n                        <StyledTableCell>{t('student_label')}</StyledTableCell>\n                        <StyledTableCell>\n                            <FaEnvelope\n                                className=\"svg-btn send-message\"\n                                title={`${t('send_letter_title')}`}\n                            />\n                        </StyledTableCell>\n                        <StyledTableCell>{t('student_actions')}</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n\n                <TableBody>\n                    {(rowsPerPage > 0\n                            ? checkBoxStudents.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            : checkBoxStudents\n                    ).map((student) => (\n                        <StyledTableRow key={student.id}>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                <input\n                                    key={student.id}\n                                    onClick={handleCheckElem}\n                                    type=\"checkbox\"\n                                    checked={student.checked}\n                                    value={student.id}\n                                    className={'checked-box'}\n                                    title={`${t(\"select_student\")} ${getTeacherFullName(student)}`}\n                                />\n                            </StyledTableCell>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                {getTeacherFullName(student)}\n                            </StyledTableCell>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                <span>\n                                   <button className=\"send-letter-button\"\n                                       title={`${t('send_letter_title')} ${student.email}`}\n                                       onClick={()=>sendMail(student.email)}\n                                   >\n                                       {student.email}\n                                   </button>\n                                </span>\n\n                            </StyledTableCell>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                <span className=\"edit-cell\">\n                                     <Link to={`${links.GroupList}${links.Group}/${group.id}${links.Student}/${student.id}${links.Edit}`}>\n                                    <FaEdit\n                                        className=\"edit-button\"\n                                        title={t('edit_title')}\n                                        onClick={() => handleEdit(student.id)}\n                                    />\n                                     </Link>\n                                     <Link to={`${links.GroupList}${links.Group}/${group.id}${links.Student}/${student.id}${links.Delete}`}>\n                                <Delete\n                                    title={t('delete-title')}\n                                    className=\"delete-button\"\n                                    onClick={()=>setOpenDeleteDialog(true)}\n                                />\n                                     </Link>\n                                </span>\n\n                            </StyledTableCell>\n\n                            <AddStudentDialog\n                                open={openEditDialog}\n                                onSubmit={handleSubmit}\n                                onSetSelectedCard={handleCloseEditDialog}\n                                match={match}\n                            />\n\n                            <ConfirmDialog\n                                selectedValue={''}\n                                cardId={student}\n                                whatDelete={'student'}\n                                open={openDeleteDialog}\n                                onClose={deleteStudent}\n                            />\n                        </StyledTableRow>\n                    ))}\n\n                    {emptyRows > 0 && (\n                        <StyledTableRow style={{ height: 53 * emptyRows }}>\n                            <TableCell colSpan={6} />\n                        </StyledTableRow>\n                    )}\n                </TableBody>\n                <TableFooter>\n                    <StyledTableRow>\n                        <TablePagination\n                            labelRowsPerPage={`${t('rows_per_page')}`}\n                            rowsPerPageOptions={[5, 10, 25, { label: `${t('all_page')}`, value: ALL_ROWS }]}\n                            colSpan={3}\n                            count={students.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            SelectProps={{\n                                inputProps: { 'aria-label': 'rows per page' },\n                                native: true,\n                            }}\n                            onPageChange={handleChangePage}\n                            onRowsPerPageChange={handleChangeRowsPerPage}\n                            ActionsComponent={RenderStudentTableActions}\n                        />\n                    </StyledTableRow>\n                </TableFooter>\n            </Table>\n        </TableContainer>\n    );\n}\n\nconst mapStateToProps = state => ({\n    student:state.students.student\n});\n\n connect(mapStateToProps, {})(RenderStudentTable);","import axios from '../helper/axios';\nimport { STUDENTS_TO_GROUP_FILE } from '../constants/axios';\nimport i18n from '../helper/i18n';\nimport { successHandler } from '../helper/handlerAxios';\n\nexport const uploadStudentsToGroupFile = (file, groupId) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    axios\n        .post(`${STUDENTS_TO_GROUP_FILE}${groupId}`, formData)\n        .then((res) => {\n            let students = res.data.length;\n            students += students !== 1 ? ` ${i18n.t('formElements:students_file_label')}` : ` ${i18n.t('formElements:student_file_label')}`;\n            successHandler(\n                i18n.t('serviceMessages:file_backend_success_operation', {\n                    cardType: students,\n                    actionType: i18n.t('serviceMessages:file_label')\n                })\n            );\n        })\n        .catch((err) => alert('File Upload Error'));\n};","import React, { useState } from 'react';\nimport { uploadStudentsToGroupFile } from '../../services/uploadFile';\nimport { Dialog, DialogTitle } from '@material-ui/core';\nimport './UploadFile.scss';\nimport { FaWindowClose } from 'react-icons/fa';\nimport { useTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport { setLoadingService } from '../../services/loadingService';\n\nexport const UploadFile = (props) => {\n    const { t } = useTranslation('formElements');\n    const [selectedFile, setSelectedFile] = useState(null);\n    const fileInputRef = React.useRef();\n    const { group: { id }, open, handleCloseDialogFile } = props;\n\n    const changeHandler = (event) => {\n        setSelectedFile(event.target.files[0]);\n    };\n\n    const handleSubmission = () => {\n        setLoadingService(true);\n        uploadStudentsToGroupFile(selectedFile, id);\n        fileInputRef.current.value = '';\n        setSelectedFile(null);\n    };\n\n    const setDisabledSendButton = () => {\n        return selectedFile === null;\n    };\n    return (\n        <Dialog\n\n            disableBackdropClick={true}\n            aria-labelledby='confirm-dialog-title'\n            open={open}\n        >\n            <DialogTitle className='upload-dialog' id='confirm-dialog-title'>\n                <FaWindowClose\n                    title={t('close_label')}\n                    className='close-dialog'\n                    variant='contained'\n                    onClick={handleCloseDialogFile}\n\n                />\n                <div>\n                    <input type='file' name='file' accept='.txt, .csv' onChange={changeHandler} ref={fileInputRef} />\n                    {selectedFile ? (\n                        <div>\n                            <p>{`${t('common:name_label')}: ${selectedFile.name}`}</p>\n                            <p>{`${t('common:type_label')}: ${selectedFile.type}`}</p>\n                            <p>{`${t('common:byte_size_label')}: ${selectedFile.size}`}</p>\n                            <p>{`${t('common:last_modified_date')}: ${selectedFile.lastModifiedDate.toLocaleDateString()}`}</p>\n                        </div>\n                    ) : (\n                        <p>{t('common:select_file_label')}</p>\n                    )}\n                    <div>\n                        <Button\n                            className='dialog-button'\n                            variant='contained'\n                            onClick={handleSubmission}\n                            color='primary'\n                            title={t('common:upload_title')}\n                            disabled={setDisabledSendButton()}\n                        >\n                            {t('common:upload_title')}\n                        </Button>\n                    </div>\n                </div>\n            </DialogTitle>\n\n        </Dialog>\n    );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport '../dialog.scss';\nimport './showDataDialog.scss';\n\nimport i18n from '../../../helper/i18n';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport RenderStudentTable from '../../../helper/renderStudentTable';\nimport { getAllStudentsByGroupId, updateStudentService } from '../../../services/studentService';\nimport Select from 'react-select';\nimport { isObjectEmpty } from '../../../helper/ObjectRevision';\nimport { successHandler } from '../../../helper/handlerAxios';\nimport { UploadFile } from '../../../components/UploadFile/UploadFile';\n\n\nexport const ShowStudentsDialog = props => {\n    const { onClose, cardId, open, onDeleteStudent, students, onSubmit, match, student, groups, group } = props;\n    const [checkBoxStudents, setCheckBoxStudents] = useState([]);\n    const [checkedAll, setCheckedAll] = useState(false);\n    const [openUploadFile, setOpenUploadFile] = useState(false);\n    const setDefaultGroupOption = () => {\n        return { value: `${group.id}`, label: `${group.title}`, ...group };\n    };\n    const [groupOption, setGroupOption] = useState({});\n    const [defaultGroup, setDefaultGroup] = useState({});\n    useEffect(() => {\n        if (group.id !== null)\n            setDefaultGroup(setDefaultGroupOption());\n    }, [group.id]);\n    const { t } = useTranslation('formElements');\n    useEffect(() => {\n        getAllStudentsByGroupId(props.group.id);\n\n\n    }, [open]);\n    useEffect(() => {\n        getAllStudentsByGroupId(props.group.id);\n\n\n    }, [openUploadFile]);\n    useEffect(() => {\n        parseStudentToCheckBox();\n    }, [props.students]);\n\n    const setGroupsOption = () => {\n        return groups !== undefined ? groups.map(item => {\n            return { value: item.id, label: `${item.title}`, ...item };\n        }) : null;\n\n    };\n\n    const groupsOption = setGroupsOption();\n    const handleClose = () => {\n        onClose(cardId);\n    };\n\n\n    const parseStudentToCheckBox = () => {\n        const studentsCheckBox = [...students];\n        const res = studentsCheckBox.map((item) => {\n            return { ...item, checked: false };\n        });\n        setCheckBoxStudents(res);\n    };\n    const handleCheckElement = (event) => {\n        let studentsTmp = [...checkBoxStudents];\n        studentsTmp.forEach(student => {\n            if (student.id === Number(event.target.value))\n                student.checked = event.target.checked;\n        });\n        setCheckBoxStudents(studentsTmp);\n    };\n    const handleAllChecked = (event, pageItemsCount, page, rowsPerPage) => {\n        let studentsTmp = [...checkBoxStudents];\n        for (let i = (page) * rowsPerPage; i < pageItemsCount + (page) * rowsPerPage; i++) {\n            studentsTmp[i].checked = event.target.checked;\n        }\n        setCheckBoxStudents(studentsTmp);\n    };\n    const handleAllCheckedBtn = (pageItemsCount, page, rowsPerPage) => {\n        let studentsTmp = [...checkBoxStudents];\n        let start = (page) * rowsPerPage;\n        let finish = pageItemsCount + (page) * rowsPerPage;\n        while (start < finish) {\n            if (studentsTmp[start].checked) {\n                start++;\n            } else {\n                break;\n            }\n        }\n        setCheckedAll(start === finish && start !== 0);\n    };\n    const handleAllClear = () => {\n        let studentsTmp = [...checkBoxStudents];\n        studentsTmp.forEach(student => {\n            if (student.checked) {\n                student.checked = false;\n            }\n        });\n        setCheckBoxStudents(studentsTmp);\n    };\n    const handleChangeCheckedAllBtn = () => {\n        setCheckedAll(prevState => !prevState);\n    };\n    const handleClearCheckedAllBtn = () => {\n        setCheckedAll(false);\n    };\n\n\n    const setCurrentGroupOption = (group) => {\n        if (group.id === defaultGroup.id) {\n            getExistingGroupStudent();\n        }\n        setGroupOption(group);\n    };\n    const isChecked = ({ checked }) => {\n        return checked;\n    };\n    const setSelectDisabled = () => {\n        let resChecked = true;\n        for (let i = 0; i < checkBoxStudents.length; i++) {\n            if (isChecked(checkBoxStudents[i])) {\n                resChecked = false;\n                break;\n            }\n        }\n        return resChecked;\n    };\n    const isChooseCurrentGroup = () => {\n        if (isObjectEmpty(groupOption)) {\n            return true;\n        }\n        return groupOption.id === defaultGroup.id;\n    };\n    const setDisabledMoveToGroupBtn = () => {\n        return isChooseCurrentGroup();\n    };\n    const changeStudentItem = (group, student) => {\n        let resData = {};\n        if (student.checked) {\n            const { checked, ...res } = student;\n            resData = { ...res, group: { id: group.id } };\n        }\n        return resData;\n    };\n    const getExistingGroupStudent = () => {\n        return successHandler(\n            i18n.t('serviceMessages:students_exist_in_this_group', {\n                cardType: i18n.t('common:student_title'),\n                actionType: i18n.t('serviceMessages:student_label')\n            })\n        );\n    };\n    const handleSubmitGroupStudents = () => {\n        if (isObjectEmpty(groupOption)) {\n            getExistingGroupStudent();\n        } else {\n            const { value, label, ...res } = groupOption;\n            const currentStudents = [...checkBoxStudents];\n            const resData = [];\n            const prevGroup = { id: defaultGroup.id };\n            for (let i = 0; i < currentStudents.length; i++) {\n                const resItem = changeStudentItem(res, currentStudents[i]);\n                if (!isObjectEmpty(resItem)) {\n                    resData.push(resItem);\n                }\n            }\n            ;\n            resData.forEach(item => updateStudentService({ ...item, prevGroup }));\n        }\n        handleClearCheckedAllBtn();\n    };\n    const handleOpenDialogFile = () => {\n        setOpenUploadFile(true);\n    };\n    const handleCloseDialogFile = () => {\n        setOpenUploadFile(false);\n    };\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby='confirm-dialog-title'\n            open={open}\n        >\n\n            <DialogTitle id='confirm-dialog-title'>\n                <>\n\n                    <>\n\n                        {students.length === 0 ?\n\n                            <>\n\n                                <h2 className='title-align'>{`${t('group_label')} - `}<span>{`${props.group.title}`}</span>\n                                </h2>\n                                {t('no_exist_students_in_group')}\n                            </>\n\n                            :\n                            <span className='table-student-data'>\n                                    <h6>\n                                      <Select\n                                          className={'group-select'}\n                                          defaultValue={defaultGroup}\n                                          options={groupsOption}\n                                          onChange={setCurrentGroupOption}\n                                          isOptionDisabled={() => setSelectDisabled()}\n                                      />\n                                  </h6>\n                                <h3 className='title-align'><span>{students.length !== 1 ? `${t('students_label')} ` : `${t('student_label')} `}</span>{`${t('group_students')} `}<span>{`${props.group.title}`}</span></h3>\n\n                                    <RenderStudentTable group={props.group} onDeleteStudent={onDeleteStudent}\n                                                        students={students} onSubmit={onSubmit}\n                                                        match={match}\n                                                        student={props.student}\n                                                        checkBoxStudents={checkBoxStudents}\n                                                        handleCheckElement={handleCheckElement}\n                                                        handleAllChecked={handleAllChecked}\n                                                        handleAllClear={handleAllClear}\n                                                        handleChangeCheckedAllBtn={handleChangeCheckedAllBtn}\n                                                        handleClearCheckedAllBtn={handleClearCheckedAllBtn}\n                                                        checkedAllBtn={checkedAll}\n                                                        handleAllCheckedBtn={handleAllCheckedBtn}\n                                    />\n                            </span>\n                        }\n                    </>\n                </>\n            </DialogTitle>\n            <div className='buttons-container'>\n                {<UploadFile group={group} open={openUploadFile} handleCloseDialogFile={handleCloseDialogFile} />}\n                <Button\n                    className={students.length !== 0 ? 'student-dialog-button-data' : 'student-dialog-button-no-data'}\n                    variant='contained'\n                    onClick={handleOpenDialogFile}\n                    color='primary'\n                    title={i18n.t('upload_from_file')}\n                >\n                    {i18n.t('common:upload_from_file_title')}\n                </Button>\n                {students.length !== 0 ?\n                    <Button\n                        className='student-dialog-button-data'\n                        variant='contained'\n                        onClick={handleSubmitGroupStudents}\n                        color='primary'\n                        disabled={setDisabledMoveToGroupBtn()}\n                        title={i18n.t('move_to_group_title')}\n                    >\n                        {i18n.t('common:move_to_group_title')}\n                    </Button>\n                    : null}\n                <Button\n                    className={students.length !== 0 ? 'student-dialog-button-data' : 'student-dialog-button-no-data'}\n                    variant='contained'\n                    onClick={() => onClose('')}\n                    color='primary'\n                    title={i18n.t('close_title')}\n                >\n                    {i18n.t('common:close_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nShowStudentsDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\nconst mapStateToProps = state => ({\n    //currentGroup:state.groups.currentGroup\n});\n\nexport default connect(mapStateToProps, {})(ShowStudentsDialog);\n\n","export const getShortTitle=(title,MAX_LENGTH)=>{\n    return title.length>MAX_LENGTH? `${ title.slice(0, MAX_LENGTH) }...`:title;\n}","import { connect } from 'react-redux';\nimport { FaEdit, FaUserPlus, FaUsers } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './GroupList.scss';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport AddGroup from '../../components/AddGroupForm/AddGroupForm';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport {\n    clearGroupService,\n    getDisabledGroupsService,\n    handleGroupService,\n    removeGroupCardService,\n    selectGroupService,\n    setDisabledGroupService,\n    setEnabledGroupService,\n    showAllGroupsService\n} from '../../services/groupService';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\nimport { disabledCard } from '../../constants/disabledCard';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\n\nimport {\n    createStudentService,\n    deleteStudentService,\n    getAllStudentsByGroupId, selectStudentService,\n    updateStudentService\n} from '../../services/studentService';\nimport { ShowStudentsDialog } from '../../share/modals/modal/showStudentsDialog';\nimport AddStudentDialog from '../../share/modals/modal/AddStudentDialog';\nimport { links } from '../../constants/links';\nimport './GroupList.scss';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom';\nimport '../../router/Router.scss';\nimport { goToGroupPage } from '../../helper/pageRedirection';\nimport { getShortTitle } from '../../helper/shortTitle';\n\nlet GroupList = props => {\n\n    const { isSnackbarOpen, snackbarType, snackbarMessage, students, groups, group, match, student } = props;\n    const { t } = useTranslation('formElements');\n\n    const [open, setOpen] = useState(false);\n    const [groupId, setGroupId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n    const [addStudentDialog, setAddStudentDialog] = useState(false);\n\n    const [disabled, setDisabled] = useState(false);\n    const [showStudents, setShowStudents] = useState(false);\n\n    const SearchChange = setTerm;\n    const history = useHistory();\n    // useEffect(()=>getAllStudentsByGroupId(groupId),[groupId])\n    useEffect(() => {\n        if (match.path.includes(links.Edit)) {\n            selectGroupService(match.params.id);\n        }\n\n    }, [props.groups.length]);\n    useEffect(() => {\n        if (match.path.includes(links.Delete)) {\n            handleClickOpen(props.match.params.id);\n        }\n\n    }, [props.groups.length]);\n    useEffect(() => {\n        if (match.path.includes(links.AddStudent)) {\n            handleAddUser(match.params.id);\n        }\n\n    }, [props.groups.length]);\n    useEffect(() => {\n        if (match.path.includes(links.SetDisable)) {\n            handleSetDisable(props.match.params.id);\n        }\n\n    }, []);\n    useEffect(() => {\n        if (match.path.includes(links.ShowStudents)) {\n            onShowStudentByGroup(Number(match.params.id));\n        }\n    }, [props.students.length]);\n    useEffect(() => {\n        if (match.path.includes(links.Student) && match.path.includes(links.Edit)) {\n            onShowStudentByGroup(Number(match.params.id));\n            selectStudentService(Number(match.params.idStudent));\n        }\n    }, [props.students.length]);\n    useEffect(() => {\n        if (match.path.includes(links.Student) && match.path.includes(links.Delete)) {\n            onShowStudentByGroup(Number(match.params.id));\n            selectStudentService(Number(match.params.idStudent));\n        }\n    }, [props.students.length]);\n\n    useEffect(() => showAllGroupsService(), []);\n    // useEffect(() => getDisabledGroupsService(), []);\n    const handleFormReset = () => {\n        clearGroupService();\n    };\n    const submit = values => handleGroupService(values);\n    const handleEdit = groupId => selectGroupService(groupId);\n    const visibleGroups = disabled\n        ? search(props.disabledGroups, term, ['title'])\n        : search(props.groups, term, ['title']);\n\n    const handleClickOpen = groupId => {\n        setGroupId(groupId);\n        setOpen(true);\n    };\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n    const handleAddUser = id => {\n        setGroupId(id);\n        setAddStudentDialog(true);\n    };\n\n    const handleClose = groupId => {\n        setOpen(false);\n        if (!groupId) {\n            goToGroupPage(history);\n            return;\n        }\n        if (hideDialog) {\n            if (disabled) {\n                const group = props.disabledGroups.find(\n                    group => group.id === groupId\n                );\n                setEnabledGroupService(group);\n            } else {\n                const group = groups.find(group => Number(group.id) === Number(groupId));\n                setDisabledGroupService(group);\n            }\n        } else {\n            removeGroupCardService(groupId);\n        }\n        setHideDialog(null);\n        goToGroupPage(history);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n    const studentSubmit = (data) => {\n        if (data.id !== undefined) {\n            const sendData = { ...data, group: { id: data.group } };\n            updateStudentService(sendData);\n        } else {\n            const sendData = { ...data, group: { id: groupId } };\n            createStudentService(sendData);\n        }\n        setAddStudentDialog(false);\n        goToGroupPage(history);\n    };\n\n    const selectStudentCard = () => {\n        setAddStudentDialog(false);\n    };\n    const onCloseShowStudents = () => {\n        setShowStudents(false);\n        goToGroupPage(history);\n    };\n    const onShowStudentByGroup = (groupId) => {\n        setShowStudents(true);\n        selectGroupService(groupId);\n        getAllStudentsByGroupId(groupId);\n    };\n    const onDeleteStudent = (student) => {\n        if (student !== '') {\n            deleteStudentService(student);\n        }\n    };\n    const handleSetDisable = (groupId) => {\n        setHideDialog(\n            disabledCard.HIDE\n        );\n        handleClickOpen(groupId);\n    };\n    const getGroupTitle = (title) => {\n        const MAX_LENGTH = 5;\n        return getShortTitle(title, MAX_LENGTH);\n    };\n\n    return (\n\n        <>\n            <NavigationPage name={navigationNames.GROUP_LIST} val={navigation.GROUPS} />\n\n            <ConfirmDialog\n                isHide={hideDialog}\n                cardId={groupId}\n                whatDelete={'group'}\n                open={open}\n                onClose={handleClose}\n            />\n            <AddStudentDialog\n                open={addStudentDialog}\n                onSubmit={studentSubmit}\n                onSetSelectedCard={selectStudentCard}\n            />\n            <ShowStudentsDialog\n                onClose={onCloseShowStudents}\n                open={showStudents}\n                students={students}\n                group={group}\n                onDeleteStudent={onDeleteStudent}\n                onSubmit={studentSubmit}\n                match={match}\n                student={student}\n                groups={groups}\n            />\n\n            <div className='cards-container'>\n                <aside className='search-list__panel'>\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    {disabled ? (\n                        ''\n                    ) : (\n\n                        <AddGroup\n                            match={match}\n                            className='form'\n                            onSubmit={submit}\n                            onReset={handleFormReset}\n                        />\n                    )}\n                </aside>\n                <div className='group-wrapper group-list'>\n                    {visibleGroups.length === 0 && (\n                        <NotFound name={t('group_y_label')} />\n                    )}\n                    {visibleGroups.map(group => (\n                        <section key={group.id} className='group-card'>\n\n                            <div className='group__buttons-wrapper'>\n                                {!disabled ? (\n                                    <>\n                                        <Link to={`${links.GroupList}${links.Group}/${group.id}${links.SetDisable}`}>\n                                            <GiSightDisabled\n                                                className='group__buttons-hide link-href'\n                                                title={t('common:set_disabled')}\n                                                onClick={() => {\n                                                    handleSetDisable(group.id);\n                                                }}\n                                            />\n                                        </Link>\n                                        <Link to={`${links.GroupList}${links.Group}${links.Edit}/${group.id}`}>\n                                            <FaEdit\n                                                className='group__buttons-edit link-href'\n                                                title={t('edit_title')}\n                                                onClick={() => handleEdit(group.id)}\n                                            />\n                                        </Link>\n                                    </>\n                                ) : (\n                                    <IoMdEye\n                                        className='group__buttons-hide link-href'\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(group.id);\n                                        }}\n                                    />\n                                )}\n                                <Link to={`${links.GroupList}${links.Group}${links.Delete}/${group.id}`}>\n                                    <MdDelete\n                                        className='group__buttons-delete link-href'\n                                        title={t('delete_title')}\n                                        onClick={() => handleClickOpen(group.id)}\n                                    />\n                                </Link>\n                                <Link to={`${links.GroupList}${links.Group}/${group.id}${links.AddStudent}`}>\n                                    <FaUserPlus\n                                        title={t('formElements:student_add_label')}\n                                        className='svg-btn copy-btn align-left info-btn'\n                                        onClick={() => {\n                                            handleAddUser(group.id);\n                                            // setCurrentGroup(group);\n                                        }}\n                                    />\n                                </Link>\n\n                            </div>\n                            <p className='group-card__description'>\n                                {t('group_label') + ':'}\n                            </p>\n                            <h1 className='group-card__number'>\n                                {getGroupTitle(group.title)}\n                            </h1>\n                            <Link to={`${links.GroupList}${links.Group}/${group.id}${links.ShowStudents}`}>\n                            <span className='students-group'>\n                                <FaUsers\n                                    title={t('formElements:show_students')}\n                                    className='svg-btn copy-btn align-left info-btn students'\n                                    onClick={\n                                        () => {\n                                            onShowStudentByGroup(group.id);\n                                        }\n                                    }\n                                />\n                            </span>\n                            </Link>\n\n                        </section>\n                    ))}\n                </div>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    groups: state.groups.groups,\n    group: state.groups.group,\n    disabledGroups: state.groups.disabledGroups,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message,\n    students: state.students.students,\n    student: state.students.student\n});\n\nexport default connect(mapStateToProps, {})(GroupList);\n","import React, {useEffect} from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport renderTextField from '../../share/renderedFields/input';\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport { ROOM_FORM } from '../../constants/reduxForms';\n\nimport { required, uniqueRoomName } from '../../validation/validateFields';\nimport Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\nimport Card from '../../share/Card/Card';\n\nimport './AddRoomForm.scss';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nlet AddRoom = props => {\n    const { t } = useTranslation('formElements')\n    const { handleSubmit, pristine, submitting, onReset,oneRoom } = props;\n\n    useEffect(() => {\n        if (props.oneRoom) {\n            if (props.oneRoom.id) {\n                props.initialize({\n                    name: props.oneRoom.name,\n                    type: props.oneRoom.type.id,\n                    id: props.oneRoom.id\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [props.oneRoom]);\n\n\n\n\n    return (\n        <Card class='form-card room-form'>\n            <form className='createGroupForm w-100' onSubmit={handleSubmit}>\n                <h2 className='form-title'>\n                    {props.oneRoom.id\n                        ? t('edit_title')\n                        : t('create_title')\n                    }{' '}\n                    {t('room_y_label')}\n                </h2>\n                <Field\n                    type='text'\n                    name='name'\n                    component={renderTextField}\n                    placeholder={t('number_label')}\n                    className='form-field'\n                    label={t('room_label')}\n                    validate={[required, uniqueRoomName]}\n                />\n                <Field\n                    className='form-field'\n                    component={renderSelectField}\n                    name='type'\n                    label={t('type_label')}\n                    validate={[required]}>\n                    <option value={''}></option>\n                    {props.roomTypes.map(roomType => (\n                        <option key={roomType.id} value={roomType.id}>\n                            {roomType.description}\n                        </option>\n                    ))}\n                </Field>\n                <div className='form-buttons-container'>\n                    <Button\n                        className='buttons-style'\n                        variant='contained'\n                        color='primary'\n                        disabled={pristine || submitting}\n                        type='submit'>\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        className='buttons-style'\n                        variant='contained'\n                        disabled={setDisableButton(pristine,submitting,oneRoom.id)}\n                        onClick={onReset}>\n                        {getClearOrCancelTitle(oneRoom.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    oneRoom: state.rooms.oneRoom,\n    roomTypes: state.roomTypes.roomTypes\n});\n\nAddRoom = reduxForm({\n    form: ROOM_FORM\n})(AddRoom);\n\nexport default connect(mapStateToProps)(AddRoom);\n","import { store } from '../index';\nimport { ROOM_FORM_TYPE } from '../constants/reduxForms';\nimport { ROOM_TYPES_URL } from '../constants/axios';\nimport axios from '../helper/axios';\n\nimport {\n    getAllRoomTypes,\n    deleteType,\n    updateOneType,\n    postOneType,\n    getOneNewType\n} from '../redux/actions/roomTypes';\n\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const getAllRoomTypesService = () => {\n    axios\n        .get(ROOM_TYPES_URL)\n        .then(res => {\n            store.dispatch(getAllRoomTypes(res.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const deleteTypeService = roomTypeId => {\n    axios\n        .delete(ROOM_TYPES_URL + `/${roomTypeId}`)\n        .then(response => {\n            store.dispatch(deleteType(roomTypeId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType:\n                        i18n.t('formElements:room_label') +\n                        ' ' +\n                        i18n.t('formElements:type_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const addNewTypeService = values => {\n    if (values.id) {\n        putNewType(values);\n    } else {\n        postNewType(values);\n    }\n};\n\nexport const putNewType = values => {\n    axios\n        .put(ROOM_TYPES_URL, values)\n        .then(response => {\n            store.dispatch(updateOneType(response.data));\n            resetFormHandler(ROOM_FORM_TYPE);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType:\n                        i18n.t('formElements:room_label') +\n                        ' ' +\n                        i18n.t('formElements:type_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const postNewType = values => {\n    axios\n        .post(ROOM_TYPES_URL, values)\n        .then(response => {\n            store.dispatch(postOneType(response.data));\n            resetFormHandler(ROOM_FORM_TYPE);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType:\n                        i18n.t('formElements:room_label') +\n                        ' ' +\n                        i18n.t('formElements:type_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getOneNewTypeService = roomId => {\n    store.dispatch(getOneNewType(roomId));\n};\n","import * as actionsType from './actionsType';\nimport roomTypes from '../reducers/roomTypes';\nimport actions from 'redux-form/lib/actions';\n\nexport const postOneType = roomType => {\n    return {\n        type: actionsType.POST_NEW_TYPE,\n        result: roomType\n    };\n};\n\nexport const getAllRoomTypes = roomType => {\n    return {\n        type: actionsType.GET_ALL_ROOM_TYPES,\n        result: roomType\n    };\n};\n\nexport const deleteType = roomType => {\n    return {\n        type: actionsType.DELETE_TYPE,\n        result: roomType\n    };\n\n\n};\n\nexport const updateOneType = roomType => {\n    return {\n        type: actionsType.UPDATE_ONE_TYPE,\n        result: roomType\n    };\n};\n\nexport const getOneNewType = roomType => {\n    return {\n        type: actionsType.GET_ONE_NEW_TYPE,\n        result: roomType\n    }\n}\n\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { ROOM_FORM_TYPE } from '../../constants/reduxForms';\n\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\nimport Card from '../../share/Card/Card';\nimport { useTranslation } from 'react-i18next';\nimport renderTextField from '../../share/renderedFields/input';\nimport Button from '@material-ui/core/Button';\nimport { MdDelete } from 'react-icons/md';\nimport { FaEdit } from 'react-icons/fa';\nimport {\n    deleteTypeService,\n    getOneNewTypeService\n} from '../../services/roomTypesService';\nimport './AddNewRoomType.scss';\n\nlet NewRoomType = props => {\n    const { handleSubmit, pristine, submitting, roomTypes } = props;\n   \n\n    const [open, setOpen] = useState(false);\n    const [typeId, setTypeId] = useState(-1);\n\n    useEffect(() => {\n        let defaultValue = {};\n        if (props.oneType.id) {\n            defaultValue={ description: props.oneType.description,\n                id: props.oneType.id};\n        }\n        props.initialize(defaultValue);\n\n    }, [props.oneType]);   \n\n    const { t } = useTranslation('formElements');\n\n    const handleClickOpen = typeId => {\n        setTypeId(typeId);\n        setOpen(true);\n    };\n\n    const handleClose = typeId => {\n        setOpen(false);\n        if (!typeId) {\n            return;\n        }\n        deleteTypeService(typeId);\n    };\n\n    const handleEdit = roomId => {\n        getOneNewTypeService(roomId);\n    };\n\n    return (\n        <>\n            <ConfirmDialog\n                selectedValue={''}\n                cardId={typeId}\n                whatDelete={cardType.TYPE.toLowerCase()}\n                open={open}\n                onClose={handleClose}\n            />\n            <Card class=\"form-card room-form\">\n                <form className=\"new-type-container\" onSubmit={handleSubmit}>\n                    <Field\n                        type=\"text\"\n                        name=\"description\"\n                        component={renderTextField}\n                        placeholder={t('add_type_label')}\n                        label={t('new_type_label')}\n                        className=\"form-field\"\n                        variant=\"outlined\"\n                    />\n                    <div className='btn-style-wrapper'>\n                        <Button\n                            color=\"primary\"\n                            className=\"btn-style\"\n                            disabled={pristine || submitting}\n                            variant=\"contained\"\n                            type=\"submit\"\n                        >\n                            {t('save_button_label')}\n                        </Button>\n                    </div>\n                </form>\n\n                <ul className=\"new-types\">\n                    {roomTypes.map(roomType => (\n                        <li\n                            key={roomType.id}\n                            value={roomType.description}\n                            className=\"new-types-list\"\n                        >\n                            <span className=\"typeDescription\">\n                                {roomType.description}\n                            </span>\n                            <span className=\"buttons\">\n                                <FaEdit\n                                    className=\"btn edit\"\n                                    onClick={() => handleEdit(roomType.id)}\n                                />\n                                <MdDelete\n                                    className=\"btn delete\"\n                                    onClick={() => handleClickOpen(roomType.id)}\n                                />\n                            </span>\n                        </li>\n                    ))}\n                </ul>\n            </Card>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    oneType: state.roomTypes.oneType,\n    roomTypes: state.roomTypes.roomTypes\n});\n\nNewRoomType = reduxForm({\n    form: ROOM_FORM_TYPE\n})(NewRoomType);\n\nexport default connect(mapStateToProps)(NewRoomType);\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\nimport FreeRooms from '../FreeRooms/freeRooms';\nimport AddRoom from '../../components/AddRoomForm/AddRoomForm';\nimport NewRoomType from '../../components/AddNewRoomType/AddNewRoomType';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport Card from '../../share/Card/Card';\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport './RoomList.scss';\nimport { useTranslation } from 'react-i18next';\nimport { search } from '../../helper/search';\n\nimport {\n    createRoomService,\n    showListOfRoomsService,\n    deleteRoomCardService,\n    selectOneRoomService,\n    clearRoomOneService,\n    getDisabledRoomsService,\n    setDisabledRoomsService,\n    setEnabledRoomsService\n} from '../../services/roomService';\n\nimport {\n    getAllRoomTypesService,\n    addNewTypeService\n} from '../../services/roomTypesService';\n\nimport NotFound from '../../share/NotFound/NotFound';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\n\nimport { disabledCard } from '../../constants/disabledCard';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst RoomList = props => {\n    const { rooms } = props;\n\n    useEffect(() => {\n        showListOfRoomsService();\n    }, []);\n\n    useEffect(() => {\n        getAllRoomTypesService();\n    }, []);\n\n    useEffect(() => {\n        getDisabledRoomsService();\n    }, []);\n\n    const { t } = useTranslation('formElements');\n    const [open, setOpen] = useState(false);\n    const [roomId, setRoomId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n\n    const [disabled, setDisabled] = useState(false);\n\n    const createRoom = values => {\n        const description = props.roomTypes.find(\n            type => type.id == values.type\n        );\n        values.typeDescription = description.description;\n        createRoomService(values);\n    };\n\n    const editHandler = roomId => {\n        selectOneRoomService(roomId);\n    };\n\n    const handleFormReset = () => {\n        clearRoomOneService();\n    };\n\n    const handleClickOpen = roomId => {\n        setRoomId(roomId);\n        setOpen(true);\n    };\n\n    const handleClose = roomId => {\n        setOpen(false);\n        if (!roomId) {\n            return;\n        }\n        if (hideDialog) {\n            if (disabled) {\n                const room = props.disabledRooms.find(\n                    room => room.id === roomId\n                );\n                setEnabledRoomsService(room);\n            } else {\n                const room = props.rooms.find(room => room.id === roomId);\n                setDisabledRoomsService(room);\n            }\n        } else {\n            deleteRoomCardService(roomId);\n        }\n        setHideDialog(null);\n    };\n\n    const submitType = values => {\n        addNewTypeService(values);\n    };\n\n    const visibleItems = disabled\n        ? search(props.disabledRooms, term, ['name'])\n        : search(rooms, term, ['name']);\n\n    const SearchChange = term => {\n        setTerm(term);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.ROOM_LIST} val={navigation.ROOMS}/>\n            <ConfirmDialog\n                cardId={roomId}\n                whatDelete={cardType.ROOM.toLowerCase()}\n                open={open}\n                isHide={hideDialog}\n                onClose={handleClose}\n            />\n            <div className=\"cards-container\">\n                <aside className=\"search-list__panel\">\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    {disabled ? (\n                        ''\n                    ) : (\n                        <>\n                            <AddRoom\n                                onSubmit={createRoom}\n                                onReset={handleFormReset}\n                            />\n                            <NewRoomType\n                                className=\"new-type\"\n                                onSubmit={submitType}\n                            />\n                        </>\n                    )}\n                </aside>\n                <section className=\"container-flex-wrap wrapper\">\n                    {visibleItems.length === 0 && (\n                        <NotFound name={t('room_y_label')} />\n                    )}\n                    {visibleItems.map((room, index) => (\n                        <Card key={index} {...room} class=\"room-card done-card\">\n                            <div className=\"cards-btns\">\n                                {!disabled ? (\n                                    <>\n                                        <GiSightDisabled\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_disabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.HIDE\n                                                );\n                                                handleClickOpen(room.id);\n                                            }}\n                                        />\n                                        <FaEdit\n                                            className=\"svg-btn\"\n                                            onClick={() => editHandler(room.id)}\n                                        />\n                                    </>\n                                ) : (\n                                    <IoMdEye\n                                        className=\"svg-btn copy-btn\"\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(room.id);\n                                        }}\n                                    />\n                                )}\n\n                                <MdDelete\n                                    className=\"svg-btn\"\n                                    onClick={() => handleClickOpen(room.id)}\n                                />\n                            </div>\n\n                            <span> {t('room_label') + ':'} </span>\n                            <h2 className=\"room-card__number\">{room.name}</h2>\n                            <span>{t('type_label') + ':'}</span>\n                            <h2 className=\"room-card__number\">\n                                {room.type.description}\n                            </h2>\n                        </Card>\n                    ))}\n                </section>\n            </div>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    rooms: state.rooms.rooms,\n    disabledRooms: state.rooms.disabledRooms,\n    oneRoom: state.rooms.oneRoom,\n    roomTypes: state.roomTypes.roomTypes,\n    oneType: state.roomTypes.oneType\n});\n\nexport default connect(mapStateToProps, {})(RoomList);\n","import { connect } from 'react-redux'\nimport React, { useEffect } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport Button from '@material-ui/core/Button'\nimport { useTranslation}  from 'react-i18next'\n\nimport './AddSubjectForm.scss'\nimport Card from '../../share/Card/Card'\nimport { SUBJECT_FORM } from '../../constants/reduxForms'\nimport renderTextField from '../../share/renderedFields/input'\nimport { required, uniqueSubject, maxLengthValue} from '../../validation/validateFields'\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nlet AddSubject = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting,subject } = props;\n\n    useEffect(() => {\n        if (props.subject) {\n            if (props.subject.id) {\n                props.initialize({\n                    id: props.subject.id,\n                    name: props.subject.name\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [props.subject]);\n\n    return (\n        <Card class='form-card subject-form'>\n            <h2 style={{ textAlign: 'center' }}>\n                {props.subject.id ? t('edit_title') : t('create_title')}\n                {t('subject_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    className='form-field'\n                    name='name'\n                    component={renderTextField}\n                    label={t('subject_label')+':'}\n                    validate={[required, uniqueSubject, maxLengthValue]}\n                />\n                <div className='form-buttons-container subject-btns'>\n                <Button\n                    variant='contained'\n                    color='primary'\n                    className='buttons-style '\n                    disabled={pristine || submitting}\n                    type='submit'>\n                    {t('save_button_label')}\n                </Button>\n                <Button\n                    type='button'\n                    variant='contained'\n                    className='buttons-style'\n                    disabled={setDisableButton(pristine,submitting,subject.id)}\n                    onClick={onReset}>\n                    {getClearOrCancelTitle(subject.id,t)}\n                </Button>\n                </div>\n            </form>\n        </Card>\n    )\n}\n\nconst mapStateToProps = state => ({\n    subject: state.subjects.subject\n})\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SUBJECT_FORM\n    })(AddSubject)\n)\n","import { connect } from 'react-redux';\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\n\nimport './SubjectPage.scss';\nimport Card from '../../share/Card/Card';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport AddSubject from '../../components/AddSubjectForm/AddSubjectForm';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport {\n    showAllSubjectsService,\n    removeSubjectCardService,\n    handleSubjectService,\n    selectSubjectService,\n    clearSubjectService,\n    setEnabledSubjectsService,\n    setDisabledSubjectsService,\n    getDisabledSubjectsService\n} from '../../services/subjectService';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst SubjectPage = props => {\n    const { t } = useTranslation('formElements');\n    const { isSnackbarOpen, snackbarType, snackbarMessage } = props;\n\n    const [open, setOpen] = useState(false);\n    const [subjectId, setSubjectId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n\n    const [disabled, setDisabled] = useState(false);\n\n    useEffect(() => showAllSubjectsService(), []);\n    useEffect(() => getDisabledSubjectsService(), []);\n\n    const submit = values => handleSubjectService(values);\n    const handleEdit = subjectId => selectSubjectService(subjectId);\n    const handleFormReset = () => clearSubjectService();\n    const visibleSubjects = disabled\n        ? search(props.disabledSubjects, term, ['name'])\n        : search(props.subjects, term, ['name']);\n    const SearchChange = setTerm;\n\n    const handleClickOpen = subjectId => {\n        setSubjectId(subjectId);\n        setOpen(true);\n    };\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n\n    const handleClose = subjectId => {\n        setOpen(false);\n        if (!subjectId) return;\n        if (hideDialog) {\n            if (disabled) {\n                const group = props.disabledSubjects.find(\n                    subject => subject.id === subjectId\n                );\n                setEnabledSubjectsService(group);\n            } else {\n                const group = props.subjects.find(\n                    subject => subject.id === subjectId\n                );\n                setDisabledSubjectsService(group);\n            }\n        } else {\n            removeSubjectCardService(subjectId);\n        }\n        setHideDialog(null);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.SUBJECT_PAGE} val={navigation.SUBJECTS}/>\n            <ConfirmDialog\n                isHide={hideDialog}\n                cardId={subjectId}\n                whatDelete={'subject'}\n                open={open}\n                onClose={handleClose}\n            />\n            <div className=\"cards-container\">\n                <aside className=\"search-list__panel\">\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    {disabled ? (\n                        ''\n                    ) : (\n                        <AddSubject\n                            className=\"form\"\n                            onSubmit={submit}\n                            onReset={handleFormReset}\n                        />\n                    )}\n                </aside>\n                <section className=\"container-flex-wrap wrapper\">\n                    {visibleSubjects.length === 0 && (\n                        <NotFound name={t('subject_y_label')} />\n                    )}\n                    {visibleSubjects.map(subject => (\n                        <Card key={subject.id} class=\"subject-card done-card\">\n                            <h2 className=\"subject-card__name\">\n                                {subject.name}\n                            </h2>\n                            <div className=\"cards-btns\">\n                                {disabled ? (\n                                    <IoMdEye\n                                        className=\"svg-btn copy-btn\"\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(subject.id);\n                                        }}\n                                    />\n                                ) : (\n                                    <>\n                                        <GiSightDisabled\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_disabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.HIDE\n                                                );\n                                                handleClickOpen(subject.id);\n                                            }}\n                                        />\n                                        <FaEdit\n                                            className=\"svg-btn edit-btn\"\n                                            title={t('edit_title')}\n                                            onClick={() =>\n                                                handleEdit(subject.id)\n                                            }\n                                        />\n                                    </>\n                                )}\n\n                                <MdDelete\n                                    className=\"svg-btn delete-btn\"\n                                    title={t('delete_title')}\n                                    onClick={() => handleClickOpen(subject.id)}\n                                />\n                            </div>\n                            {/* <p className=\"subject-card__description\">\n                                {t('subject_label') + ':'}{' '}\n                            </p> */}\n                        </Card>\n                    ))}\n                </section>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    subjects: state.subjects.subjects,\n    disabledSubjects: state.subjects.disabledSubjects,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message\n});\n\nexport default connect(mapStateToProps, {})(SubjectPage);\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './modal.scss';\n\nexport const ModalWindow = props => {\n    const { onClose, cardId, isHide, open, windowTitle } = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n    const renderOkButton = () => {\n        if (!props.isOkButton) {\n            return;\n        }\n        return (\n            <Button\n                className=\"dialog-button\"\n                variant=\"contained\"\n                color=\"primary\"\n                //onClick={() => onClose(cardId)}\n            >\n                {props.okButtonLabel}\n            </Button>\n        );\n    };\n    const renderNoButton = () => {\n        if (!props.isNoButton) {\n            return;\n        }\n        return (\n            <Button\n                className=\"dialog-button\"\n                variant=\"contained\"\n                onClick={() => onClose('')}\n            >\n                {props.noButtonLabel}\n            </Button>\n        );\n    };\n\n    const renderModalButtons = () => {\n        if (!props.isOkButton && !props.isNoButton) {\n            return;\n        }\n        return (\n            <div className=\"buttons-container\">\n                {renderOkButton()}\n                {renderNoButton()}\n            </div>\n        );\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">{windowTitle}</DialogTitle>\n            {props.children}\n            {renderModalButtons()}\n        </Dialog>\n    );\n};\n\nModalWindow.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default ModalWindow;\n","import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst renderCheckboxField = ({\n    custom,\n    input,\n    label,\n    name,\n    labelPlacement,\n    checked\n}) => {\n    return (\n        <FormControlLabel\n            labelPlacement={labelPlacement}\n            label={label}\n            name={name}\n            checked={checked}\n            control={<Checkbox color=\"primary\" {...custom} {...input} />}\n        />\n    );\n};\n\nexport default renderCheckboxField;\n","import React, { useRef } from \"react\";\nimport ReactSelect from \"react-select\";\nimport { Dialog, DialogTitle } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport '../helper/multiselect.scss'\nimport { useTranslation } from 'react-i18next';\nexport const MultiselectForGroups = props => {\n    const { t } = useTranslation('common');\n    const valueRef = useRef(props.value);\n    valueRef.current = props.value;\n    const {open,onClose,onCancel}=props;\n\n    const selectAllOption = {\n        value: \"<SELECT_ALL>\",\n        label: t('all_groups')\n    };\n\n    const isSelectAllSelected = () => {\n        if(props.options!==undefined&&valueRef.current) {\n          return   valueRef.current.length === props.options.length;\n        }\n    }\n    const isOptionSelected = option =>\n        valueRef.current.some(({ value }) => value === option.value) ||\n        isSelectAllSelected();\n\n    const getOptions = () => [selectAllOption, ...props.options];\n\n    const getValue = () =>\n        isSelectAllSelected() ? [selectAllOption] : props.value;\n\n    const onChange = (newValue, actionMeta) => {\n        const { action, option, removedValue } = actionMeta;\n\n        if (action === \"select-option\" && option.value === selectAllOption.value) {\n            props.onChange(props.options, actionMeta);\n        }\n        else if (\n            (action === \"deselect-option\" &&\n                option.value === selectAllOption.value) ||\n            (action === \"remove-value\" &&\n                removedValue.value === selectAllOption.value)\n        ) {\n            props.onChange([], actionMeta);\n        } else if (\n            actionMeta.action === \"deselect-option\" &&\n            isSelectAllSelected()\n        ) {\n            props.onChange(\n                props.options.filter(({ value }) => value !== option.value),\n                actionMeta\n            );\n        } else {\n            props.onChange(newValue || [], actionMeta);\n        }\n    };\n    return (\n\n        <Dialog id=\"select-dialog\"\n\n                disableBackdropClick={true}\n                aria-labelledby=\"confirm-dialog-title\"\n                open={open}\n        >\n            <DialogTitle id=\"select-dialog-title\" className=\"confirm-dialog\">\n\n                <ReactSelect\n                    isOptionSelected={isOptionSelected}\n                    options={getOptions()}\n                    value={getValue()}\n                    onChange={onChange}\n                    hideSelectedOptions={false}\n                    closeMenuOnSelect={false}\n                    isMulti\n                    placeholder={t('choose_groups')}\n                />\n\n\n            </DialogTitle>\n            <div className=\"buttons-container\">\n\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={onClose}\n                >\n                    {t('confirm_groups')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={onCancel}\n                >\n                    {t('cancel_groups')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n","import * as moment from 'moment';\nimport { connect } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Field, reduxForm } from 'redux-form';\nimport Button from '@material-ui/core/Button';\nimport './SemesterForm.scss';\nimport Card from '../../share/Card/Card';\nimport renderCheckboxField from '../../share/renderedFields/checkbox';\nimport { SEMESTER_FORM } from '../../constants/reduxForms';\nimport renderTextField from '../../share/renderedFields/input';\nimport renderMonthPicker from '../../share/renderedFields/timeSemester';\nimport {\n    required,\n    minYearValue,\n    lessThanDate,\n    greaterThanDate\n} from '../../validation/validateFields';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { daysUppercase } from '../../constants/schedule/days';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\nimport { showAllGroupsService } from '../../services/groupService';\nimport { MultiselectForGroups } from '../../helper/MultiselectForGroups';\nimport { useForm } from \"react-hook-form\";\nimport formValueSelector from 'redux-form/lib/formValueSelector';\n\nlet AddSemesterForm = props => {\n    const clearCheckboxes = () => {\n        setCurrent(false);\n        setByDefault(false);\n        setCheckedDates({\n            MONDAY: false,\n            TUESDAY: false,\n            WEDNESDAY: false,\n            THURSDAY: false,\n            FRIDAY: false,\n            SATURDAY: false,\n            SUNDAY: false\n        });\n    };\n    useEffect(() => getClassScheduleListService(), []);\n    useEffect(()=>showAllGroupsService(),[])\n\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting,semester,groups,selected,setSelected,selectedGroups,setSelectedGroups } = props;\n    const [openGroupDialog,setOpenGroupDialog]=useState(false);\n    useEffect(()=>{\n        if(semester.semester_groups!==undefined){\n            setSelectedGroups(getGroupOptions(semester.semester_groups))\n        }\n    },[semester.id])\n    const getGroupOptions=(groupOptions)=>{\n\n        return groupOptions.map(item=>{return {id:item.id,value:item.id,label:`${item.title}`}});\n    }\n    const options=getGroupOptions(groups);\n    const semesterOptions=getGroupOptions(groups.filter(x => !selectedGroups.includes(x)));\n    const openDialogForGroup = () => {\n      setOpenGroupDialog(true)\n    }\n    const closeDialogForGroup = () => {\n        setOpenGroupDialog(false)\n    }\n    const clearSelection = () => {\n      setSelected([])\n    }\n    const onCancel = () => {\n      clearSelection();\n      closeDialogForGroup();\n    }\n\n    const onClose = () => {\n        closeDialogForGroup();\n    }\n    const onSubmit = (values) => {\n        console.log(values)\n        handleSubmit(values);\n    }\n    const { setValue } = useForm();\n\n    let prepSetCheckedClasses = {};\n    useEffect(() => {\n        props.classScheduler.forEach(classItem => {\n            prepSetCheckedClasses[`${classItem.id}`] = false;\n        });\n        setCheckedClasses({ ...prepSetCheckedClasses });\n        clearCheckboxes();\n    }, [props.classScheduler, props.semester.id]);\n    const getToday = () => {\n        return  new Date();\n    }\n    const getTomorrow = () => {\n        const tomorrow = new Date(getToday());\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        return tomorrow;\n    }\n    const [current, setCurrent] = React.useState(false);\n    const [byDefault, setByDefault] = React.useState(false);\n    const [startTime,setStartTime]=useState(getToday());\n    const [finishTime,setFinishTime]=useState(getTomorrow());\n    const [startValue,setStartValue]=useState();\n    const [finishValue,setFinishValue]=useState();\n    const [disabledFinishDate,setDisabledFinishDate]=useState(true);\n    const [checkedDates, setCheckedDates] = React.useState({\n        MONDAY: false,\n        TUESDAY: false,\n        WEDNESDAY: false,\n        THURSDAY: false,\n        FRIDAY: false,\n        SATURDAY: false,\n        SUNDAY: false\n    });\n\n    const [checkedClasses, setCheckedClasses] = React.useState(\n        prepSetCheckedClasses\n    );\n\n    const handleChange = (event,setState) => setState(event.target.checked);\n\n    const setMinFinishDate=time=>{\n        let new_date = moment(time, \"DD/MM/YYYY\").add(1, 'd');\n        setFinishTime(new_date.toDate());\n    }\n    const setEndTime = startTime => {\n        if(disabledFinishDate||moment(startValue).isSameOrBefore(finishValue)) {\n            setFinishValue(setMinFinishDate(startTime));\n            props.change(\n                'endDay',\n                moment(startTime, 'DD/MM/YYYY').add(7, 'd').format('DD/MM/YYYY')\n            );\n        }\n        return\n    }\n    const setCheckedDaysHandler = React.useCallback(\n        day => {\n            return function (event) {\n                let changedDay = { [day]: event.target.checked };\n                setCheckedDates({\n                    ...checkedDates,\n                    ...changedDay\n                });\n            };\n        },\n        [checkedDates]\n    );\n    const setCheckedClassesHandler = React.useCallback(\n        classid => {\n            return function (event) {\n                let changedClass = { [classid]: event.target.checked };\n                setCheckedClasses({\n                    ...checkedClasses,\n                    ...changedClass\n                });\n            };\n        },\n        [checkedClasses]\n    );\n\n    const setSemesterClasses = () => {\n        const classes = Object.keys(checkedClasses);\n        return classes.map(classItem => {\n            const scheduleItem = props.classScheduler.find(\n                schedule => schedule.id === +classItem\n            );\n            return (\n                <Field\n                    key={props.semester.id + classItem}\n                    name={`semester_classes_markup_${classItem}`}\n                    label={\n                        scheduleItem.class_name +\n                        ' (' +\n                        scheduleItem.startTime +\n                        '-' +\n                        scheduleItem.endTime +\n                        ')'\n                    }\n                    labelPlacement=\"end\"\n                    component={renderCheckboxField}\n                    defaultValue={checkedClasses[classItem]}\n                    checked={checkedClasses[classItem]}\n                    onChange={setCheckedClassesHandler(classItem)}\n                    color=\"primary\"\n                />\n            );\n        });\n    };\n    const setSemesterDays = () => {\n        const days = Object.keys(checkedDates);\n        return days.map(semesterDay => {\n            return (\n                <Field\n                    key={props.semester.id + semesterDay}\n                    name={`semester_days_markup_${semesterDay}`}\n                    label={t(`common:day_of_week_${semesterDay}`)}\n                    labelPlacement=\"end\"\n                    defaultValue={checkedDates[semesterDay]}\n                    component={renderCheckboxField}\n                    checked={checkedDates[semesterDay]}\n                    onChange={setCheckedDaysHandler(semesterDay)}\n                    color=\"primary\"\n                />\n            );\n        });\n    };\n\n    useEffect(() => {\n        let semesterItem = {};\n        clearCheckboxes();\n\n        if (props.semester) {\n            if (props.semester.id) {\n                semesterItem = {\n                    id: props.semester.id,\n                    year: props.semester.year,\n                    description: props.semester.description,\n                    startDay: props.semester.startDay,\n                    endDay: props.semester.endDay,\n                    currentSemester: props.semester.currentSemester,\n                    defaultSemester:props.semester.defaultSemester,\n                    semester_days: props.semester.semester_days,\n                    semester_classes: props.semester.semester_classes,\n                    semester_groups:props.semester.semester_groups\n\n                };\n\n                daysUppercase.forEach(dayItem => {\n                    if (props.semester.semester_days.includes(dayItem)) {\n                        semesterItem[`semester_days_markup_${dayItem}`] = true;\n                    }\n                });\n                const newDays = props.semester.semester_days.reduce(\n                    (result, day) => {\n                        result[day] = true;\n                        return result;\n                    },\n                    {}\n                );\n\n                if (props.classScheduler) {\n                    props.classScheduler.forEach(classFullItem => {\n                        if (\n                            props.semester.semester_classes.findIndex(\n                                classItem => {\n                                    return classFullItem.id === classItem.id;\n                                }\n                            ) >= 0\n                        ) {\n                            semesterItem[\n                                `semester_classes_markup_${classFullItem.id}`\n                            ] = true;\n                        }\n                    });\n                }\n\n                const newClasses = props.semester.semester_classes.reduce(\n                    (result, classItem) => {\n                        result[classItem.id] = true;\n                        return result;\n                    },\n                    {}\n                );\n\n                setCurrent(props.semester.currentSemester);\n                setByDefault(props.semester.defaultSemester);\n\n                setCheckedDates({\n                    MONDAY: false,\n                    TUESDAY: false,\n                    WEDNESDAY: false,\n                    THURSDAY: false,\n                    FRIDAY: false,\n                    SATURDAY: false,\n                    SUNDAY: false,\n                    ...newDays\n                });\n\n                let prepSetCheckedClasses = {};\n                if (props.classScheduler) {\n                    props.classScheduler.forEach(classItem => {\n                        prepSetCheckedClasses[`${classItem.id}`] = false;\n                    });\n                }\n                setCheckedClasses({\n                    ...prepSetCheckedClasses,\n                    ...newClasses\n                });\n            }\n        }\n        props.initialize(semesterItem);\n    }, [props.semester.id]);\n\n    return (\n\n        <Card class=\"form-card semester-form\">\n            <h2 style={{ textAlign: 'center' }}>\n                {props.semester.id ? t('edit_title') : t('create_title')}\n                {t('semestry_label')}\n            </h2>\n            {selectedGroups.length===0?\n            <MultiselectForGroups\n                open={openGroupDialog}\n                options={options}\n                value={selected}\n                onChange={setSelected}\n                onCancel={onCancel}\n                onClose={onClose}\n            />:\n                <MultiselectForGroups\n                    open={openGroupDialog}\n                    options={semesterOptions}\n                    value={selectedGroups}\n                    onChange={setSelectedGroups}\n                    onCancel={onCancel}\n                    onClose={onClose}\n                />}\n            <form onSubmit={onSubmit}>\n                <div className=\"semester-checkbox group-options\">\n                    <div>\n                        <Field\n                            name=\"currentSemester\"\n                            label={t('common:current_label')}\n                            labelPlacement=\"start\"\n                            component={renderCheckboxField}\n                            checked={current}\n                            onChange={(e)=>handleChange(e,setCurrent)}\n                            color=\"primary\"\n                        />\n                        <Field\n                            name=\"defaultSemester\"\n                            label={t('common:default_label')}\n                            labelPlacement=\"start\"\n                            component={renderCheckboxField}\n                            checked={byDefault}\n                            onChange={(e)=>handleChange(e,setByDefault)}\n                            color=\"primary\"\n                        />\n                    </div>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className=\"buttons-style \"\n                        onClick={openDialogForGroup}\n                    >\n                        {t('choose_groups_button_label')}\n                    </Button>\n                </div>\n                <Field\n                    className=\"form-field\"\n                    name=\"year\"\n                    type=\"number\"\n                    component={renderTextField}\n                    label={t('year_label') + ':'}\n                    validate={[required, minYearValue]}\n                />\n                <Field\n                    className=\"form-field\"\n                    name=\"description\"\n                    component={renderTextField}\n                    label={t('semester_label') + ':'}\n                    validate={[required]}\n                />\n                <div className=\"form-time-block\">\n                    <Field\n                        className=\"time-input\"\n                        name=\"startDay\"\n                        component={renderMonthPicker}\n                        label={t('class_from_label') + ':'}\n                        validate={[required, lessThanDate]}\n                        minDate={startTime}\n                        onChange={(event, value) => {\n                            if (value) {\n                                setStartValue(value);\n                                setMinFinishDate(value);\n                                setEndTime(value);\n                                setDisabledFinishDate(false)\n                            }\n                        }}\n                    />\n                    <Field\n                        className=\"time-input\"\n                        name=\"endDay\"\n                        component={renderMonthPicker}\n                        label={t('class_to_label') + ':'}\n                        validate={[required, greaterThanDate]}\n                        minDate={finishTime}\n                        disabled={disabledFinishDate}\n                        onChange={(event, value) => {\n                            setFinishValue(value)\n                        }}\n                    />\n                </div>\n                <div className=\"\">\n                    <p>{t('common:days_label') + ': '}</p>\n                    {setSemesterDays()}\n                </div>\n                <div className=\"\">\n                    <p>{t('common:ClassSchedule_management_title') + ': '}</p>\n                    {setSemesterClasses()}\n                </div>\n                <div className=\"form-buttons-container semester-btns\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className=\"buttons-style \"\n                        disabled={pristine || submitting}\n                        type=\"submit\"\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        type=\"button\"\n                        variant=\"contained\"\n                        className=\"buttons-style\"\n                        disabled={setDisableButton(pristine,submitting,semester.id)}\n                        onClick={onReset}\n                    >\n                        {getClearOrCancelTitle(semester.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    semester: state.semesters.semester,\n    classScheduler: state.classActions.classScheduler,\n    groups:state.groups.groups,\n\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SEMESTER_FORM\n    })(AddSemesterForm)\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\n\nimport Button from '@material-ui/core/Button';\nimport { MdPlayArrow } from 'react-icons/md';\n\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport './SemesterCopyForm.scss';\n\nimport { SEMESTER_COPY_FORM } from '../../constants/reduxForms';\nimport { required } from '../../validation/validateFields';\nconst shortid = require('shortid');\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    }\n}));\n\nconst SemesterCopyForm = props => {\n    const classes = useStyles();\n    const { t } = useTranslation('common');\n    const { semesterId, semesters, handleSubmit, pristine, submitting } = props;\n\n    const renderSemesterList = () => {\n        const available_semesters_for_copy = semesters.filter(\n            semester => semester.id !== semesterId\n        );\n        if (available_semesters_for_copy) {\n            if (available_semesters_for_copy.length > 1) {\n                return (\n                    <>\n                        <Field\n                            id=\"toSemesterId\"\n                            name=\"toSemesterId\"\n                            component={renderSelectField}\n                            label={t('formElements:semester_label')}\n                            type=\"text\"\n                            validate={[required]}\n                        >\n                            <option />\n                            {available_semesters_for_copy.map(\n                                (semester, index) => (\n                                    <option\n                                        key={shortid.generate()}\n                                        value={semester.id}\n                                    >\n                                        {semester.description}\n                                    </option>\n                                )\n                            )}\n                        </Field>\n                    </>\n                );\n            } else if (available_semesters_for_copy.length === 1) {\n                return <p>{available_semesters_for_copy[0].description}</p>;\n            }\n        }\n    };\n\n    return (\n        <section className={classes.root}>\n            <p>{t('formElements:semester_copy_hint')}</p>\n            <p className=\"red-color\">\n                {t('formElements:semester_copy_red_hint')}\n            </p>\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-buttons-container\">\n                    {renderSemesterList()}\n                    <Button\n                        className='semester-copy-btn'\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={pristine || submitting}\n                    >\n                        <MdPlayArrow\n                            title={t('teacher_schedule_label')}\n                            className=\"svg-btn\"\n                        />\n                        {props.submitButtonLabel}\n                    </Button>\n                </div>\n            </form>\n        </section>\n    );\n};\n\nconst mapStateToProps = state => ({\n    semesters: state.semesters.semesters\n});\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SEMESTER_COPY_FORM\n    })(SemesterCopyForm)\n);\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './modal.scss';\n\nimport i18n from 'i18next';\nimport { disabledCard } from '../../../constants/disabledCard';\nimport './setDefaultDialog.scss'\nexport const SetChangeDialog = props => {\n    const { onClose, cardId, isHide, open} = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n    const className=\"set-default\";\n    return (\n        <Dialog\n\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">\n                <>\n                    {isHide ? (\n                        <>\n                            {isHide === disabledCard.HIDE ? (\n                                <>{i18n.t('common:do_you_wanna_disable')}</>\n                            ) : (\n                                <>{i18n.t('common:do_you_wanna_show')}</>\n                            )}\n                        </>\n                    ) : (\n                        <>\n                            {i18n.t('common:do_you_wanna')}{' '}\n                            <span className={className}>\n                                {i18n.t(`common:set_default_word`)}\n                            </span>{' '}\n                        </>\n                    )}\n\n                    {i18n.t('common:this_card_type', {\n                        cardType: i18n.t(`formElements:semester_element`)\n                    })}\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => onClose(cardId)}\n                >\n                    {i18n.t('common:yes_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                >\n                    {i18n.t('common:no_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nSetChangeDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default SetChangeDialog;\n","import { connect } from 'react-redux';\nimport { FaEdit, FaUsers } from 'react-icons/fa';\nimport { MdDelete, MdDonutSmall, MdEdit } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\n\nimport './SemesterPage.scss';\nimport Card from '../../share/Card/Card';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport ModalWindow from '../../share/modals/modal/modal';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport SemesterForm from '../../components/SemesterForm/SemesterForm';\nimport SemesterCopyForm from '../../components/SemesterCopyForm/SemesterCopyForm';\nimport {\n    clearSemesterService,\n    getDisabledSemestersService,\n    handleSemesterService,\n    removeSemesterCardService,\n    selectSemesterService,\n    setDisabledSemestersService,\n    setEnabledSemestersService,\n    showAllSemestersService,\n    semesterCopy,\n    createArchiveSemesterService,\n    getArchivedSemestersService,\n    viewArchivedSemester, setDefaultSemesterById, setGroupsToSemester\n} from '../../services/semesterService';\nimport { setScheduleTypeService } from '../../services/scheduleService';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { GiSightDisabled, IoMdEye, FaCopy } from 'react-icons/all';\nimport { FaFileArchive } from 'react-icons/fa';\n\nimport GroupSchedulePage from '../../components/GroupSchedulePage/GroupSchedulePage';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport SetDefaultDialog from '../../share/modals/modal/setDefaultDialog';\nimport SetChangeDialog from '../../share/modals/modal/setDefaultDialog';\nimport { MultiselectForGroups } from '../../helper/MultiselectForGroups';\nimport { showAllGroupsService } from '../../services/groupService';\nimport { successHandler } from '../../helper/handlerAxios';\nimport i18n from '../../helper/i18n';\n\nconst SemesterPage = props => {\n    const { t } = useTranslation('formElements');\n    const [open, setOpen] = useState(false);\n    const [openDefault, setOpenDefault] = useState(false);\n    const [openModal, setOpenModal] = useState(false);\n    const [openGroupsDialog,setOpenGroupsDialog]=useState(false)\n    const [semesterId, setSemesterId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const { isSnackbarOpen, snackbarType, snackbarMessage,semester,groups } = props;\n    const [selected, setSelected] = useState([]);\n    const [selectedGroups,setSelectedGroups]=useState([]);\n    const [semesterOptions,setSemesterOptions]=useState([]);\n    const [edit,setEdit]=useState(false);\n    const getGroupOptions=(groupOptions)=>{\n\n        return groupOptions.map(item=>{return {id:item.id,value:item.id,label:`${item.title}`}});\n    }\n    const options=getGroupOptions(groups.filter(x => !selectedGroups.includes(x)));\n    useEffect(()=>{\n        if(semester.semester_groups!==undefined){\n            setSemesterOptions(getGroupOptions(semester.semester_groups))\n        }\n    },[semester.id])\n    useEffect(() => showAllSemestersService(), []);\n    useEffect(() => {\n        getDisabledSemestersService();\n    }, []);\n    useEffect(() => getArchivedSemestersService(), []);\n    useEffect(()=>showAllGroupsService(),[])\n    const [hideDialog, setHideDialog] = useState(null);\n    const [hideDialogModal, setHideDialogModal] = useState(null);\n    const [disabled, setDisabled] = useState(false);\n    const [archived, setArchived] = useState(false);\n\n    setScheduleTypeService('archived');\n\n    const SearchChange = setTerm;\n    const isEqualsArrObjects = (arr1,arr2) => {\n        const a=[...arr1];\n        const b=[...arr2];\n        if(a.length!==b.length)\n            return false;\n\n            for(let i=0;i<a.length;i++)\n                if(a[i].id!==b[i].id)\n                    return false;\n            return true;\n    }\n    const onChangeGroups=()=>{\n        const beginGroups=semester.semester_groups!==undefined?getGroupOptions(semester.semester_groups):[];\n        const finishGroups=[...semesterOptions];\n        if(isEqualsArrObjects(beginGroups,finishGroups)){\n            successHandler(\n                i18n.t('serviceMessages:group_exist_in_this_semester', {\n                    cardType: i18n.t('common:group_title'),\n                    actionType: i18n.t('serviceMessages:student_label')\n                })\n            );\n            return\n        }\n        setGroupsToSemester(semesterId,semesterOptions);\n        setOpenGroupsDialog(false);\n    }\n    const onCancel = () => {\n        setSemesterOptions(getGroupOptions(semester.semester_groups));\n        setOpenGroupsDialog(false);\n    }\n    const handleFormReset = () => {\n        setSelectedGroups([])\n        clearSemesterService();\n    };\n\n    const submit = (values)=> {\n        const groupsForService=selected.length===0?selectedGroups:selected;\n        const semester_groups=groupsForService.map(group=> {\n           return { id: group.id };\n        })\n        const data={...values,semester_groups}\n        handleSemesterService(data);\n    };\n    const handleEdit = semesterId => selectSemesterService(semesterId);\n    const handleCreateArchive = semesterId =>\n        createArchiveSemesterService(semesterId);\n\n    const searchArr = ['year', 'description', 'startDay', 'endDay'];\n\n    let visibleItems = [];\n    if (disabled) {\n        visibleItems = search(props.disabledSemesters, term, searchArr);\n    } else if (archived) {\n        visibleItems = search(props.archivedSemesters, term, searchArr);\n    } else {\n        visibleItems = search(props.semesters, term, searchArr);\n    }\n\n    const handleClickOpen = semesterId => {\n        setSemesterId(semesterId);\n        setOpen(true);\n    };\n    const handleClickOpenDefault = semesterId => {\n        setSemesterId(semesterId);\n        setOpenDefault(true);\n    };\n    const handleClickOpenModal = semesterId => {\n        setSemesterId(semesterId);\n        setOpenModal(true);\n    };\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n\n    const handleCloseModal = (event, reason) => {\n        setOpenModal(false);\n        setHideDialogModal(null);\n        if (reason === 'clickaway') return;\n    };\n\n    const handleClose = semesterId => {\n        const setDelete=open;\n        const setDefault=openDefault;\n        setOpen(false);\n        setOpenDefault(false);\n        if (!semesterId) return;\n        if (hideDialog) {\n            if (disabled) {\n                const semester = props.disabledSemesters.find(\n                    semester => semester.id === semesterId\n                );\n                setEnabledSemestersService(semester);\n            } else {\n                const semester = props.semesters.find(\n                    semester => semester.id === semesterId\n                );\n                setDisabledSemestersService(semester);\n            }\n        } else if(setDelete) {\n            removeSemesterCardService(semesterId);\n        }\n        else if(setDefault){\n           setDefaultSemesterById(semesterId)\n        }\n        setHideDialog(null);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n        setArchived(false);\n    };\n\n    const showArchivedHandler = () => {\n        setArchived(!archived);\n        !archived === true\n            ? setScheduleTypeService('archived')\n            : setScheduleTypeService('default');\n        setDisabled(false);\n    };\n    const handleSemesterCopySubmit = values => {\n        semesterCopy({\n            fromSemesterId: +semesterId,\n            toSemesterId: +values.toSemesterId\n        });\n        setOpenModal(false);\n        setHideDialogModal(null);\n    };\n\n    const handleSemesterArchivedPreview = semesterId => {\n        viewArchivedSemester(+semesterId);\n    };\n    const setClassNameForDefaultSemester=semester=>{\n        const defaultSemesterName=\"default\";\n        const className=\"svg-btn edit-btn\";\n        return semester.defaultSemester===true?`${className} ${defaultSemesterName}`:className;\n    }\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.SEMESTER_PAGE} val={navigation.SEMESTERS}/>\n            <ConfirmDialog\n                cardId={semesterId}\n                whatDelete={'semester'}\n                isHide={hideDialog}\n                open={open}\n                onClose={handleClose}\n            />\n            <SetChangeDialog\n                cardId={semesterId}\n                isHide={hideDialog}\n                open={openDefault}\n                onClose={handleClose}\n            />\n            <ModalWindow\n                whatDelete={'semester'}\n                isHide={hideDialogModal}\n                open={openModal}\n                onClose={handleCloseModal}\n                windowTitle={t('semester_copy_label')}\n                isOkButton={false}\n                isNoButton={true}\n                noButtonLabel={t('close_label')}\n            >\n                <SemesterCopyForm\n                    semesterId={semesterId}\n                    onSubmit={handleSemesterCopySubmit}\n                    submitButtonLabel={t('copy_label')}\n                />\n            </ModalWindow>\n            <div className=\"cards-container\">\n                <aside className=\"search-list__panel\">\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                        showArchived={showArchivedHandler}\n                    />\n                    {disabled || archived ? (\n                        ''\n                    ) :\n                        <SemesterForm\n                            selectedGroups={selectedGroups}\n                            setSelectedGroups={setSelectedGroups}\n                            selected={selected}\n                            setSelected={setSelected}\n                            className=\"form\"\n                            onSubmit={submit}\n                            onReset={handleFormReset}\n                            semester={edit?semester:{}}\n\n                        />\n                    }\n                </aside>\n                <section className=\"container-flex-wrap wrapper\">\n                    {visibleItems.length === 0 && (\n                        <NotFound name={t('semestry_label')} />\n                    )}\n                    {visibleItems.map((semester, index) => {\n                        const sem_days = [];\n\n                        semester.semester_days.forEach(day =>\n                            sem_days.push(t(`common:day_of_week_${day}`))\n                        );\n                        return (\n                            <Card\n                                key={index}\n                                class={`semester-card done-card ${\n                                    semester.currentSemester ? 'current' : ''\n                                }`}\n                            >\n                                <div className=\"cards-btns\">\n                                    {!disabled && !archived ? (\n                                        <>\n                                            <GiSightDisabled\n                                                className=\"svg-btn copy-btn\"\n                                                title={t('common:set_disabled')}\n                                                onClick={() => {\n                                                    setHideDialog(\n                                                        disabledCard.HIDE\n                                                    );\n                                                    handleClickOpen(\n                                                        semester.id\n                                                    );\n                                                }}\n                                            />\n                                            <FaEdit\n                                                className=\"svg-btn edit-btn\"\n                                                title={t('edit_title')}\n                                                onClick={() => {\n                                                    handleEdit(semester.id);\n                                                    setEdit(true);\n                                                }\n\n                                                }\n                                            />\n                                            <FaCopy\n                                                className=\"svg-btn copy-btn\"\n                                                title={t('copy_label')}\n                                                onClick={() => {\n                                                    handleClickOpenModal(\n                                                        semester.id\n                                                    );\n                                                }}\n                                            />\n                                            {semester.currentSemester ? (\n                                                ''\n                                            ) : (\n                                                <FaFileArchive\n                                                    className=\"svg-btn archive-btn\"\n                                                    title={t(\n                                                        'common:make_archive'\n                                                    )}\n                                                    onClick={() => {\n                                                        handleCreateArchive(\n                                                            semester.id\n                                                        );\n                                                    }}\n                                                />\n                                            )}\n                                        </>\n                                    ) : !archived ? (\n                                        <IoMdEye\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_enabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.SHOW\n                                                );\n                                                handleClickOpen(semester.id);\n                                            }}\n                                        />\n                                    ) : (\n                                        <IoMdEye\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:preview')}\n                                            onClick={() => {\n                                                handleSemesterArchivedPreview(\n                                                    semester.id\n                                                );\n                                            }}\n                                        />\n                                    )}\n                                    <MdDelete\n                                        className=\"svg-btn delete-btn\"\n                                        title={t('delete_title')}\n                                        onClick={() =>\n                                            handleClickOpen(semester.id)\n                                        }\n                                    />\n\n                                        <MdDonutSmall\n                                            className={setClassNameForDefaultSemester(semester)}\n                                            title={t('set_default_title')}\n                                            onClick={() =>\n                                                handleClickOpenDefault(semester.id)\n                                            }\n                                        />\n\n\n                                </div>\n\n                                <p className=\"semester-card__description\">\n                                    <small>{t('semester_label') + ':'}</small>\n                                    <b>{semester.description}</b>\n                                    {' ( ' + semester.year + ' )'}\n                                </p>\n                                <p className=\"semester-card__description\">\n                                    <b>\n                                        {semester.startDay} - {semester.endDay}\n                                    </b>\n                                </p>\n                                <p className=\"semester-card__description\">\n                                    {t('common:days_label') + ': '}\n                                    {sem_days.join(', ')}\n                                </p>\n                                <p className=\"semester-card__description\">\n                                    {t(\n                                        'common:ClassSchedule_management_title'\n                                    ) + ': '}\n                                    {semester.semester_classes\n                                        .map(classItem => {\n                                            return classItem.class_name;\n                                        })\n                                        .join(', ')}\n                                </p>\n\n                                <FaUsers\n                                    title={t('formElements:show_groups')}\n                                    className=\"svg-btn copy-btn  semester-groups\"\n                                    onClick={\n                                        ()=> {\n                                            setSemesterId(semester.id);\n                                            selectSemesterService(semester.id)\n                                            setOpenGroupsDialog(true)\n                                        }\n                                    }\n                                />\n                            </Card>\n\n                        );\n                    })}\n                </section>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n            <GroupSchedulePage scheduleType=\"archived\" />\n            <MultiselectForGroups\n                open={openGroupsDialog}\n                options={options}\n                value={semesterOptions}\n                onChange={setSemesterOptions}\n                onCancel={onCancel}\n                onClose={onChangeGroups}\n            />\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    semesters: state.semesters.semesters,\n    semester: state.semesters.semester,\n    disabledSemesters: state.semesters.disabledSemesters,\n    archivedSemesters: state.semesters.archivedSemesters,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message,\n    groups:state.groups.groups,\n});\n\nexport default connect(mapStateToProps, {})(SemesterPage);\n","import axios from '../helper/axios';\nimport { store } from '../index';\n\nimport {\n    MERGE_USER_AND_TEACHER_URL,\n    USERS_URL,\n    USER_PROFILE,\n    UPDATE_USER_PROFILE\n} from '../constants/axios';\nimport { setUsers, setUser, setTeacher } from '../redux/actions/index';\n\nimport i18n from '../helper/i18n';\nimport { setLoadingService } from './loadingService';\nimport { getTeachersWithoutAccount } from './teacherService';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\n\nexport const getUsersService = () => {\n    axios\n        .get(USERS_URL)\n        .then(response => {\n            store.dispatch(setUsers(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getUserProfile = () => {\n    axios\n        .get(USER_PROFILE)\n        .then(response => {\n            store.dispatch(setUser(response.data));\n            if (response.data.teacher_name) {\n                store.dispatch(\n                    setTeacher({\n                        id: 15,\n                        name: response.data.teacher_name,\n                        surname: response.data.teacher_surname,\n                        patronymic: response.data.teacher_patronymic,\n                        position: response.data.teacher_position\n                    })\n                );\n            }\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const updateUserPassword = values => {\n    axios\n        .put(UPDATE_USER_PROFILE, {\n            current_password: values.current_password,\n            new_password: values.new_password\n        })\n        .then(response => {\n            store.dispatch(setUser(response.data));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_label'),\n                    actionType: i18n.t('serviceMessages:updated')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const updateUserTeacher = values => {\n    axios\n        .put(UPDATE_USER_PROFILE, {\n            teacher_name: values.name,\n            teacher_surname: values.surname,\n            teacher_patronymic: values.patronymic,\n            teacher_position: values.position\n        })\n        .then(response => {\n            store.dispatch(setUser(response.data));\n            store.dispatch(\n                setTeacher({\n                    id: 15,\n                    name: response.data.teacher_name,\n                    surname: response.data.teacher_surname,\n                    patronymic: response.data.teacher_patronymic,\n                    position: response.data.teacher_position\n                })\n            );\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:user_label'),\n                    actionType: i18n.t('serviceMessages:updated')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const mergeUserAndTeacherService = mergeObj => {\n    axios\n        .put(MERGE_USER_AND_TEACHER_URL, mergeObj)\n        .then(response => {\n            getTeachersWithoutAccount();\n            getUsersService();\n            setLoadingService(false);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:user_label'),\n                    actionType: i18n.t('serviceMessages:successfully_merged')\n                })\n            );\n        })\n        .catch(error => {\n            setLoadingService(false);\n            errorHandler(error);\n        });\n};\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    getUsersService,\n    mergeUserAndTeacherService\n} from '../../services/userService';\nimport { getTeachersWithoutAccount } from '../../services/teacherService';\nimport { setLoadingService } from '../../services/loadingService';\n\n\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from '@material-ui/core';\n\nimport Card from '../../share/Card/Card';\n\nimport './MergeRolePage.scss';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst useStyles = makeStyles(() => ({\n    autoCompleteField: {\n        '&': {\n            display: 'inline-block',\n            margin: '0 10px 10px 0',\n            width: 200\n        }\n    }\n}));\n\nconst MergeRolePage = props => {\n    const { t } = useTranslation('common');\n\n    const [teacher, setTeacher] = useState(null);\n    const [user, setUser] = useState(null);\n\n    const classes = useStyles();\n\n    const teachers = props.teachers;\n    const users = props.users;\n\n    useEffect(() => getTeachersWithoutAccount(), []);\n    useEffect(() => getUsersService(), []);\n\n    const defaultPropsTeachers = {\n        options: teachers,\n        getOptionLabel: option =>\n            option\n                ? option.position +\n                  ' ' +\n                  option.surname +\n                  ' ' +\n                  option.name +\n                  ' ' +\n                  option.patronymic\n                : ''\n    };\n\n    const defaultPropsUsers = {\n        options: users,\n        getOptionLabel: option => (option ? option.email : '')\n    };\n\n    const mergeUserAndTeacherHandle = () => {\n        if (!user || !teacher) return;\n        mergeUserAndTeacherService({ teacherId: teacher.id, userId: user.id });\n        setUser(null);\n        setTeacher(null);\n        setLoadingService(true);\n    };\n\n    return (\n        <>\n            <NavigationPage  val={navigation.USERS}/>\n            <div className=\"merge-role-form\">\n                <Card class=\"merge-role-card\">\n                    <h2 className=\"under-line\">{t('merge_header')}</h2>\n                    {props.loading ? (\n                        <CircularProgress />\n                    ) : (\n                        <>\n                            <div className=\"autocomplete-group\">\n                                <Autocomplete\n                                    {...defaultPropsTeachers}\n                                    clearOnEscape\n                                    openOnFocus\n                                    className={classes.autoCompleteField}\n                                    onChange={(event, newValue) => {\n                                        setTeacher(newValue);\n                                    }}\n                                    renderInput={params => (\n                                        <TextField\n                                            {...params}\n                                            label={t(\n                                                'formElements:teacher_label'\n                                            )}\n                                            margin=\"normal\"\n                                        />\n                                    )}\n                                />\n                                <Autocomplete\n                                    {...defaultPropsUsers}\n                                    clearOnEscape\n                                    openOnFocus\n                                    className={classes.autoCompleteField}\n                                    onChange={(event, newValue) => {\n                                        setUser(newValue);\n                                    }}\n                                    renderInput={params => (\n                                        <TextField\n                                            {...params}\n                                            label={t('formElements:user_label')}\n                                            margin=\"normal\"\n                                        />\n                                    )}\n                                />\n                            </div>\n                            <Button\n                                className=\"merge-btn\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => mergeUserAndTeacherHandle()}\n                            >\n                                {t('formElements:merge_button')}\n                            </Button>\n                        </>\n                    )}\n                </Card>\n            </div>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    teachers: state.teachers.teachers,\n    users: state.users.users,\n    loading: state.loadingIndicator.loading\n});\n\nexport default connect(mapStateToProps)(MergeRolePage);\n","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { connect } from 'react-redux';\n\nimport './ChangePasswordForm.scss';\n\nimport renderTextField from '../../share/renderedFields/input';\n\nimport Button from '@material-ui/core/Button';\n\nimport { required, password } from '../../validation/validateFields';\n\nimport { PROFILE_FORM } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\nimport NavigationPage from '../Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nlet ChangePasswordForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting } = props;\n\n    return (\n        <>\n            <NavigationPage  val={navigation.CHANGES}/>\n        <form onSubmit={handleSubmit}>\n            <h3 className=\"form-title\">{t('change_password_form_title')}</h3>\n            <Field\n                component={renderTextField}\n                className=\"form-field\"\n                name=\"current_password\"\n                id=\"current_password\"\n                label={t('password_label')}\n                type=\"password\"\n                validate={[required, password]}\n            />\n            <Field\n                component={renderTextField}\n                className=\"form-field\"\n                name=\"new_password\"\n                id=\"new_password\"\n                label={t('new_password_label')}\n                type=\"password\"\n                validate={[required, password]}\n            />\n            <Field\n                component={renderTextField}\n                className=\"form-field\"\n                name=\"confirm_password\"\n                id=\"confirm_password\"\n                label={t('retype_password_label')}\n                type=\"password\"\n                validate={[required, password]}\n            />\n\n            <div className=\"form-buttons-container\">\n                <Button\n                    className=\"buttons-style\"\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={pristine || submitting}\n                >\n                    {t('save_button_label')}\n                </Button>\n                <Button\n                    className=\"buttons-style\"\n                    type=\"button\"\n                    variant=\"contained\"\n                    disabled={pristine || submitting}\n                    onClick={onReset}\n                >\n                    {t('clear_button_label')}\n                </Button>\n            </div>\n        </form>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: PROFILE_FORM\n    })(ChangePasswordForm)\n);\n","import React, { useEffect, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport Card from '../../share/Card/Card';\nimport './BusyRooms.scss';\nimport { useTranslation } from 'react-i18next';\nimport { getScheduleItemsService } from '../../services/scheduleService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { CircularProgress } from '@material-ui/core';\nimport { setLoadingService } from '../../services/loadingService';\nimport AdminPage from '../AdminPage/AdminPage';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst BusyRooms = props => {\n    const { t } = useTranslation('common');\n\n    useEffect(() => getScheduleItemsService(), []);\n    useEffect(() => {\n        getClassScheduleListService();\n        setLoadingService(true);\n    }, []);\n\n    const busyRooms = props.busyRooms[0];\n\n    const isLoading = props.loading;\n\n    let conflictLesson = 'more-then-one-conflict';\n    let grouppedLesson = 'more-then-one';\n\n    let busyRoomsLength;\n\n    if (busyRooms !== undefined) {\n        busyRoomsLength = busyRooms.length;\n    }\n\n    const renderRoomTitle = (name, type) => (\n        <h3 className=\"room-heading\">\n            <span className=\"room-name\">{name}</span>\n            <span className=\"room-type\">{type}</span>\n        </h3>\n    );\n\n    const renderWeekRoomInfo = (schedule, index, type = 'odd') => {\n        return props.currentSemester.semester_classes.map(scheduleClass => {\n            let in_arrayIndex = -1;\n            in_arrayIndex =\n                type === 'odd'\n                    ? schedule.classes[0].odd.findIndex(\n                          classItem => classItem.class_id === scheduleClass.id\n                      )\n                    : schedule.classes[0].even.findIndex(\n                          classItem => classItem.class_id === scheduleClass.id\n                      );\n            let classOne =\n                type === 'odd'\n                    ? schedule.classes[0].odd.find(\n                          classItem => classItem.class_id === scheduleClass.id\n                      )\n                    : schedule.classes[0].even.find(\n                          classItem => classItem.class_id === scheduleClass.id\n                      );\n            if (\n                in_arrayIndex < 0 ||\n                !classOne ||\n                classOne.lessons.length <= 0\n            ) {\n                return (\n                    <div\n                        className=\"class-info\"\n                        key={index + scheduleClass.class_name}\n                    >\n                        <div className=\"class-info-data class-number\">\n                            {scheduleClass.class_name}\n                        </div>\n                        <div className=\"class-info-data\">\n                            <div className=\"green-free\"></div>\n                        </div>\n                    </div>\n                );\n            } else {\n                let intersectClass = '';\n                if (\n                    classOne &&\n                    classOne.lessons &&\n                    classOne.lessons.length > 1\n                ) {\n                    intersectClass = conflictLesson;\n                }\n                let grouppedLessonClass = '';\n                classOne.lessons.map(lessonOne => {\n                    grouppedLessonClass =\n                        lessonOne.groups.length > 1 ? grouppedLesson : '';\n                });\n                return (\n                    <div\n                        className=\"class-info\"\n                        key={index + classOne.class_name + classOne.group_name}\n                    >\n                        <div className=\"class-info-data class-number\">\n                            {classOne.class_name}\n                        </div>\n                        <div\n                            className={`class-info-data group-height ${grouppedLessonClass}${intersectClass}`}\n                        >\n                            {classOne.lessons.map(lessonOne => {\n                                return lessonOne.groups.map(groupItem => {\n                                    const hoverInfo =\n                                        lessonOne.teacher_for_site +\n                                        lessonOne.subject_for_site;\n                                    return (\n                                        <p\n                                            title={hoverInfo}\n                                            key={hoverInfo + lessonOne.name}\n                                        >\n                                            {groupItem.group_name}\n                                        </p>\n                                    );\n                                });\n                            })}\n                        </div>\n                    </div>\n                );\n            }\n        });\n    };\n\n    const renderRoomDay = (schedule, index) => (\n        <section className=\"room-day\" key={index + schedule.day}>\n            <h3 className=\"room-heading\">{t(`day_of_week_${schedule.day}`)}</h3>\n            <section>\n                <Fragment key={index}>\n                    <div className=\"even-odd-week\">\n                        <span className=\"even-odd-heading\">\n                            {t('week_odd_title')}\n                        </span>\n                        {renderWeekRoomInfo(schedule, index, 'odd')}\n                    </div>\n                    <div className=\"even-odd-week\">\n                        <span className=\"even-odd-heading\">\n                            {t('week_even_title')}\n                        </span>\n                        {renderWeekRoomInfo(schedule, index, 'even')}\n                    </div>\n                </Fragment>\n            </section>\n        </section>\n    );\n    return (\n        <div className=\"busy-rooms-container\">\n            {isLoading ? (\n                <h2 className=\"busy-heading\">\n                    <CircularProgress />\n                </h2>\n            ) : (\n                <>\n\n                    {busyRoomsLength > 0 ? (\n                        <>\n                            <NavigationPage val={navigation.BUSY_ROOMS}/>\n                            <h2 className=\"busy-heading\">\n                                {t('busy_rooms_heading')}\n                            </h2>\n                            <section className=\"view-rooms\">\n                                {busyRooms.map(busyRoom => (\n                                    <Card\n                                        class=\"busy-room\"\n                                        key={busyRoom.room_id}\n                                    >\n                                        {renderRoomTitle(\n                                            busyRoom.room_name,\n                                            busyRoom.room_type\n                                        )}\n\n                                        {busyRoom.schedules.map(\n                                            (schedule, index) => {\n                                                return props.currentSemester.semester_days.includes(\n                                                    schedule.day\n                                                )\n                                                    ? renderRoomDay(\n                                                          schedule,\n                                                          index\n                                                      )\n                                                    : '';\n                                            }\n                                        )}\n                                    </Card>\n                                ))}\n                            </section>\n                        </>\n                    ) : (\n                        <>\n                            <h2 className=\"busy-heading\">\n                                <CircularProgress />\n                            </h2>\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    busyRooms: state.busyRooms.busyRooms,\n    loading: state.loadingIndicator.loading,\n    currentSemester: state.schedule.currentSemester\n});\n\nexport default connect(mapStateToProps, {})(BusyRooms);\n","import TeacherList from '../containers/TeachersList/TeachersList';\nimport GroupList from '../containers/GroupList/GroupList';\nimport RoomList from '../containers/RoomList/RoomList';\nimport SubjectPage from '../containers/SubjectPage/SubjectPage';\nimport SemesterPage from '../containers/SemesterPage/SemesterPage';\nimport MergeRolePage from '../containers/MergeRolePage/MergeRolePage';\nimport Changes from '../components/ChangePasswordForm/ChangePasswordForm';\nimport BusyRooms from '../containers/BusyRooms/BusyRooms';\nimport React from 'react';\nexport const navigation={\n    \"LESSONS\":0,\n    \"USERS\":1,\n    \"CHANGES\":2,\n    \"BUSY_ROOMS\":3,\n    \"PERIOD\":4,\n    \"DEPARTMENTS\":5,\n    \"GROUPS\":6,\n    \"ROOMS\":7,\n    \"SUBJECTS\":8,\n    \"SEMESTERS\":9,\n    \"TEACHERS\":10,\n}\nexport const navigationNames={\n    TEACHER_LIST:'TeacherList',\n    GROUP_LIST:'GroupList',\n    CLASS_SCHEDULE_TITLE:'ClassScheduleTitle',\n    ROOM_LIST:'RoomList',\n    SUBJECT_PAGE:'SubjectPage',\n    SEMESTER_PAGE:'SemesterPage',\n    DEPARTMENTS:'Departments',\n    LESSON_PAGE:'LessonPage',\n    MERGE_ROLE_PAGE:'MergeRolePage',\n    CHANGES:'Changes',\n    BUSY_ROOMS:'BusyRooms',\n    GENERAL:\"General\"\n}\n","import React, { useRef } from \"react\";\nimport ReactSelect from \"react-select\";\nimport { Dialog, DialogTitle } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Select from 'react-select';\nimport i18n from 'i18next';\nimport '../helper/multiselect.scss'\nimport { useTranslation } from 'react-i18next';\nexport const MultiSelect = props => {\n    const { t } = useTranslation('common');\n    const valueRef = useRef(props.value);\n    valueRef.current = props.value;\n    const {open,defaultSemester,semesters}=props;\n\n    const selectAllOption = {\n        value: \"<SELECT_ALL>\",\n        label: t('all_teachers')\n    };\n\n    const isSelectAllSelected = () =>\n        valueRef.current.length === props.options.length;\n\n    const isOptionSelected = option =>\n        valueRef.current.some(({ value }) => value === option.value) ||\n        isSelectAllSelected();\n\n    const getOptions = () => [selectAllOption, ...props.options];\n\n    const getValue = () =>\n        isSelectAllSelected() ? [selectAllOption] : props.value;\n\n    const onChange = (newValue, actionMeta) => {\n        const { action, option, removedValue } = actionMeta;\n\n        if (action === \"select-option\" && option.value === selectAllOption.value) {\n            props.onChange(props.options, actionMeta);\n        }\n        else if (\n            (action === \"deselect-option\" &&\n                option.value === selectAllOption.value) ||\n            (action === \"remove-value\" &&\n                removedValue.value === selectAllOption.value)\n        ) {\n            props.onChange([], actionMeta);\n        } else if (\n            actionMeta.action === \"deselect-option\" &&\n            isSelectAllSelected()\n        ) {\n            props.onChange(\n                props.options.filter(({ value }) => value !== option.value),\n                actionMeta\n            );\n        } else {\n            props.onChange(newValue || [], actionMeta);\n        }\n    };\n   const handleChange = (newValue, actionMeta) => {\n        props.onChangeSemesterValue(newValue);\n    };\n\n    return (\n\n        <Dialog id=\"select-dialog\"\n\n                disableBackdropClick={true}\n                aria-labelledby=\"confirm-dialog-title\"\n                open={open}\n        >\n            <DialogTitle id=\"select-dialog-title\" className=\"confirm-dialog\">\n        <ReactSelect\n            isOptionSelected={isOptionSelected}\n            options={getOptions()}\n            value={getValue()}\n            onChange={onChange}\n            hideSelectedOptions={false}\n            closeMenuOnSelect={false}\n            isMulti\n            placeholder={t('choose_teachers')}\n        />\n                <Select\n                    defaultValue={defaultSemester}\n                    options={semesters}\n                    onChange={handleChange}\n                />\n\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={props.onCancel}\n                >\n                    {t('cancel_schedule')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={props.onSentTeachers}\n                    disabled={!props.isEnabledSentBtn}\n                >\n                    {t('sent_schedule')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport AddTeacherForm from '../../components/AddTeacherForm/AddTeacherForm';\nimport Card from '../../share/Card/Card';\n\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\n\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport Button from '@material-ui/core/Button';\n\nimport './TeachersList.scss';\n\nimport { connect } from 'react-redux';\nimport {\n    getCurrentSemesterService,\n    getDefaultSemesterService,\n    sendTeachersScheduleService, showAllPublicSemestersService\n} from '../../services/scheduleService';\nimport {\n    getDisabledTeachersService,\n    handleTeacherService,\n    removeTeacherCardService,\n    selectTeacherCardService,\n    setDisabledTeachersService,\n    setEnabledTeachersService,\n    showAllTeachersService\n} from '../../services/teacherService';\n\nimport { useTranslation } from 'react-i18next';\nimport { search } from '../../helper/search';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport NotFound from '../../share/NotFound/NotFound';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { getPublicClassScheduleListService } from '../../services/classService';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport Multiselect, { MultiSelect } from '../../helper/multiselect';\nimport Example from '../../helper/multiselect';\nimport { getFirstLetter, getTeacherFullName } from '../../helper/renderTeacher';\nimport { showAllSemestersService } from '../../services/semesterService';\nimport { clearDepartment, getAllDepartmentsService, getDepartmentByIdService } from '../../services/departmentService';\nimport { clearDepartmentForm, getDepartItemById } from '../../redux/actions/departments';\nimport { getShortTitle } from '../../helper/shortTitle';\nimport i18n from 'i18next';\n\nconst TeacherList = props => {\n    const { t } = useTranslation('common');\n\n    const [open, setOpen] = useState(false);\n    const [teacherCardId, setTeacherId] = useState();\n    const [term, setTerm] = useState('');\n    const [disabled, setDisabled] = useState(false);\n    const [hideDialog, setHideDialog] = useState(null);\n    const [openSelect, setOpenSelect] = useState(false);\n\n\n    useEffect(() => showAllTeachersService(), []);\n    useEffect(() => getDisabledTeachersService(), []);\n    useEffect(() => getPublicClassScheduleListService(), []);\n    useEffect(() => getDefaultSemesterService(), []);\n    useEffect(() => getCurrentSemesterService(), []);\n    useEffect(() => showAllPublicSemestersService(), []);\n    useEffect(() => showAllSemestersService(), []);\n    useEffect(() => getAllDepartmentsService(), []);\n    const { teachers, disabledTeachers, currentSemester, semesters, defaultSemester, departments, department } = props;\n\n    const setOptions = () => {\n        return teachers.map(item => {\n            return {\n                id: item.id,\n                value: item.id,\n                label: `${item.surname} ${getFirstLetter(item.name)} ${getFirstLetter(item.patronymic)}`\n            };\n        });\n    };\n    const setSemesterOptions = () => {\n        return semesters !== undefined ? semesters.map(item => {\n            return { id: item.id, value: item.id, label: `${item.description}` };\n        }) : null;\n\n    };\n    const parseDefaultSemester = () => {\n        return { id: defaultSemester.id, value: defaultSemester.id, label: `${defaultSemester.description}` };\n    };\n    const setDepartmentOptions = () => {\n        return departments.map(item => {\n            return { id: item.id, value: item.id, label: `${item.name}` };\n        });\n    };\n\n    const teacherLength = disabled ? disabledTeachers.length : teachers.length;\n    const [selected, setSelected] = useState([]);\n    const [selectedSemester, setSelectedSemester] = useState('');\n    const options = setOptions();\n    const semesterOptions = setSemesterOptions();\n    const departmentOptions = setDepartmentOptions();\n    const teacherSubmit = values => {\n\n        const sendData = { ...values, department: department };\n\n        handleTeacherService(sendData);\n        clearDepartment();\n\n    };\n\n    const selectTeacherCard = teacherCardId => {\n        selectTeacherCardService(teacherCardId);\n    };\n\n    const removeTeacherCard = id => {\n        removeTeacherCardService(id);\n    };\n\n    const handleClickOpen = teacherCardId => {\n        setTeacherId(teacherCardId);\n        setOpen(true);\n    };\n\n    const handleClose = teacherCardId => {\n        setOpen(false);\n        if (!teacherCardId) {\n            return;\n        }\n        if (hideDialog) {\n            if (disabled) {\n                const teacher = disabledTeachers.find(\n                    teacher => teacher.id === teacherCardId\n                );\n                setEnabledTeachersService(teacher);\n            } else {\n                const teacher = teachers.find(\n                    teacher => teacher.id === teacherCardId\n                );\n                setDisabledTeachersService(teacher);\n            }\n        } else {\n            removeTeacherCard(teacherCardId);\n        }\n        setHideDialog(null);\n    };\n    const handleCloseSending = scheduleId => {\n        setOpenSelect(false);\n    };\n    const [teacher, setTeacher] = useState(0);\n\n\n    const visibleItems = disabled\n        ? search(disabledTeachers, term, ['name', 'surname', 'patronymic'])\n        : search(teachers, term, ['name', 'surname', 'patronymic']);\n\n    const SearchChange = term => {\n        setTerm(term);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    const handleToUpperCase = str => {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    };\n    const cancelSelection = () => {\n        clearSelection();\n        closeSelectionDialog();\n    };\n    const sendTeachers = () => {\n        closeSelectionDialog();\n        const teachersId = selected.map(item => {\n            return item.id;\n        });\n        const semesterId = selectedSemester === '' ? defaultSemester.id : selectedSemester.id;\n        const { language } = i18n;\n        const data = { semesterId, teachersId, language };\n        sendTeachersScheduleService(data);\n        clearSelection();\n    };\n    const closeSelectionDialog = () => {\n        setOpenSelect(false);\n    };\n    const clearSelection = () => {\n        setSelected([]);\n    };\n    const isChosenSelection = () => {\n        return selected.length !== 0;\n    };\n    const getTeacherTitle = (title) => {\n        const MAX_LENGTH = 30;\n        return getShortTitle(title, MAX_LENGTH);\n    };\n    return (\n        <>\n            <NavigationPage name={navigationNames.TEACHER_LIST} val={navigation.TEACHERS} />\n            <div className='cards-container'>\n\n                <ConfirmDialog\n                    cardId={teacherCardId}\n                    whatDelete={cardType.TEACHER}\n                    open={open}\n                    isHide={hideDialog}\n                    onClose={handleClose}\n                />\n\n\n                <aside className='form-with-search-panel'>\n\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    <Button\n                        className='send-button'\n                        variant='contained'\n                        color='primary'\n                        onClick={() => {\n                            setOpenSelect(true);\n                        }}\n                    >\n                        {t('send_schedule_for_teacher')}\n                    </Button>\n                    <>\n                        <MultiSelect open={openSelect}\n                                     options={options}\n                                     value={selected}\n                                     onChange={setSelected}\n                                     onCancel={cancelSelection}\n                                     onSentTeachers={sendTeachers}\n                                     isEnabledSentBtn={isChosenSelection()}\n                                     semesters={semesterOptions}\n                                     defaultSemester={parseDefaultSemester()}\n                                     onChangeSemesterValue={setSelectedSemester}\n\n                        />\n                    </>\n\n                    {disabled ? (\n                        ''\n                    ) : (\n                        <AddTeacherForm\n                            departments={departmentOptions}\n                            teachers={teachers}\n                            onSubmit={teacherSubmit}\n                            onSetSelectedCard={selectTeacherCard}\n                        />\n                    )}\n                </aside>\n\n                <section className='container-flex-wrap'>\n                    {visibleItems.length === 0 && (\n                        <NotFound name={t('formElements:teacher_a_label')} />\n                    )}\n                    {teacherLength > 0 ? (\n                        visibleItems.map((teacher, index) => (\n                            <Card\n                                key={index}\n                                {...teacher}\n                                class='teacher-card done-card'\n                            >\n                                <div className='cards-btns'>\n                                    {!disabled ? (\n                                        <>\n                                            <GiSightDisabled\n                                                className='svg-btn copy-btn'\n                                                title={t('common:set_disabled')}\n                                                onClick={() => {\n                                                    setHideDialog(\n                                                        disabledCard.HIDE\n                                                    );\n                                                    handleClickOpen(teacher.id);\n                                                }}\n                                            />\n                                            <FaEdit\n                                                className='svg-btn edit-btn'\n                                                title={t('common:edit_hover_title')}\n                                                onClick={() =>\n                                                    selectTeacherCard(teacher.id)\n                                                }\n                                            />\n                                        </>\n                                    ) : (\n                                        <IoMdEye\n                                            className='svg-btn copy-btn'\n                                            title={t('common:set_enabled')}\n                                            onClick={() => {\n                                                setHideDialog(disabledCard.SHOW);\n                                                handleClickOpen(teacher.id);\n                                            }}\n                                        />\n                                    )}\n                                    <MdDelete\n                                        className='svg-btn delete-btn'\n                                        title={t('common:delete_hover_title')}\n                                        onClick={() => handleClickOpen(teacher.id)}\n                                    />\n                                </div>\n\n                                <p className='teacher-subtitle'>\n                                    {t('teacher_card_fullName')}\n                                </p>\n                                <h2 className='teacher-card-name'>\n                                    {getTeacherTitle(getTeacherFullName(teacher))}\n                                </h2>\n                                <p className='teacher-subtitle'>\n                                    {t('teacher_card_position')}\n                                </p>\n                                <p className='teacher-card-title'>\n                                    {teacher.position}\n                                </p>\n\n                            </Card>\n                        ))\n                    ) : (\n                        <h2>{t('teacher_card_no_cards')}</h2>\n                    )}\n                </section>\n            </div>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    teachers: state.teachers.teachers,\n    disabledTeachers: state.teachers.disabledTeachers,\n    classScheduler: state.classActions.classScheduler,\n    currentSemester: state.schedule.currentSemester,\n    defaultSemester: state.schedule.defaultSemester,\n    semesters: state.schedule.semesters,\n    departments: state.departments.departments,\n    department: state.departments.department\n});\n\nexport default connect(mapStateToProps, {})(TeacherList);\n","\n// import Multiselect from 'react-widgets/Multiselect'\n// import React from 'react'\n// export const renderMultiselect = ({ input, data, valueField, textField, placeholder,\n//                                       meta: { touched, invalid, error } }) =>\n//     <>\n//         <Multiselect {...input}\n//                      onBlur={() => input.onBlur()}\n//                      value={input.value || []}\n//                      data={data}\n//                      valueField={valueField}\n//                      textField={textField}\n//                      placeholder={placeholder}\n//         />\n//\n//     </>\nimport Multiselect from 'multiselect-react-dropdown'\nimport React, { useEffect } from 'react';\nexport let RenderMultiselect = ({ input, options, hidePlaceholder, placeholder,\n                                      displayValue,selectedValues,alwaysDisplayedItem,\n                                      meta: { touched, invalid, error } }) => {\n\nuseEffect(()=> {\n    input.onChange([alwaysDisplayedItem])\n    console.log(alwaysDisplayedItem);\n},[alwaysDisplayedItem.id]);\n    return(<>\n\n        <Multiselect {...input}\n                     onBlur={() => input.onBlur()}\n                     onSelect={(e) => input.onChange([...e])}\n                     onRemove={(e) => input.onChange([...e])}\n            // selectedValues={input.value || []}\n                     options={options}\n                     displayValue={displayValue}\n                     placeholder={placeholder}\n                     hidePlaceholder={hidePlaceholder}\n                     selectedValues={selectedValues}\n                     preSelectedValues={selectedValues}\n                     disablePreSelectedValues={true}\n\n        />\n\n    </>);\n};","import React, { useEffect, useState } from 'react';\n\nimport Card from '../../share/Card/Card';\n\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport renderSelectField from '../../share/renderedFields/select';\nimport renderCheckboxField from '../../share/renderedFields/checkbox';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { LESSON_FORM } from '../../constants/reduxForms';\nimport './LessonForm.scss'\nimport {\n    lessThanZero,\n    maxLengthValue,\n    required\n} from '../../validation/validateFields';\nimport { useTranslation } from 'react-i18next';\nimport { getLessonsByGroupService, setUniqueErrorService } from '../../services/lessonService';\nimport {handleTeacherInfo } from '../../helper/renderTeacher';\nimport {\n    setValueToSubjectForSiteHandler\n} from '../../helper/reduxFormHelper';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\nimport { clearGroupService, selectGroupService } from '../../services/groupService';\nimport { RenderMultiselect} from '../../share/renderedFields/renderMultiselect';\nimport { Accordion, AccordionDetails, AccordionSummary } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nconst useStyles = makeStyles(() => ({\n    notSelected: {\n        '&': {\n            textAlign: 'center',\n            margin: 'auto'\n        }\n    }\n}));\n\nlet LessonForm = props => {\n    const { t } = useTranslation('formElements');\n\n    const { handleSubmit, pristine, reset, submitting,groups,group } = props;\n\n    const classes = useStyles();\n\n    const lesson = props.lesson;\n    const lessonId = lesson.id;\n\n    const isUniqueError = props.isUniqueError;\n\n    const teachers = props.teachers;\n\n    const subjects = props.subjects;\n\n    const groupId = props.groupId;\n\n    const [checked, setChecked] = React.useState(false);\n    const handleChange = event => setChecked(event.target.checked);\n    useEffect(()=>{\n        selectGroupService(groupId)\n    },groupId)\n    useEffect(() => {\n        setChecked(false);\n        if (lessonId) {\n            initializeFormHandler(lesson);\n        } else {\n            props.initialize();\n        }\n    }, [lessonId]);\n\n    const initializeFormHandler = lesson => {\n        props.initialize({\n            lessonCardId: lesson.id,\n            teacher: lesson.teacher.id,\n            subject: lesson.subject.id,\n            type: lesson.lessonType,\n            hours: lesson.hours,\n            linkToMeeting:lesson.linkToMeeting,\n            subjectForSite: lesson.subjectForSite,\n            grouped: lesson.grouped,\n            groups:[group]\n        });\n        setChecked(lesson.grouped);\n    };\n\n    return (\n        <Card class=\"form-card\">\n            {console.log(\"props\",props)}\n            {groupId ? (\n                <h2 className=\"form-title under-line\">\n                    {lessonId ? t('edit_title') : t('create_title')}\n                    {t('lesson_label')}\n                </h2>\n            ) : (\n                ''\n            )}\n            {groupId ? (\n                <form onSubmit={handleSubmit}>\n                    <Field\n                        id=\"teacher\"\n                        name=\"teacher\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('teacher_label')}\n                        {...(!isUniqueError\n                            ? { validate: [required] }\n                            : { error: isUniqueError })}\n                        onChange={()=>\n                            setUniqueErrorService(false)\n                        }\n                    >\n                        <option />\n                        {teachers.map(teacher => (\n                            <option key={teacher.id} value={teacher.id}>\n                                {handleTeacherInfo(teacher)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        id=\"subject\"\n                        name=\"subject\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('subject_label')}\n                        {...(!isUniqueError\n                            ? { validate: [required] }\n                            : { error: isUniqueError })}\n                        onChange={event => {\n                            setValueToSubjectForSiteHandler(\n                                subjects,\n                                event.target.value,\n                                props.change\n                            );\n                            setUniqueErrorService(false);\n                        }}\n                    >\n                        <option value={''} />\n                        {subjects.map(subject => (\n                            <option key={subject.id} value={subject.id}>\n                                {subject.name}\n                            </option>\n                        ))}\n                    </Field>\n                    <div className=\"form-fields-container\">\n                        <Field\n                            id=\"type\"\n                            name=\"type\"\n                            className=\"form-field\"\n                            component={renderSelectField}\n                            label={t('type_label')}\n                            {...(!isUniqueError\n                                ? { validate: [required] }\n                                : { error: isUniqueError })}\n                            onChange={() => {\n                                setUniqueErrorService(false);\n                            }}\n                        >\n                            <option value={''} />\n                            {props.lessonTypes.map((lessonType, index) => (\n                                <option value={lessonType} key={index}>\n                                    {t(\n                                        `formElements:lesson_type_${lessonType.toLowerCase()}_label`\n                                    )}\n                                </option>\n                            ))}\n                        </Field>\n                        <Field\n                            id=\"hours\"\n                            name=\"hours\"\n                            className=\"form-field\"\n                            type=\"number\"\n                            component={renderTextField}\n                            label={t('hours_label')}\n                            validate={[required, lessThanZero]}\n                        />\n                        <Field\n                            id=\"grouped\"\n                            name=\"grouped\"\n                            className=\"form-field\"\n                            label={t('formElements:grouped_label')}\n                            labelPlacement=\"end\"\n                            defaultValue={checked}\n                            component={renderCheckboxField}\n                            checked={checked}\n                            onChange={handleChange}\n                            color=\"primary\"\n                        />\n\n\n                    </div>\n                    <Field\n                        id=\"linkToMeeting\"\n                        name=\"linkToMeeting\"\n                        className=\"form-field\"\n                        rowsMax=\"1\"\n                        margin=\"normal\"\n                        component={renderTextField}\n                        label={t('link_to_meeting_label')}\n                        validate={[required, maxLengthValue]}\n                        type=\"url\"\n                        placeholder={\"Input URL\"}\n                    />\n                    <Field\n                        id=\"subjectForSite\"\n                        name=\"subjectForSite\"\n                        className=\"form-field\"\n                        multiline\n                        rowsMax=\"1\"\n                        margin=\"normal\"\n                        component={renderTextField}\n                        label={t('subject_label') + t('for_site_label')}\n                        validate={[required, maxLengthValue]}\n                    />\n                    {!lessonId?\n                        <Accordion>\n                        <AccordionSummary\n                            expandIcon={<ExpandMoreIcon />}\n                            aria-controls='panel1a-content'\n                            id='panel1a-header'\n                        >\n                            <Typography>{t('copy_for_button_label')}</Typography>\n                        </AccordionSummary>\n                        <AccordionDetails>\n                            <Typography>\n                                <>\n                                    <p className='group-label'>\n                                        <label htmlFor={'groups'}>{t('copy_groups_label')}</label>\n                                    </p>\n                                    <Field\n\n                                        id='groups'\n                                        name='groups'\n                                        component={RenderMultiselect}\n                                        options={groups}\n                                        displayValue={'title'}\n                                        className='form-control mt-2'\n                                        placeholder={t('groups_label')}\n                                        hidePlaceholder={true}\n                                        selectedValues={[group]}\n                                        alwaysDisplayedItem={group}\n                                    />\n                                </>\n                            </Typography>\n                        </AccordionDetails>\n                    </Accordion>\n                    :null}\n                    <div className=\"form-buttons-container\">\n                        <Button\n                            className=\"buttons-style\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            disabled={pristine || submitting}\n                        >\n                            {t('save_button_label')}\n                        </Button>\n                        <Button\n                            className=\"buttons-style\"\n                            type=\"button\"\n                            variant=\"contained\"\n                            disabled={setDisableButton(pristine,submitting,lesson.id)}\n                            onClick={() => {\n                                reset();\n                                setUniqueErrorService(null);\n                                props.onSetSelectedCard(null);\n                            }}\n                        >\n                            {getClearOrCancelTitle(lesson.id,t)}\n                        </Button>\n                    </div>\n                </form>\n            ) : (\n                <div className={classes.notSelected}>\n                    <h2>{t('group_label') + ' ' + t('not_selected_label')}</h2>\n                </div>\n            )}\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => (\n    {\n        lesson: state.lesson.lesson,\n        groups:state.groups.groups,\n        group:state.groups.group,\n        groupId: state.lesson.groupId,\n    });\n\nLessonForm = reduxForm({\n    form: LESSON_FORM\n})(LessonForm);\n\nexport default connect(mapStateToProps)(LessonForm);\n","\nimport { getTeacherForSite } from './renderTeacher';\n\nexport const setValueToTeacherForSiteHandler = (teachers, id, setValue) => {\n    const teacher = teachers.find(teacher => teacher.id === +id);\n    if (!teacher) setValue('teacherForSite', '');\n    else setValue('teacherForSite', getTeacherForSite(teacher));\n};\n\nexport const setValueToSubjectForSiteHandler = (subjects, subjectId, setValue) => {\n    const subject = subjects.find(subject => subject.id === +subjectId);\n    if (!subject) return setValue('subjectForSite', '');\n    else setValue('subjectForSite', subject.name);\n};\n","import React from 'react';\nimport MomentUtils from '@date-io/moment';\nimport * as moment from 'moment';\nimport { TimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\n\nconst renderTimePicker = ({\n    label,\n    input: { value, ...inputProps },\n    meta: { touched, invalid, error },\n    ...custom\n}) => {\n    return (\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n            <TimePicker\n                clearable\n                ampm={false}\n                value={value ? moment(value, 'HH:mm').toDate() : null}\n                error={touched && invalid}\n                helperText={touched && error ? touched && error : label}\n                format=\"HH:mm\"\n                {...inputProps}\n                {...custom}\n            />\n        </MuiPickersUtilsProvider>\n    );\n};\n\nexport default renderTimePicker;\n","import React, { useEffect } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport '../LessonForm/LessonForm';\nimport './ClassForm.scss';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport renderTimePicker from '../../share/renderedFields/time';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport {\n    required,\n    greaterThanTime,\n    lessThanTime,\n    uniqueClassName,\n    timeIntersect\n} from '../../validation/validateFields';\n\nimport { CLASS_FORM } from '../../constants/reduxForms';\nimport * as moment from 'moment';\nimport { CLASS_DURATION } from '../../constants/common';\nimport { useTranslation } from 'react-i18next';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nconst useStyles = makeStyles(theme => ({\n    rootInput: {\n        width: '20em'\n    }\n}));\n\nlet ClassFormFunc = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting,classScheduleOne } = props;\n    const classes = useStyles();\n\n    useEffect(() => {\n        let initialValues = {};\n        if (props.classScheduleOne) {\n            initialValues = props.classScheduleOne;\n        }\n        props.initialize(initialValues);\n    }, [props.classScheduleOne]);\n\n    const setEndTime = startTime =>\n        props.change(\n            'endTime',\n            moment(startTime, 'HH:mm').add(CLASS_DURATION, 'h').format('HH:mm')\n        );\n\n    return (\n        <Card class=\"form-card\">\n            <h2 className=\"form-title\">\n                {props.classScheduleOne.id\n                    ? t('edit_title')\n                    : t('create_title')}{' '}\n                {t('class_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    component={renderTextField}\n                    className=\"form-field\"\n                    name=\"class_name\"\n                    id=\"class_name\"\n                    label={t('class_label')}\n                    type=\"text\"\n                    validate={[required, uniqueClassName]}\n                />\n                <div className=\"form-time-block\">\n                    <Field\n                        component={renderTimePicker}\n                        className=\"time-input\"\n                        name=\"startTime\"\n                        label={t('class_from_label')}\n                        type=\"time\"\n                        validate={[required, lessThanTime, timeIntersect]}\n                        onChange={(event, value) => {\n                            if (value) {\n                                setEndTime(value);\n                            }\n                        }}\n                    />\n                    <Field\n                        component={renderTimePicker}\n                        className=\"time-input\"\n                        name=\"endTime\"\n                        label={t('class_to_label')}\n                        type=\"time\"\n                        validate={[required, greaterThanTime, timeIntersect]}\n                    />\n                </div>\n\n                <div className=\"form-buttons-container\">\n                    <Button\n                        className=\"buttons-style\"\n                        type=\"submit\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        className=\"buttons-style\"\n                        type=\"button\"\n                        variant=\"contained\"\n                        disabled={setDisableButton(pristine,submitting,classScheduleOne.id)}\n                        onClick={onReset}\n                    >\n                        {getClearOrCancelTitle(classScheduleOne.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: CLASS_FORM\n    })(ClassFormFunc)\n);\n","export const CLASS_DURATION = \"1.3333333333333333333333333333\";\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\n\nimport ClassForm from '../../components/ClassForm/ClassForm';\nimport Card from '../../share/Card/Card';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\n\nimport {\n    getClassScheduleListService,\n    addClassScheduleOneService,\n    getClassScheduleOneService,\n    deleteClassScheduleOneService,\n    clearClassScheduleOneService\n} from '../../services/classService';\nimport { useTranslation } from 'react-i18next';\n\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst ClassSchedule =(props) => {\n    const { t } = useTranslation('formElements');\n    const [open, setOpen] = useState(false);\n    const [classId, setClassId] = React.useState(-1);\n    useEffect(() => getClassScheduleListService(), []);\n\n    const submit = values => {\n        if (!values.id && props.classScheduler.length >= 7)\n            return handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                t('max_count_classes_reached')\n            );\n        addClassScheduleOneService(values);\n    };\n\n    const handleEdit = classId => {\n        getClassScheduleOneService(classId);\n    };\n\n    const handleFormReset = () => {\n        clearClassScheduleOneService();\n    };\n\n    const handleClickOpen = classId => {\n        setClassId(classId);\n        setOpen(true);\n    };\n\n    const handleClose = classId => {\n        setOpen(false);\n        if (!classId) {\n            return;\n        }\n        deleteClassScheduleOneService(classId);\n    };\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.CLASS_SCHEDULE_TITLE} val={navigation.PERIOD}/>\n        <div className=\"cards-container\">\n            <ConfirmDialog\n                selectedValue={''}\n                cardId={classId}\n                whatDelete={cardType.CLASS.toLowerCase()}\n                open={open}\n                onClose={handleClose}\n            />\n            <ClassForm onSubmit={submit} onReset={handleFormReset} />\n            <section className=\"container-flex-wrap\">\n                {props.classScheduler.map(schedule => (\n                    <Card class=\"class-card-width\" key={schedule.id}>\n                        <div className=\"cards-btns\">\n                            <FaEdit\n                                className=\"svg-btn\"\n                                title={t('common:edit_hover_title')}\n                                onClick={() => handleEdit(schedule.id)}\n                            />\n                            <MdDelete\n                                className=\"svg-btn\"\n                                title={t('common:delete_hover_title')}\n                                onClick={() => handleClickOpen(schedule.id)}\n                            />\n                        </div>\n                        <p>\n                            {t('class_label')}: {schedule.class_name}\n                        </p>\n                        <p>\n                            {t('class_from_label')} - {t('class_to_label')}\n                        </p>\n                        <p>\n                            {schedule.startTime} - {schedule.endTime}\n                        </p>\n                    </Card>\n                ))}\n            </section>\n        </div>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    ClassScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps, {})(ClassSchedule);\n","import { connect } from 'react-redux'\nimport React, { useEffect } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport Button from '@material-ui/core/Button'\nimport { useTranslation}  from 'react-i18next'\n\n\nimport Card from '../../share/Card/Card'\nimport { DEPARTMENT_FORM} from '../../constants/reduxForms';\nimport renderTextField from '../../share/renderedFields/input'\nimport { required, uniqueSubject, maxLengthValue, uniqueDepartment } from '../../validation/validateFields';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nconst AddDepartment = props => {\n    const { t } = useTranslation('formElements');\n    const {handleSubmit,clear,department,pristine,submitting,editDepartment}=props;\n    useEffect(() => {\n        if (department&&editDepartment) {\n            if (department.id) {\n                props.initialize({\n                    name: department.name,\n                    id: department.id\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [department]);\n\n    return (\n        <Card class='form-card subject-form'>\n            <h2 style={{ textAlign: 'center' }}>\n                {t('department_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    className='form-field'\n                    name='name'\n                    component={renderTextField}\n                    label={t('department_add_label')+':'}\n                    validate={[required, uniqueDepartment, maxLengthValue]}\n                />\n                <div className='form-buttons-container subject-btns'>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className='buttons-style '\n                        disabled={pristine || submitting}\n                        type='submit'>\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        type='button'\n                        variant='contained'\n                        className='buttons-style'\n                        disabled={setDisableButton(pristine,submitting,department.id)}\n                        onClick={clear}\n                        >\n                        {getClearOrCancelTitle(department.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    )\n}\n\nconst mapStateToProps = state => ({\n    department:state.departments.department\n})\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: DEPARTMENT_FORM\n    })(AddDepartment)\n)\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { getTeacherFullName } from './renderTeacher';\nimport { useTranslation } from 'react-i18next';\nimport { FaEnvelope } from 'react-icons/fa';\nimport TableHead from '@material-ui/core/TableHead';\nimport { withStyles } from '@material-ui/core';\nconst useStyles1 = makeStyles((theme) => ({\n    root: {\n        flexShrink: 0,\n        marginLeft: theme.spacing(2.5),\n    },\n}));\n\nfunction RenderTeacherTableActions(props) {\n    const classes = useStyles1();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onPageChange } = props;\n\n    const handleFirstPageButtonClick = (event) => {\n        onPageChange(event, 0);\n    };\n\n    const handleBackButtonClick = (event) => {\n        onPageChange(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event) => {\n        onPageChange(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event) => {\n        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.root}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nRenderTeacherTableActions.propTypes = {\n    count: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nconst useStyles2 = makeStyles({\n    table: {\n        minWidth: 500,\n    },\n});\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.white,\n        color: theme.palette.common.black,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport default function RenderTeacherTable(props) {\n    const classes = useStyles2();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const {teachers}=props;\n    const { t } = useTranslation('formElements');\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, teachers.length - page * rowsPerPage);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n    const sendMail = (email) => {\n        const mailto =\n            // \"mailto:mail@gmail.com?subject=Test subject&body=Body content\";\n            `mailto:${email}`;\n        window.location.href = mailto;\n    }\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"custom pagination table\">\n\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell>{t('teacher_label')}</StyledTableCell>\n                        <StyledTableCell>{t('teacher_position')}</StyledTableCell>\n                        <StyledTableCell>{t('send_letter_title')}</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n\n                <TableBody>\n                    {(rowsPerPage > 0\n                            ? teachers.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            : teachers\n                    ).map((teacher) => (\n                        <StyledTableRow key={teacher.position}>\n                            <StyledTableCell align=\"center\" style={{ width: 160 }}>\n                                {getTeacherFullName(teacher)}\n                            </StyledTableCell>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                {teacher.position}\n                            </StyledTableCell>\n                            <StyledTableCell style={{ width: 160 }} align=\"center\">\n                                <span>\n                                    <p>{teacher.email}</p>\n                                    <FaEnvelope\n                                        className=\"svg-btn send-message\"\n                                        title={`${t('send_letter_title')} ${teacher.email}`}\n                                        onClick={()=>sendMail(teacher.email)}\n                                    />\n                                </span>\n\n                            </StyledTableCell>\n                        </StyledTableRow>\n                    ))}\n\n                    {emptyRows > 0 && (\n                        <StyledTableRow style={{ height: 53 * emptyRows }}>\n                            <TableCell colSpan={6} />\n                        </StyledTableRow>\n                    )}\n                </TableBody>\n                <TableFooter>\n                    <StyledTableRow>\n                        <TablePagination\n                            labelRowsPerPage={`${t('rows_per_page')}`}\n                            rowsPerPageOptions={[5, 10, 25, { label: `${t('all_page')}`, value: -1 }]}\n                            colSpan={3}\n                            count={teachers.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            SelectProps={{\n                                inputProps: { 'aria-label': 'rows per page' },\n                                native: true,\n                            }}\n                            onPageChange={handleChangePage}\n                            onRowsPerPageChange={handleChangeRowsPerPage}\n                            ActionsComponent={RenderTeacherTableActions}\n                        />\n                    </StyledTableRow>\n                </TableFooter>\n            </Table>\n        </TableContainer>\n    );\n}\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport '../dialog.scss';\nimport './showDataDialog.scss'\n\nimport i18n from '../../../helper/i18n';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport RenderTeacherTable from '../../../helper/renderTeacherTable';\n\nexport const ShowDataDialog = props => {\n    const { onClose,  cardId, open,teachers,department } = props;\n    const { t } = useTranslation('formElements');\n    const handleClose = () => {\n        onClose(cardId);\n    };\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">\n                <>\n\n                    <>\n                        {teachers.length===0?\n                            <>\n                                <h2 className=\"title-align\">{`${t('department_teachers_label')} - `}<span>{`${department.name}`}</span></h2>\n                                {t('no_exist_teachers_at_department')}\n                            </>\n\n                            :\n                            <>\n                                <h3 className=\"title-align\"><span>{teachers.length!==1?`${t('teachers_label')} `:`${t('teacher_label')}`}</span>{`${t('department_teachers')} `}<span>{`${department.name}`}</span></h3>\n                                <RenderTeacherTable teachers={teachers}/>\n                            </>\n                        }\n                    </>\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                    color=\"primary\"\n                >\n                    {i18n.t('common:close_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nShowDataDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\nconst mapStateToProps = state => ({\n    department: state.departments.department\n});\n\nexport default connect(mapStateToProps, {})(ShowDataDialog);","import React, { useEffect, useState } from 'react';\nimport AddDepartment from '../../components/AddDepartmentForm/AddDepartmentForm';\nimport {\n    clearDepartment,\n    createDepartmentService,\n    deleteDepartmentsService,\n    getAllDepartmentsService,\n    getDepartmentByIdService,\n    getDisabledDepartmentsService,\n    setDisabledDepartmentService, setEnabledDepartmentService,\n    updateDepartmentService\n} from '../../services/departmentService';\nimport { connect } from 'react-redux';\nimport Card from '../../share/Card/Card';\nimport { GiSightDisabled, IoMdEye, MdFace } from 'react-icons/all';\nimport { FaChalkboardTeacher, FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport { setDisabledDepartment, setEnabledDepartment } from '../../redux/actions/departments';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport Button from '@material-ui/core/Button';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport { getAllTeachersByDepartmentId } from '../../redux/actions/teachers';\nimport { showAllPublicTeachersByDepartmentService } from '../../services/scheduleService';\nimport ShowDataDialog from '../../share/modals/modal/showDataDialog';\nfunction DepartmentPage(props) {\n    const { t } = useTranslation('formElements');\n    const { departments,disabledDepartments } = props;\n    const [isDisabled,setIsDisabled]=useState(false);\n    const [term, setTerm] = useState('');\n    const [deleteDialog,setDeleteDialog]=useState(false);\n    const [departmentId,setDepartmentId]=useState(\"\");\n    const [hideDialog, setHideDialog] = useState(null);\n    const [department,setDepartment]=useState({});\n    const [teacherDialog,setTeacherDialog]=useState(false);\n    const [editDepartment,setEditDepartment]=useState(false);\n    const { isSnackbarOpen, snackbarType, snackbarMessage,teachers } = props;\n    useEffect(()=>clearDepartmentForm(),[])\n    const visibleDepartments = isDisabled\n        ? search(disabledDepartments, term, ['name'])\n        : search(departments, term, ['name']);\n    const SearchChange = setTerm;\n    const changeDisable=()=>{\n        setIsDisabled(prev=>!prev);\n    }\n    const submit = (data) => {\n        data.id===undefined?\n            createDepartmentService(data):\n            updateDepartmentService(data);\n    }\n    const clearDepartmentForm = () => {\n        clearDepartment();\n    }\n    const deleteDepartment=(id)=>{\n        setDepartmentId(id);\n        setDeleteDialog(true);\n    }\n    const setDisabled=(department)=>{\n\n        const disabledDepartment={...department,disabled:true};\n        setDisabledDepartmentService(disabledDepartment);\n    }\n    const setEnabled=(department)=>{\n        setDepartmentId(department.id);\n        setDeleteDialog(true);\n        const enabledDepartment={...department,disabled:false};\n        setEnabledDepartment(enabledDepartment);\n    }\n    const setDepartmentIntoForm=(id)=>{\n        getDepartmentByIdService(id)\n    }\n    const closeTeacherDialog = () => {\n      setTeacherDialog(false)\n    }\n    const handleClose=(id)=>{\n        if(id!=='') {\n            if(department.id!==undefined) {\n                if (hideDialog === disabledCard.SHOW) {\n                    const { id, name } = department;\n                    const enabledDepartment = { id, name, disable: false };\n                    setEnabledDepartmentService(enabledDepartment);\n                } else if (hideDialog === disabledCard.HIDE) {\n\n                    const { id, name } = department;\n                    const enabledDepartment = { id, name, disable: true };\n                    setDisabledDepartmentService(enabledDepartment);\n                }\n\n            }\n            else {\n                deleteDepartmentsService(departmentId);\n            }\n        }\n         setDeleteDialog(false);\n    }\n    useEffect(() => getAllDepartmentsService(), [isDisabled])\n    useEffect(()=> {\n        if (isDisabled)\n            getDisabledDepartmentsService();\n    },[])\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n    return (\n        <>\n            <NavigationPage name={navigationNames.DEPARTMENTS} val={navigation.DEPARTMENTS}/>\n            <ConfirmDialog\n                isHide={hideDialog}\n                cardId={departmentId}\n                whatDelete={'department'}\n                open={deleteDialog}\n                onClose={handleClose}\n            />\n            <ShowDataDialog\n                isHide={hideDialog}\n                cardId={departmentId}\n                open={teacherDialog}\n                onClose={closeTeacherDialog}\n                teachers={teachers}\n            />\n            <div className=\"cards-container\">\n            <aside className=\"search-list__panel\">\n                <SearchPanel\n                    SearchChange={SearchChange}\n                    showDisabled={changeDisable}\n                />\n                {\n                    isDisabled?'':\n                    <AddDepartment\n                    onSubmit={submit} clear={clearDepartmentForm} editDepartment={editDepartment}\n                    />\n                }\n            </aside>\n            <section className=\"container-flex-wrap wrapper\">\n                {visibleDepartments.length === 0 && (\n                    <NotFound name={t('department_y_label')} />\n                )}\n                {visibleDepartments.map(department => (\n                    <Card key={department.id} class=\"subject-card done-card\">\n                        <h2 className=\"subject-card__name\">\n                            {department.name}\n                        </h2>\n                        <div className=\"cards-btns\">\n                            {isDisabled?\n                                <IoMdEye\n                                    className=\"svg-btn copy-btn\"\n                                    title={t('common:set_enabled')}\n                                    onClick={() => {\n                                        setHideDialog(disabledCard.SHOW);\n                                        deleteDepartment(department.id);\n                                        setDepartment(department);\n                                    }}\n                                />:\n\n                                (\n                                    <>\n                                        <GiSightDisabled\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_disabled')}\n                                            onClick={() => {\n                                                //setDisabled(department)\n                                                setHideDialog(\n                                                    disabledCard.HIDE\n                                                );\n                                                deleteDepartment(department.id);\n                                                setDepartment(department);\n                                            }}\n                                        />\n\n                                        <FaEdit\n                                            className=\"svg-btn edit-btn\"\n                                            title={t('edit_title')}\n                                            onClick={() => {\n                                                setEditDepartment(true);\n                                                setDepartmentIntoForm(department.id);\n                                            }\n                                            }\n                                        />\n                                    </>\n\n                                )\n                            }\n\n\n\n                            <MdDelete\n                                className=\"svg-btn delete-btn\"\n                                title={t('delete_title')}\n                                onClick={() => {\n                                    setDepartment({});\n                                    deleteDepartment(department.id);\n                                }}\n                            />\n                            <FaChalkboardTeacher\n                                className=\"svg-btn delete-btn\"\n                                title={t('show_teacher_title')}\n                                onClick={() => {\n                                    showAllPublicTeachersByDepartmentService(department.id);\n                                    getDepartmentByIdService(department.id);\n                                    setDepartmentIntoForm(department.id)\n                                    setTeacherDialog(true);\n                                }}\n                            />\n\n                        </div>\n                    </Card>\n                ))}\n\n\n            </section>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n        </>\n    )\n}\n\nconst mapStateToProps = state => ({\n    departments: state.departments.departments,\n    disabledDepartments: state.departments.disabledDepartments,\n    department: state.departments.department,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message,\n    teachers:state.teachers.teachers\n\n});\n\nexport default connect(mapStateToProps, {})(DepartmentPage);","// import AdminPage from '../containers/AdminPage/AdminPage';\n// import TeacherList from '../containers/TeachersList/TeachersList';\n// import GroupList from '../containers/GroupList/GroupList';\n// import ClassSchedule from '../containers/ClassSchedule/ClassSchedule';\n// import RoomList from '../containers/RoomList/RoomList';\n// import SubjectPage from '../containers/SubjectPage/SubjectPage';\n// import BusyRooms from '../containers/BusyRooms/BusyRooms';\n// import React from 'react';\n// import SemesterPage from '../containers/SemesterPage/SemesterPage';\n// import MergeRolePage from '../containers/MergeRolePage/MergeRolePage';\n// import Changes from '../components/ChangePasswordForm/ChangePasswordForm';\n// import DepartmentPage from '../containers/DepartmentPage/DepartmentPage';\n// export const general=[\n//     { name: 'SemesterPage', component: <SemesterPage /> },\n//     { name: 'MergeRolePage', component: <MergeRolePage /> },\n//     { name: 'Changes', component: <Changes /> },\n//     { name: 'Departments', component: <DepartmentPage /> }];\n// export const tabs_components = [\n//     { name: 'LessonPage', component: <AdminPage /> },\n//     { name: 'TeacherList', component: <TeacherList /> },\n//     { name: 'GroupList', component: <GroupList /> },\n//     { name: 'ClassScheduleTitle', component: <ClassSchedule /> },\n//     { name: 'RoomList', component: <RoomList /> },\n//     { name: 'SubjectPage', component: <SubjectPage /> },\n//     { name: 'BusyRooms', component: <BusyRooms /> },\n//     // { name: 'SemesterPage', component: <SemesterPage /> },\n//     // { name: 'MergeRolePage', component: <MergeRolePage /> },\n//     // { name: 'Changes', component: <Changes /> },\n//     // { name: 'Departments', component: <DepartmentPage /> },\n//     general,\n// ];\nimport AdminPage from '../containers/AdminPage/AdminPage';\nimport TeacherList from '../containers/TeachersList/TeachersList';\nimport GroupList from '../containers/GroupList/GroupList';\nimport ClassSchedule from '../containers/ClassSchedule/ClassSchedule';\nimport RoomList from '../containers/RoomList/RoomList';\nimport SubjectPage from '../containers/SubjectPage/SubjectPage';\nimport BusyRooms from '../containers/BusyRooms/BusyRooms';\nimport React from 'react';\nimport SemesterPage from '../containers/SemesterPage/SemesterPage';\nimport MergeRolePage from '../containers/MergeRolePage/MergeRolePage';\nimport Changes from '../components/ChangePasswordForm/ChangePasswordForm';\nimport DepartmentPage from '../containers/DepartmentPage/DepartmentPage';\nimport { navigationNames } from './navigation';\nexport const general=[\n     {name: navigationNames.GENERAL},\n    { name: navigationNames.CLASS_SCHEDULE_TITLE, component: <ClassSchedule /> },\n    { name: navigationNames.DEPARTMENTS, component: <DepartmentPage /> },\n    { name: navigationNames.GROUP_LIST, component: <GroupList /> },\n    { name: navigationNames.ROOM_LIST, component: <RoomList /> },\n    { name: navigationNames.SUBJECT_PAGE, component: <SubjectPage /> },\n    { name: navigationNames.SEMESTER_PAGE, component: <SemesterPage /> },\n    { name: navigationNames.TEACHER_LIST, component: <TeacherList /> },\n\n];\nexport const tabs_components = [\n    { name: navigationNames.LESSON_PAGE, component: <AdminPage /> },\n    { name: navigationNames.MERGE_ROLE_PAGE, component: <MergeRolePage /> },\n    { name: navigationNames.CHANGES, component: <Changes /> },\n    { name: navigationNames.BUSY_ROOMS, component: <BusyRooms /> },\n    general,\n];\n\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { setCurrentSemester } from '../../redux/actions';\nimport {Link} from 'react-router-dom';\nimport { links } from '../../constants/links';\nimport './NavigationPage.scss';\nimport { MenuItem, Select } from '@material-ui/core';\nimport { general, tabs_components } from '../../constants/navigationComponents';\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper\n    },\n    header: {\n        backgroundColor: theme.palette.info.dark\n    },\n    nav:{\n        textDecoration:'none',\n            color: '#fff',\n            ':hover': {\n                color: 'purple'\n            }\n    },\n    select:{\n       backgroundColor:'primary'\n    },\n\n    btn:{\n        margin:0,\n        width: \"10px\"\n    }\n}));\n\nconst NavigationPage = (props) => {\n    const {val}=props;\n    const { t } = useTranslation('common');\n    const classes = useStyles();\n    const [value, setValue] = useState(val?val:0);\n    const [gen,setGen]=useState(props.name||general[0].name);\n    useEffect(() => {\n        setCurrentSemester();\n    }, []);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    let document_title = title => {\n        document.title = t(`${title}_management_title`);\n    };\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    aria-label=\"simple tabs example\"\n                    indicatorColor=\"primary\"\n                    variant=\"scrollable\"\n                    scrollButtons=\"on\"\n                    className={classes.header}\n                >\n                    {tabs_components.map((tab_one, index) => (\n\n                                        <>\n                                            {tab_one.length===undefined?\n                                                <Link className={classes.nav}\n\n                                                      to={links[tab_one.name]}>\n                                                    <Tab className={classes.btn}\n                                                        key={index + tab_one}\n                                                        onClick={() => document_title(tab_one.name)}\n                                                        label={t(`${tab_one.name}_management_title`)}\n                                                        {...a11yProps(index)}\n                                                    />\n                                                </Link>:\n                                                <Select className=\"general MuiTab-root\"\n                                                    labelId=\"demo-controlled-open-select-label\"\n                                                    id=\"demo-controlled-open-select\"\n                                                    value={gen}\n                                                    onChange={event => {\n                                                        const val=event.target.value;\n                                                        setGen(val);\n                                                        document_title(val)\n                                                    }}\n                                            >\n\n                                                {\n                                                    Object.entries(tab_one).map(function(data, index) {\n                                                        return  (<MenuItem className={\"menu-dictionary MuiTab-root\"}  value={data[1].name} key={data[0]} {...a11yProps(index)}>\n                                                            <Link className={classes.nav}\n\n                                                                  to={links[data[1].name]}>\n                                                                {t(`${ data[1].name }_management_title`)}\n                                                            </Link>\n                                                        </MenuItem>)\n                                                    }, this)\n                                                }\n\n                                            </Select>\n\n                                            }\n                                        </>\n                    ))}\n                </Tabs>\n\n            </AppBar>\n\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    ClassScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps, {})(NavigationPage);\n","import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n    groupField: {\n        '&': {\n            margin: '0 auto',\n            width: '90%'\n        }\n    }\n}));\n\nexport const CopyLessonDialog = props => {\n    const { onClose, lesson, translation, groups, groupId, open } = props;\n    const [group, setGroup] = useState('');\n    const [error, setError] = useState('');\n\n    const classes = useStyles();\n\n    const handleClose = () => {\n        onClose();\n    };\n\n    const chooseClickHandle = () => {\n        if (!group) {\n            return;\n        }\n        if (group.id === groupId) {\n            setError(translation('copy_to_same_group_error'));\n            return;\n        }\n        onClose({ lesson, group });\n    };\n\n    const defaultProps = {\n        options: groups,\n        getOptionLabel: option => (option ? option.title : '')\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"simple-dialog-title\">\n                {translation('choose_group')}\n            </DialogTitle>\n            <Autocomplete\n                {...defaultProps}\n                id=\"group\"\n                multiple\n                clearOnEscape\n                openOnFocus\n                className={classes.groupField}\n                onChange={(event, newValue) => {\n                    setGroup(newValue);\n                    setError(null);\n                }}\n                renderInput={params => (\n                    <TextField\n                        {...params}\n                        label={translation('common:choose_group')}\n                        error={!!error}\n                        helperText={error ? error : null}\n                        margin=\"normal\"\n                    />\n                )}\n            />\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => chooseClickHandle()}\n                >\n                    {translation('formElements:choose_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose()}\n                >\n                    {translation('formElements:cancel_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nCopyLessonDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default CopyLessonDialog;\n","import React from 'react';\n\nimport Card from '../../share/Card/Card';\n\nimport { FaEdit, FaUserPlus } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { MdContentCopy } from 'react-icons/all';\nimport { getTeacherName } from '../../helper/renderTeacher';\nimport i18n from 'i18next';\nimport './LessonList.scss'\nconst LessonsList = props => {\n    const lessons = props.lessons;\n\n    const t = props.translation;\n\n    const firstStringLetterCapitalHandle = str => {\n        return str.replace(/^\\w/, c => c.toUpperCase());\n    };\n    const isGrouped = grouped =>\n        grouped ? (\n            <span className={\"grouped-class\"}>{t('formElements:grouped_label')}</span>\n        ) : (\n            ''\n        );\n    const getUkWordHours=(number)=>{\n        if (number===1){\n            return \"година\"\n        }\n        if(number>=2&&number<=4){\n            return \"години\"\n        }\n        if ((number>=5&&number<=20)||number===0){\n            return \"годин\"\n        }\n        return\n    }\n    const getUkHour=(number)=>{\n        if(number>=20&&number<=100){\n            let toText = number.toString(); //convert to string\n            let lastChar = toText.slice(-1); //gets last character\n            let lastDigit = +(lastChar); //convert last character to number\n            return getUkWordHours(lastDigit);\n        }\n        else if(number>100){\n            let toText = number.toString(); //convert to string\n            let lastChar = toText.slice(-2); //gets last character\n            let lastDigit = +(lastChar); //convert last character to number\n            return getUkWordHours(lastDigit);\n        }\n        else {\n            return  getUkWordHours(number)\n        }\n    }\n    const getEnHour=(number)=>{\n        if (number===1){\n            return \"hour\"\n        }\n        return \"hours\"\n    }\n   const getHour=(number)=>{\n        const language=(i18n.language).toUpperCase();\n        const en=\"EN\";\n        const uk=\"UK\";\n        if(language===en){\n            return getEnHour(number)\n        }\n        else if(language===uk){\n            return getUkHour(number)\n        }\n        return\n   }\n    const getLessonShortTitle=(title)=>{\n        const MAX_LENGTH=50;\n        return title.length>MAX_LENGTH? `${ title.slice(0, MAX_LENGTH) }...`:title;\n    }\n    const getTitle=(lesson)=>{\n       return  firstStringLetterCapitalHandle(\n            lesson.subjectForSite)+\n            \" \"+\n           t(`formElements:lesson_type_${lesson.lessonType.toLowerCase()}_label`)\n    }\n    return (\n        <div>\n            <section className=\"container-flex-wrap\">\n                {lessons.map(lesson => (\n                    <Card class=\"done-card\" key={lesson.id}>\n\n                        <div className=\"cards-btns\">\n                            {isGrouped(lesson.grouped)}\n                            <MdContentCopy\n                                title={t('copy_lesson')}\n                                className=\"svg-btn copy-btn\"\n                                onClick={() => props.onCopyLesson(lesson)}\n                            />\n                            <FaEdit\n                                title={t('edit_lesson')}\n                                className=\"svg-btn edit-btn\"\n                                onClick={() => props.onSelectLesson(lesson.id)}\n                            />\n                            <MdDelete\n                                title={t('delete_lesson')}\n                                className=\"svg-btn delete-btn\"\n                                onClick={() => props.onClickOpen(lesson.id)}\n                            />\n                        </div>\n                        <p style={{height:\"2em\"}}>\n                            {getLessonShortTitle(getTitle(lesson))}\n\n                        </p>\n                       <p>{getTeacherName(lesson.teacher)}</p>\n                        <p>\n                            {' '}\n                            <b>{lesson.hours}</b>{' '}\n                            {getHour(lesson.hours)}\n                        </p>\n                        <p>\n                            <input value={lesson.linkToMeeting} disabled=\"disabled\"/>\n                        </p>\n                    </Card>\n                ))}\n            </section>\n        </div>\n    );\n};\n\nexport default LessonsList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { useTranslation } from 'react-i18next';\n\nimport Button from '@material-ui/core/Button';\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport './CopyLessonsFromSemesterForm.scss';\nimport Card from '../../share/Card/Card';\n\nimport { COPY_LESSONS_FROM_SEMESTER_FORM } from '../../constants/reduxForms';\nimport { required } from '../../validation/validateFields';\nconst shortid = require('shortid');\n\nconst CopyLessonsFromSemesterForm = props => {\n    const { t } = useTranslation('common');\n    const { semesters, handleSubmit, pristine, submitting } = props;\n    const renderSemesterList = () => {\n        if (semesters) {\n            if (semesters.length > 1) {\n                return (\n                    <Field\n                        id=\"fromSemesterId\"\n                        name=\"fromSemesterId\"\n                        component={renderSelectField}\n                        label={t('formElements:semester_label')}\n                        type=\"text\"\n                        validate={[required]}\n                    >\n                        <option />\n                        {semesters.map((semester, index) => (\n                            <option\n                                key={shortid.generate()}\n                                value={semester.id}\n                            >\n                                {semester.description}\n                            </option>\n                        ))}\n                    </Field>\n                );\n            } else if (semesters.length === 1) {\n                handleSubmit({ fromSemesterId: semesters[0].id });\n                return <p>{semesters[0].description}</p>;\n            }\n        }\n    };\n\n    return (\n        <Card class=\"form-card\">\n            <form onSubmit={handleSubmit}>\n                <h2 className=\"lesson-page-h\">{t('copy_lesson')}</h2>\n                <p>{t('copy_lessons_from_semester_to_current')}</p>\n                {renderSemesterList()}\n                <div className=\"form-buttons-container\">\n                    <Button\n                        className='semester-copy-btn'\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={pristine || submitting}\n                    >\n                        {t('formElements:copy_label')}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    semesters: state.semesters.semesters,\n    currentSemester: state.schedule.currentSemester\n});\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: COPY_LESSONS_FROM_SEMESTER_FORM\n    })(CopyLessonsFromSemesterForm)\n);\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport Card from '../../share/Card/Card';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport CopyLessonDialog from '../../share/modals/chooseGroupDialog/CopyLessonDialog';\n\nimport LessonForm from '../../components/LessonForm/LessonForm';\nimport LessonsList from '../../components/LessonsList/LessonsList';\nimport CopyLessonsFromSemesterForm from '../../components/CopyLessonsFromSemesterForm/CopyLessonsFromSemesterForm';\n\nimport {\n    copyLessonCardService,\n    getLessonsByGroupService,\n    getLessonTypesService,\n    handleLessonCardService,\n    removeLessonCardService,\n    selectGroupIdService,\n    selectLessonCardService\n} from '../../services/lessonService';\nimport { showAllTeachersService } from '../../services/teacherService';\nimport { selectGroupService, showAllGroupsService } from '../../services/groupService';\nimport { setLoadingService } from '../../services/loadingService';\nimport { showAllSubjectsService } from '../../services/subjectService';\nimport {\n    showAllSemestersService,\n    CopyLessonsFromSemesterService\n} from '../../services/semesterService';\n\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { styled } from '@material-ui/core/styles';\n\nimport { cardType } from '../../constants/cardType';\n\nimport './LessonPage.scss';\n\nconst GroupField = styled(TextField)({\n    display: 'inline-block',\n    width: '150px'\n});\n\nconst LessonPage = props => {\n    const { t } = useTranslation('common');\n\n    const [open, setOpen] = useState(false);\n    const [openCopyLessonDialog, setOpenCopyLessonDialog] = useState(false);\n    const [lessonId, setLessonId] = React.useState(-1);\n    const [copiedLesson, setCopiedLesson] = React.useState(-1);\n\n    const teachers = props.teachers;\n\n    const isUniqueError = props.isUniqueError;\n\n    const lessons = props.lessons;\n    const lessonLength = lessons.length;\n\n    const isLoading = props.loading;\n\n    const { groups, groupId, currentSemester } = props;\n\n    const subjects = props.subjects;\n\n    useEffect(() => {\n        if (groupId) {\n            setLoadingService(true);\n            getLessonsByGroupService(groupId);\n        }\n    }, [groupId]);\n    useEffect(() => showAllTeachersService(), []);\n    useEffect(() => showAllSemestersService(), []);\n    useEffect(() => getLessonTypesService(), []);\n    useEffect(() => showAllGroupsService(), []);\n    useEffect(() => {\n        showAllSubjectsService();\n    }, []);\n\n    const createLessonCardHandler = card => {\n        console.log('create');\n        if (Object.keys(card).length === 0 && card.constructor === Object)\n            return;\n        handleLessonCardService(card, groupId, currentSemester);\n\n    };\n    useEffect(() => {\n        setLoadingService(true);\n        getLessonsByGroupService(groupId);\n    }, [lessons.length]);\n\n    const selectLessonCardHandler = lessonCardId => {\n        selectLessonCardService(lessonCardId);\n    };\n\n    const groupTitleHandle = (groups, groupId) => {\n        return groups.find(group => group.id === +groupId).title;\n    };\n\n    const groupHandle = (groups, groupId) => {\n        return groups.find(group => group.id === +groupId);\n    };\n\n    const handleClickOpen = lessonId => {\n        setLessonId(lessonId);\n        setOpen(true);\n    };\n\n    const handleClose = lessonId => {\n        setOpen(false);\n        if (!lessonId) return;\n\n        removeLessonCardService(lessonId);\n    };\n\n    const openCopyLessonDialogHandle = lesson => {\n        setCopiedLesson(lesson);\n        setOpenCopyLessonDialog(true);\n    };\n\n    const closeCopyLessonDialogHandle = lessonGroupObj => {\n        setOpenCopyLessonDialog(false);\n        if (!lessonGroupObj) return;\n        copyLessonCardService(lessonGroupObj);\n    };\n\n    const defaultProps = {\n        options: groups,\n        getOptionLabel: option => (option ? option.title : '')\n    };\n\n    const handleGroupSelect = group => {\n        if (group) {\n            selectGroupIdService(group.id);\n            selectGroupService(group.id);\n        }\n        ;\n    };\n\n    const groupFinderHandle = groupId => {\n        if (groupId) return groups.find(group => group.id === groupId);\n        else return '';\n    };\n\n    const submitCopy = values => {\n        values.toSemesterId = props.currentSemester.id;\n        values.fromSemesterId = +values.fromSemesterId;\n        CopyLessonsFromSemesterService(values);\n    };\n\n    const renderCopyLessonsForm = () => {\n        if (!groupId) {\n            return <CopyLessonsFromSemesterForm onSubmit={submitCopy} />;\n        }\n    };\n\n    let cardsContainer = (\n        <>\n            {console.log('lessons', lessons)}\n            {lessonLength > 0 ? (\n                <LessonsList\n                    lessons={lessons}\n                    onClickOpen={handleClickOpen}\n                    onSelectLesson={selectLessonCardHandler}\n                    onCopyLesson={openCopyLessonDialogHandle}\n                    translation={t}\n                />\n            ) : (\n                <section className='centered-container'>\n                    <h2>\n                        {groupHandle(groups, groupId)\n                            ? t('lesson_no_lesson_for_group_label') +\n                            groupTitleHandle(groups, groupId)\n                            : ''}\n                    </h2>\n                </section>\n            )}\n        </>\n    );\n\n    if (isLoading) {\n        cardsContainer = (\n            <section className='centered-container'>\n                <CircularProgress />\n            </section>\n        );\n    }\n\n    return (\n        <>\n            <Card class='card-title lesson-card'>\n                <CopyLessonDialog\n                    open={openCopyLessonDialog}\n                    onClose={closeCopyLessonDialogHandle}\n                    groupId={groupId}\n                    lesson={copiedLesson}\n                    groups={groups}\n                    translation={t}\n                />\n                <ConfirmDialog\n                    cardId={lessonId}\n                    whatDelete={cardType.LESSON.toLowerCase()}\n                    open={open}\n                    onClose={handleClose}\n                />\n                <div className='lesson-page-title'>\n                    <h1 className='lesson-page-h'>\n                        {t('lesson_for_group_title')}\n                    </h1>\n                    <Autocomplete\n                        {...defaultProps}\n                        id='group'\n                        clearOnEscape\n                        openOnFocus\n                        value={groupFinderHandle(groupId)}\n                        onChange={(event, newValue) => {\n                            handleGroupSelect(newValue);\n                        }}\n                        renderInput={params => (\n                            <GroupField\n                                {...params}\n                                label={t('formElements:group_label')}\n                                margin='normal'\n                            />\n                        )}\n                    />\n                </div>\n            </Card>\n            <div className='cards-container'>\n                <section>\n                    <LessonForm\n                        lessonTypes={props.lessonTypes}\n                        isUniqueError={isUniqueError}\n                        subjects={subjects}\n                        teachers={teachers}\n                        onSubmit={createLessonCardHandler}\n                        onSetSelectedCard={selectLessonCardHandler}\n                    />\n                    {renderCopyLessonsForm()}\n                </section>\n                {cardsContainer}\n            </div>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    lessons: state.lesson.lessons,\n    lessonTypes: state.lesson.lessonTypes,\n    groupId: state.lesson.groupId,\n    isUniqueError: state.lesson.uniqueError,\n    teachers: state.teachers.teachers,\n    groups: state.groups.groups,\n    subjects: state.subjects.subjects,\n    loading: state.loadingIndicator.loading,\n    semesters: state.semesters.semesters,\n    currentSemester: state.schedule.currentSemester\n});\n\nexport default connect(mapStateToProps)(LessonPage);\n","import React from 'react';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport LessonPage from '../LessonPage/LessonPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport { connect } from 'react-redux';\n\n\n\nfunction AdminPage(props){\n    return(\n\n        <>\n            <NavigationPage val={navigation.LESSONS} />\n            <LessonPage/>\n        </>\n    )\n}\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    ClassScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps, {})(AdminPage);","import React, { useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { logout } from '../../../redux/actions/index';\nimport { setScheduleSemesterIdService } from '../../../services/scheduleService';\nimport { useHistory } from 'react-router-dom';\nconst Logout = props => {\n    useEffect(() => {\n        props.onLogout();\n    }, []);\n    // useEffect(()=>setScheduleSemesterIdService(0))\n    // const history=useHistory();\n    // useEffect(()=>history.push(\"/\"));\n    return <Redirect to=\"/\" />;\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(logout())\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(Logout);\n","import * as actionTypes from './actionsType';\nimport { TOKEN_BEGIN } from '../../constants/tokenBegin';\n\nexport const authUser = res => {\n    return {\n        type: actionTypes.AUTH_USER,\n        result: res\n    };\n};\n\nexport const registerUser = res => {\n    return {\n        type: actionTypes.REGISTER_USER,\n        result: res\n    };\n};\n\nexport const resetUserPassword = res => {\n    return {\n        type: actionTypes.RESET_USER_PASSWORD,\n        result: res\n    };\n};\n\nexport const activateUser = res => {\n    return {\n        type: actionTypes.ACTIVATE_USER,\n        result: res\n    };\n};\n\nexport const logout = () => {\n    return {\n        type: actionTypes.AUTH_USER_INITIATE_LOGOUT\n    };\n};\n\nexport const authCheckState = () => {\n    const token = localStorage.getItem('token');\n    if (token && !token.includes(TOKEN_BEGIN)) {\n        return {\n            type: actionTypes.AUTH_USER_LOGOUT\n        };\n    }\n    const role = localStorage.getItem('userRole');\n    return {\n        type: actionTypes.AUTH_USER_CHECK_STATE,\n        token,\n        role\n    };\n};\n\nexport const setAuthError = res => {\n    return {\n        type: actionTypes.SET_AUTH_ERROR,\n        result: res\n    };\n};\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { activateUser } from '../../redux/actions';\n\nimport { links } from '../../constants/links';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\n\nimport { CircularProgress } from '@material-ui/core';\n\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\n\nimport './ActivationPage.scss';\n\nconst ActivationPage = props => {\n    const { t } = useTranslation('common');\n\n    const params = new URLSearchParams(props.location.search);\n    const token = params.get('token');\n\n    const error = props.error;\n\n    const response = props.response;\n    let redirect = null;\n\n    if (response && response.data.hasOwnProperty('message')) {\n        redirect = <Redirect to={links.AUTH} />;\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.SUCCESS,\n            response.data.message\n        );\n    }\n\n    let main = (\n        <>\n            <h2>{t('verifying_token')}</h2>\n            <CircularProgress />\n        </>\n    );\n\n    if (error) {\n        main = (\n            <>\n                <h2>{t('token_error')}</h2>\n                <p>{error}</p>\n            </>\n        );\n    }\n\n    useEffect(() => {\n        if (token) {\n            props.onActivate(token);\n        }\n    }, [token]);\n\n    return (\n        <>\n            <section className=\"activation-page-container\">\n                {redirect}\n                <section className=\"card activation-section\">{main}</section>\n            </section>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    response: state.auth.response,\n    error: state.auth.activationError\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onActivate: data => dispatch(activateUser(data))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivationPage);\n","import React, { useEffect } from 'react';\n\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport './ProfilePage.scss';\n\nimport ChangePasswordForm from '../../components/ChangePasswordForm/ChangePasswordForm';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { resetFormHandler } from '../../helper/formHelper';\nimport { useTranslation } from 'react-i18next';\nimport { PROFILE_FORM, TEACHER_FORM } from '../../constants/reduxForms';\n\nimport {\n    getUserProfile,\n    updateUserPassword,\n    updateUserTeacher\n} from '../../services/userService';\nimport AddTeacherForm from '../../components/AddTeacherForm/AddTeacherForm';\nconst useStyles = makeStyles(theme => ({\n    rootInput: {\n        width: '20em'\n    }\n}));\n\nlet ProfilePage = props => {\n    const { t } = useTranslation('formElements');\n    const classes = useStyles();\n\n    const submitPasswordChange = values => {\n        if (values.new_password !== values.confirm_password) {\n            props.setError({\n                registration: { passwords: t('different_passwords') }\n            });\n            return;\n        }\n        updateUserPassword(values);\n        handlePasswordFormReset();\n    };\n\n    const submitTeacherChange = values => {\n        updateUserTeacher(values);\n    };\n    const handlePasswordFormReset = () => resetFormHandler(PROFILE_FORM);\n    const handleTeacherFormReset = () => resetFormHandler(TEACHER_FORM);\n    useEffect(() => {\n        getUserProfile();\n    }, [localStorage.getItem('userRole')]);\n\n    const renderTeacherdataForm = () => {\n        if (localStorage.getItem('userRole') === 'ROLE_TEACHER') {\n            return (\n                <AddTeacherForm\n                    onSubmit={submitTeacherChange}\n                    onReset={handleTeacherFormReset}\n                />\n            );\n        }\n    };\n\n    return (\n        <>\n            <Card class=\"form-card\">\n                <h2 className=\"form-title\">{t('common:my_profile')}</h2>\n                <section>\n                    <span>{t('email_label') + ': '}</span>\n                    <span>{localStorage.getItem('email')}</span>\n                </section>\n                <ChangePasswordForm\n                    onSubmit={submitPasswordChange}\n                    onReset={handlePasswordFormReset}\n                />\n            </Card>\n            {renderTeacherdataForm()}\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    user: state.users.user\n});\n\nexport default connect(mapStateToProps)(ProfilePage);\n","export const authTypes = {\n    LOGIN: 'LOGIN',\n    GOOGLE: 'GOOGLE',\n    REGISTRATION: 'REGISTRATION',\n    RESET_PASSWORD: 'RESET_PASSWORD'\n};\n","import React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Card from '../../share/Card/Card';\nimport renderTextField from '../../share/renderedFields/input';\n\nimport { LOGIN_FORM } from '../../constants/reduxForms';\nimport { authTypes } from '../../constants/auth';\nimport { GOOGLE_LOGIN_URL } from '../../constants/axios';\n\nimport { required } from '../../validation/validateFields';\nimport { FaGoogle } from 'react-icons/fa';\nimport { links } from '../../constants/links';\nimport { Link } from 'react-router-dom';\nimport {\n    setScheduleGroupIdService,\n    setScheduleSemesterIdService,\n    setScheduleTeacherIdService, setScheduleTypeService\n} from '../../services/scheduleService';\nlet LoginForm = props => {\n\n    useEffect(()=>setScheduleSemesterIdService(0))\n    useEffect(()=>setScheduleTeacherIdService(0))\n    useEffect(()=>setScheduleGroupIdService(0))\n    useEffect(()=>setScheduleTypeService(\"\"))\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n\n    const error = props.loginError;\n\n    const translation = props.translation;\n\n    const errorHandling = value => {\n        if (required(value)) props.setError(required(value));\n        else props.setError(null);\n    };\n\n    let form = (\n        <form onSubmit={handleSubmit}>\n            <Field\n                name=\"email\"\n                className=\"form-field\"\n                component={renderTextField}\n                label={t('email_label')}\n                error={!!error}\n                helperText={error ? error.login : null}\n                onChange={e => errorHandling(e.target.value)}\n            />\n            <Field\n                name=\"password\"\n                className=\"form-field\"\n                type=\"password\"\n                component={renderTextField}\n                label={t('password_label')}\n                error={!!error}\n                onChange={() => props.setError(null)}\n            />\n            <Button\n                className=\"buttons-style under-line\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                {translation('login_title')}\n            </Button>\n            <div className=\"group-btns\">\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.REGISTRATION);\n                        props.setError(null);\n                    }}\n                >\n                   <Link  className=\"navLinks\" to={links.Registration}>{translation('no_account')}</Link>\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.RESET_PASSWORD);\n                        props.setError(null);\n                    }}\n                >\n                   <Link  className=\"navLinks\" to={links.RESET_PASSWORD}>{translation('forgot_password')}</Link>\n                </button>\n            </div>\n            {}\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() =>\n                    (window.document.location.href =\n                        process.env.REACT_APP_API_BASE_URL.trim() +\n                        GOOGLE_LOGIN_URL)\n                }\n            >\n                <FaGoogle />\n                {t('login_via_google')}\n            </Button>\n        </form>\n    );\n\n    if (props.isLoading) {\n        form = <CircularProgress />;\n    }\n\n    return (\n        <Card class=\"auth-card\">\n            <h2 className=\"under-line\">{translation('login_page_title')}</h2>\n            {form}\n        </Card>\n    );\n};\n\nLoginForm = reduxForm({\n    form: LOGIN_FORM\n})(LoginForm);\n\nexport default LoginForm;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport Card from '../../share/Card/Card';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { REGISTRATION_FORM } from '../../constants/reduxForms';\nimport { authTypes } from '../../constants/auth';\n\nimport { email, password, required } from '../../validation/validateFields';\nimport { links } from '../../constants/links';\nimport {Link} from 'react-router-dom';\nlet RegistrationForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n\n    const translation = props.translation;\n\n    const error = props.registrationError;\n\n    const emailValidate = { validate: [required, email] };\n    const emailErrorCondition = error && error.registration.reg;\n    const emailAdvancedValidate = {\n        error: !!emailErrorCondition,\n        helperText: emailErrorCondition ? error.registration.reg : ''\n    };\n\n    const passwordValidate = { validate: [required, password] };\n    const passwordsCondition = error && error.registration.passwords;\n    const passwordValidateAdvanced = {\n        error: !!passwordsCondition,\n        helperText: passwordsCondition ? error.registration.passwords : ''\n    };\n\n    const retypePasswordValidate = { validate: [required, password] };\n    const retypePasswordValidateAdvanced = {\n        error: !!passwordsCondition\n    };\n\n    let form = (\n        <form onSubmit={handleSubmit}>\n            <Field\n                name=\"email\"\n                className=\"form-field\"\n                type=\"email\"\n                component={renderTextField}\n                label={t('email_label')}\n                {...(!error ? emailValidate : emailAdvancedValidate)}\n                onChange={e => props.setError(null)}\n            />\n            <Field\n                name=\"password\"\n                className=\"form-field\"\n                type=\"password\"\n                component={renderTextField}\n                label={t('password_label')}\n                {...(!error ? passwordValidate : passwordValidateAdvanced)}\n                onChange={e => props.setError(null)}\n            />\n            <Field\n                name=\"retypePassword\"\n                className=\"form-field\"\n                type=\"password\"\n                component={renderTextField}\n                label={t('retype_password_label')}\n                {...(!error\n                    ? retypePasswordValidate\n                    : retypePasswordValidateAdvanced)}\n            />\n            <Button\n                className=\"buttons-style\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                {translation('create_account')}\n            </Button>\n            <div className=\"group-btns\">\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.LOGIN);\n                        props.setError(null);\n                    }}\n                >\n                   <Link  className=\"navLinks\" to={links.LOGIN}>{translation('account_exist')}</Link>\n                </button>\n            </div>\n        </form>\n    );\n\n    if (props.isLoading) {\n        form = <CircularProgress />;\n    }\n    return (\n        <Card class=\"auth-card\">\n            <h2 className=\"under-line\">\n                {props.translation('registration_page_title')}\n            </h2>\n            {form}\n        </Card>\n    );\n};\n\nRegistrationForm = reduxForm({\n    form: REGISTRATION_FORM\n})(RegistrationForm);\n\nexport default RegistrationForm;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Card from '../../share/Card/Card';\nimport renderTextField from '../../share/renderedFields/input';\n\nimport { RESET_PASSWORD_FORM } from '../../constants/reduxForms';\nimport { authTypes } from '../../constants/auth';\n\nimport { email, required } from '../../validation/validateFields';\nimport { links } from '../../constants/links';\nimport {Link} from 'react-router-dom';\n\nlet ResetPasswordForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n\n    const error = props.resetPasswordError;\n\n    const translation = props.translation;\n\n    const emailValidate = { validate: [required, email] };\n\n    const errorHandling = value => {\n        if (required(value)) {\n            props.setError(required(value));\n        } else {\n            props.setError(null);\n        }\n    };\n\n    let form = (\n        <form onSubmit={handleSubmit}>\n            <Field\n                name=\"email\"\n                className=\"form-field\"\n                component={renderTextField}\n                label={t('email_label')}\n                {...(!error ? emailValidate : error)}\n                onChange={e => {\n                    errorHandling(e.target.value);\n                }}\n            />\n            <Button\n                className=\"buttons-style under-line\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                {translation('reset_password_button')}\n            </Button>\n            <div className=\"group-btns\">\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.LOGIN);\n                        props.setError(null);\n                    }}\n                >\n                  <Link  className=\"navLinks\" to={links.LOGIN} >{translation('login_page_title')}</Link>\n                </button>\n            </div>\n        </form>\n    );\n\n    if (props.isLoading) {\n        form = <CircularProgress />;\n    }\n\n    return (\n        <Card class=\"auth-card\">\n            <h2 className=\"under-line\">\n                {translation('reset_password_page_title')}\n            </h2>\n            {form}\n        </Card>\n    );\n};\n\nResetPasswordForm = reduxForm({\n    form: RESET_PASSWORD_FORM\n})(ResetPasswordForm);\n\nexport default ResetPasswordForm;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { resetFormHandler } from '../../helper/formHelper';\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\n\nimport {\n    LOGIN_FORM,\n    REGISTRATION_FORM,\n    RESET_PASSWORD_FORM\n} from '../../constants/reduxForms';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\nimport { links } from '../../constants/links';\nimport { authTypes } from '../../constants/auth';\nimport { userRoles } from '../../constants/userRoles';\nimport { validation } from '../../constants/validation';\n\nimport LoginForm from '../../components/LoginForm/LoginForm';\nimport RegistrationForm from '../../components/RegistrationForm/RegistrationForm';\nimport ResetPasswordForm from '../../components/ResetPasswordForm/ResetPasswordForm';\n\nimport {\n    authUser,\n    registerUser,\n    resetUserPassword,\n    setAuthError,\n    setLoading\n} from '../../redux/actions/index';\n\nimport './Auth.scss';\n\nconst Auth = props => {\n    const { t } = useTranslation('common');\n    const [authType, setAuthType] = useState(authTypes.LOGIN);\n\n    const error = props.error;\n    var url = window.document.location;\n    var parser = new URL(url);\n\n    const socialLoginHandler = data => {\n        props.setLoading(true);\n        if (!data.token || data.token.length < 20) {\n            props.setError({ login: t('broken_token') });\n            return;\n        }\n        setAuthType(authTypes.GOOGLE);\n        props.onAuth(data);\n        resetFormHandler(LOGIN_FORM);\n        window.history.replaceState({}, document.title, '/');\n        props.setLoading(false);\n    };\n\n    let social = false;\n    let isToken = false;\n    let token = '';\n\n    if (parser.search.length > 0) {\n        const params = parser.search.split('&');\n        if (params) {\n            params.map(param => {\n                const splitedParam = param.split('=');\n                if (splitedParam) {\n                    if (\n                        splitedParam[0] === '?social' &&\n                        splitedParam[1] === 'true'\n                    ) {\n                        social = true;\n                    }\n                    if (\n                        splitedParam[0] === 'token' &&\n                        splitedParam[1].length > 0\n                    ) {\n                        isToken = true;\n                        token = splitedParam[1];\n                    }\n                }\n            });\n        }\n        if (social && isToken)\n            socialLoginHandler({ authType: 'google', token });\n    }\n\n    useEffect(() => {\n        if (\n            authType === authTypes.REGISTRATION &&\n            props.response &&\n            props.response.data.hasOwnProperty('message')\n        ) {\n            setAuthType(authTypes.LOGIN);\n            message = t('successful_registered_message');\n            handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n        }\n    }, [props.response]);\n\n    useEffect(() => {\n        if (\n            props.resetPasswordResponse &&\n            props.resetPasswordResponse.data.hasOwnProperty('message')\n        ) {\n            setAuthType(authTypes.LOGIN);\n            message = t('successful_reset_password_message');\n            handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n        }\n    }, [props.resetPasswordResponse]);\n\n    const loginHandler = loginData => {\n        if (!loginData.email || !loginData.password) {\n            props.setError({ login: t('empty_fields') });\n            return;\n        }\n        if (!validation.EMAIL.test(loginData.email)) {\n            props.setError({ login: t('validationMessages:email') });\n            return;\n        }\n        props.onAuth(loginData);\n        props.setLoading(true);\n        resetFormHandler(LOGIN_FORM);\n    };\n\n    const registrationHandler = registrationData => {\n        if (registrationData.password !== registrationData.retypePassword) {\n            props.setError({\n                registration: { passwords: t('different_passwords') }\n            });\n            return;\n        }\n        props.onRegister({\n            email: registrationData.email,\n            password: registrationData.password\n        });\n        props.setLoading(true);\n        resetFormHandler(REGISTRATION_FORM);\n    };\n\n    const resetPasswordHandler = resetPasswordData => {\n        props.onResetPassword({\n            email: resetPasswordData.email\n        });\n        props.setLoading(true);\n        resetFormHandler(RESET_PASSWORD_FORM);\n    };\n\n    let isSuccess, message;\n    const isLoading = props.loading;\n\n    if (!error && props.userRole) {\n        const token = props.token;\n        isSuccess = !!token;\n        message = t('successful_login_message');\n        handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n    }\n\n    const commonCondition = !error && isSuccess && !isLoading;\n\n    let authRedirect = null;\n    if (commonCondition && props.userRole === userRoles.MANAGER) {\n        authRedirect = <Redirect to={links.ADMIN_PAGE} />;\n    } else if (commonCondition && props.userRole) {\n        authRedirect = <Redirect to={links.HOME_PAGE} />;\n    } else if (commonCondition && props.userRole === userRoles.TEACHER) {\n        authRedirect = <Redirect to={links.HOME_PAGE} />;\n    }\n\n    const switchAuthModeHandler = authType => {\n        setAuthType(authType);\n    };\n\n    let authPage;\n\n    switch (authType) {\n        case authTypes.LOGIN:\n            document.title = t('login_page_title');\n            authPage = (\n                <LoginForm\n                    isLoading={isLoading}\n                    loginError={error}\n                    onSubmit={loginHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n            break;\n        case authTypes.REGISTRATION:\n            document.title = t('registration_page_title');\n            authPage = (\n                <RegistrationForm\n                    isLoading={isLoading}\n                    registrationError={error}\n                    onSubmit={registrationHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n            break;\n        case authTypes.RESET_PASSWORD:\n            document.title = t('reset_password_page_title');\n            authPage = (\n                <ResetPasswordForm\n                    isLoading={isLoading}\n                    resetPasswordError={error}\n                    onSubmit={resetPasswordHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n            break;\n        default:\n            document.title = t('login_page_title');\n            authPage = (\n                <LoginForm\n                    isLoading={isLoading}\n                    loginError={error}\n                    onSubmit={loginHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n    }\n\n    return (\n        <div className=\"auth-form\">\n            {authRedirect}\n            {authPage}\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    response: state.auth.response,\n    resetPasswordResponse: state.auth.resetPasswordResponse,\n    error: state.auth.error,\n    token: state.auth.token,\n    userRole: state.auth.role,\n    loading: state.loadingIndicator.loading\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: data => dispatch(authUser(data)),\n        onRegister: data => dispatch(registerUser(data)),\n        onResetPassword: data => dispatch(resetUserPassword(data)),\n        setLoading: isLoading => dispatch(setLoading(isLoading)),\n        setError: error => dispatch(setAuthError(error))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n","import React, { useEffect, useState } from 'react';\nimport { authTypes } from '../../constants/auth';\nimport '../../containers/Auth/Auth.scss';\nimport Auth from '../../containers/Auth/Auth';\n\nconst Register = () => {\n    return <Auth authType={authTypes.REGISTRATION}/>\n};\nexport {Register}\n","import React, { useEffect, useState } from 'react';\nimport { authTypes } from '../../constants/auth';\nimport '../../containers/Auth/Auth.scss';\nimport Auth from '../../containers/Auth/Auth';\n\nconst ResetPassword = () => {\n    return <Auth authType={authTypes.RESET_PASSWORD}/>\n};\nexport {ResetPassword}","import React, { useEffect, useState } from 'react';\nimport { authTypes } from '../../constants/auth';\nimport '../../containers/Auth/Auth.scss';\nimport Auth from '../../containers/Auth/Auth';\n\nconst Login = () => {\n    return <Auth authType={authTypes.LOGIN}/>\n};\nexport {Login}","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Redirect,\n    Route,\n    Switch\n} from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Header from '../components/Header/Header';\n\nimport HomePage from '../containers/Home/Home';\nimport TeacherSchedule from '../components/TeacherSchedule/TeacherSchedule';\nimport SchedulePage from '../containers/SchedulePage/SchedulePage';\nimport AdminPage from '../containers/AdminPage/AdminPage';\nimport Logout from '../containers/Auth/Logout/Logout';\nimport ActivationPage from '../containers/ActivationPage/ActivationPage';\nimport ProfilePage from '../containers/ProfilePage/ProfilePage';\nimport { links } from '../constants/links';\nimport { userRoles } from '../constants/userRoles';\nimport TeacherList from '../containers/TeachersList/TeachersList';\nimport BusyRooms from '../containers/BusyRooms/BusyRooms';\nimport GroupList from '../containers/GroupList/GroupList';\nimport ClassSchedule  from '../containers/ClassSchedule/ClassSchedule';\nimport RoomList from '../containers/RoomList/RoomList';\nimport SubjectPage from '../containers/SubjectPage/SubjectPage';\nimport SemesterPage from '../containers/SemesterPage/SemesterPage';\nimport MergeRolePage from '../containers/MergeRolePage/MergeRolePage';\nimport ChangePasswordForm from '../components/ChangePasswordForm/ChangePasswordForm';\nimport GroupSchedulePage from '../components/GroupSchedulePage/GroupSchedulePage';\nimport { Register } from '../components/Register/Register';\nimport { ResetPassword } from '../components/ResetPassword/ResetPassword';\nimport { Login } from '../components/Login/Login';\nimport DepartmentPage from '../containers/DepartmentPage/DepartmentPage';\nconst Routers = props => {\n    const userRole = props.userRole;\n\n    let routes = (\n        <Switch>\n            <Route path={links.Registration} component={Register}/>\n            <Route path={links.HOME_PAGE} exact component={HomePage} />\n            <Route path={links.ScheduleFor} component={GroupSchedulePage}/>\n            <Route path={links.ADMIN_PAGE}>\n                <Redirect to={links.LOGIN} />\n            </Route>\n            <Route path={links.LOGIN} component={Login} />\n            <Route path={links.ACTIVATION_PAGE} component={ActivationPage} />\n            <Route path={links.MY_PROFILE} component={ProfilePage} />\n\n        </Switch>\n    );\n\n    if (userRole === userRoles.MANAGER) {\n        routes = (\n            <Switch>\n                <Route path={links.SCHEDULE_PAGE} component={SchedulePage} />\n                <Route path={links.Departments} component={DepartmentPage}/>\n                <Route path={links.Registration} component={Register}/>\n                <Route path={links.RESET_PASSWORD} component={ResetPassword}/>\n                <Route path={links.HOME_PAGE} exact component={HomePage} />\n\n                <Route path={links.LessonPage}  component={AdminPage} />\n                <Route path={links.TeacherList}  component={TeacherList} />\n                <Route exact path={links.GroupList} component={GroupList} />\n\n                <Route path={`${links.GroupList}${links.Group}${links.Edit}${links.IdParam}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.Delete}${links.IdParam}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.AddStudent}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.SetDisable}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.ShowStudents}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.Student}${links.IdStudentParam}${links.Edit}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.Student}${links.IdStudentParam}${links.Delete}`}  component={GroupList} />\n\n                <Route path={links.ClassScheduleTitle}  component={ClassSchedule} />\n                <Route path={links.RoomList}  component={RoomList} />\n                <Route path={links.SubjectPage}  component={SubjectPage} />\n                <Route path={links.BusyRooms}  component={BusyRooms} />\n                <Route path={links.SemesterPage}  component={SemesterPage} />\n                <Route path={links.MergeRolePage}  component={MergeRolePage} />\n                <Route path={links.Changes}  component={ChangePasswordForm} />\n\n\n                <Route path={links.ACTIVATION_PAGE}>\n                    <Redirect to={links.ADMIN_PAGE} />\n                </Route>\n                <Route path={links.LOGIN} component={Login} />\n\n                <Route path={links.ADMIN_PAGE} component={AdminPage} />\n                <Route path={links.LOGOUT} component={Logout} />\n                <Route path={links.MY_PROFILE} component={ProfilePage} />\n                <Route path={links.ScheduleFor} component={GroupSchedulePage}/>\n\n\n            </Switch>\n        );\n    } else if (userRole) {\n        routes = (\n            <Switch>\n                <Route path={links.Registration} component={Register}/>\n                <Route path={links.RESET_PASSWORD} component={ResetPassword}/>\n                <Route path={links.HOME_PAGE} exact component={HomePage} />\n\n\n                <Route\n                    path={links.TEACHER_SCHEDULE}\n                    component={TeacherSchedule}\n                />\n                <Route path={links.SCHEDULE_PAGE}>\n                    <Redirect to={links.LOGIN} />\n                </Route>\n                <Route path={links.ADMIN_PAGE}>\n                    <Redirect to={links.LOGIN} />\n                </Route>\n                <Route path={links.LOGIN} component={Login} />\n                <Route path={links.ACTIVATION_PAGE}>\n                    <Redirect to={links.HOME_PAGE} />\n                </Route>\n                <Route path={links.MY_PROFILE} component={ProfilePage} />\n                <Route path={links.LOGOUT} component={Logout} />\n                <Route path={links.ScheduleFor} component={GroupSchedulePage}/>\n            </Switch>\n        );\n    }\n    return (\n        <Router>\n            <Header userRole={userRole} roles={userRoles} />\n            {routes}\n        </Router>\n    );\n};\n\nconst mapStateToProps = state => ({ userRole: state.auth.role });\n\nexport default connect(mapStateToProps)(Routers);\n","import React, { Suspense, useEffect } from 'react';\nimport './App.scss';\nimport Routers from './router/Routers';\nimport './helper/i18n';\nimport { connect } from 'react-redux';\n\nimport { authCheckState } from './redux/actions/index';\nimport { handleSnackbarCloseService } from './services/snackbarService';\nimport SnackbarComponent from './share/Snackbar/SnackbarComponent';\n\nconst App = props => {\n    const { isSnackbarOpen, snackbarType, snackbarMessage } = props;\n    const handleSnackbarClose = (event, reason) => {\n        if (!reason === 'clickaway') {\n            return;\n        }\n\n        handleSnackbarCloseService();\n    };\n\n    useEffect(() => {\n        props.onTryAutoLogin();\n    }, []);\n\n    return (\n        <Suspense fallback={null}>\n            <div className=\"container\">\n                <Routers />\n                <SnackbarComponent\n                    message={snackbarMessage}\n                    type={snackbarType}\n                    isOpen={isSnackbarOpen}\n                    handleSnackbarClose={handleSnackbarClose}\n                />\n            </div>\n        </Suspense>\n    );\n};\n\nconst mapStateToProps = state => ({\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onTryAutoLogin: () => dispatch(authCheckState())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './redux/reducers/index';\nimport rootSaga from './sagas';\n\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers =\n    (process.env.NODE_ENV === 'development'\n        ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n        : null) || compose;\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}