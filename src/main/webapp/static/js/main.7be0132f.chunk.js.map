{"version":3,"sources":["redux/reducers/teachers.js","redux/actions/actionsType.js","redux/utility.js","redux/reducers/lesson.js","redux/reducers/temporarySchedule.js","redux/reducers/snackbar.js","helper/axios.js","constants/tokenBegin.js","redux/reducers/auth.js","redux/reducers/loadingIndicator.js","redux/reducers/schedule.js","redux/reducers/class.js","redux/reducers/subjects.js","redux/reducers/groups.js","redux/reducers/rooms.js","constants/actionTypes.js","redux/reducers/roomTypes.js","redux/reducers/busyRooms.js","redux/reducers/semesters.js","redux/reducers/users.js","redux/reducers/freeRooms.js","redux/reducers/departments.js","redux/reducers/students.js","redux/reducers/index.js","services/authService.js","constants/axios.js","helper/i18n.js","sagas/authSaga.js","sagas/logoutSaga.js","sagas/checkAuthTimeoutSaga.js","sagas/checkAuthStateSaga.js","sagas/registrationSaga.js","sagas/activateUserSaga.js","sagas/resetUserPasswordSaga.js","sagas/watchers.js","sagas/index.js","validation/validateFields.js","constants/links.js","components/LanguageSelector/LanguageSelector.js","constants/schedule/colors.js","redux/actions/temporarySchedule.js","redux/actions/snackbar.js","redux/actions/users.js","redux/actions/loadingIndicator.js","redux/actions/schedule.js","redux/actions/teachers.js","redux/actions/class.js","redux/actions/groups.js","redux/actions/semesters.js","services/snackbarService.js","constants/snackbarTypes.js","helper/handlerAxios.js","services/loadingService.js","helper/formHelper.js","services/scheduleService.js","services/busyRooms.js","redux/actions/busyRooms.js","constants/schedule/cssClasses.js","share/Card/Card.js","validation/storeValidation.js","constants/validation.js","share/renderedFields/select.js","share/renderedFields/error.js","services/semesterService.js","constants/reduxForms.js","constants/schedule/days.js","components/FreeRoomForm/freeRoomForm.js","services/classService.js","containers/FreeRooms/freeRooms.js","services/freeRoomsService.js","redux/actions/freeRooms.js","components/Header/Header.js","constants/userRoles.js","helper/prepareSchedule.js","constants/disabledCard.js","share/modals/modal/linkToMeetingDialog.js","components/LinkToMeeting/LinkToMeeting.js","constants/places.js","helper/renderTeacher.js","helper/renderScheduleTable.js","components/GroupSchedulePageTop/GroupSchedulePageTop.js","components/GroupSchedulePage/GroupSchedulePage.js","containers/Home/Home.js","share/renderedFields/timeSemester.js","components/TeacherScheduleForm/TeacherScheduleForm.js","components/TeacherSchedule/TeacherSchedule.js","services/groupService.js","helper/ObjectRevision.js","services/teacherService.js","services/lessonService.js","redux/actions/lesson.js","services/roomService.js","redux/actions/rooms.js","components/Board/Board.js","components/ScheduleItem/ScheduleItem.js","helper/strings.js","components/ScheduleLessonsList/ScheduleLessonsList.js","components/ScheduleDialog/ScheduleDialog.js","components/Schedule/Schedule.js","containers/SchedulePage/SchedulePage.js","share/renderedFields/input.js","redux/actions/departments.js","services/departmentService.js","helper/disableComponent.js","components/AddTeacherForm/AddTeacherForm.js","share/modals/dialog.js","constants/cardType.js","helper/search.js","share/SearchPanel/SearchPanel.js","share/NotFound/NotFound.js","components/AddGroupForm/AddGroupForm.js","share/Snackbar/SnackbarComponent.js","services/subjectService.js","redux/actions/subjects.js","services/studentService.js","redux/actions/students.js","helper/pageRedirection.js","share/modals/modal/AddStudentDialog.js","helper/renderStudentTable.js","services/uploadFile.js","components/UploadFile/UploadFile.js","share/modals/modal/showStudentsDialog.js","helper/shortTitle.js","containers/GroupList/GroupList.js","components/AddRoomForm/AddRoomForm.js","services/roomTypesService.js","redux/actions/roomTypes.js","components/AddNewRoomType/AddNewRoomType.js","containers/RoomList/RoomList.js","components/AddSubjectForm/AddSubjectForm.js","containers/SubjectPage/SubjectPage.js","share/modals/modal/modal.js","share/renderedFields/checkbox.js","helper/MultiselectForGroups.js","components/SemesterForm/SemesterForm.js","components/SemesterCopyForm/SemesterCopyForm.js","share/modals/modal/setDefaultDialog.js","containers/SemesterPage/SemesterPage.js","services/userService.js","containers/MergeRolePage/MergeRolePage.js","components/ChangePasswordForm/ChangePasswordForm.js","containers/BusyRooms/BusyRooms.js","constants/navigation.js","helper/multiselect.js","containers/TeachersList/TeachersList.js","helper/reduxFormHelper.js","share/renderedFields/renderMultiselect.js","components/LessonForm/LessonForm.js","share/renderedFields/time.js","components/ClassForm/ClassForm.js","constants/common.js","containers/ClassSchedule/ClassSchedule.js","components/AddDepartmentForm/AddDepartmentForm.js","helper/renderTeacherTable.js","share/modals/modal/showDataDialog.js","containers/DepartmentPage/DepartmentPage.js","constants/navigationComponents.js","components/Navigation/NavigationPage.js","share/modals/chooseGroupDialog/CopyLessonDialog.js","components/LessonsList/LessonsList.js","components/CopyLessonsFromSemesterForm/CopyLessonsFromSemesterForm.js","containers/LessonPage/LessonPage.js","containers/AdminPage/AdminPage.js","containers/Auth/Logout/Logout.js","redux/actions/auth.js","containers/ActivationPage/ActivationPage.js","containers/ProfilePage/ProfilePage.js","constants/auth.js","components/LoginForm/LoginForm.js","components/RegistrationForm/RegistrationForm.js","components/ResetPasswordForm/ResetPasswordForm.js","containers/Auth/Auth.js","components/Register/Register.js","components/ResetPassword/ResetPassword.js","components/Login/Login.js","services/temporaryScheduleService.js","components/TemporarySchedule/TemporaryScheduleForm/TemporaryScheduleForm.js","components/TemporarySchedule/TemporaryScheduleCard/TemporaryScheduleCard.js","components/TemporarySchedule/TemporaryScheduleCardButtons/TemporaryScheduleCardButtons.js","components/TemporarySchedule/ScheduleAndTemporaryScheduleList/ScheduleAndTemporaryScheduleList.js","constants/temporaryScheduleRadioTypes.js","components/TemporarySchedule/TemporaryScheduleTitle/TemporaryScheduleTitle.js","components/TemporarySchedule/TemporaryScheduleList/TemporaryScheduleList.js","components/TemporarySchedule/TemporaryScheduleVacationForm/TemporaryScheduleVacationForm.js","containers/TemporarySchedule/TemporarySchedule.js","router/Routers.js","components/SuccessSnackbar/SuccessSnackbar.js","redux/actions/snackBarReducer.js","App.js","serviceWorker.js","index.js"],"names":["compare","a","b","comparison","surname","teachers","state","teacher","disabledTeachers","action","type","result","sort","filter","id","updatedTeacher","forEach","push","updateObject","oldObject","updatedValues","initialState","lessons","lessonTypes","lesson","groupId","uniqueError","reducer","concat","updatedLessons","temporarySchedules","temporarySchedule","vacation","schedulesAndTemporarySchedules","teacherId","changedScheduleId","isSnackbarOpen","snackbarType","message","isOpen","REACT_APP_API_BASE_URL","undefined","process","trim","instance","axios","create","baseURL","token","localStorage","getItem","includes","defaults","headers","common","Authorization","role","error","activationError","response","login","removeItem","registration","reg","resetPasswordResponse","loading","scheduleLoading","semesterLoading","items","availability","itemsIds","fullSchedule","groupSchedule","scheduleType","scheduleGroupId","currentSemester","defaultSemester","viewTeacherScheduleResults","itemArr","index","findIndex","item","splice","newType","itemGroupId","scheduleTeacherId","newArr","teacherSchedule","semesters","scheduleSemesterId","semesterId","teacherRangeSchedule","classActions","classScheduler","classScheduleOne","classSchedulOne","one","classScheduleItem","classSchedulerstate","classItem","subjects","subject","disabledSubjects","updatedSubjects","groups","group","disabledGroups","Number","updatedGroups","name","rooms","oneRoom","disabledRooms","roomItem","roomState","actionType","roomTypes","oneType","updateTypeState","typeItem","roomTypeItem","busyRooms","semester","disabledSemesters","archivedSemesters","updatedSemesters","archivedSemester","find","users","user","freeRooms","freeRoom","departments","department","disabledDepartments","disable","updatedDepartments","updatedDefaultDepartments","students","student","updatedStudents","rootReducer","combineReducers","auth","snackbar","schedule","loadingIndicator","form","formReducer","authUserService","request","hasOwnProperty","authType","data","email","post","then","registerUserService","resetUserPasswordService","put","activateUserService","logoutUserService","userLang","navigator","language","userLanguage","slice","lang","i","i18n","use","LanguageDetector","initReactI18next","Backend","init","lng","backend","loadPath","fallbackLng","debug","ns","defaultNS","keySeparator","useDataAttrOptions","interpolation","escapeValue","formatSeparator","react","wait","authSaga","payload","call","jwtDecode","require","decodedJWT","expirationDate","Date","exp","setItem","roles","sub","expirationTime","getTime","t","logoutSaga","checkAuthTimeoutSaga","delay","checkAuthStateSaga","registrationSaga","activateUserSaga","resetUserPasswordSaga","watchUserAuthentication","takeLatest","takeEvery","startForman","fork","min","max","links","HOME_PAGE","ADMIN_PAGE","SCHEDULE_PAGE","LOGIN","ACTIVATION_PAGE","LOGOUT","TEACHER_SCHEDULE","MY_PROFILE","LessonPage","TeacherList","GroupList","Group","Student","Edit","Delete","AddStudent","SetDisable","ShowStudents","IdParam","IdStudentParam","ClassScheduleTitle","RoomList","SubjectPage","BusyRooms","SemesterPage","MergeRolePage","Changes","ScheduleFor","Registration","RESET_PASSWORD","Departments","LanguageSelector","props","useTranslation","radioLangClasses","languages","changeLanguage","event","target","value","RadioGroup","row","aria-label","className","img","title","map","langItem","FormControlLabel","key","control","Radio","color","onChange","src","alt","renderLangControls","colors","setTemporarySchedules","res","setSchedulesAndTemporarySchedules","selectTemporarySchedule","selectVacation","selectTeacherId","setOpenSnackbar","setUser","setLoading","setCurrentSemester","setDefaultSemester","checkAvailabilitySchedule","setFullSchedule","setScheduleType","setTeacher","deleteTeacher","showAllTeachers","setClassScheduleList","showAllGroups","updateSemester","handleSnackbarOpenService","store","dispatch","handleSnackbarCloseService","snackbarStore","getState","snackbarTypes","errorHandler","successHandler","setLoadingService","isLoading","setScheduleLoadingService","setSemesterLoadingService","resetFormHandler","formName","reset","getCurrentSemesterService","get","catch","err","getDefaultSemesterService","getScheduleItemsService","getScheduleItemsServiceBySemester","BUSY_ROOMS","deleteItemFromScheduleService","itemId","delete","setScheduleGroupIdService","setScheduleGroupId","setScheduleTypeService","getFullSchedule","getGroupSchedule","getTeacherSchedule","setScheduleTeacherIdService","setScheduleTeacherId","showAllPublicSemestersService","setScheduleSemesterIdService","setScheduleSemesterId","showAllPublicGroupsService","length","cardType","setTeacherServiceViewType","setTeacherViewType","cssClasses","Card","class","card","children","dragItemNode","useRef","dragItem","draggable","handleDragEnd","e","JSON","parse","childNodes","groupTitleEl","document","getElementById","allBoards","getElementsByClassName","groupTitles","boards","style","backgroundColor","board","background","display","current","removeEventListener","onDragStart","groupTitle","setTimeout","classList","contains","setItemGroupIdService","addEventListener","dataTransfer","setData","checkUniqSemester","storeSemester","year","description","toUpperCase","validation","EMAIL","PASSWORD","required","lessThanZero","minLengthValue","maxLengthValue","lessThanTime","previousValue","allValues","values","moment","toDate","field","greaterThanTime","uniqueClassName","classId","some","_arr","class_name","checkUniqClassName","uniqueGroup","checkUniqueGroup","uniqueSubject","subjectTitle","checkUniqueSubject","uniqueDepartment","departmentTitle","checkUniqueDepartment","timeIntersect","startTime","endTime","extendMoment","Moment","incomeRange","range","intersect","timeIntersectService","uniqueRoomName","roomName","roomdId","checkUniqueRoomName","test","password","minYearValue","minYear","getFullYear","lessThanDate","greaterThanDate","renderSelectField","input","label","meta","touched","custom","FormControl","InputLabel","htmlFor","Select","native","FormHelperText","renderFromHelper","selectSemesterService","showAllSemestersService","reverse","switchSaveActions","putSemester","postSemester","handleSemesterService","isUniqueError","semester_days","semester_classes","prop","Object","prototype","indexOf","substring","startDay","endDay","semester_groups","cardSemester","checkSemesterYears","currentScheduleOld","findCurrentSemester","dateEndYear","dateStartYear","conf","window","confirm","getDisabledSemestersService","getArchivedSemestersService","semesterItem","setDisabledSemesters","daysUppercase","day","FreeRoomForm","useEffect","handleSubmit","pristine","submitting","onReset","class_names","classSchedulerOne","onSubmit","Field","component","validate","week","toLowerCase","classNum","Button","variant","disabled","onClick","reduxForm","connect","getClassScheduleListService","bufferArray","results","getPublicClassScheduleListService","putAddClassScheduleOneService","postAddClassScheduleOneService","useState","open","setOpen","Dialog","onClose","maxWidth","aria-labelledby","elem","FREE_ROOMS_URL","dayOfWeek","evenOdd","StyledMenu","withStyles","paper","border","Menu","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuItem","theme","root","palette","primary","main","white","MenuItem","React","anchorEl","setAnchorEl","handleClick","currentTarget","handleClose","anchorElUser","setAnchorElUser","handleClickUserMenu","handleCloseUserMenu","userRole","MANAGER","leftLinks","menu","userMenu","to","aria-controls","aria-haspopup","ListItemIcon","fontSize","keepMounted","Boolean","textDecoration","TEACHER","getUserMenu","CircularProgress","size","userRoles","USER","makeFullSchedule","groupsCount","groupList","groupListId","Map","daysPrepArrayFull","done","set","prep_schedule_array","oddArray","evenArray","groupItem","groupIndex","classFull","groupFullIterate","days","dayFullIterate","classes","dayFullIterable","weeks","odd","even","cards","resultArray","disabledCard","LinkToMeetingDialog","cardId","isHide","linkToMeeting","disableBackdropClick","DialogTitle","href","LinkToMeeting","openDialog","setOpenDialog","focus","places","TOGETHER","AUDITORY","ONLINE","getFirstLetter","word","charAt","getTeacherFullName","patronymic","getTeacherForSite","position","handleTeacherInfo","getTeacherShortPosition","teacherPosition","parseShortPosition","shortid","currentDay","now","getDay","matchDayNumberSysytemToDayName","setLink","place","getHref","printWeekNumber","startScheduleDate","date","parsed","Array","from","numberOfDays","Math","floor","ceil","getWeekNumber","isOddFunction","num","currentWeekType","renderClassCell","prepareLessonCardCell","inner","subjectForSite","prepareLessonSubCardCell","room","i18next","lessonType","link","prepareLessonTemporaryCardCell","temporary_schedule","prepareTeacherCardRegularCell","buildLessonWithRoom","prepareTeacherCardCell","renderScheduleGroupHeader","TableHead","TableRow","TableCell","generate","renderGroupTable","isOdd","TableContainer","Table","TableBody","classDay","classIndex","isOddWeek","entries","renderGroupDayClass","renderGroupCells","isCurrentDay","colspan","rowspan","classname","skip_render","weekly_render","colSpan","rowSpan","renderDay","dayName","dayItem","semesterClassesCount","cardIndex","prepareForRender","day_name","classesCount","dayClassName","oddWeekClass","evenWeekClass","Fragment","renderFirstDayFirstClassFirstCardLine","renderFirstDayOtherClassFirstCardLine","renderFullSchedule","fullResultSchedule","scheduleTitle","renderScheduleDays","renderTeacherClassCell","teacherLessonAddCellClass","buildGroupNumber","prepareTeacherTemporaryCardCell","renderWeekTable","scheduleRow","clas","renderClassRow","renderTeacherRangeSchedule","dayIndex","renderTeacherRangeDay","renderFirstLineTable","lessonItem","subject_for_site","group_name","lessonClassName","lessonIndex","renderLessonsRestLines","useStyles","makeStyles","margin","spacing","initialValues","groupDisabled","setGroupDisabled","setSemesterId","loadingContainer","initialize","renderSemesterList","change","labelId","setPlace","history","useHistory","location","useLocation","emptySchedule","renderDownloadLink","entity","entityId","languageToRequest","PUBLIC_DOWNLOAD_GROUP_SCHEDULE_URL","PUBLIC_DOWNLOAD_TEACHER_SCHEDULE_URL","rel","download","renderSchedule","resultArrays","evenDaysPrepArray","oddDaysPrepArray","evenDayPrep","oddDayPrep","oddDay","oddClas","clasIndex","dayArr","evenDay","evenClas","makeGroupSchedule","renderGroupScheduleTitle","oddDays","evenDays","oddClasses","evenClasses","dayTeacher","oddClass","evenClass","makeTeacherSchedule","getTeacherWithPosition","renderTeacherScheduleTitle","archive","groupPath","teacherPath","submitSearchSchedule","changePlace","pathname","params","URLSearchParams","search","getSchedule","renderMounthPicker","inputProps","invalid","utils","MomentUtils","DatePicker","minDate","clearable","format","helperText","add","renderMonthPicker","FOR_TEACHER_SCHEDULE_URL","replace","getTeacherScheduleService","selectGroupService","showAllGroupsService","createGroupService","updateGroupService","getDisabledGroupsService","setDisabledGroups","isObjectEmpty","object","toString","stringify","showAllTeachersService","getTeachersWithoutAccount","updateTeacherService","updateTeacherCard","getDisabledTeachersService","selectTeacherCardService","handleTeacherService","cardTeacher","createTeacherService","teacherCardId","getLessonsByGroupService","getLessonTypesService","handleLessonCardService","cardObj","groupData","lessonCardId","hours","grouped","cardObjectHandler","storeLesson","checkUniqLesson","setUniqueErrorService","isCopy","updateLessonCard","selectLessonCardService","updateLessonHandler","selectGroupIdService","showListOfRoomsService","getDisabledRoomsService","createRoomService","newValue","typeDescription","Board","onDrop","preventDefault","card_id","getData","arr","split","obj","lessonId","periodId","SCHEDULE_CHECK_AVAILABILITY_URL","checkAvailabilityScheduleService","setModalData","onDragOver","onDragLeave","parent","parentNode","onMouseOver","dayClassWeek","addClassDayBoard","onMouseLeave","remove","removeClassDayBoard","ScheduleItem","translation","fStrLetterCapital","addition","itemNodeId","deleteNodeId","isGroupped","inBoard","deleteItem","editItem","firstStringLetterCapital","str","c","GroupField","styled","TextField","width","ScheduleLessonsList","defaultProps","options","getOptionLabel","option","firstStringLetterCapitalHandle","Autocomplete","clearOnEscape","openOnFocus","groupFinderHandle","renderInput","els","hoursInSchedule","lessonItems","roomField","ScheduleDialog","itemData","setRoom","sure","setSure","x","y","available","classSuitsToTeacher","teacherAvailable","Schedule","setItemData","prevGroupId","ref","usePrevious","el","scrollIntoView","block","inline","setNewItemHandle","addItemToScheduleService","roomId","setEditItemHandle","SCHEDULE_ITEM_ROOM_CHANGE","handleClickOpen","dayContainerHeight","elClasses","dayContainer","height","maxHeight","deleteItemFromScheduleHandler","editItemOnScheduleHandler","period","ROOMS_AVAILABILITY","checkAvailabilityChangeRoomScheduleService","conditionFunc","classNumber","addDeleteBtnToItem","itemNode","deleteNode","allLessons","getDayColour","itemInBoard","scheduleItems","handleClearSchedule","CLEAR_SCHEDULE_URL","renderTextField","placeholder","setEnabledDepartment","getAllDepartmentsService","setDisabledDepartmentService","clearDepartment","getDepartmentByIdService","setDisableButton","getClearOrCancelTitle","AddTeacher","initializeFormHandler","onSetSelectedCard","ConfirmDialog","whatDelete","LESSON","CLASS","GROUP","ROOM","TYPE","TEMPORARY_SCHEDULE","SUBJECT","SEMESTER","term","String","SearchPanel","SearchChange","showDisabled","showArchived","setTerm","checkedB","checkedArchived","setState","handleChange","checked","Switch","NotFound","match","url","Alert","SnackbarComponent","handleSnackbarClose","Snackbar","autoHideDuration","severity","selectSubjectService","subjectId","showAllSubjectsService","createSubjectService","updateSubjectService","getDisabledSubjectsService","setDisabledSubjects","getAllStudentsByGroupId","updateStudentService","selectStudentService","prevGroup","studentId","goToGroupPage","AddStudentDialog","useStyles1","flexShrink","marginLeft","RenderStudentTableActions","useTheme","count","page","rowsPerPage","onPageChange","IconButton","direction","useStyles2","table","minWidth","StyledTableCell","head","black","body","StyledTableRow","hover","RenderStudentTable","onDeleteStudent","checkBoxStudents","handleCheckElement","handleAllChecked","handleAllClear","handleChangeCheckedAllBtn","handleClearCheckedAllBtn","checkedAllBtn","handleAllCheckedBtn","setPage","setRowsPerPage","openDeleteDialog","setOpenDeleteDialog","openEditDialog","setOpenEditDialog","path","handleEdit","emptyRows","deleteStudent","handleCloseEditDialog","sendObject","getCorrectRowCount","pageItemsCount","resRows","detectCheckingCheckAllBtn","rowsCount","handleCheckElem","Paper","scope","align","mailto","sendMail","selectedValue","TableFooter","TablePagination","labelRowsPerPage","rowsPerPageOptions","SelectProps","newPage","onRowsPerPageChange","parseInt","ActionsComponent","UploadFile","selectedFile","setSelectedFile","fileInputRef","handleCloseDialogFile","accept","files","file","formData","FormData","append","alert","uploadStudentsToGroupFile","ShowStudentsDialog","setCheckBoxStudents","checkedAll","setCheckedAll","openUploadFile","setOpenUploadFile","showStudentList","setShowStudentList","groupOption","setGroupOption","defaultGroup","setDefaultGroup","parseStudentToCheckBox","groupsOption","changeStudentItem","resData","getExistingGroupStudent","clearSelection","studentsTmp","prevState","start","finish","resChecked","setSelectDisabled","defaultValue","currentStudents","resItem","getShortTitle","MAX_LENGTH","snackbarMessage","setGroupId","hideDialog","setHideDialog","addStudentDialog","setAddStudentDialog","setDisabled","showStudents","setShowStudents","handleAddUser","handleSetDisable","onShowStudentByGroup","idStudent","visibleGroups","studentSubmit","sendData","createStudentService","navigationNames","GROUP_LIST","val","navigation","GROUPS","setEnabledGroupService","setDisabledGroupService","removeGroupCardService","deleteStudentService","handleGroupService","reason","AddRoom","roomType","putNewType","postNewType","NewRoomType","typeId","setTypeId","getOneNewTypeService","roomTypeId","setRoomId","editHandler","selectOneRoomService","visibleItems","ROOM_LIST","ROOMS","setEnabledRoomsService","setDisabledRoomsService","deleteRoom","addNewTypeService","textAlign","setSubjectId","visibleSubjects","SUBJECT_PAGE","SUBJECTS","setDisabledSubjectsService","removeSubjectCardService","handleSubjectService","ModalWindow","windowTitle","isOkButton","isNoButton","okButtonLabel","renderOkButton","noButtonLabel","renderNoButton","renderModalButtons","renderCheckboxField","labelPlacement","Checkbox","MultiselectForGroups","valueRef","onCancel","selectAllOption","isSelectAllSelected","isOptionSelected","actionMeta","removedValue","hideSelectedOptions","closeMenuOnSelect","isMulti","clearCheckboxes","setCurrent","setByDefault","setCheckedDates","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY","selected","setSelected","selectedGroups","setSelectedGroups","openGroupDialog","setOpenGroupDialog","getGroupOptions","groupOptions","semesterOptions","closeDialogForGroup","prepSetCheckedClasses","useForm","setValue","setCheckedClasses","getToday","byDefault","tomorrow","setDate","getDate","getTomorrow","finishTime","setFinishTime","startValue","setStartValue","finishValue","setFinishValue","disabledFinishDate","setDisabledFinishDate","checkedDates","checkedClasses","setMinFinishDate","time","new_date","setCheckedDaysHandler","useCallback","changedDay","setCheckedClassesHandler","classid","changedClass","newDays","reduce","classFullItem","newClasses","isChosenGroup","beginGroups","getChosenSet","resGroup","getChosenSetRemove","isSameOrBefore","setEndTime","keys","semesterDay","scheduleItem","available_semesters_for_copy","submitButtonLabel","SetChangeDialog","openDefault","setOpenDefault","openModal","setOpenModal","openGroupsDialog","setOpenGroupsDialog","setSemesterOptions","edit","setEdit","hideDialogModal","setHideDialogModal","archived","setArchived","handleCreateArchive","CREATE_ARCHIVE_SEMESTER","createArchiveSemesterService","searchArr","setDelete","setDefault","dataId","setEnabledSemestersService","setDisabledSemestersService","removeSemesterCardService","handleSemesterArchivedPreview","viewArchivedSemester","setClassNameForDefaultSemester","SEMESTER_PAGE","SEMESTERS","SEMESTER_COPY_URL","fromSemesterId","toSemesterId","semesterCopy","sem_days","handleClickOpenModal","handleClickOpenDefault","join","arr1","arr2","isEqualsArrObjects","groupIds","setGroupsToSemester","getUsersService","autoCompleteField","defaultPropsTeachers","defaultPropsUsers","mergeUserAndTeacherHandle","mergeObj","userId","USERS","ExpandMoreIcon","Accordion","AccordionSummary","expandIcon","Typography","AccordionDetails","busyRoomsLength","renderWeekRoomInfo","scheduleClass","in_arrayIndex","class_id","classOne","intersectClass","grouppedLessonClass","lessonOne","hoverInfo","teacher_for_site","busyRoom","room_id","room_name","room_type","schedules","renderRoomDay","TEACHER_LIST","CLASS_SCHEDULE_TITLE","DEPARTMENTS","LESSON_PAGE","MERGE_ROLE_PAGE","CHANGES","GENERAL","MultiSelect","onChangeSemesterValue","onSentTeachers","isEnabledSentBtn","setTeacherId","openSelect","setOpenSelect","teacherLength","selectedSemester","setSelectedSemester","departmentOptions","selectTeacherCard","removeTeacherCard","removeTeacherCardService","closeSelectionDialog","TEACHERS","setEnabledTeachersService","setDisabledTeachersService","teachersId","sendTeachersScheduleService","setValueToSubjectForSiteHandler","RenderMultiselect","hidePlaceholder","displayValue","selectedValues","alwaysDisplayedItem","onBlur","onSelect","onRemove","preSelectedValues","disablePreSelectedValues","notSelected","LessonForm","setChecked","rowsMax","multiline","renderTimePicker","TimePicker","ampm","rootInput","ClassScheduleOne","setClassId","getClassScheduleOneService","PERIOD","deleteClassScheduleOneService","addClassScheduleOneService","clear","editDepartment","RenderTeacherTableActions","RenderTeacherTable","isDisabled","setIsDisabled","deleteDialog","setDeleteDialog","departmentId","setDepartmentId","setDepartment","teacherDialog","setTeacherDialog","setEditDepartment","clearDepartmentForm","visibleDepartments","deleteDepartment","setDepartmentIntoForm","deleteDepartmentsService","prev","createDepartmentService","updateDepartmentService","showAllPublicTeachersByDepartmentService","general","tabs_components","a11yProps","flexGrow","header","info","dark","nav","select","btn","gen","setGen","document_title","AppBar","Tabs","indicatorColor","scrollButtons","tab_one","Tab","groupField","CopyLessonDialog","setGroup","setError","multiple","LessonsList","getUkWordHours","number","getHour","getEnHour","lastChar","getUkHour","onCopyLesson","onSelectLesson","onClickOpen","getTitle","getTeacherName","openCopyLessonDialog","setOpenCopyLessonDialog","setLessonId","copiedLesson","setCopiedLesson","lessonLength","selectLessonCardHandler","submitCopy","LESSONS_FROM_SEMESTER_COPY_URL","CopyLessonsFromSemesterService","cardsContainer","groupHandle","groupTitleHandle","lessonGroupObj","copyLessonCardService","deleteLessonCard","constructor","renderCopyLessonsForm","LESSONS","onLogout","onActivate","redirect","AUTH","submitTeacherChange","teacher_name","teacher_surname","teacher_patronymic","teacher_position","updateUserTeacher","handlePasswordFormReset","handleTeacherFormReset","console","log","new_password","confirm_password","current_password","updateUserPassword","passwords","renderTeacherdataForm","authTypes","LoginForm","loginError","switchAuthMode","RegistrationForm","registrationError","emailValidate","emailErrorCondition","emailAdvancedValidate","passwordValidate","passwordsCondition","passwordValidateAdvanced","retypePasswordValidate","retypePasswordValidateAdvanced","ResetPasswordForm","resetPasswordError","onAuth","onRegister","onResetPassword","setAuthType","parser","URL","social","isToken","param","splitedParam","replaceState","isSuccess","loginHandler","loginData","commonCondition","authRedirect","authPage","switchAuthModeHandler","registrationData","retypePassword","resetPasswordData","Register","ResetPassword","Login","getTemporarySchedulesService","getTeacherTemporarySchedulesService","deleteTemporaryScheduleService","temporaryScheduleId","handleSuccessMessage","formatObj","formValues","scheduleId","handleSuccess","isVacation","addTemporaryScheduleService","editTemporaryScheduleService","tId","selectTemporaryScheduleService","selectVacationService","selectTeacherIdService","TemporaryScheduleForm","setIsVacation","notify","setNotify","periods","teacherForSite","setValueToTeacherForSiteHandler","Hidden","smUp","smDown","xsDown","xsUp","TemporaryScheduleCard","TemporaryScheduleCardButtons","isTemporary","onOpenDialog","handleScheduleSelect","ScheduleAndTemporaryScheduleList","expandedProp","shortId","setTemporaryScheduleId","expanded","scheduleAndTemporarySchedule","ExpansionPanel","ExpansionPanelSummary","ExpansionPanelDetails","Divider","orientation","flexItem","temporary_schedule_vacation","temporaryScheduleRadioTypes","teacherField","dateGroup","justifyContent","dateField","button","panel","legendBlock","legend","TemporaryScheduleTitle","setDay","radio","setRadio","setToDate","fromDate","setFromDate","handleTeacherSelect","heading","handleFindTeacher","fDate","tDate","TemporaryScheduleList","TemporaryScheduleVacationForm","isFewDays","setIsFewDays","forAll","setForAll","vacationId","addTemporaryScheduleForRangeService","routes","exact","HomePage","GroupSchedulePage","ActivationPage","ProfilePage","SchedulePage","DepartmentPage","AdminPage","ClassSchedule","TemporarySchedule","Logout","TeacherSchedule","SuccessSnackbar","useDispatch","useSelector","successSnackbarMessage","successSnackbarOpen","aria-describedby","Icon","onTryAutoLogin","authCheckState","fallback","hostname","sagaMiddleware","createSagaMiddleware","composeEnhancers","compose","createStore","applyMiddleware","run","rootSaga","ReactDOM","render","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.7be0132f.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionsType';\nfunction compare(a, b) {\n    let comparison = 0;\n    if (a.surname > b.surname) {\n        comparison = 1;\n    } else if (a.surname < b.surname) {\n        comparison = -1;\n    }\n    return comparison;\n}\n\nconst teachers = (\n    state = {\n        teachers: [],\n        teacher: {},\n        disabledTeachers: []\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.ADD_TEACHER:\n            return {\n                ...state,\n                teachers: [...state.teachers, action.result].sort(compare)\n            };\n\n        case actionTypes.DELETE_TEACHER:\n            return {\n                ...state,\n                teachers: [\n                    ...state.teachers.filter(\n                        teachers => teachers.id !== action.result\n                    )\n                ]\n            };\n\n        case actionTypes.SET_TEACHER:\n            return {\n                ...state,\n                teacher: action.result\n            };\n        case actionTypes.SELECT_TEACHER:\n            let teacher = state.teachers.filter(\n                teacher => teacher.id === action.result\n            )[0];\n            if (!teacher) {\n                teacher = { id: null };\n            }\n            return {\n                ...state,\n                teacher: teacher\n            };\n\n        case actionTypes.UPDATE_TEACHER:\n            const updatedTeacher = [];\n            state.teachers.forEach(teacher => {\n                if (teacher.id === action.result.id) {\n                    teacher = { ...teacher, ...action.result };\n                }\n                updatedTeacher.push(teacher);\n            });\n            return {\n                ...state,\n                teacher: {},\n                teachers: updatedTeacher\n            };\n\n        case actionTypes.SHOW_ALL:\n            return {\n                ...state,\n                teachers: [...action.result]\n            };\n        case actionTypes.SET_DISABLED_TEACHERS:\n            return {\n                ...state,\n                disabledTeachers: [...action.result]\n            };\n        case actionTypes.GET_TEACHERS_BY_DEPARTMENT:\n            return {\n            ...state,\n            teachers: [...action.result]\n        };\n\n        default:\n            return state;\n    }\n};\n\nexport default teachers;\n","export const ADD_LESSON_CARD = 'ADD_LESSON_CARD';\nexport const SET_LESSONS_CARDS = 'SET_LESSONS_CARDS';\nexport const SET_LESSON_TYPES = 'SET_LESSON_TYPES';\nexport const DELETE_LESSON_CARD = 'DELETE_LESSON_CARD';\nexport const SELECT_LESSON_CARD = 'SELECT_LESSON_CARD';\nexport const UPDATE_LESSON_CARD = 'UPDATE_LESSON_CARD';\nexport const SELECT_GROUP_ID = 'SELECT_GROUP_ID';\nexport const SET_UNIQUE_ERROR = 'SET_UNIQUE_ERROR';\n\nexport const SET_TEMPORARY_SCHEDULES = 'SET_TEMPORARY_SCHEDULES';\nexport const SET_SCHEDULES_AND_TEMPORARY_SCHEDULES = 'SET_SCHEDULES_AND_TEMPORARY_SCHEDULES';\nexport const SELECT_TEMPORARY_SCHEDULE = 'SELECT_TEMPORARY_SCHEDULE';\nexport const SELECT_VACATION = 'SELECT_VACATION';\nexport const SELECT_TEACHER_ID = 'SELECT_TEACHER_ID';\n\nexport const SET_OPEN_SNACKBAR = 'SET_OPEN_SNACKBAR';\n\nexport const SET_USERS = 'SET_USERS';\nexport const SET_USER = 'SET_USER';\n\nexport const AUTH_USER = 'AUTH_USER';\nexport const AUTH_USER_SUCCESS = 'AUTH_USER_SUCCESS';\nexport const AUTH_USER_ERROR = 'AUTH_USER_ERROR';\nexport const AUTH_USER_INITIATE_LOGOUT = 'AUTH_USER_INITIATE_LOGOUT';\nexport const AUTH_USER_LOGOUT = 'AUTH_USER_LOGOUT';\nexport const AUTH_USER_AUTO_LOGOUT = 'AUTH_USER_AUTO_LOGOUT';\nexport const AUTH_USER_CHECK_STATE = 'AUTH_USER_CHECK_STATE';\nexport const SET_AUTH_ERROR = 'SET_AUTH_ERROR';\n\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const REGISTER_USER_ERROR = 'REGISTER_USER_ERROR';\n\nexport const RESET_USER_PASSWORD = 'RESET_USER_PASSWORD';\nexport const RESET_USER_PASSWORD_SUCCESS = 'RESET_USER_PASSWORD_SUCCESS';\nexport const RESET_USER_PASSWORD_ERROR = 'RESET_USER_PASSWORD_ERROR';\n\nexport const ACTIVATE_USER = 'ACTIVATE_USER';\nexport const ACTIVATE_USER_SUCCESS = 'ACTIVATE_USER_SUCCESS';\nexport const ACTIVATE_USER_ERROR = 'ACTIVATE_USER_ERROR';\n\nexport const SET_LOADING_INDICATOR = 'SET_LOADING_INDICATOR';\nexport const SET_SCHEDULE_LOADING_INDICATOR = 'SET_SCHEDULE_LOADING_INDICATOR';\nexport const SET_SEMESTER_LOADING_INDICATOR = 'SET_SEMESTER_LOADING_INDICATOR';\n\nexport const SET_SCHEDULE_ITEMS = 'SET_SCHEDULE_ITEMS';\nexport const SET_CURRENT_SEMESTER = 'SET_CURRENT_SEMESTER';\nexport const SET_DEFAULT_SEMESTER = 'SET_DEFAULT_SEMESTER';\nexport const ADD_ITEM_TO_SCHEDULE = 'ADD_ITEM_TO_SCHEDULE';\nexport const CHECK_AVAILABILITY_SCHEDULE = 'CHECK_AVAILABILITY_SCHEDULE';\nexport const SET_FULL_SCHEDULE = 'SET_FULL_SCHEDULE';\nexport const SET_GROUP_SCHEDULE = 'SET_GROUP_SCHEDULE';\nexport const SET_SCHEDULE_TYPE = 'SET_SCHEDULE_TYPE';\nexport const DELETE_ITEM_FROM_SCHEDULE = 'DELETE_ITEM_FROM_SCHEDULE';\nexport const SET_ITEM_GROUP_ID = 'SET_ITEM_GROUP_ID';\n\nexport const ADD_TEACHER = 'ADD_TEACHER';\nexport const SELECT_TEACHER = 'SELECT_TEACHER';\nexport const SET_TEACHER = 'SET_TEACHER';\nexport const UPDATE_TEACHER = 'UPDATE_TEACHER';\nexport const DELETE_TEACHER = 'DELETE_TEACHER';\nexport const SHOW_ALL = 'SHOW_ALL';\nexport const GET_TEACHERS_BY_DEPARTMENT='GET_TEACHERS_BY_DEPARTMENT';\n\n\nexport const SHOW_ALL_BUSY_ROOMS = 'SHOW_ALL_BUSY_ROOMS';\n\nexport const SET_CLASS_SCHEDULE_LIST = 'SET_CLASS_SCHEDULE_LIST';\nexport const ADD_CLASS_SCHEDULE_ONE = 'ADD_CLASS_SCHEDULE_ONE';\nexport const GET_CLASS_SCHEDULE_LIST = 'GET_CLASS_SCHEDULE_LIST';\nexport const GET_CLASS_SCHEDULE_ONE = 'GET_CLASS_SCHEDULE_ONE';\nexport const DELETE_CLASS_SCHEDULE_ONE = 'DELETE_CLASS_SCHEDULE_ONE';\nexport const UPDATE_CLASS_SCHEDULE_ONE = 'UPDATE_CLASS_SCHEDULE_ONE';\nexport const CLEAR_CLASS_SCHEDULE_ONE = 'CLEAR_CLASS_SCHEDULE_ONE';\n\nexport const ADD_GROUP = 'ADD_GROUP';\nexport const DELETE_GROUP = 'DELETE_GROUP';\nexport const SHOW_ALL_GROUPS = 'SHOW_ALL_GROUPS';\nexport const SELECT_GROUP = 'SELECT_GROUP';\nexport const UPDATE_GROUP = 'UPDATE_GROUP';\nexport const CLEAR_GROUP = 'CLEAR_GROUP';\n\nexport const ADD_STUDENT='ADD_STUDENT';\nexport const SHOW_ALL_STUDENTS_BY_GROUP_ID='SHOW_ALL_STUDENTS_BY_GROUP_ID';\nexport const SHOW_ALL_STUDENTS='SHOW_ALL_STUDENTS';\nexport const DELETE_STUDENT='DELETE_STUDENT';\nexport const SET_STUDENT='SET_STUDENT';\nexport const UPDATE_STUDENT='UPDATE_STUDENT';\n\nexport const ADD_ROOM = 'ADD_ROOM';\nexport const DELETE_ROOM = 'DELETE_ROOM';\nexport const SHOW_LIST_OF_ROOMS = 'SHOW_LIST_OF_ROOMS';\nexport const SELECT_ONE_ROOM = 'SELECT_ONE_ROOM';\nexport const UPDATE_ONE_ROOM = 'UPDATE_ONE_ROOM';\nexport const CLEAR_ROOM_ONE = 'CLEAR_ROOM_ONE';\nexport const GET_ALL_ROOM_TYPES = 'GET_ALL_ROOM_TYPES';\nexport const POST_NEW_TYPE = 'POST_NEW_TYPE';\nexport const DELETE_TYPE = 'DELETE_TYPE';\nexport const GET_ONE_NEW_TYPE = 'GET_ONE_NEW_TYPE';\nexport const UPDATE_ONE_TYPE = 'UPDATE_ONE_TYPE';\nexport const CLEAR_ONE_NEW_TYPE = 'CLEAR_ONE_NEW_TYPE';\nexport const SHOW_FREE_ROOMS = 'SHOW_FREE_ROOMS';\nexport const CLEAR_FREE_ROOM = 'CLEAR_FREE_ROOM';\n\nexport const ADD_SUBJECT = 'ADD_SUBJECT';\nexport const DELETE_SUBJECT = 'DELETE_SUBJECT';\nexport const SHOW_ALL_SUBJECTS = 'SHOW_ALL_SUBJECT';\nexport const SELECT_SUBJECT = 'SELECT_SUBJECT';\nexport const UPDATE_SUBJECT = 'UPDATE_SUBJECT';\nexport const CLEAR_SUBJECT = 'CLEAR_SUBJECT';\n\nexport const ADD_DEPARTMENT='ADD_DEPARTMENT';\nexport const GET_ALL_DEPARTMENTS='GET_ALL_DEPARTMENTS';\nexport const CLEAR_DEPARTMENT_FORM='CLEAR_DEPARTMENT_FORM';\nexport const DELETE_DEPARTMENT='DELETE_DEPARTMENT';\nexport const GET_DISABLED_DEPARTMENTS='GET_DISABLED_DEPARTMENTS';\nexport const SET_DISABLED_DEPARTMENT='SET_DISABLED_DEPARTMENT';\nexport const SET_ENABLED_DEPARTMENT='SET_ENABLED_DEPARTMENT';\nexport const GET_DEPARTMENT_BY_ID='GET_DEPARTMENT_BY_ID';\nexport const UPDATE_DEPARTMENT='UPDATE_DEPARTMENT';\n\nexport const SET_SCHEDULE_GROUP_ID = 'SET_SCHEDULE_GROUP_ID';\n\nexport const ADD_SEMESTER = 'ADD_SEMESTER';\nexport const DELETE_SEMESTER = 'DELETE_SEMESTER';\nexport const SHOW_ALL_SEMESTERS = 'SHOW_ALL_SEMESTER';\nexport const SELECT_SEMESTER = 'SELECT_SEMESTER';\nexport const UPDATE_SEMESTER = 'UPDATE_SEMESTER';\nexport const CLEAR_SEMESTER = 'CLEAR_SEMESTER';\nexport const SET_ERROR = 'SET_ERROR';\nexport const SET_ARCHIVED_SEMESTERS = 'SET_ARCHIVED_SEMESTERS';\n\nexport const SET_DISABLED_ROOMS = 'SET_DISABLED_ROOMS';\nexport const SET_DISABLED_TEACHERS = 'SET_DISABLED_TEACHERS';\nexport const SET_DISABLED_GROUPS = 'SET_DISABLED_GROUPS';\nexport const SET_DISABLED_SEMESTERS = 'SET_DISABLED_SEMESTERS';\nexport const SET_DISABLED_SUBJECTS = 'SET_DISABLED_SUBJECTS';\n\nexport const SET_SCHEDULE_TEACHER_ID = 'SET_SCHEDULE_TEACHER_ID';\nexport const SET_TEACHER_SCHEDULE = 'SET_TEACHER_SCHEDULE';\nexport const SET_SEMESTER_LIST = 'SET_SEMESTER_LIST';\nexport const SET_SCHEDULE_SEMESTER_ID = 'SET_SCHEDULE_SEMESTER_ID';\nexport const SET_TEACHER_RANGE_SCHEDULE = 'SET_TEACHER_RANGE_SCHEDULE';\nexport const SET_TEACHER_VIEW_TYPE = 'SET_TEACHER_VIEW_TYPE';\nexport const MOVE_SEMESTER_TO_ARCHIVE = 'MOVE_SEMESTER_TO_ARCHIVE';\n","export const updateObject = (oldObject, updatedValues) => {\n  return {\n    ...oldObject,\n    ...updatedValues\n  };\n};\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    lessons: [],\n    lessonTypes: [],\n    lesson: {},\n    groupId: null,\n    uniqueError: false\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_LESSON_CARD:\n            return updateObject(state, {\n                lessons: state.lessons.concat(action.result)\n            });\n        case actionTypes.SET_LESSONS_CARDS:\n            return updateObject(state, {\n                lessons: action.result\n            });\n        case actionTypes.SET_LESSON_TYPES:\n            return updateObject(state, {\n                lessonTypes: action.result\n            });\n        case actionTypes.DELETE_LESSON_CARD:\n            state.lessons = state.lessons.filter(\n                lesson => lesson.id !== action.result\n            );\n            return updateObject(state, {\n                lessons: state.lessons\n            });\n        case actionTypes.SELECT_LESSON_CARD:\n            let lesson = state.lessons.filter(\n                lesson => lesson.id === action.result\n            )[0];\n            if (!lesson) {\n                lesson = { id: null };\n            }\n            return updateObject(state, {\n                lesson: lesson\n            });\n        case actionTypes.UPDATE_LESSON_CARD:\n            const updatedLessons = [];\n            state.lessons.forEach(lesson => {\n                if (lesson.id === action.result.id) {\n                    lesson = { ...lesson, ...action.result };\n                }\n                updatedLessons.push(lesson);\n            });\n            return updateObject(state, {\n                lessons: updatedLessons,\n                lesson: {}\n            });\n        case actionTypes.SELECT_GROUP_ID:\n            return updateObject(state, {\n                lesson: {},\n                groupId: action.result\n            });\n        case actionTypes.SET_UNIQUE_ERROR:\n            return updateObject(state, {\n                uniqueError: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    temporarySchedules: [],\n    temporarySchedule: {},\n    vacation: {},\n    schedulesAndTemporarySchedules: [],\n    teacherId: null,\n    changedScheduleId: null\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_TEMPORARY_SCHEDULES:\n            return updateObject(state, {\n                temporarySchedules: action.result\n            });\n        case actionTypes.SET_SCHEDULES_AND_TEMPORARY_SCHEDULES:\n            return updateObject(state, {\n                schedulesAndTemporarySchedules: action.result\n            });\n        case actionTypes.SELECT_TEMPORARY_SCHEDULE:\n            return updateObject(state, {\n                temporarySchedule: action.result\n            });\n        case actionTypes.SELECT_VACATION:\n            return updateObject(state, {\n                vacation: action.result\n            });\n        case actionTypes.SELECT_TEACHER_ID:\n            return updateObject(state, {\n                teacherId: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    isSnackbarOpen: false,\n    snackbarType: null,\n    message: null\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_OPEN_SNACKBAR:\n            let type = action.result.type;\n            let message = action.result.message;\n            return updateObject(state, {\n                isSnackbarOpen: action.result.isOpen,\n                snackbarType: type,\n                message: message\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import axios from 'axios';\nimport { TOKEN_BEGIN } from '../constants/tokenBegin';\n\nlet REACT_APP_API_BASE_URL = \"/\";\nif(process.env.REACT_APP_API_BASE_URL !== undefined){\n    REACT_APP_API_BASE_URL = process.env.REACT_APP_API_BASE_URL.trim();\n}\nconst instance = axios.create({\n    baseURL: REACT_APP_API_BASE_URL\n});\n\nconst token = localStorage.getItem('token');\nif (token && token.includes(TOKEN_BEGIN)) {\n    instance.defaults.headers.common.Authorization = token;\n}\n\nexport default instance;\n","export const TOKEN_BEGIN= 'Bearer_';\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\nimport axios from '../../helper/axios';\n\nconst initialState = {\n    token: null,\n    role: null,\n    error: null,\n    activationError: null\n};\n\nconst reducer = (state = initialState, action) => {\n    const response = action.response;\n\n    switch (action.type) {\n        case actionTypes.AUTH_USER_SUCCESS:\n            return updateObject(state, {\n                token: response.token,\n                role: response.role,\n                error: null\n            });\n        case actionTypes.AUTH_USER_ERROR:\n            return updateObject(state, {\n                response,\n                error: { login: action.error }\n            });\n        case actionTypes.AUTH_USER_LOGOUT:\n            delete axios.defaults.headers.common.Authorization;\n\n            localStorage.removeItem('token');\n            localStorage.removeItem('expirationDate');\n            localStorage.removeItem('userRole');\n            return updateObject(state, {\n                response: null,\n                token: null,\n                error: null,\n                role: null\n            });\n        case actionTypes.REGISTER_USER_SUCCESS:\n            return updateObject(state, {\n                response\n            });\n        case actionTypes.REGISTER_USER_ERROR:\n            return updateObject(state, {\n                error: { registration: { reg: action.error } }\n            });\n        case actionTypes.RESET_USER_PASSWORD_SUCCESS:\n            return updateObject(state, {\n                resetPasswordResponse: response\n            });\n        case actionTypes.RESET_USER_PASSWORD_ERROR:\n            return updateObject(state, {\n                error: action.error\n            });\n        case actionTypes.ACTIVATE_USER_SUCCESS:\n            return updateObject(state, {\n                response\n            });\n        case actionTypes.ACTIVATE_USER_ERROR:\n            return updateObject(state, {\n                activationError: action.error\n            });\n        case actionTypes.SET_AUTH_ERROR:\n            return updateObject(state, {\n                error: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    loading: false,\n    scheduleLoading: false,\n    semesterLoading: false\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_LOADING_INDICATOR:\n            return updateObject(state, {\n                loading: action.result\n            });\n        case actionTypes.SET_SCHEDULE_LOADING_INDICATOR:\n            return updateObject(state, {\n                scheduleLoading: action.result\n            });\n        case actionTypes.SET_SEMESTER_LOADING_INDICATOR:\n            return updateObject(state, {\n                semesterLoading: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    items: [],\n    availability: {},\n    itemsIds: [],\n    fullSchedule: [],\n    groupSchedule: {},\n    scheduleType: '',\n    scheduleGroupId: 0,\n    currentSemester: {},\n    defaultSemester:{},\n    viewTeacherScheduleResults: 'block-view'\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_SCHEDULE_ITEMS:\n            return updateObject(state, {\n                items: action.result\n            });\n        case actionTypes.SET_CURRENT_SEMESTER:\n            return updateObject(state, {\n                currentSemester: action.result\n            });\n        case actionTypes.SET_DEFAULT_SEMESTER:\n            return updateObject(state, {\n                defaultSemester: action.result\n            });\n        case actionTypes.CHECK_AVAILABILITY_SCHEDULE:\n            return updateObject(state, {\n                availability: action.result\n            });\n        case actionTypes.ADD_ITEM_TO_SCHEDULE:\n            const id = action.result.id;\n            let itemArr;\n            if (id) {\n                const index = state.items.findIndex(item => {\n                    return item.id === id;\n                });\n                if (index < 0) {\n                    itemArr = state.items.concat(action.result);\n                } else {\n                    state.items.splice(index, 1, action.result);\n                    itemArr = state.items;\n                }\n            } else {\n                itemArr = state.items.concat(action.result);\n            }\n            return updateObject(state, {\n                items: itemArr\n            });\n        case actionTypes.SET_SCHEDULE_TYPE:\n            return updateObject(state, {\n                groupSchedule: {},\n                fullSchedule: [],\n                scheduleType: action.newType\n            });\n        case actionTypes.SET_FULL_SCHEDULE:\n            updateObject(state, {\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n            return updateObject(state, {\n                fullSchedule: action.result\n            });\n        case actionTypes.SET_GROUP_SCHEDULE:\n            return updateObject(state, {\n                groupSchedule: action.result,\n                fullSchedule: [],\n\n            });\n        case actionTypes.SET_ITEM_GROUP_ID:\n            return updateObject(state, {\n                itemGroupId: action.result\n            });\n        case actionTypes.SET_SCHEDULE_GROUP_ID:\n            return updateObject(state, {\n                scheduleGroupId: action.groupId,\n                scheduleTeacherId: null,\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n        case actionTypes.DELETE_ITEM_FROM_SCHEDULE:\n            const index = state.items.findIndex(\n                item => item.id === action.result\n            );\n            state.items.splice(index, 1);\n            const newArr = state.items;\n            return updateObject(state, {\n                items: newArr\n            });\n\n        case actionTypes.SET_SCHEDULE_TEACHER_ID:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                scheduleTeacherId: action.teacherId,\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n        case actionTypes.SET_TEACHER_SCHEDULE:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                teacherSchedule: action.result,\n                scheduleTeacherId:`${action.result.teacher.id}`,\n                groupSchedule: {},\n                fullSchedule: []\n            });\n        case actionTypes.SET_SEMESTER_LIST:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                scheduleTeacherId: null,\n                teacherSchedule: {},\n                groupSchedule: {},\n                fullSchedule: [],\n                semesters: action.result\n            });\n        case actionTypes.SET_SCHEDULE_SEMESTER_ID:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                scheduleTeacherId: null,\n                scheduleSemesterId: action.semesterId,\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n        case actionTypes.SET_TEACHER_RANGE_SCHEDULE:\n            return updateObject(state, {\n                teacherRangeSchedule: action.result,\n                scheduleGroupId: null,\n                teacherSchedule: [],\n                groupSchedule: {},\n                fullSchedule: []\n            });\n        case actionTypes.SET_TEACHER_VIEW_TYPE:\n            return updateObject(state, {\n                viewTeacherScheduleResults: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from \"../actions/actionsType\";\nconst classActions = (\n  state = {\n    classScheduler: [],\n    classScheduleOne: {}\n  },\n  action\n) => {\n  switch (action.type) {\n    case actionTypes.SET_CLASS_SCHEDULE_LIST:\n      return {\n        ...state,\n        classScheduler: [...action.classScheduler]\n      };\n    case actionTypes.ADD_CLASS_SCHEDULE_ONE:\n      return {\n        ...state,\n        classScheduleOne: {},\n        classScheduler: [...state.classScheduler, action.classSchedulOne]\n      };\n    case actionTypes.GET_CLASS_SCHEDULE_LIST:\n      return state;\n    case actionTypes.GET_CLASS_SCHEDULE_ONE:\n      const one = state.classScheduler.filter(\n        classScheduleItem => classScheduleItem.id === action.classSchedulOne\n      );\n      return {\n        ...state,\n        classScheduleOne: one[0]\n      };\n    case actionTypes.DELETE_CLASS_SCHEDULE_ONE:\n      return {\n        ...state,\n        classScheduler: state.classScheduler.filter(\n          classScheduleItem => classScheduleItem.id !== action.classSchedulOne\n        )\n      };\n    case actionTypes.UPDATE_CLASS_SCHEDULE_ONE:\n      let classSchedulerstate = [...state.classScheduler];\n      classSchedulerstate[\n        classSchedulerstate.findIndex(\n          classItem => classItem.id === action.classSchedulOne.id\n        )\n      ] = action.classSchedulOne;\n      return {\n        ...state,\n        classScheduleOne: {},\n        classScheduler: [...classSchedulerstate]\n      };\n    case actionTypes.CLEAR_CLASS_SCHEDULE_ONE:\n      return {\n        ...state,\n        classScheduleOne: {}\n      };\n    default:\n      return state;\n  }\n};\nexport default classActions;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    subjects: [],\n    subject: {},\n    disabledSubjects: []\n};\n\nconst subjects = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_SUBJECT:\n            return updateObject(state, {\n                subjects: state.subjects.concat(action.result),\n                subject: state.subject\n            });\n\n        case actionTypes.DELETE_SUBJECT:\n            state.subjects = state.subjects.filter(\n                subject => subject.id !== action.result\n            );\n            return updateObject(state, {\n                subjects: state.subjects,\n                subject: state.subject\n            });\n\n        case actionTypes.SHOW_ALL_SUBJECTS:\n            return updateObject(state, {\n                subjects: action.result,\n                subject: state.subject\n            });\n\n        case actionTypes.SET_DISABLED_SUBJECTS:\n            return updateObject(state, {\n                disabledSubjects: action.result\n            });\n\n        case actionTypes.SELECT_SUBJECT:\n            let subject = state.subjects.filter(\n                subject => subject.id === action.result\n            )[0];\n            if (!subject) {\n                subject = { id: null };\n            }\n            return updateObject(state, {\n                subjects: state.subjects,\n                subject: subject\n            });\n\n        case actionTypes.UPDATE_SUBJECT:\n            const updatedSubjects = [];\n            state.subjects.forEach(subject => {\n                if (subject.id === action.result.id) {\n                    subject = { ...subject, ...action.result };\n                }\n                updatedSubjects.push(subject);\n            });\n            return updateObject(state, {\n                subjects: updatedSubjects,\n                subject: {}\n            });\n\n        case actionTypes.CLEAR_SUBJECT:\n            return {\n                ...state,\n                subject: {}\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default subjects;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    groups: [],\n    group: {},\n    disabledGroups: []\n};\n\nconst groups = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_GROUP:\n            return updateObject(state, {\n                groups: state.groups.concat(action.result),\n                group: state.group\n            });\n\n        case actionTypes.DELETE_GROUP:\n            state.groups = state.groups.filter(\n                group => group.id !== action.result\n            );\n            return updateObject(state, {\n                groups: state.groups,\n                group: state.group\n            });\n\n        case actionTypes.SHOW_ALL_GROUPS:\n            return updateObject(state, {\n                ...state,\n                groups: action.result\n            });\n        case actionTypes.SET_DISABLED_GROUPS:\n            return updateObject(state, {\n                ...state,\n                disabledGroups: action.result\n            });\n\n        case actionTypes.SELECT_GROUP:\n            let group = state.groups.filter(\n                group => group.id === Number(action.result)\n            )[0];\n\n            if (!group) {\n                group = { id: null };\n            }\n            return updateObject(state, {\n                groups: state.groups,\n                group: group\n            });\n\n        case actionTypes.UPDATE_GROUP:\n            const updatedGroups = [];\n            state.groups.forEach(group => {\n                if (group.id === action.result.id) {\n                    group = { ...group, ...action.result };\n                }\n                updatedGroups.push(group);\n            });\n            return updateObject(state, {\n                groups: updatedGroups,\n                group: {}\n            });\n\n        case actionTypes.CLEAR_GROUP:\n            return {\n                ...state,\n                group: {}\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default groups;\n","import * as actionTypes from '../actions/actionsType';\nfunction compare(a, b) {\n    let comparison = 0;\n    if (a.name > b.name) {\n        comparison = 1;\n    } else if (a.name < b.name) {\n        comparison = -1;\n    }\n    return comparison;\n}\nconst rooms = (\n    state = {\n        rooms: [],\n        oneRoom: {},\n        disabledRooms: []\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.ADD_ROOM:\n            return {\n                ...state,\n                oneRoom: {},\n                rooms: [...state.rooms, action.result].sort(compare)\n            };\n        case actionTypes.DELETE_ROOM:\n            return {\n                ...state,\n                oneRoom: {},\n                rooms: [\n                    ...state.rooms.filter(rooms => rooms.id !== action.result)\n                ]\n            };\n\n        case actionTypes.SHOW_LIST_OF_ROOMS:\n            return {\n                ...state,\n                rooms: [...action.result]\n            };\n        case actionTypes.SET_DISABLED_ROOMS:\n            return {\n                ...state,\n                disabledRooms: [...action.result]\n            };\n        case actionTypes.SELECT_ONE_ROOM:\n            const one = state.rooms.filter(\n                roomItem => roomItem.id === action.result\n            );\n            return {\n                ...state,\n                oneRoom: one[0]\n            };\n        case actionTypes.UPDATE_ONE_ROOM:\n            let roomState = [...state.rooms];\n            roomState[\n                roomState.findIndex(\n                    roomItem => roomItem.id === action.result.id\n                )\n            ] = action.result;\n            return {\n                ...state,\n                oneRoom: {},\n                rooms: [...roomState]\n            };\n        case actionTypes.CLEAR_ROOM_ONE:\n            return {\n                ...state,\n                oneRoom: {}\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default rooms;\n","export const actionType = {\n  CREATED: 'created',\n  DELETED: 'deleted',\n  UPDATED: 'updated'\n};\n","import * as actionTypes from '../actions/actionsType';\nimport actions from 'redux-form/lib/actions';\nimport { actionType } from '../../constants/actionTypes';\n\nconst roomTypes = (\n    state = {\n        roomTypes: [],\n        oneType: {}\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.POST_NEW_TYPE:\n            return {\n                ...state,\n                roomTypes: [...state.roomTypes, action.result]\n            };\n\n        case actionTypes.GET_ALL_ROOM_TYPES:\n            return {\n                ...state,\n                roomTypes: [...action.result]\n            };\n        case actionTypes.DELETE_TYPE:\n            return {\n                ...state,\n                roomTypes: [\n                    ...state.roomTypes.filter(\n                        roomTypes => roomTypes.id !== action.result\n                    )\n                ]\n            };\n\n            case actionTypes.UPDATE_ONE_TYPE:\n                let updateTypeState = [...state.roomTypes];\n                updateTypeState[\n                    updateTypeState.findIndex(\n                        typeItem => typeItem.id === action.result.id\n                    )\n                ] = action.result;\n                return {\n                    ...state,\n                    oneType: {},\n                    roomTypes: [...updateTypeState]\n                };\n                case actionTypes.GET_ONE_NEW_TYPE:\n                    const one = state.roomTypes.filter(\n                        roomTypeItem => roomTypeItem.id === action.result\n                    );\n                    return {\n                        ...state,\n                        oneType: one[0]\n                    };\n        default:\n            return state;\n    }\n};\n\nexport default roomTypes;\n","import * as actionTypes from '../actions/actionsType';\n\nconst busyRooms = (\n    state = {\n        busyRooms: []\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.SHOW_ALL_BUSY_ROOMS:\n            return {\n                ...state,\n                busyRooms: [action.result]\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default busyRooms;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    semesters: [],\n    semester: {},\n    disabledSemesters: [],\n    archivedSemesters: []\n};\n\nconst semesters = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_SEMESTER:\n            return updateObject(state, {\n                semesters: state.semesters.concat(action.result),\n                semester: state.semester\n            });\n\n        case actionTypes.DELETE_SEMESTER:\n            state.semesters = state.semesters.filter(\n                semester => semester.id !== action.result\n            );\n            return updateObject(state, {\n                semesters: state.semesters,\n                semester: state.semester\n            });\n\n        case actionTypes.SHOW_ALL_SEMESTERS:\n            return updateObject(state, {\n                semesters: action.result,\n                semester: state.semester\n            });\n        case actionTypes.SET_DISABLED_SEMESTERS:\n            return updateObject(state, {\n                disabledSemesters: action.result\n            });\n        case actionTypes.SET_ARCHIVED_SEMESTERS:\n            return updateObject(state, {\n                archivedSemesters: action.result\n            });\n\n        case actionTypes.SELECT_SEMESTER:\n            let semester = state.semesters.filter(\n                semester => semester.id === action.result\n            )[0];\n            if (!semester) {\n                semester = { id: null };\n            }\n            return updateObject(state, {\n                semesters: state.semesters,\n                semester: semester\n            });\n\n        case actionTypes.UPDATE_SEMESTER:\n            const updatedSemesters = [];\n            state.semesters.forEach(semester => {\n                if (semester.id === action.result.id) {\n                    semester = { ...semester, ...action.result };\n                }\n                updatedSemesters.push(semester);\n            });\n            return updateObject(state, {\n                semesters: updatedSemesters,\n                semester: {}\n            });\n\n        case actionTypes.MOVE_SEMESTER_TO_ARCHIVE:\n            const archivedSemester = state.semesters.find(\n                semester => semester.id === action.result\n            );\n            state.semesters = state.semesters.filter(\n                semester => semester.id !== action.result\n            );\n            return updateObject(state, {\n                semesters: state.semesters,\n                archivedSemesters: [\n                    ...state.archivedSemesters,\n                    archivedSemester\n                ]\n            });\n        case actionTypes.CLEAR_SEMESTER:\n            return {\n                ...state,\n                semester: {}\n            };\n        case actionTypes.SET_ERROR:\n            return updateObject(state, {\n                uniqueError: action.result\n            });\n\n        default:\n            return state;\n    }\n};\n\nexport default semesters;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    users: [],\n    user: {}\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_USERS:\n            return updateObject(state, {\n                users: action.result\n            });\n        case actionTypes.SET_USER:\n            return updateObject(state, {\n                user: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport actions from 'redux-form/lib/actions';\n\nconst freeRooms = (\n    state = {\n        freeRooms : [],\n        freeRoom : {}\n    }, \n    action\n) => {\n    switch(action.type) {\n        case actionTypes.SHOW_FREE_ROOMS:\n            return {\n                ...state,\n                freeRooms: action.result\n            };\n        case actionTypes.CLEAR_FREE_ROOM:\n            return {\n                ...state,\n                freeRoom: {}\n            };\n        default:\n            return state;    \n    }\n};\n\nexport default freeRooms;","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    departments: [],\n    department: {},\n    disabledDepartments: []\n};\n\nconst departments = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_DEPARTMENT:\n            return updateObject(state, {\n                departments: state.departments.concat(action.result),\n                department: state.department\n            });\n        case actionTypes.GET_ALL_DEPARTMENTS:\n            let departments = action.result.filter(\n                department => department.disable ===false\n            );\n            let disabledDepartments = action.result.filter(\n                department => department.disable ===true\n            );\n            return updateObject(state, {\n                departments: departments,\n                department: state.department,\n                disabledDepartments: disabledDepartments\n            });\n        case actionTypes.CLEAR_DEPARTMENT_FORM:\n            return {\n                ...state,\n                department: {}\n            };\n        case actionTypes.DELETE_DEPARTMENT:\n            state.departments = state.departments.filter(\n                department => department.id !== action.result.id\n            );\n            state.disabledDepartments = state.disabledDepartments.filter(\n                department => department.id !== action.result.id\n            );\n            return updateObject(state, {\n                departments: state.departments,\n                department: state.department,\n                disabledDepartments: state.disabledDepartments\n            });\n        case actionTypes.GET_DISABLED_DEPARTMENTS:\n            return updateObject(state, {\n                departments: state.departments,\n                department: state.department,\n                disabledDepartments: action.result\n            });\n        case actionTypes.SET_DISABLED_DEPARTMENT:\n            state.departments = state.departments.filter(\n                department => department.id !== action.result.id\n            );\n            state.disabledDepartments.push(action.result)\n            return updateObject(state, {\n                departments: state.departments,\n                department: state.department,\n                disabledDepartments: state.disabledDepartments\n            });\n        case actionTypes.SET_ENABLED_DEPARTMENT:\n            state.disabledDepartments = state.disabledDepartments.filter(\n                department => department.id !== action.result.id\n            );\n            state.departments.push(action.result)\n            return updateObject(state, {\n                departments: state.departments,\n                department: state.department,\n                disabledDepartments: state.disabledDepartments\n            });\n        case actionTypes.GET_DEPARTMENT_BY_ID:\n            let department = state.departments.filter(\n                department => department.id === action.result\n            )[0];\n            if (!department) {\n                department = { id: null };\n            }\n            return updateObject(state, {\n                departments: state.departments,\n                department: department\n            });\n        case actionTypes.UPDATE_DEPARTMENT:\n            let updatedDepartments = [];\n            state.departments.forEach(department => {\n                if (department.id === action.result.id) {\n                    department = { ...department, ...action.result };\n                }\n                updatedDepartments.push(department);\n            });\n            let updatedDefaultDepartments = [];\n            state.disabledDepartments.forEach(department => {\n                if (department.id === action.result.id) {\n                    department = { ...department, ...action.result };\n                }\n                updatedDefaultDepartments.push(department);\n            });\n\n            return updateObject(state, {\n                departments:updatedDepartments,\n                disabledDepartments:updatedDefaultDepartments,\n                department: {}\n            });\n\n        default:\n            return state;\n    }\n};\n\nexport default departments;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    students: [],\n    student: {}\n};\n\nconst students = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_STUDENT:\n            return updateObject(state, {\n                students: state.students.concat(action.result),\n                student: state.student\n            });\n        case actionTypes.SHOW_ALL_STUDENTS_BY_GROUP_ID:\n            return updateObject(state, {\n                ...state,\n                students: action.result\n            });\n        case actionTypes.SHOW_ALL_STUDENTS:\n            return updateObject(state, {\n                ...state,\n                students: action.result\n            });\n        case actionTypes.DELETE_STUDENT:\n            state.students = state.students.filter(\n                student => student.id !== action.result\n            );\n            return updateObject(state, {\n                students: state.students,\n                student: state.student\n            });\n        case actionTypes.SET_STUDENT:\n            let student = state.students.filter(\n                student => student.id === Number(action.result)\n            )[0];\n\n            if (!student) {\n                student = { id: null };\n            }\n            return updateObject(state, {\n                students: state.students,\n                student: student\n            });\n        case actionTypes.UPDATE_STUDENT:\n            const updatedStudents = [];\n            state.students.forEach(student => {\n                if (student.id === action.result.id) {\n                    student = { ...student, ...action.result };\n                }\n                updatedStudents.push(student);\n            });\n            return updateObject(state, {\n                students: updatedStudents,\n                student: {}\n            });\n        default:\n            return state;\n    }\n};\n\nexport default students;","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport teachers from './teachers';\nimport lesson from './lesson';\nimport temporarySchedule from './temporarySchedule';\nimport snackbar from './snackbar';\nimport auth from './auth';\nimport loadingIndicator from './loadingIndicator';\nimport schedule from './schedule';\nimport classActions from './class';\nimport subjects from './subjects';\nimport groups from './groups';\nimport rooms from './rooms';\nimport roomTypes from './roomTypes';\nimport busyRooms from './busyRooms';\nimport semesters from './semesters';\nimport users from './users';\nimport freeRooms from './freeRooms';\nimport departments from './departments';\nimport students from './students';\n\nconst rootReducer = combineReducers({\n    lesson,\n    temporarySchedule,\n    auth,\n    snackbar,\n    schedule,\n    users,\n    loadingIndicator,\n    classActions,\n    teachers,\n    subjects,\n    groups,\n    rooms,\n    roomTypes,\n    busyRooms,\n    semesters,\n    freeRooms,\n    departments,\n    students,\n\n    form: formReducer\n});\n\nexport default rootReducer;\n","import axios from '../helper/axios';\n\nimport {\n    ACTIVATE_ACCOUNT_URL,\n    LOGIN_URL,\n    LOGOUT_URL,\n    REGISTRATION_URL,\n    RESET_PASSWORD_URL\n} from '../constants/axios';\n\nexport const authUserService = request => {\n    if (\n        request.result.hasOwnProperty('authType') &&\n        request.result.authType === 'google'\n    ) {\n        const response = { data: { token: request.result.token, email: '' } };\n        return response;\n    }\n    return axios.post(LOGIN_URL, request.result).then(response => {\n        return response;\n    });\n};\n\nexport const registerUserService = request => {\n    return axios.post(REGISTRATION_URL, request.result).then(response => {\n        return response;\n    });\n};\n\nexport const resetUserPasswordService = request => {\n    return axios\n        .put(\n            `${RESET_PASSWORD_URL}?email=${request.result.email}`,\n            request.result\n        )\n        .then(response => {\n            return response;\n        });\n};\n\nexport const activateUserService = request => {\n    return axios\n        .put(`${ACTIVATE_ACCOUNT_URL}?token=${request.result}`)\n        .then(response => response);\n};\n\nexport const logoutUserService = () => {\n    return axios.post(LOGOUT_URL).then(response => response);\n};\n","export const CLASS_URL = 'classes';\nexport const GROUP_URL = 'groups';\nexport const LESSON_URL = 'lessons';\nexport const LESSON_TYPES_URL = 'lessons/types';\nexport const LOGIN_URL = 'auth/sign-in';\nexport const GOOGLE_LOGIN_URL = 'auth/google';\nexport const LOGOUT_URL = 'auth/sign-out';\nexport const REGISTRATION_URL = 'auth/sign-up';\nexport const RESET_PASSWORD_URL = 'auth/reset-password';\nexport const ACTIVATE_ACCOUNT_URL = 'auth/activation-account';\nexport const TEACHER_URL = 'teachers';\nexport const ROOM_URL = 'rooms';\nexport const ROOM_TYPES_URL = 'room-types';\nexport const FREE_ROOMS_URL = 'rooms/free';\nexport const SUBJECT_URL = 'subjects';\nexport const STUDENT_URL = 'students';\n\nexport const FULL_SCHEDULE_URL = 'schedules/full/semester?semesterId=';\nexport const GROUP_SCHEDULE_URL = 'schedules/full/groups?semesterId=';\nexport const SCHEDULE_SEMESTER_ITEMS_URL = 'schedules/semester';\nexport const SCHEDULE_ITEMS_URL = 'schedules';\nexport const CURRENT_SEMESTER_URL = 'semesters/current';\nexport const DEFAULT_SEMESTER_URL = 'semesters/default';\nexport const SEND_PDF_TO_EMAIL = 'send-pdf-to-email';\n\nexport const TEMPORARY_SCHEDULE_URL = 'temporary-schedules';\nexport const TEMPORARY_SCHEDULE_RANGE_URL = 'temporary-schedules/add-range';\nexport const TEACHER_TEMPORARY_SCHEDULE = 'schedules/full/teachers/date-range';\n\nexport const STUDENTS_TO_GROUP_FILE = 'students/import?groupId=';\n\nexport const SCHEDULE_CHECK_AVAILABILITY_URL = 'schedules/data-before';\nexport const BUSY_ROOMS = 'schedules/full/rooms';\nexport const ROOMS_AVAILABILITY = 'rooms/available';\nexport const SEMESTERS_URL = 'semesters';\nexport const GROUPS_URL = 'groups';\nexport const TEACHER_SCHEDULE_URL = 'schedules/full/teachers?semesterId=';\n\nexport const DISABLED_ROOMS_URL = 'rooms/disabled';\nexport const DISABLED_TEACHERS_URL = 'teachers/disabled';\nexport const DISABLED_GROUPS_URL = 'groups/disabled';\nexport const DISABLED_SEMESTERS_URL = 'semesters/disabled';\nexport const DISABLED_SUBJECTS_URL = 'subjects/disabled';\n\nexport const USERS_URL = 'users/with-role-user';\nexport const USER_PROFILE = 'users/profile';\nexport const UPDATE_USER_PROFILE = 'users/change-profile';\nexport const TEACHERS_WITHOUT_ACCOUNT_URL = 'not-registered-teachers';\nexport const MERGE_USER_AND_TEACHER_URL = 'managers/teacher_credentials';\n\nexport const PUBLIC_CLASSES_URL = 'public/classes';\nexport const PUBLIC_GROUP_URL = 'public/groups';\nexport const PUBLIC_TEACHER_URL = 'public/teachers';\nexport const PUBLIC_SEMESTERS_URL = 'public/semesters';\n\nexport const PUBLIC_DOWNLOAD_GROUP_SCHEDULE_URL =\n    '/download/schedule-for-group-in-pdf';\nexport const PUBLIC_DOWNLOAD_TEACHER_SCHEDULE_URL =\n    '/download/schedule-for-teacher-in-pdf';\n\nexport const FOR_TEACHER_SCHEDULE_URL = 'schedules/teacher';\nexport const SEMESTER_COPY_URL = '/schedules/copy-schedule';\nexport const CLEAR_SCHEDULE_URL = '/schedules/delete-schedules';\nexport const TEACHER_SCHEDULE_BY_DATE_RANGE_URL = 'schedules/full/teachers/date-range';\n\nexport const COPY_LESSON_URL = '/lessons/copy-lesson-for-groups';\nexport const LESSONS_FROM_SEMESTER_COPY_URL = '/lessons/copy-lessons';\nexport const SCHEDULE_ITEM_ROOM_CHANGE = '/schedules/by-room';\nexport const CREATE_ARCHIVE_SEMESTER = '/archive';\nexport const ARCHIVED_SEMESTERS_URL = '/archive/all-semesters';\n\nexport const DEPARTMENT_URL = '/departments';\n","import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nvar supportedLangs = ['en', 'uk'];\nvar userLang = (navigator.language || navigator.userLanguage).slice(0, 2);\nexport const lang = supportedLangs.find(i => i === userLang) || 'en';\n\ni18n.use(LanguageDetector)\n    .use(initReactI18next)\n    .use(Backend)\n    .init({\n        lng: lang,\n        backend: {\n            loadPath: '/assets/i18n/translations/{{lng}}/{{ns}}.json'\n        },\n        fallbackLng: 'en',\n        debug: false,\n        ns: ['formElements', 'validationMessages', 'common', 'serviceMessages'],\n        defaultNS: 'common',\n        keySeparator: false,\n        useDataAttrOptions: true,\n        interpolation: {\n            escapeValue: false,\n            formatSeparator: ','\n        },\n        react: {\n            wait: true\n        }\n    });\n\nexport default i18n;\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { authUserService } from '../services/authService';\n\nimport { TOKEN_BEGIN } from '../constants/tokenBegin';\n\nimport axios from '../helper/axios';\nimport i18n from '../helper/i18n';\n\nexport function* authSaga(payload) {\n    try {\n        const response = yield call(authUserService, payload);\n\n        const jwtDecode = require('jwt-decode');\n        const token = response.data.token;\n        const email = response.data.email;\n        const decodedJWT = jwtDecode(token);\n        const expirationDate = new Date(decodedJWT.exp * 1000);\n\n        axios.defaults.headers.common.Authorization = TOKEN_BEGIN + token;\n\n        yield localStorage.setItem('token', TOKEN_BEGIN + token);\n        yield localStorage.setItem('expirationDate', expirationDate);\n        yield localStorage.setItem('userRole', decodedJWT.roles);\n        yield localStorage.setItem('email', email ? email : decodedJWT.sub);\n\n        yield put({\n            type: actionTypes.AUTH_USER_SUCCESS,\n            response: { token, role: decodedJWT.roles, email }\n        });\n\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n\n        yield put({\n            type: actionTypes.AUTH_USER_AUTO_LOGOUT,\n            expirationTime: decodedJWT.exp * 1000 - new Date().getTime()\n        });\n    } catch (error) {\n        yield put({\n            type: actionTypes.AUTH_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { logoutUserService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* logoutSaga(payload) {\n    try {\n        yield call(logoutUserService, payload);\n        yield put({\n            type: actionTypes.AUTH_USER_LOGOUT\n        });\n    } catch (error) {\n        yield put({\n            type: actionTypes.AUTH_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n    }\n}\n","import { call, delay } from 'redux-saga/effects';\n\nimport { logoutSaga } from './logoutSaga';\n\nexport function* checkAuthTimeoutSaga(action) {\n    yield delay(action.expirationTime);\n    yield call(logoutSaga);\n}\n","import { put } from 'redux-saga/effects';\n\nimport * as actionTypes from '../redux/actions/actionsType';\n\nexport function* checkAuthStateSaga(payload) {\n    if (!payload.token) {\n        yield put({ type: actionTypes.AUTH_USER_LOGOUT });\n    } else {\n        const expirationDate = new Date(localStorage.getItem('expirationDate'));\n        if (expirationDate <= new Date()) {\n            yield put({ type: actionTypes.AUTH_USER_LOGOUT });\n        } else {\n            yield put({\n                type: actionTypes.AUTH_USER_SUCCESS,\n                response: {\n                    token: payload.token,\n                    role: payload.role\n                }\n            });\n        }\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { registerUserService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* registrationSaga(payload) {\n    try {\n        const response = yield call(registerUserService, payload);\n        yield put({ type: actionTypes.REGISTER_USER_SUCCESS, response });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    } catch (error) {\n        yield put({\n            type: actionTypes.REGISTER_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { activateUserService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* activateUserSaga(payload) {\n    try {\n        const response = yield call(activateUserService, payload);\n        yield put({ type: actionTypes.ACTIVATE_USER_SUCCESS, response });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    } catch (error) {\n        yield put({\n            type: actionTypes.ACTIVATE_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { resetUserPasswordService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* resetUserPasswordSaga(payload) {\n    try {\n        const response = yield call(resetUserPasswordService, payload);\n        yield put({ type: actionTypes.RESET_USER_PASSWORD_SUCCESS, response });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    } catch (error) {\n        yield put({\n            type: actionTypes.RESET_USER_PASSWORD_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { takeLatest, takeEvery } from 'redux-saga/effects';\n\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { authSaga } from './authSaga';\nimport { logoutSaga } from './logoutSaga';\nimport { checkAuthTimeoutSaga } from './checkAuthTimeoutSaga';\nimport { checkAuthStateSaga } from './checkAuthStateSaga';\nimport { registrationSaga } from './registrationSaga';\nimport { activateUserSaga } from './activateUserSaga';\nimport { resetUserPasswordSaga } from './resetUserPasswordSaga';\n\nexport default function* watchUserAuthentication() {\n    yield takeLatest(actionTypes.REGISTER_USER, registrationSaga);\n    yield takeLatest(actionTypes.ACTIVATE_USER, activateUserSaga);\n    yield takeLatest(actionTypes.RESET_USER_PASSWORD, resetUserPasswordSaga);\n    yield takeLatest(actionTypes.AUTH_USER, authSaga);\n    yield takeEvery(actionTypes.AUTH_USER_CHECK_STATE, checkAuthStateSaga);\n    yield takeEvery(actionTypes.AUTH_USER_AUTO_LOGOUT, checkAuthTimeoutSaga);\n    yield takeLatest(actionTypes.AUTH_USER_INITIATE_LOGOUT, logoutSaga);\n}\n","import { fork } from 'redux-saga/effects';\nimport watchUserAuthentication from './watchers';\n\nexport default function* startForman() {\n  yield fork(watchUserAuthentication);\n}","import * as moment from 'moment';\nimport {\n    checkUniqClassName,\n    checkUniqueGroup,\n    checkUniqueRoomName,\n    checkUniqueSubject,\n    timeIntersectService,\n    checkUniqSemester, checkUniqueDepartment\n} from './storeValidation';\nimport i18n from '../helper/i18n';\nimport { validation } from '../constants/validation';\n\nexport const required = value =>\n    value ? undefined : i18n.t('validationMessages:required_message');\n\nexport const lessThanZero = value =>\n    value > 0\n        ? undefined\n        : i18n.t('validationMessages:bigger_than_zero_message');\n\nconst minLength = min => value =>\n    value && value.length < min\n        ? i18n.t('validationMessages:bigger_than_char_message', { min: min })\n        : undefined;\n\nexport const minLengthValue = minLength(3);\n\nconst maxLength = max => value =>\n    value && value.length > max\n        ? i18n.t('validationMessages:less_than_char_message', {\n              max: max\n          })\n        : undefined;\n\nexport const maxLengthValue = maxLength(55);\n\nexport const lessThanTime = (value, previousValue, allValues) => {\n    const otherField = 'endTime';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'HH:mm').toDate() <=\n        moment(allValues.values[otherField], 'HH:mm').toDate() &&\n        allValues.values[otherField] !== undefined\n        ? undefined\n        : i18n.t('validationMessages:less_than_field_message', {\n              field: i18n.t('formElements:class_to_label')\n          });\n};\n\nexport const greaterThanTime = (value, previousValue, allValues) => {\n    const otherField = 'startTime';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'HH:mm').toDate() >=\n        moment(allValues.values[otherField], 'HH:mm').toDate()\n        ? undefined\n        : i18n.t('validationMessages:bigger_than_field_message', {\n              field: i18n.t('formElements:class_from_label')\n          });\n};\n\nexport const uniqueClassName = value => {\n    return checkUniqClassName(value);\n};\n\nexport const uniqueGroup = value => {\n    return checkUniqueGroup(value);\n};\n\nexport const uniqueSubject = value => {\n    return checkUniqueSubject(value);\n};\nexport const uniqueDepartment = value => {\n    return checkUniqueDepartment(value);\n};\nexport const timeIntersect = (value, previousValue, allValues) => {\n    return timeIntersectService(\n        allValues.values['startTime'],\n        allValues.values['endTime']\n    );\n};\n\nexport const uniqueRoomName = value => {\n    return checkUniqueRoomName(value);\n};\n\n\n\nexport const email = value =>\n    value && !validation.EMAIL.test(value)\n        ? i18n.t('validationMessages:email')\n        : undefined;\n\nexport const password = value =>\n    value && !validation.PASSWORD.test(value)\n        ? i18n.t('validationMessages:password')\n        : undefined;\n\nconst minYear = min => value =>\n    value < min\n        ? i18n.t('validationMessages:bigger_than_this_year_message', {\n              min: min\n          })\n        : undefined;\nvar today = new Date();\nvar year = today.getFullYear();\nexport const minYearValue = minYear(year);\n\nexport const lessThanDate = (value, previousValue, allValues) => {\n    const otherField = 'endDay';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'DD/MM/YYYY').toDate() <=\n        moment(allValues.values[otherField], 'DD/MM/YYYY').toDate() &&\n        allValues.values[otherField] !== undefined\n        ? undefined\n        : i18n.t('validationMessages:less_than_field_message', {\n              field: i18n.t('formElements:class_to_label')\n          });\n};\n\nexport const greaterThanDate = (value, previousValue, allValues) => {\n    const otherField = 'startDay';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'DD/MM/YYYY').toDate() >=\n        moment(allValues.values[otherField], 'DD/MM/YYYY').toDate()\n        ? undefined\n        : i18n.t('validationMessages:bigger_than_field_message', {\n              field: i18n.t('formElements:class_from_label')\n          });\n};\n\nexport const uniquesSemesterName = value => checkUniqSemester(value);\n","export const links = {\n    HOME_PAGE: '/',\n    ADMIN_PAGE: '/admin',\n    SCHEDULE_PAGE: '/schedules',\n    LOGIN: '/login',\n    ACTIVATION_PAGE: '/activation-page',\n    LOGOUT: '/logout',\n    TEACHER_SCHEDULE: '/teacher-schedule',\n    MY_PROFILE: '/my-profile',\n    LessonPage: \"/lessons\",\n    TeacherList: \"/teachers\",\n    GroupList: \"/groups\",\n    Group:\"/group\",\n    Student:\"/student\",\n    Edit:\"/edit\",\n    Delete:\"/delete\",\n    AddStudent:\"/add-student\",\n    SetDisable:\"/set-disable\",\n    ShowStudents:\"/show-students\",\n    IdParam:\"/:id\",\n    IdStudentParam:\"/:idStudent\",\n    ClassScheduleTitle: \"/period\",\n    RoomList: \"/rooms\",\n    SubjectPage: \"/subjects\",\n    BusyRooms: \"/busy-rooms\",\n    SemesterPage: \"/semesters\",\n    MergeRolePage: \"/users\",\n    Changes: \"/changes\",\n    ScheduleFor:\"/schedule\",\n    Registration:\"/registration\",\n    RESET_PASSWORD:\"/reset-password\",\n    Departments:\"/departments\"\n\n};\n","import React from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { useTranslation } from 'react-i18next';\nimport './LanguageSelector.scss';\n\nconst LanguageSelector = props => {\n    const { i18n } = useTranslation();\n    const langFlags = [\n        {\n            lang: 'en',\n            img: 'https://image.flaticon.com/icons/svg/555/555417.svg',\n            title: 'English'\n        },\n        {\n            lang: 'uk',\n            img: 'https://image.flaticon.com/icons/svg/321/321267.svg',\n            title: 'Українська'\n        }\n    ];\n    let radioLangClasses = {};\n    i18n.languages.forEach(lang => {\n        radioLangClasses[lang] = 'languageItem ';\n    });\n    radioLangClasses[i18n.language] += ' activeLanguage';\n\n    const changeLanguage = event => {\n        radioLangClasses[i18n.language] = 'languageItem ';\n        radioLangClasses[event.target.value] += ' activeLanguage';\n        i18n.changeLanguage(event.target.value);\n    };\n    const renderLangControls = langItem => (\n        <FormControlLabel\n            key={langItem.lang}\n            control={\n                <>\n                    <Radio\n                        color=\"primary\"\n                        value={langItem.lang}\n                        onChange={changeLanguage}\n                    />\n                    <img\n                        className=\"language-icon\"\n                        src={langItem.img}\n                        alt={langItem.lang}\n                        title={langItem.title}\n                    />\n                </>\n            }\n            className={radioLangClasses[langItem.lang]}\n        />\n    );\n\n    return (\n        <RadioGroup\n            row\n            aria-label=\"lang\"\n            name=\"lang\"\n            value={i18n.language}\n            className=\"lang_selector\"\n        >\n            {langFlags.map(langItem => renderLangControls(langItem))}\n        </RadioGroup>\n    );\n};\n\nexport default LanguageSelector;\n","export const colors = {\n    POSSIBILITY: '#f7f7c1',\n    DANGER: '#ff5e54',\n    ALLOW: '#68f271',\n    NOTHING: '#fff',\n    BORDER: '#d3d4d5'\n};\n","import * as actionTypes from './actionsType';\n\nexport const setTemporarySchedules = res => {\n    return {\n        type: actionTypes.SET_TEMPORARY_SCHEDULES,\n        result: res\n    };\n};\n\nexport const setSchedulesAndTemporarySchedules = res => {\n    return {\n        type: actionTypes.SET_SCHEDULES_AND_TEMPORARY_SCHEDULES,\n        result: res\n    };\n};\n\nexport const selectTemporarySchedule = res => {\n    return {\n        type: actionTypes.SELECT_TEMPORARY_SCHEDULE,\n        result: res\n    };\n};\n\nexport const selectVacation = res => {\n    return {\n        type: actionTypes.SELECT_VACATION,\n        result: res\n    };\n};\n\nexport const selectTeacherId = res => {\n    return {\n        type: actionTypes.SELECT_TEACHER_ID,\n        result: res\n    };\n};\n\n","import * as actionTypes from \"./actionsType\";\n\nexport const setOpenSnackbar = res => {\n  return {\n    type: actionTypes.SET_OPEN_SNACKBAR,\n    result: res\n  };\n};\n","import * as actionTypes from './actionsType';\n\nexport const setUsers = res => {\n    return {\n        type: actionTypes.SET_USERS,\n        result: res\n    };\n};\nexport const setUser = res => {\n    return {\n        type: actionTypes.SET_USER,\n        result: res\n    };\n};\n","import * as actionTypes from './actionsType';\n\nexport const setLoading = res => {\n    return {\n        type: actionTypes.SET_LOADING_INDICATOR,\n        result: res\n    };\n};\n\nexport const setScheduleLoading = res => {\n    return {\n        type: actionTypes.SET_SCHEDULE_LOADING_INDICATOR,\n        result: res\n    };\n};\n\nexport const setSemesterLoading = res => {\n    return {\n        type: actionTypes.SET_SEMESTER_LOADING_INDICATOR,\n        result: res\n    };\n};\n","import * as actionTypes from './actionsType';\n\nexport const setScheduleItems = res => {\n    return {\n        type: actionTypes.SET_SCHEDULE_ITEMS,\n        result: res\n    };\n};\n\nexport const setCurrentSemester = res => {\n    return {\n        type: actionTypes.SET_CURRENT_SEMESTER,\n        result: res\n    };\n};\nexport const setDefaultSemester = res => {\n    return {\n        type: actionTypes.SET_DEFAULT_SEMESTER,\n        result: res\n    };\n};\n\nexport const addItemToSchedule = res => {\n    return {\n        type: actionTypes.ADD_ITEM_TO_SCHEDULE,\n        result: res\n    };\n};\n\nexport const checkAvailabilitySchedule = res => {\n    return {\n        type: actionTypes.CHECK_AVAILABILITY_SCHEDULE,\n        result: res\n    };\n};\n\nexport const setFullSchedule = result => {\n    return {\n        type: actionTypes.SET_FULL_SCHEDULE,\n        result: result\n    };\n};\nexport const setItemGroupId = res => {\n    return {\n        type: actionTypes.SET_ITEM_GROUP_ID,\n        result: res\n    };\n};\n\nexport const setGroupSchedule = result => {\n    return {\n        type: actionTypes.SET_GROUP_SCHEDULE,\n        result: result\n    };\n};\nexport const deleteItemFromSchedule = res => {\n    return {\n        type: actionTypes.DELETE_ITEM_FROM_SCHEDULE,\n        result: res\n    };\n};\n\nexport const setScheduleType = result => {\n    return {\n        type: actionTypes.SET_SCHEDULE_TYPE,\n        newType: result\n    };\n};\n\nexport const setScheduleGroupId = groupId => {\n    return {\n        type: actionTypes.SET_SCHEDULE_GROUP_ID,\n        groupId: groupId\n    };\n};\n\nexport const setScheduleTeacherId = teacherId => {\n    return {\n        type: actionTypes.SET_SCHEDULE_TEACHER_ID,\n        teacherId: teacherId\n    };\n};\nexport const setTeacherSchedule = result => {\n    return {\n        type: actionTypes.SET_TEACHER_SCHEDULE,\n        result: result\n    };\n};\n\nexport const setSemesterList = result => {\n    return {\n        type: actionTypes.SET_SEMESTER_LIST,\n        result: result\n    };\n};\nexport const setScheduleSemesterId = semesterId => {\n    return {\n        type: actionTypes.SET_SCHEDULE_SEMESTER_ID,\n        semesterId: semesterId\n    };\n};\n\nexport const setTeacherRangeSchedule = result => {\n    return {\n        type: actionTypes.SET_TEACHER_RANGE_SCHEDULE,\n        result: result\n    };\n};\n\nexport const setTeacherViewType = type => {\n    return {\n        type: actionTypes.SET_TEACHER_VIEW_TYPE,\n        result: type\n    };\n};\n","import * as actionsType from './actionsType';\n\nexport const addTeacher = teacher => {\n    return {\n        type: actionsType.ADD_TEACHER,\n        result: teacher\n    };\n};\n\nexport const setTeacher = teacher => {\n    return {\n        type: actionsType.SET_TEACHER,\n        result: teacher\n    };\n};\n\nexport const deleteTeacher = id => {\n    return {\n        type: actionsType.DELETE_TEACHER,\n        result: id\n    };\n};\n\nexport const selectTeacherCard = res => {\n    return {\n        type: actionsType.SELECT_TEACHER,\n        result: res\n    };\n};\n\nexport const updateTeacherCard = res => {\n    return {\n        type: actionsType.UPDATE_TEACHER,\n        result: res\n    };\n};\n\nexport const showAllTeachers = teachers => {\n    return {\n        type: actionsType.SHOW_ALL,\n        result: teachers\n    };\n};\nexport const getAllTeachersByDepartmentId=teachers=>{\n    return{\n        type:actionsType.GET_TEACHERS_BY_DEPARTMENT,\n        result:teachers\n    }\n}\n\nexport const setDisabledTeachers = teachers => {\n    return {\n        type: actionsType.SET_DISABLED_TEACHERS,\n        result: teachers\n    };\n};\n","import * as actionTypes from \"./actionsType\";\n\nexport const setClassScheduleList = classScheduler => ({\n  type: actionTypes.SET_CLASS_SCHEDULE_LIST,\n  classScheduler\n});\n\nexport const addClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.ADD_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const getClassScheduleList = () => ({\n  type: actionTypes.GET_CLASS_SCHEDULE_LIST\n});\n\nexport const getClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.GET_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const deleteClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.DELETE_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const updateClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.UPDATE_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const clearClassScheduleOne = () => ({\n  type: actionTypes.CLEAR_CLASS_SCHEDULE_ONE\n});\n","import * as actionTypes from './actionsType';\n\nexport const showAllGroups = res => {\n    return {\n        type: actionTypes.SHOW_ALL_GROUPS,\n        result: res\n    };\n};\n\nexport const setDisabledGroups = res => {\n    return {\n        type: actionTypes.SET_DISABLED_GROUPS,\n        result: res\n    };\n};\n\nexport const addGroup = res => {\n    return {\n        type: actionTypes.ADD_GROUP,\n        result: res\n    };\n};\n\nexport const deleteGroup = res => {\n    return {\n        type: actionTypes.DELETE_GROUP,\n        result: res\n    };\n};\n\nexport const selectGroup = res => {\n    return {\n        type: actionTypes.SELECT_GROUP,\n        result: res\n    };\n};\n\nexport const updateGroup = res => {\n    return {\n        type: actionTypes.UPDATE_GROUP,\n        result: res\n    };\n};\n\nexport const clearGroup = () => ({\n    type: actionTypes.CLEAR_GROUP\n});\n","import * as actionTypes from './actionsType';\n\nexport const showAllSemesters = res => {\n\n    return {\n        type: actionTypes.SHOW_ALL_SEMESTERS,\n        result: res\n    };\n};\n\nexport const setDisabledSemesters = res => {\n    return {\n        type: actionTypes.SET_DISABLED_SEMESTERS,\n        result: res\n    };\n};\nexport const setArchivedSemesters = res => {\n    return {\n        type: actionTypes.SET_ARCHIVED_SEMESTERS,\n        result: res\n    };\n};\n\nexport const addSemester = res => {\n    return {\n        type: actionTypes.ADD_SEMESTER,\n        result: res\n    };\n};\n\nexport const deleteSemester = res => {\n    return {\n        type: actionTypes.DELETE_SEMESTER,\n        result: res\n    };\n};\n\nexport const selectSemester = res => {\n\n    return {\n        type: actionTypes.SELECT_SEMESTER,\n        result: res\n    };\n};\n\nexport const updateSemester = res => {\n    return {\n        type: actionTypes.UPDATE_SEMESTER,\n        result: res\n    };\n};\n\nexport const moveToArchivedSemester = res => {\n    return {\n        type: actionTypes.MOVE_SEMESTER_TO_ARCHIVE,\n        result: res\n    };\n};\n\nexport const clearSemester = () => ({\n    type: actionTypes.CLEAR_SEMESTER\n});\n\nexport const setError = res => {\n    return {\n        type: actionTypes.SET_ERROR,\n        result: res\n    };\n};\n","import { store } from '../index';\n\nimport { setOpenSnackbar } from '../redux/actions/index';\n\nexport const handleSnackbarOpenService = (isOpen, type, message) => {\n    store.dispatch(\n        setOpenSnackbar({\n            isOpen: isOpen,\n            type: type,\n            message: message\n        })\n    );\n};\n\nexport const handleSnackbarCloseService = () => {\n    const snackbarStore = store.getState().snackbar;\n    store.dispatch(\n        setOpenSnackbar({\n            isOpen: false,\n            type: snackbarStore.snackbarType,\n            message: null\n        })\n    );\n};\n","export const snackbarTypes = {\n    ERROR: 'error',\n    WARNING: 'warning',\n    INFO: 'info',\n    SUCCESS: 'success'\n};\n","import { handleSnackbarOpenService } from '../services/snackbarService';\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport i18n from './i18n';\n\nexport const errorHandler = error => {\n    handleSnackbarOpenService(\n        true,\n        snackbarTypes.ERROR,\n        error.response\n            ? i18n.t(error.response.data.message, error.response.data.message)\n            : 'Error'\n    );\n};\n\nexport const successHandler = message => {\n    handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n};\n\nexport const infoHandler = message => {\n    handleSnackbarOpenService(true, snackbarTypes.INFO, message);\n};","import { store } from '../index';\n\nimport {\n    setLoading,\n    setScheduleLoading,\n    setSemesterLoading\n} from '../redux/actions/index';\n\nexport const setLoadingService = isLoading => {\n    store.dispatch(setLoading(isLoading));\n};\n\nexport const setScheduleLoadingService = isLoading => {\n    store.dispatch(setScheduleLoading(isLoading));\n};\n\nexport const setSemesterLoadingService = isLoading => {\n    store.dispatch(setSemesterLoading(isLoading));\n};\n","import { reset } from 'redux-form';\nimport { store } from '../index';\n\nexport const resetFormHandler = formName => {\n    store.dispatch(reset(formName));\n};\n","import { store } from '../index';\nimport React, { useEffect } from 'react';\nimport axios from '../helper/axios';\nimport i18n from '../helper/i18n';\nimport { errorHandler, infoHandler, successHandler } from '../helper/handlerAxios';\n\nimport {\n    checkAvailabilitySchedule,\n    deleteItemFromSchedule,\n    setCurrentSemester,\n    setDefaultSemester,\n    setFullSchedule,\n    setGroupSchedule,\n    setItemGroupId,\n    setScheduleGroupId,\n    setScheduleItems,\n    setScheduleSemesterId,\n    setScheduleTeacherId,\n    setScheduleType,\n    setSemesterList,\n    setTeacherSchedule,\n    showAllGroups,\n    showAllTeachers,\n    setTeacherRangeSchedule,\n    setTeacherViewType\n} from '../redux/actions/index';\n\nimport {\n    setLoadingService,\n    setScheduleLoadingService,\n    setSemesterLoadingService\n} from './loadingService';\nimport { handleSnackbarOpenService } from './snackbarService';\n\nimport {\n    CURRENT_SEMESTER_URL,\n    DEFAULT_SEMESTER_URL,\n    FULL_SCHEDULE_URL,\n    GROUP_SCHEDULE_URL,\n    SCHEDULE_CHECK_AVAILABILITY_URL,\n    SCHEDULE_ITEMS_URL,\n    SCHEDULE_SEMESTER_ITEMS_URL,\n    PUBLIC_SEMESTERS_URL,\n    TEACHER_SCHEDULE_URL,\n    PUBLIC_GROUP_URL,\n    PUBLIC_TEACHER_URL,\n    FOR_TEACHER_SCHEDULE_URL,\n    CLEAR_SCHEDULE_URL,\n    ROOMS_AVAILABILITY,\n    SCHEDULE_ITEM_ROOM_CHANGE, TEACHER_URL, SEMESTERS_URL, GROUPS_URL, SEND_PDF_TO_EMAIL, DEPARTMENT_URL\n} from '../constants/axios';\n\nimport { snackbarTypes } from '../constants/snackbarTypes';\n\nimport { showBusyRooms } from './busyRooms';\nimport { TEACHER_SCHEDULE_FORM } from '../constants/reduxForms';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { useHistory } from 'react-router-dom';\nimport { getAllTeachersByDepartmentId } from '../redux/actions/teachers';\nimport departments from '../redux/reducers/departments';\n\nexport const getCurrentSemesterService = () => {\n    axios\n        .get(CURRENT_SEMESTER_URL)\n        .then(response => {\n            setSemesterLoadingService(false);\n            store.dispatch(setCurrentSemester(response.data));\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t('common:no_current_semester_error')\n            );\n            setSemesterLoadingService(false);\n        });\n};\nexport const getDefaultSemesterService = () => {\n    axios\n        .get(DEFAULT_SEMESTER_URL)\n        .then(response => {\n            setSemesterLoadingService(false);\n            store.dispatch(setDefaultSemester(response.data));\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t('common:no_current_semester_error')\n            );\n            setSemesterLoadingService(false);\n        });\n};\n\nexport const disableDefaultSemesterService = () => {\n    store.dispatch(setDefaultSemester({}));\n};\n\nexport const getScheduleItemsService = () => {\n    axios\n        .get(CURRENT_SEMESTER_URL)\n        .then(response => {\n            store.dispatch(setCurrentSemester(response.data));\n            getScheduleItemsServiceBySemester(response.data.id);\n            showBusyRooms(response.data.id);\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t('common:no_current_semester_error')\n            );\n            setLoadingService(false);\n        });\n};\n\nconst getScheduleItemsServiceBySemester = semesterId => {\n    axios\n        .get(`${SCHEDULE_SEMESTER_ITEMS_URL}?semesterId=${semesterId}`)\n        .then(response => {\n            store.dispatch(setScheduleItems(response.data));\n            setScheduleLoadingService(false);\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const checkAvailabilityScheduleService = item => {\n    axios\n        .get(\n            SCHEDULE_CHECK_AVAILABILITY_URL +\n            '?classId=' +\n            item.periodId +\n            '&dayOfWeek=' +\n            item.dayOfWeek +\n            '&evenOdd=' +\n            item.evenOdd +\n            '&lessonId=' +\n            item.lessonId +\n            '&semesterId=' +\n            item.semesterId\n        )\n        .then(response => {\n            setLoadingService(false);\n            store.dispatch(checkAvailabilitySchedule(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\nexport const checkAvailabilityChangeRoomScheduleService = item => {\n    axios\n        .get(\n            ROOMS_AVAILABILITY +\n            '?classId=' +\n            item.periodId +\n            '&dayOfWeek=' +\n            item.dayOfWeek +\n            '&evenOdd=' +\n            item.evenOdd +\n            '&semesterId=' +\n            item.semesterId\n        )\n        .then(response => {\n            setLoadingService(false);\n            store.dispatch(\n                checkAvailabilitySchedule({\n                    classSuitsToTeacher: true,\n                    teacherAvailable: true,\n                    rooms: response.data\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\nexport const addItemToScheduleService = item => {\n    axios\n        .post(SCHEDULE_ITEMS_URL, item)\n        .then(response => {\n            getScheduleItemsService();\n        })\n        .catch(err => errorHandler(err));\n};\nexport const editRoomItemToScheduleService = item => {\n    axios\n        .put(\n            SCHEDULE_ITEM_ROOM_CHANGE +\n            '?roomId=' +\n            item.roomId +\n            '&scheduleId=' +\n            item.itemId\n        )\n        .then(response => {\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('common:schedule_title'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n            getScheduleItemsService();\n        })\n        .catch(err => errorHandler(err));\n};\nexport const deleteItemFromScheduleService = itemId => {\n    axios\n        .delete(`${SCHEDULE_ITEMS_URL}/${itemId}`)\n        .then(response => {\n            store.dispatch(deleteItemFromSchedule(itemId));\n            getScheduleItemsService();\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const submitSearchSchedule = values => {\n\n    setScheduleSemesterIdService(values.semester);\n\n    if (values.hasOwnProperty('group') && +values.group > 0) {\n        setScheduleTypeService('group');\n        setScheduleGroupIdService(values.group);\n        getGroupSchedule(values.group, values.semester);\n\n        return;\n    }\n    if (values.hasOwnProperty('teacher') && +values.teacher > 0) {\n        setScheduleTypeService('teacher');\n        // setScheduleGroupIdService(values.teacher);\n        setScheduleTeacherIdService(values.teacher);\n        getTeacherSchedule(values.teacher, values.semester);\n        return;\n    }\n    if (\n        (!values.hasOwnProperty('group') &&\n            !values.hasOwnProperty('teacher')) ||\n        (values.hasOwnProperty('group') &&\n            !values.hasOwnProperty('teacher') &&\n            +values.group === 0) ||\n        (!values.hasOwnProperty('group') &&\n            values.hasOwnProperty('teacher') &&\n            +values.teacher === 0) ||\n        (values.hasOwnProperty('group') &&\n            values.hasOwnProperty('teacher') &&\n            +values.teacher === 0 &&\n            +values.group === 0)\n    ) {\n        setScheduleTypeService('full');\n        getFullSchedule(values.semester);\n        return;\n    }\n};\n\n\nexport const sendTeachersScheduleService = (data) => {\n    const teachersId = data.teachersId.map(teacherId => `teachersId=${teacherId}`).join('&');//teachersId=65&teachersId=12\n    const { semesterId, language } = data;\n    axios\n        .get(`${SEND_PDF_TO_EMAIL}/semester/${semesterId}?language=${language}&${teachersId}`)\n        .then(response => {\n            setLoadingService(false);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:schedule_label'),\n                    actionType: i18n.t('serviceMessages:sent_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const setItemGroupIdService = groupId => {\n    store.dispatch(setItemGroupId(groupId));\n};\n\nexport const setScheduleGroupIdService = groupId => {\n\n    store.dispatch(setScheduleGroupId(groupId));\n};\n\nexport const setScheduleTypeService = item => {\n    store.dispatch(setScheduleType(item));\n};\n\n\nexport const getFullSchedule = semesterId => {\n    if (semesterId !== undefined)\n        axios\n            .get(FULL_SCHEDULE_URL + semesterId)\n            .then(response => {\n                store.dispatch(setFullSchedule(response.data));\n            })\n            .catch(err => errorHandler(err));\n\n};\n\n\nexport const getGroupSchedule = (groupId, semesterId) => {\n    if (groupId > 0) {\n        axios\n            .get(GROUP_SCHEDULE_URL + semesterId + '&groupId=' + groupId)\n            .then(response => {\n                store.dispatch(setGroupSchedule(response.data));\n            })\n            .catch(err => errorHandler(err));\n    }\n};\n\n\nexport const getTeacherSchedule = (teacherId, semesterId) => {\n    if (teacherId > 0) {\n        axios\n            .get(TEACHER_SCHEDULE_URL + semesterId + '&teacherId=' + teacherId)\n            .then(response => {\n                store.dispatch(setTeacherSchedule(response.data));\n            })\n            .catch(err => errorHandler(err));\n    }\n};\nexport const setScheduleTeacherIdService = teacherId => {\n    store.dispatch(setScheduleTeacherId(teacherId));\n};\n\nexport const showAllPublicSemestersService = () => {\n    axios\n        .get(PUBLIC_SEMESTERS_URL)\n        .then(response => {\n            store.dispatch(setSemesterList(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\nexport const setScheduleSemesterIdService = semesterId => {\n    store.dispatch(setScheduleSemesterId(semesterId));\n};\n\nexport const showAllPublicGroupsService = (id) => {\n    if (id !== null && id !== undefined)\n        axios\n            .get(`/${SEMESTERS_URL}/${id}/${GROUPS_URL}`)\n            .then(response => {\n                store.dispatch(showAllGroups(response.data.sort((a, b) => a - b)));\n                if (response.data.length === 0) {\n                    infoHandler(\n                        i18n.t('serviceMessages:chosen_semester_has_not_groups', {\n                            cardType: i18n.t('formElements:chosen_semester_label'),\n                            actionType: i18n.t('serviceMessages:group_label')\n                        })\n                    );\n                }\n            })\n            .catch(err => errorHandler(err));\n};\n\nexport const showAllPublicTeachersService = () => {\n    axios\n        .get(PUBLIC_TEACHER_URL)\n        .then(response => {\n            store.dispatch(showAllTeachers(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\nexport const showAllPublicTeachersByDepartmentService = (departmentId) => {\n    axios\n        .get(`${DEPARTMENT_URL}/${departmentId}/${TEACHER_URL}`)\n        .then(response => {\n            store.dispatch(getAllTeachersByDepartmentId(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\n\nexport const clearTeacherScheduleFormService = () => {\n    resetFormHandler(TEACHER_SCHEDULE_FORM);\n};\n\nexport const getTeacherScheduleService = values => {\n    axios\n        .get(\n            FOR_TEACHER_SCHEDULE_URL +\n            '?from=' +\n            values.startDay.replace(/\\//g, '-') +\n            '&to=' +\n            values.endDay.replace(/\\//g, '-')\n        )\n        .then(response => {\n            setLoadingService(false);\n            store.dispatch(setTeacherRangeSchedule(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const getTeacherScheduleByDateRangeService = (teacherId, to, from) => {\n    axios\n        .get(\n            FOR_TEACHER_SCHEDULE_URL +\n            '?teacherId' +\n            teacherId +\n            '&from=' +\n            from.replace(/\\//g, '-') +\n            '&to=' +\n            to.replace(/\\//g, '-')\n        )\n        .then(response => {\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const setTeacherServiceViewType = type => {\n    store.dispatch(setTeacherViewType(type));\n};\n\nexport const clearSchedule = semesterId => {\n    axios\n        .delete(CLEAR_SCHEDULE_URL + '?semesterId=' + semesterId)\n        .then(response => {\n            getScheduleItemsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('common:schedule_title'),\n                    actionType: i18n.t('serviceMessages:cleared_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n","import { store } from '../index';\n\nimport { BUSY_ROOMS } from '../constants/axios';\nimport axios from '../helper/axios';\n\nimport { showAllBusyRooms } from '../redux/actions';\nimport { errorHandler } from '../helper/handlerAxios';\n\nexport const showBusyRooms = semesterId => {\n    axios\n        .get(BUSY_ROOMS + '?semesterId=' + semesterId)\n        .then(response => {\n            store.dispatch(showAllBusyRooms(response.data));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n","import * as actionsType from './actionsType';\n\nexport const showAllBusyRooms = data => {\n    return {\n        type: actionsType.SHOW_ALL_BUSY_ROOMS,\n        result: data\n    };\n};\n","export const cssClasses = {\n    SCHEDULE_BOARD: 'schedule-board',\n    IN_BOARD_SECTION: 'in-board-section',\n    IN_BOARD_CARD: 'in-board-card',\n    MORE_ICON: 'more-icon'\n};\n","import React, { useRef } from 'react';\n\nimport './Card.scss';\nimport { colors } from '../../constants/schedule/colors';\n\nimport { setItemGroupIdService } from '../../services/scheduleService';\nimport { cssClasses } from '../../constants/schedule/cssClasses';\n\nconst Card = props => {\n    let className = 'card';\n    if (props.class) {\n        className = className.concat(' ' + props.class);\n    }\n\n    let card = <div className={className}>{props.children}</div>;\n\n    const dragItemNode = useRef();\n    const dragItem = useRef();\n\n    if (props.draggable) {\n        const dragStart = e => {\n            const item = JSON.parse(e.target.childNodes[0].value);\n            const groupId = item.lesson.group.id;\n            const groupTitle = document.getElementById(`group-${groupId}`);\n            groupTitle.style.backgroundColor = colors.ALLOW;\n            const boards = document.getElementsByClassName(`group-${groupId}`);\n\n            setTimeout(() => {\n                groupTitle.style.display = 'flex';\n\n                for (const board of boards) {\n                    board.style.display = 'flex';\n                    if (\n                        board.childNodes[0].classList.contains(\n                            cssClasses.MORE_ICON\n                        ) &&\n                        !board.childNodes[1]\n                    ) {\n                        board.style.background = colors.POSSIBILITY;\n                    }\n                }\n            }, 50);\n\n            setItemGroupIdService(groupId);\n\n            dragItemNode.current = e.target;\n            dragItemNode.current.addEventListener('dragend', handleDragEnd);\n\n            e.dataTransfer.setData('card_id', dragItemNode.current.id);\n        };\n\n        const handleDragEnd = e => {\n            const groupId = +JSON.parse(e.target.childNodes[0].value).lesson\n                .group.id;\n            const groupTitleEl = document.getElementById(`group-${groupId}`);\n\n            const allBoards = document.getElementsByClassName('schedule-board');\n            const groupTitles = document.getElementsByClassName('group-title');\n\n            const boards = document.getElementsByClassName(`group-${groupId}`);\n\n            if (groupTitleEl) {\n                groupTitleEl.style.backgroundColor = colors.NOTHING;\n            }\n            for (const board of boards) {\n                if (board) {\n                    board.style.background = colors.NOTHING;\n                }\n            }\n\n            for (let board of allBoards) {\n                board.style.display = 'flex';\n            }\n\n            for (const groupTitle of groupTitles) {\n                groupTitle.style.display = 'flex';\n            }\n\n            dragItem.current = null;\n            dragItemNode.current.removeEventListener('dragend', handleDragEnd);\n            dragItemNode.current = null;\n        };\n\n        card = (\n            <div\n                id={props.id}\n                className={className}\n                onDragStart={dragStart}\n                draggable={props.draggable}\n            >\n                {props.children}\n            </div>\n        );\n    }\n\n    return <>{card}</>;\n};\n\nexport default Card;\n","import { store } from '../index';\n\nimport Moment from 'moment';\nimport { extendMoment } from 'moment-range';\nimport i18n from '../helper/i18n';\n\nexport const checkUniqClassName = className => {\n    const classId = store.getState().classActions.classScheduleOne.id;\n    var find = false;\n    if (classId) {\n        find = store\n            .getState()\n            .classActions.classScheduler.some(function (value, index, _arr) {\n                return value.class_name === className && value.id !== classId;\n            });\n    } else {\n        find = store\n            .getState()\n            .classActions.classScheduler.some(function (value, index, _arr) {\n                return value.class_name === className;\n            });\n    }\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const timeIntersectService = (startTime, endTime) => {\n    const classId = store.getState().classActions.classScheduleOne.id;\n    const moment = extendMoment(Moment);\n    let find = false;\n    if (startTime && endTime) {\n        const incomeRange = moment.range(\n            moment(startTime, 'HH:mm').toDate(),\n            moment(endTime, 'HH:mm').toDate()\n        );\n        if (classId) {\n            find = store\n                .getState()\n                .classActions.classScheduler.some(function (\n                    value,\n                    index,\n                    _arr\n                ) {\n                    return (\n                        incomeRange.intersect(\n                            moment.range(\n                                moment(value.startTime, 'HH:mm').toDate(),\n                                moment(value.endTime, 'HH:mm').toDate()\n                            )\n                        ) !== null && value.id !== classId\n                    );\n                });\n        } else {\n            find = store\n                .getState()\n                .classActions.classScheduler.some(function (\n                    value,\n                    index,\n                    _arr\n                ) {\n                    return (\n                        incomeRange.intersect(\n                            moment.range(\n                                moment(value.startTime, 'HH:mm').toDate(),\n                                moment(value.endTime, 'HH:mm').toDate()\n                            )\n                        ) !== null\n                    );\n                });\n        }\n    }\n    return find\n        ? i18n.t('validationMessages:intersect_time_error_message')\n        : undefined;\n};\n\nexport const checkUniqLesson = lesson => {\n    const lessons = store.getState().lesson.lessons;\n    let isNotUnique;\n    if (!lesson.id) {\n        isNotUnique = !!lessons.find(\n            storeLesson =>\n                storeLesson.subject.id === +lesson.subject.id &&\n                storeLesson.teacher.id === +lesson.teacher.id &&\n                storeLesson.lessonType === lesson.lessonType\n        );\n    } else {\n        isNotUnique = !!lessons.find(\n            storeLesson =>\n                storeLesson.subject.id === +lesson.subject.id &&\n                storeLesson.teacher.id === +lesson.teacher.id &&\n                storeLesson.lessonType === lesson.lessonType &&\n                storeLesson.id !== +lesson.id\n        );\n    }\n    return !isNotUnique;\n};\n\nexport const checkUniqueRoomName = roomName => {\n    const roomdId = store.getState().rooms.oneRoom.id;\n    let find = false;\n    if (roomdId) {\n        find = store\n        .getState()\n        .rooms.rooms.some(function (value, index, _arr) {\n            return value.name.toUpperCase() === roomName.toUpperCase() && value.id !== roomdId;\n        });\n    } else {\n     find = store\n        .getState()\n        .rooms.rooms.some(function (value, index, _arr) {\n            return value.name.toUpperCase() === roomName.toUpperCase()  ;\n        });\n    }\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const checkUniqueGroup = groupTitle => {\n    if (!groupTitle) {\n        return;\n    }\n    const find = store.getState().groups.groups.some(function (value) {\n        return (\n            value.title.toUpperCase().trim() === groupTitle.toUpperCase().trim()\n        );\n    });\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const checkUniqueSubject = subjectTitle => {\n    if (!subjectTitle) {\n        return;\n    }\n    const find = store.getState().subjects.subjects.some(function (value) {\n        return (\n            value.name.toUpperCase().trim() ===\n            subjectTitle.toUpperCase().trim()\n        );\n    });\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\nexport const checkUniqueDepartment = departmentTitle => {\n    if (!departmentTitle) {\n        return;\n    }\n    const find = store.getState().departments.departments.some(function (value) {\n        return (\n            value.name.toUpperCase().trim() ===\n            departmentTitle.toUpperCase().trim()\n        );\n    });\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\n\n\nexport const checkUniqSemester = semester => {\n    const semesters = store.getState().semesters.semesters;\n    let isNotUnique;\n    if (!semester.id) {\n        isNotUnique = !!semesters.find(\n            storeSemester =>\n                storeSemester.year === +semester.year &&\n                storeSemester.description.toUpperCase().trim() === semester.description.toUpperCase().trim()\n        );\n    } else {\n        isNotUnique = !!semesters.find(\n            storeSemester =>\n            storeSemester.year=== +semester.year &&\n            storeSemester.description.toUpperCase().trim() === semester.description.toUpperCase().trim() && \n            storeSemester.id !== +semester.id\n        );\n    }\n    \n    return !isNotUnique\n};\n","export const validation = {\n    EMAIL: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n    PASSWORD: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?=.*[!@#$%^&*]).{8,}$/\n};\n","import React from \"react\";\n\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport InputLabel from '@material-ui/core/InputLabel'\n\nimport {renderFromHelper} from './error';\n\nconst renderSelectField = ({\n  input,\n  label,\n  name,\n  id,\n  meta: { touched, error },\n  children,\n  ...custom\n}) => (\n  <FormControl error={touched && !!error}>\n    <InputLabel htmlFor={id}>{label}</InputLabel>\n    <Select\n      native\n      {...input}\n      {...custom}\n      name={name}\n      id={id}\n    >\n      {children}\n    </Select>\n    {renderFromHelper({ touched, error })}\n  </FormControl>\n)\n\nexport default renderSelectField;\n","import React from \"react\";\n\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\n\nexport const renderFromHelper = ({ touched, error }) => {\n  if (!(touched && error)) {\n    return;\n  } else {\n    return <FormHelperText>{touched && error}</FormHelperText>;\n  }\n};\n","import i18n from '../helper/i18n';\nimport { store } from '../index';\nimport axios from '../helper/axios';\nimport {\n    DISABLED_SEMESTERS_URL,\n    SEMESTERS_URL,\n    SEMESTER_COPY_URL,\n    LESSONS_FROM_SEMESTER_COPY_URL,\n    CREATE_ARCHIVE_SEMESTER,\n    ARCHIVED_SEMESTERS_URL, DEFAULT_SEMESTER_URL, SCHEDULE_SEMESTER_ITEMS_URL, GROUPS_URL\n} from '../constants/axios';\nimport { setDisabledSemesters, setError } from '../redux/actions/semesters';\nimport { SEMESTER_FORM } from '../constants/reduxForms';\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { checkUniqSemester } from '../validation/storeValidation';\nimport {\n    addSemester,\n    clearSemester,\n    deleteSemester,\n    selectSemester,\n    showAllSemesters,\n    updateSemester,\n    setArchivedSemesters,\n    moveToArchivedSemester,\n    setScheduleType,\n    setFullSchedule, setScheduleItems\n} from '../redux/actions/index';\n\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { setLoadingService, setScheduleLoadingService } from './loadingService';\n\nexport const selectSemesterService = semesterId =>\n    store.dispatch(selectSemester(semesterId));\n\nexport const setUniqueErrorService = isUniqueError =>\n    store.dispatch(setError(isUniqueError));\n\nexport const clearSemesterService = () => {\n    store.dispatch(clearSemester());\n    resetFormHandler(SEMESTER_FORM);\n};\n\nexport const showAllSemestersService = () => {\n    axios\n        .get(SEMESTERS_URL)\n        .then(response => {\n            store.dispatch(\n                showAllSemesters(\n                    response.data\n                        .sort((a, b) => (a.year > b.year ? 1 : -1))\n                        .reverse()\n                )\n            );\n        })\n        .catch(error => errorHandler(error));\n\n};\nexport const setGroupsToSemester = (semesterId, groups) => {\n    const groupIds = groups.map(item => `groupId=${item.id}`).join('&');\n    axios\n        .put(`${SEMESTERS_URL}/${semesterId}/groups?${groupIds}`)\n        .then(response => {\n            store.dispatch(updateSemester(response.data));\n            selectSemesterService(null);\n            getDisabledSemestersService();\n            getArchivedSemestersService();\n            showAllSemestersService();\n            resetFormHandler(SEMESTER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nconst cardSemester = semester => {\n    const semester_days = [];\n    const semester_classes = [];\n    for (let prop in semester) {\n        if (Object.prototype.hasOwnProperty.call(semester, prop)) {\n            if (\n                prop.indexOf('semester_days_markup_') >= 0 &&\n                semester[prop] === true\n            ) {\n                semester_days.push(prop.substring(21));\n            }\n        }\n        if (Object.prototype.hasOwnProperty.call(semester, prop)) {\n            if (\n                prop.indexOf('semester_classes_markup_') >= 0 &&\n                semester[prop] === true\n            ) {\n                semester_classes.push(\n                    store\n                        .getState()\n                        .classActions.classScheduler.find(\n                        schedule => schedule.id === +prop.substring(24)\n                    )\n                );\n            }\n        }\n\n    }\n\n    return {\n        id: semester.id,\n        year: +semester.year,\n        description: semester.description,\n        startDay: semester.startDay,\n        endDay: semester.endDay,\n        currentSemester: semester.currentSemester,\n        defaultSemester: semester.defaultSemester,\n        semester_days: semester_days,\n        semester_classes: semester_classes,\n        semester_groups: semester.semester_groups\n\n    };\n};\n\nexport const removeSemesterCardService = semesterId => {\n    const semester = store\n        .getState()\n        .semesters.semesters.find(item => item.id === semesterId);\n    if (semester.currentSemester === true) {\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.ERROR,\n            i18n.t('serviceMessages:semester_service_is_active')\n        );\n        return;\n    }\n    axios\n        .delete(SEMESTERS_URL + `/${semesterId}`)\n        .then(response => {\n            store.dispatch(deleteSemester(semesterId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nconst switchSaveActions = semester => {\n    if (semester.id) {\n        putSemester(semester);\n    } else {\n        postSemester(semester);\n    }\n};\n\nexport const handleSemesterService = values => {\n    let semester = cardSemester(values);\n    if (!checkUniqSemester(semester)) {\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.ERROR,\n            i18n.t('common:semester_service_is_not_unique')\n        );\n        setUniqueErrorService(true);\n        return;\n    }\n    if (!checkSemesterYears(semester.endDay, semester.startDay, semester.year))\n        return;\n\n    if (semester.currentSemester) {\n        const currentScheduleOld = findCurrentSemester(semester.id);\n        if (currentScheduleOld) {\n            currentScheduleOld.currentSemester = false;\n            axios\n                .put(SEMESTERS_URL, currentScheduleOld)\n                .then(response => {\n                    store.dispatch(updateSemester(response.data));\n                    switchSaveActions(semester);\n                })\n                .catch(error => errorHandler(error));\n        } else {\n            switchSaveActions(semester);\n        }\n    } else {\n        switchSaveActions(semester);\n    }\n};\n\nconst checkSemesterYears = (endDay, startDay, year) => {\n    const dateEndYear = +endDay.substring(endDay.length - 4);\n    const dateStartYear = +startDay.substring(startDay.length - 4);\n    let conf = true;\n    if (year !== dateEndYear || year !== dateStartYear) {\n        conf = window.confirm(\n            i18n.t('serviceMessages:semester_service_not_as_begin_or_end')\n        );\n    }\n    return conf;\n};\nexport const setDefaultSemesterById = dataId => {\n    axios\n        .put(`${DEFAULT_SEMESTER_URL}?semesterId=${dataId}`)\n        .then(response => {\n            store.dispatch(updateSemester(response.data));\n            selectSemesterService(null);\n            getDisabledSemestersService();\n            getArchivedSemestersService();\n            showAllSemestersService();\n            resetFormHandler(SEMESTER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nconst putSemester = data => {\n    axios\n        .put(SEMESTERS_URL, data)\n        .then(response => {\n            store.dispatch(updateSemester(response.data));\n            selectSemesterService(null);\n            getDisabledSemestersService();\n            getArchivedSemestersService();\n            showAllSemestersService();\n            resetFormHandler(SEMESTER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nconst postSemester = data => {\n    axios\n        .post(SEMESTERS_URL, data)\n        .then(response => {\n            store.dispatch(addSemester(response.data));\n            resetFormHandler(SEMESTER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nconst findCurrentSemester = semesterId => {\n    return store\n        .getState()\n        .semesters.semesters.find(\n            semesterItem =>\n                semesterItem.currentSemester === true &&\n                semesterItem.id !== semesterId\n        );\n};\nconst findDefaultSemester = semesterId => {\n    return store\n        .getState()\n        .semesters.semesters.find(\n            semesterItem =>\n                semesterItem.defaultSemester === true &&\n                semesterItem.id !== semesterId\n        );\n};\nexport const getDisabledSemestersService = () => {\n    axios\n        .get(DISABLED_SEMESTERS_URL)\n        .then(res => {\n            store.dispatch(setDisabledSemesters(res.data));\n        })\n        .catch(err => errorHandler(err));\n};\n\nexport const setDisabledSemestersService = semester => {\n    semester.disable = true;\n    putSemester(semester);\n};\n\nexport const setEnabledSemestersService = semester => {\n    semester.disable = false;\n    putSemester(semester);\n};\n\nexport const semesterCopy = values => {\n    axios\n        .post(\n            SEMESTER_COPY_URL +\n            '?fromSemesterId=' +\n            values.fromSemesterId +\n            '&toSemesterId=' +\n            values.toSemesterId\n        )\n        .then(response => {\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:copied_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const CopyLessonsFromSemesterService = values => {\n    axios\n        .post(\n            LESSONS_FROM_SEMESTER_COPY_URL +\n            '?fromSemesterId=' +\n            values.fromSemesterId +\n            '&toSemesterId=' +\n            values.toSemesterId\n        )\n        .then(response => {\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:copied_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createArchiveSemesterService = semesterId => {\n    axios\n        .post(CREATE_ARCHIVE_SEMESTER + '/' + semesterId)\n        .then(response => {\n            store.dispatch(moveToArchivedSemester(semesterId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:archived_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getArchivedSemestersService = () => {\n    axios\n        .get(ARCHIVED_SEMESTERS_URL)\n        .then(response => {\n            store.dispatch(setArchivedSemesters(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\n\nexport const viewArchivedSemester = semesterId => {\n    setScheduleType('archived');\n    axios\n        .get(CREATE_ARCHIVE_SEMESTER + '/' + semesterId)\n        .then(response => {\n            store.dispatch(setFullSchedule(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\n","export const LESSON_FORM = 'lessonForm';\nexport const TEMPORARY_SCHEDULE_FORM = 'temporaryScheduleForm';\nexport const TEMPORARY_SCHEDULE_VACATION_FORM = 'temporaryScheduleVacationForm';\nexport const GROUP_FORM = 'addGroup';\nexport const ROOM_FORM = 'AddRoom';\nexport const ROOM_FORM_TYPE = 'roomType';\nexport const FREE_ROOMS = 'FREE_ROOMS';\nexport const TEACHER_FORM = 'addTeacher';\nexport const STUDENT_FORM=\"addStudent\";\nexport const CLASS_FORM = 'classForm';\nexport const LOGIN_FORM = 'loginForm';\nexport const REGISTRATION_FORM = 'registrationForm';\nexport const RESET_PASSWORD_FORM = 'resetPasswordForm';\nexport const SUBJECT_FORM = 'addSubject';\nexport const DEPARTMENT_FORM = 'addDepartment';\nexport const SEMESTER_FORM = 'addSemester';\nexport const TEACHER_SCHEDULE_FORM = 'teacherScheduleForm';\nexport const SCHEDULE_SEARCH_FORM = 'GroupSchedulePageTop';\nexport const PROFILE_FORM = 'ProfilePage';\nexport const SEMESTER_COPY_FORM = 'SemesterCopyForm';\nexport const COPY_LESSONS_FROM_SEMESTER_FORM = 'CopyLessonsFromSemesterForm';\n","export const days = [\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n    'Sunday'\n];\n\nexport const daysUppercase = [];\ndays.map(day => daysUppercase.push(day.toUpperCase()));\n","import React, { useEffect } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport { required } from '../../validation/validateFields';\nimport renderSelectField from '../../share/renderedFields/select';\nimport { FREE_ROOMS } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\nimport { showAllSemestersService } from '../../services/semesterService';\nimport './freeRoomForm.scss';\nimport { daysUppercase } from '../../constants/schedule/days';\n\nlet FreeRoomForm = props => {\n\n    const { t } = useTranslation('formElements');\n\n    const weeks = ['ODD', 'EVEN', 'WEEKLY'];\n\n    useEffect(() => showAllSemestersService(), []);\n\n    const {\n        handleSubmit,\n        classScheduler,\n        pristine,\n        submitting,\n        onReset\n    } = props;\n\n    const class_names = [];\n\n    if (classScheduler.length - 1 > 0) {\n        classScheduler.map(classSchedulerOne => {\n            class_names.push(classSchedulerOne.class_name);\n        });\n    }\n\n    return (\n        <>\n            <form className=\"freeRoomsItems\" onSubmit={handleSubmit}>\n                <div className=\"roomsItems\">\n                    <Field\n                        name=\"semesterId\"\n                        component={renderSelectField}\n                        label={t('formElements:semester_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {props.semesters.map((semesters, index) => (\n                            <option key={index} value={semesters.id}>\n                                {semesters.description}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"evenOdd\"\n                        component={renderSelectField}\n                        label={t('formElements:week_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {weeks.map((week, index) => (\n                            <option key={index} value={`${week}`}>\n                                {t(`common:${week.toLowerCase()}_week`)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"dayOfWeek\"\n                        component={renderSelectField}\n                        label={t('formElements:day_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {daysUppercase.map((day, index) => (\n                            <option key={index} value={`${day}`}>\n                                {t(`common:day_of_week_${day}`)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"class\"\n                        component={renderSelectField}\n                        label={t('formElements:class_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {class_names.map((classNum, index) => (\n                            <option key={index} value={`${classNum}`}>\n                                {classNum}\n                            </option>\n                        ))}\n                    </Field>\n                </div>\n                <div className=\"form-buttons-container freeRoomsButtons\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                        className=\"buttons-style\"\n                        type=\"submit\"\n                    >\n                        {t('formElements:submit_button_label')}\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        disabled={pristine || submitting}\n                        className=\"buttons-style\"\n                        onClick={onReset}\n                    >\n                        {t('formElements:clear_button_label')}\n                    </Button>\n                </div>\n            </form>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    freeRooms: state.freeRooms.freeRooms,\n    semesters: state.semesters.semesters\n});\n\nFreeRoomForm = reduxForm({\n    form: FREE_ROOMS\n})(FreeRoomForm);\n\nexport default connect(mapStateToProps)(FreeRoomForm);\n","import axios from '../helper/axios';\nimport { store } from '../index';\nimport { CLASS_URL, PUBLIC_CLASSES_URL } from '../constants/axios';\n\nimport { CLASS_FORM } from '../constants/reduxForms';\n\nimport {\n    addClassScheduleOne,\n    setClassScheduleList,\n    getClassScheduleOne,\n    deleteClassScheduleOne,\n    updateClassScheduleOne,\n    clearClassScheduleOne\n} from '../redux/actions/class';\n\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { setLoadingService } from './loadingService';\n\nexport const getClassScheduleListService = dispatch => {\n    axios\n        .get(CLASS_URL)\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(setClassScheduleList(bufferArray));\n            setLoadingService(false);\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getPublicClassScheduleListService = dispatch => {\n    axios\n        .get(PUBLIC_CLASSES_URL)\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(setClassScheduleList(bufferArray));\n        })\n        .catch(error => {\n            errorHandler(error);\n            setLoadingService(false);\n        });\n};\n\nexport const addClassScheduleOneService = values => {\n    if (values.id) {\n        putAddClassScheduleOneService(values);\n    } else {\n        postAddClassScheduleOneService(values);\n    }\n};\n\nexport const putAddClassScheduleOneService = values => {\n    axios\n        .put(CLASS_URL, values)\n        .then(response => {\n            store.dispatch(updateClassScheduleOne(response.data));\n            resetFormHandler(CLASS_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:class_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const postAddClassScheduleOneService = values => {\n    axios\n        .post(CLASS_URL, values)\n        .then(response => {\n            store.dispatch(addClassScheduleOne(response.data));\n            resetFormHandler(CLASS_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:class_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getClassScheduleOneService = classId => {\n    store.dispatch(getClassScheduleOne(classId));\n};\n\nexport const deleteClassScheduleOneService = classId => {\n    axios\n        .delete(CLASS_URL + `/${classId}`)\n        .then(response => {\n            store.dispatch(deleteClassScheduleOne(classId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:class_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const clearClassScheduleOneService = () => {\n    store.dispatch(clearClassScheduleOne());\n    resetFormHandler(CLASS_FORM);\n};\n","import React, { useEffect, useState } from 'react';\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport Dialog from '@material-ui/core/Dialog';\n\nimport FreeRoomForm from '../../components/FreeRoomForm/freeRoomForm';\nimport { GiCancel } from 'react-icons/gi';\nimport { useTranslation } from 'react-i18next';\nimport { clearFreeRoomsService } from '../../services/freeRoomsService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { showFreeRoomsService } from '../../services/freeRoomsService';\n\nimport './freeRooms.scss';\n\nconst FreeRooms = props => {\n    const { t } = useTranslation('formElements');\n\n    const [open, setOpen] = useState(false);\n\n    const { classScheduler } = props;\n\n    useEffect(() => getClassScheduleListService(), []);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleFormReset = () => {\n        clearFreeRoomsService();\n    };\n\n    const submit = values => {\n        showFreeRoomsService(values);\n    };\n\n    return (\n        <>\n            <span className=\"navLinks\" onClick={handleClickOpen}>\n                {t('find_free_room')}\n            </span>\n\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                maxWidth=\"lg\"\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <div className=\"cards-container \">\n                    <aside className=\"free-rooms__panel\">\n                        <Card className=\"free-rooms-wrapper freeRoomCard\">\n                            <div className=\"freeRoomForms\">\n                                <h2 id=\"form-dialog-title\">\n                                    {t('find_free_room')}\n                                </h2>\n                                <FreeRoomForm\n                                    classScheduler={classScheduler}\n                                    onReset={handleFormReset}\n                                    onSubmit={submit}\n                                />\n                            </div>\n                        </Card>\n                    </aside>\n                    <section className=\"container-flex-wrap wrapper\">\n                        {props.freeRooms.map(freeRoom => (\n                            <Card key={freeRoom.id} className=\"container\">\n                                <div className=\"freeRoomCard\">\n                                    <span> {t('room_label') + ':'} </span>\n                                    <h2 className=\"room-card__number\">\n                                        {freeRoom.name}\n                                    </h2>\n                                    <span>{t('type_label') + ':'}</span>\n                                    <h2 className=\"room-card__number\">\n                                        {freeRoom.type.description}\n                                    </h2>\n                                </div>\n                            </Card>\n                        ))}\n                    </section>\n                </div>\n            </Dialog>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    freeRooms: state.freeRooms.freeRooms\n});\n\nexport default connect(mapStateToProps)(FreeRooms);\n","import axios from '../helper/axios';\nimport { store } from '../index';\n\nimport { showFreeRooms, clearFreeRooms } from '../redux/actions/freeRooms';\nimport { FREE_ROOMS_URL } from '../constants/axios';\nimport { FREE_ROOMS } from '../constants/reduxForms';\n\nimport { errorHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const showFreeRoomsService = elem => {\n    axios\n        .get(\n            FREE_ROOMS_URL +\n                '?dayOfWeek=' +\n                elem.dayOfWeek +\n                '&evenOdd=' +\n                elem.evenOdd +\n                '&classId=' +\n                elem.class +\n                '&semesterId=' +\n                elem.semesterId\n        )\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(showFreeRooms(bufferArray));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const clearFreeRoomsService = () => {\n    store.dispatch(clearFreeRooms());\n    resetFormHandler(FREE_ROOMS);\n};\n","import * as actionsType from './actionsType';\n\nexport const showFreeRooms = freeRooms => {\n    return {\n        type: actionsType.SHOW_FREE_ROOMS,\n        result: freeRooms\n    };\n};\n\nexport const clearFreeRooms = () => ({\n    type: actionsType.CLEAR_FREE_ROOM\n});\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {\n    FaCaretDown,\n    FaClipboardList,\n    FaClock,\n    FaDoorOpen,\n    FaHome,\n    FaRunning,\n    FaSignOutAlt,\n    FaUser\n} from 'react-icons/fa';\nimport Menu from '@material-ui/core/Menu';\nimport Button from '@material-ui/core/Button';\nimport { useTranslation } from 'react-i18next';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { withStyles } from '@material-ui/core/styles';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\n\nimport '../../App.scss';\nimport './Header.scss';\nimport { links } from '../../constants/links';\n\nimport LanguageSelector from '../LanguageSelector/LanguageSelector';\nimport * as colors from '../../constants/schedule/colors';\n\nimport { getCurrentSemesterService } from '../../services/scheduleService';\n\nimport FreeRooms from '../../containers/FreeRooms/freeRooms';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { setSemesterLoadingService } from '../../services/loadingService';\n\nconst StyledMenu = withStyles({\n    paper: {\n        border: `1px solid ${colors.colors.BORDER}`\n    }\n})(props => (\n    <Menu\n        elevation={0}\n        getContentAnchorEl={null}\n        anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center'\n        }}\n        transformOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center'\n        }}\n        {...props}\n    />\n));\n\nconst StyledMenuItem = withStyles(theme => ({\n    root: {\n        '&:focus': {\n            backgroundColor: theme.palette.primary.main,\n            color: theme.palette.common.white\n        }\n    }\n}))(MenuItem);\n\nconst Header = props => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const handleClick = event => setAnchorEl(event.currentTarget);\n    const handleClose = () => setAnchorEl(null);\n\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\n    const handleClickUserMenu = event => setAnchorElUser(event.currentTarget);\n    const handleCloseUserMenu = () => setAnchorElUser(null);\n\n    const { t } = useTranslation('common');\n    const [teacher, setTeacher] = useState(0);\n\n    useEffect(() => {\n        if (props.userRole === roles.MANAGER) {\n            setSemesterLoadingService(true);\n            getCurrentSemesterService();\n        }\n    }, [props.userRole]);\n\n\n    const getUserMenu = userRole => {\n        let userMenu = null;\n        if (userRole === null || userRole === undefined) {\n            return (\n                <Link to={links.LOGIN} className='navLinks'>\n                    {t('login_title')}\n                </Link>\n            );\n        }\n        switch (userRole) {\n            case roles.MANAGER:\n                userMenu = (\n                    <div className='user-menu'>\n                        <Button\n                            aria-controls='customized-menu'\n                            aria-haspopup='true'\n                            variant='contained'\n                            color='primary'\n                            onClick={handleClickUserMenu}\n                        >\n                            {localStorage.getItem('email')}\n                            <ListItemIcon>\n                                <FaCaretDown fontSize='normall' />\n                            </ListItemIcon>\n                        </Button>\n                        <StyledMenu\n                            id='customized-menu'\n                            anchorEl={anchorElUser}\n                            keepMounted\n                            open={Boolean(anchorElUser)}\n                            onClose={handleCloseUserMenu}\n                        >\n                            <Link\n                                to={links.ADMIN_PAGE}\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaUser fontSize='normall' />\n                                    </ListItemIcon>\n                                    {t('admin_title')}\n                                </StyledMenuItem>\n                            </Link>\n                            <Link\n                                to={links.SCHEDULE_PAGE}\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaClock fontSize='normal' />\n                                    </ListItemIcon>\n                                    {t('schedule_title')}\n                                </StyledMenuItem>\n                            </Link>\n                            <span\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaDoorOpen fontSize='normal' />\n                                    </ListItemIcon>\n                                    <FreeRooms\n                                        classScheduler={props.classScheduler}\n                                    />\n                                </StyledMenuItem>\n                            </span>\n                            <Link\n                                to={links.MY_PROFILE}\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaUser fontSize='normal' />\n                                    </ListItemIcon>\n                                    {t('my_profile')}\n                                </StyledMenuItem>\n                            </Link>\n                            <Link\n                                to={links.LOGOUT}\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaSignOutAlt fontSize='normal' />\n                                    </ListItemIcon>\n                                    {t('logout_title')}\n                                </StyledMenuItem>\n                            </Link>\n                        </StyledMenu>\n                    </div>\n                );\n                break;\n            case roles.TEACHER:\n                userMenu = (\n                    <div className='user-menu'>\n                        <Button\n                            aria-controls='customized-menu'\n                            aria-haspopup='true'\n                            variant='contained'\n                            color='primary'\n                            onClick={handleClickUserMenu}\n                        >\n                            {localStorage.getItem('email')}\n                            <ListItemIcon>\n                                <FaCaretDown fontSize='normal' />\n                            </ListItemIcon>\n                        </Button>\n                        <StyledMenu\n                            id='customized-menu'\n                            anchorEl={anchorElUser}\n                            keepMounted\n                            open={Boolean(anchorElUser)}\n                            onClose={handleCloseUserMenu}\n                        >\n                            <Link\n                                to={links.TEACHER_SCHEDULE}\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaClock fontSize='normal' />\n                                    </ListItemIcon>\n                                    {t('schedule_title')}\n                                </StyledMenuItem>\n                            </Link>\n                            <span\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={() => {\n\n                                    handleCloseUserMenu();\n                                }}\n                            >\n\n                            </span>\n                            <Link\n                                to={links.MY_PROFILE}\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaUser fontSize='normal' />\n                                    </ListItemIcon>\n                                    {t('my_profile')}\n                                </StyledMenuItem>\n                            </Link>\n                            <Link\n                                to={links.LOGOUT}\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaSignOutAlt fontSize='normal' />\n                                    </ListItemIcon>\n                                    {t('logout_title')}\n                                </StyledMenuItem>\n                            </Link>\n                        </StyledMenu>\n                    </div>\n                );\n                break;\n            default:\n                userMenu = (\n                    <div className='user-menu'>\n                        <Button\n                            aria-controls='customized-menu'\n                            aria-haspopup='true'\n                            variant='contained'\n                            color='primary'\n                            onClick={handleClickUserMenu}\n                        >\n                            {localStorage.getItem('email')}\n                        </Button>\n                        <StyledMenu\n                            id='customized-menu'\n                            anchorEl={anchorElUser}\n                            keepMounted\n                            open={Boolean(anchorElUser)}\n                            onClose={handleCloseUserMenu}\n                        >\n                            <Link\n                                to={links.LOGOUT}\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaSignOutAlt fontSize='normal' />\n                                    </ListItemIcon>\n                                    {t('logout_title')}\n                                </StyledMenuItem>\n                            </Link>\n                        </StyledMenu>\n                    </div>\n                );\n        }\n        return userMenu;\n    };\n\n    const roles = props.roles;\n\n    let leftLinks = null;\n    let menu = null;\n    let userMenu = getUserMenu(props.userRole);\n    if (props.userRole === roles.MANAGER) {\n        leftLinks = (\n            <>\n                {props.loading ? (\n                    <span className='navLinks nav-semester'>\n                        <CircularProgress size={20} />\n                    </span>\n                ) : (\n                    <span className='navLinks nav-semester'>\n                        {t('semester_title')}:{' '}\n                        {props.currentSemester.description}\n                    </span>\n                )}\n            </>\n        );\n        menu = (\n            <div className='menu'>\n                <Button\n                    aria-controls='customized-menu'\n                    aria-haspopup='true'\n                    variant='contained'\n                    color='primary'\n                    onClick={handleClick}\n                >\n                    {t('menu_button')}\n                </Button>\n\n                <StyledMenu\n                    id='customized-menu'\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    <span className='navLinks menu-semester'>\n                        {props.currentSemester.description}\n                    </span>\n                    <Link\n                        to={links.HOME_PAGE}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaHome fontSize='normall' />\n                            </ListItemIcon>\n                            {t('home_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        to={links.SCHEDULE_PAGE}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaClock fontSize='normall' />\n                            </ListItemIcon>\n                            {t('schedule_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        to={links.ADMIN_PAGE}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaUser fontSize='normall' />\n                            </ListItemIcon>\n                            {t('admin_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <span\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaDoorOpen fontSize='normall' />\n                            </ListItemIcon>\n                            <FreeRooms classScheduler={props.classScheduler} />\n                        </StyledMenuItem>\n                    </span>\n\n                    <Link\n                        to={links.LOGOUT}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaSignOutAlt fontSize='normall' />\n                            </ListItemIcon>\n                            {t('logout_title')}\n                        </StyledMenuItem>\n                    </Link>\n                </StyledMenu>\n            </div>\n        );\n    } else if (props.userRole === roles.TEACHER) {\n        menu = (\n            <div className='menu'>\n                <Button\n                    aria-controls='customized-menu'\n                    aria-haspopup='true'\n                    variant='contained'\n                    color='primary'\n                    onClick={handleClick}\n                >\n                    {t('menu_button')}\n                </Button>\n\n                <StyledMenu\n                    id='customized-menu'\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    <Link\n                        to={links.HOME_PAGE}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaHome fontSize='normall' />\n                            </ListItemIcon>\n                            {t('home_title')}\n                        </StyledMenuItem>\n                    </Link>\n                    <StyledMenuItem>\n                        <ListItemIcon>\n                            <FaClipboardList fontSize='normall' />\n                        </ListItemIcon>\n\n                    </StyledMenuItem>\n\n                    <Link\n                        to={links.TEACHER_SCHEDULE}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaClock fontSize='normall' />\n                            </ListItemIcon>\n                            {t('schedule_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        to={links.LOGOUT}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaSignOutAlt fontSize='normall' />\n                            </ListItemIcon>\n                            {t('logout_title')}\n                        </StyledMenuItem>\n                    </Link>\n                </StyledMenu>\n            </div>\n        );\n    } else if (props.userRole === null || props.userRole === undefined) {\n        menu = (\n            <div className='menu'>\n                <Button\n                    aria-controls='customized-menu'\n                    aria-haspopup='true'\n                    variant='contained'\n                    color='primary'\n                    onClick={handleClick}\n                >\n                    {t('menu_button')}\n                </Button>\n                <StyledMenu\n                    id='customized-menu'\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    <Link\n                        to={links.HOME_PAGE}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={() => {\n                            setAnchorEl(null);\n                        }}\n\n                    >\n                        <StyledMenuItem>\n\n                            <ListItemIcon>\n                                <FaHome fontSize='normall' />\n                            </ListItemIcon>\n                            {t('home_title')}\n                        </StyledMenuItem>\n                    </Link>\n                    <Link\n                        to={links.LOGIN}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaRunning fontSize='normall' />\n                            </ListItemIcon>\n                            {t('login_title')}\n                        </StyledMenuItem>\n                    </Link>\n                </StyledMenu>\n            </div>\n        );\n    }\n\n    return (\n        <>\n\n            <header className='header'>\n                {menu}\n                <nav className='header-blocks header-blocks_one'>\n                    <Link to={links.HOME_PAGE} className='navLinks'>\n\n                        {t('home_title')}\n                    </Link>\n                    {leftLinks}\n                </nav>\n                <nav className='header-blocks header-blocks_two'>\n                    {userMenu}\n                </nav>\n                <nav className='header-blocks header-blocks_three'>\n                    <LanguageSelector />\n                </nav>\n            </header>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    currentSemester: state.schedule.currentSemester,\n    loading: state.loadingIndicator.semesterLoading\n});\n\nexport default connect(mapStateToProps, {})(Header);\n","export const userRoles = {\n    USER: 'ROLE_USER',\n    MANAGER: 'ROLE_MANAGER',\n    TEACHER: 'ROLE_TEACHER'\n};\n","import { daysUppercase } from '../constants/schedule/days';\n\nexport const makeGroupSchedule = groupSchedule => {\n    let evenArray = [];\n    let oddArray = [];\n    let group = {};\n    let done = false;\n\n    const evenDaysPrepArray = [\n        { day: 'MONDAY', class: [] },\n        { day: 'TUESDAY', class: [] },\n        { day: 'WEDNESDAY', class: [] },\n        { day: 'THURSDAY', class: [] },\n        { day: 'FRIDAY', class: [] },\n        { day: 'SATURDAY', class: [] },\n        { day: 'SUNDAY', class: [] }\n    ];\n    const oddDaysPrepArray = [\n        { day: 'MONDAY', class: [] },\n        { day: 'TUESDAY', class: [] },\n        { day: 'WEDNESDAY', class: [] },\n        { day: 'THURSDAY', class: [] },\n        { day: 'FRIDAY', class: [] },\n        { day: 'SATURDAY', class: [] },\n        { day: 'SUNDAY', class: [] }\n    ];\n\n    if (groupSchedule.schedule && groupSchedule.schedule.length > 0) {\n        group = groupSchedule.schedule[0].group;\n        groupSchedule.schedule[0].days.map(day => {\n            day.classes.map(classItem => {\n                evenDaysPrepArray.map(evenDayPrep => {\n                    if (evenDayPrep.day === day.day) {\n                        evenDayPrep.class[classItem.class.id] = {\n                            class: classItem.class,\n                            card: classItem.weeks.even\n                        };\n                    }\n                });\n\n                oddDaysPrepArray.map(oddDayPrep => {\n                    if (oddDayPrep.day === day.day) {\n                        oddDayPrep.class[classItem.class.id] = {\n                            class: classItem.class,\n                            card: classItem.weeks.odd\n                        };\n                    }\n                });\n            });\n        });\n    }\n\n    oddDaysPrepArray.map(oddDay => {\n        oddDay.class.map((oddClas, clasIndex) => {\n            if (!oddArray.hasOwnProperty(clasIndex)) {\n                oddArray[clasIndex] = { class: oddClas.class, cards: {} };\n            }\n\n            daysUppercase.map(dayArr => {\n                if (!oddArray[clasIndex].cards.hasOwnProperty(dayArr)) {\n                    oddArray[clasIndex].cards[dayArr] = {};\n                }\n            });\n            if (oddClas.card !== null && oddClas.card !== undefined) {\n                // if (oddClas.card.hasOwnProperty('teacherForSite')) {\n                if (oddClas.card.hasOwnProperty('teacher')) {\n                    oddArray[clasIndex].cards[oddDay.day] = {\n                        card: oddClas.card\n                    };\n                }\n            }\n        });\n    });\n\n    evenDaysPrepArray.map(evenDay => {\n        evenDay.class.map((evenClas, clasIndex) => {\n            if (!evenArray.hasOwnProperty(clasIndex)) {\n                evenArray[clasIndex] = { class: evenClas.class, cards: {} };\n            }\n\n            daysUppercase.map(dayArr => {\n                if (!evenArray[clasIndex].cards.hasOwnProperty(dayArr)) {\n                    evenArray[clasIndex].cards[dayArr] = {};\n                }\n            });\n            if (evenClas.card !== null && evenClas.card !== undefined) {\n                // if (evenClas.card.hasOwnProperty('teacherForSite')) {\n                if (evenClas.card.hasOwnProperty('teacher')) {\n                    evenArray[clasIndex].cards[evenDay.day] = {\n                        card: evenClas.card\n                    };\n                }\n            }\n        });\n    });\n    done = true;\n    return {\n        semester: groupSchedule.semester,\n        oddArray,\n        evenArray,\n        group,\n        done\n    };\n};\n\nexport const makeFullSchedule = fullSchedule => {\n    let groupsCount = 0;\n    let groupList = [];\n    let groupListId = new Map([]);\n    let daysPrepArrayFull = [];\n    let done = false;\n    let semester_days = [];\n    let semester_classes = [];\n\n    if (fullSchedule.schedule) {\n        groupsCount = fullSchedule.schedule.length;\n        semester_days = fullSchedule.semester.semester_days;\n        semester_classes = fullSchedule.semester.semester_classes;\n\n        fullSchedule.schedule.map(group => {\n            groupList.push(group.group);\n            groupListId.set(group.group.id, {});\n        });\n        groupList = groupList.sort((a, b) =>\n            a.title > b.title ? 1 : b.title > a.title ? -1 : 0\n        );\n\n        fullSchedule.semester.semester_days.map(day => {\n            let prep_schedule_array = [];\n            fullSchedule.semester.semester_classes.map(classItem => {\n                const oddArray = [];\n                const evenArray = [];\n                groupList.forEach((groupItem, groupIndex) => {\n                    const groupFull = fullSchedule.schedule.find(\n                        groupFullIterate =>\n                            groupFullIterate.group.id === groupItem.id\n                    );\n                    const dayFull = groupFull.days.find(\n                        dayFullIterate => dayFullIterate.day === day\n                    );\n                    const classFull = dayFull.classes.find(\n                        dayFullIterable =>\n                            dayFullIterable.class.id === classItem.id\n                    );\n                    oddArray.push({\n                        group: groupItem,\n                        card: classFull.weeks.odd\n                    });\n                    evenArray.push({\n                        group: groupItem,\n                        card: classFull.weeks.even\n                    });\n                });\n                prep_schedule_array.push({\n                    class: classItem,\n                    cards: { odd: oddArray, even: evenArray }\n                });\n            });\n            daysPrepArrayFull.push({ day, classes: prep_schedule_array });\n        });\n        done = true;\n    }\n\n    return {\n        semester: fullSchedule.semester,\n        schedule: fullSchedule.schedule,\n        semester_classes,\n        semester_days,\n        groupsCount: groupsCount,\n        groupList: groupList,\n        resultArray: daysPrepArrayFull,\n        done\n    };\n};\n\nexport const makeTeacherSchedule = teacherSchedule => {\n    let teacher = {};\n    let evenArray = [];\n    let oddArray = [];\n    let oddDays = [];\n    let evenDays = [];\n    let oddClasses = [];\n    let evenClasses = [];\n    let done = false;\n\n    if (teacherSchedule && teacherSchedule.days) {\n        teacher = teacherSchedule.teacher;\n\n        teacherSchedule.days.map(dayTeacher => {\n            dayTeacher.odd.classes.map(clas => {\n                if (\n                    oddClasses.findIndex(\n                        oddClass => oddClass.id === clas.class.id\n                    ) < 0\n                ) {\n                    oddClasses.push(clas.class);\n                }\n                if (oddDays.indexOf(dayTeacher.day) < 0) {\n                    oddDays.push(dayTeacher.day);\n                }\n                if (!(clas.class.id in oddArray)) {\n                    oddArray[clas.class.id] = [];\n                }\n\n                oddArray[clas.class.id].push({\n                    day: dayTeacher.day,\n                    cards: clas.lessons\n                });\n            });\n\n            dayTeacher.even.classes.map(clas => {\n                if (\n                    evenClasses.findIndex(\n                        evenClass => evenClass.id === clas.class.id\n                    ) < 0\n                ) {\n                    evenClasses.push(clas.class);\n                }\n                if (evenDays.indexOf(dayTeacher.day) < 0) {\n                    evenDays.push(dayTeacher.day);\n                }\n                if (!(clas.class.id in evenArray)) {\n                    evenArray[clas.class.id] = [];\n                }\n\n                evenArray[clas.class.id].push({\n                    day: dayTeacher.day,\n                    cards: clas.lessons\n                });\n            });\n        });\n        done = true;\n    }\n\n\n    return {\n        done,\n        teacher,\n        semester: teacherSchedule.semester,\n        odd: {\n            days: oddDays,\n            classes: oddClasses.sort((a, b) =>\n                a.startTime > b.startTime\n                    ? 1\n                    : b.startTime > a.startTime\n                    ? -1\n                    : 0\n            ),\n            cards: oddArray\n        },\n        even: {\n            days: evenDays,\n            classes: evenClasses.sort((a, b) =>\n                a.startTime > b.startTime\n                    ? 1\n                    : b.startTime > a.startTime\n                    ? -1\n                    : 0\n            ),\n            cards: evenArray\n        }\n    };\n};\n","export const disabledCard = {\n    SHOW: 'show',\n    HIDE: 'hide'\n};\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './modal.scss';\n\nimport i18n from 'i18next';\nimport { disabledCard } from '../../../constants/disabledCard';\nimport './linkToMeetingDialog.scss'\nexport const LinkToMeetingDialog = props => {\n    const { onClose, cardId, isHide, open,linkToMeeting} = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n\n    return (\n        <Dialog id=\"my-dialog\"\n\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\" className=\"confirm-dialog\">\n                <>\n                    {isHide ? (\n                        <>\n                            {isHide === disabledCard.HIDE ? (\n                                <>{i18n.t('common:do_you_wanna_disable')}</>\n                            ) : (\n                                <>{i18n.t('common:do_you_wanna_show')}</>\n                            )}\n                        </>\n                    ) : (\n                        <>\n                            {i18n.t('common:do_you_wanna')}{' '}\n                            <span>\n                                <a className=\"go-to-meeting\" href={linkToMeeting} target=\"_blank\" title={linkToMeeting}>\n                                    {i18n.t(`common:go_to_meeting_word`)}\n                                </a>\n                            </span>{' '}\n                        </>\n                    )}\n\n                    {i18n.t('common:by_this_card_type', {\n                        cardType: i18n.t(`formElements:reference_element`)\n                    })}\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => onClose(cardId)}\n                >\n                    {i18n.t('common:yes_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                >\n                    {i18n.t('common:no_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nLinkToMeetingDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default LinkToMeetingDialog;\n","import React, { useState } from 'react';\nimport { IoMdLink } from 'react-icons/all';\nimport LinkToMeetingDialog from '../../share/modals/modal/linkToMeetingDialog';\nimport './LinkToMeeting.scss'\nconst LinkToMeeting=(props)=>{\n   const {linkToMeeting}=props;\n   const [openDialog,setOpenDialog]=useState(false);\n   const openWindowByUrl=(url)=>{\n      let win = window.open(linkToMeeting, '_blank');\n       win.focus();\n   }\n    const handleClose = semesterId => {\n        setOpenDialog(false);\n        if (semesterId !== '') {\n           openWindowByUrl(linkToMeeting);\n        }\n    };\n\n    return (<>\n                    <IoMdLink\n                        color={\"blue\"}\n                        className=\"svg-btn copy-btn link\"\n                        onClick={() => {\n                            setOpenDialog(true);\n                        }}\n                        title={linkToMeeting}\n\n                    />\n                <LinkToMeetingDialog\n                    cardId={1}\n                    isHide={false}\n                    open={openDialog}\n                    onClose={handleClose}\n                    linkToMeeting={linkToMeeting}\n                />\n                </>\n           )\n\n}\nexport {LinkToMeeting}","export const places={\n    TOGETHER:\"auditory+online\",\n    AUDITORY:\"auditory\",\n    ONLINE:\"online\"\n}","const parseShortPosition = (position) => {\n    const teacherPosition = new Map();\n    teacherPosition.set('доцент', 'доц.');\n    teacherPosition.set('асистент', 'ac.');\n    teacherPosition.set('професор', 'проф.');\n    return teacherPosition.get(position);\n\n};\nexport const getFirstLetter = (word) => {\n    return word !== null ? `${word.charAt(0)}.` : '';\n};\nexport const getTeacherName = (teacher) => {\n    const { name, surname, patronymic } = teacher;\n    return `${surname} ${getFirstLetter(name)} ${getFirstLetter(patronymic)}`;\n\n};\nexport const getTeacherFullName = (teacher) => {\n    const { name, surname, patronymic } = teacher;\n    return `${surname} ${name} ${patronymic}`;\n\n};\nexport const getTeacherForSite = (teacher) => {\n    const { name, surname, patronymic, position } = teacher;\n    return `${position} ${surname} ${getFirstLetter(name)} ${getFirstLetter(patronymic)}\\n`;\n\n};\nexport const handleTeacherInfo = (teacher) => {\n    const { name, surname, patronymic, position } = teacher;\n    return `${surname} ${name} ${patronymic} (${position})`;\n};\nexport const getTeacherWithPosition = (teacher) => {\n    const { name, surname, patronymic, position } = teacher;\n    return `${position} ${surname} ${name} ${patronymic}`;\n};\nexport const getTeacherShortPosition = (teacher) => {\n    const { name, surname, patronymic, position } = teacher;\n    return `${parseShortPosition(position)} ${surname} ${getFirstLetter(name)} ${getFirstLetter(patronymic)}\\n`;\n\n};\n\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport Card from '../share/Card/Card';\n\nimport i18next from './i18n';\n\nimport { daysUppercase } from '../constants/schedule/days';\nimport { LinkToMeeting } from '../components/LinkToMeeting/LinkToMeeting';\nimport { places } from '../constants/places';\nimport i18n from 'i18next';\nimport './renderScheduleTable.scss';\nimport { getTeacherForSite, getTeacherFullName, getTeacherShortPosition } from './renderTeacher';\n\nconst shortid = require('shortid');\n\nconst matchDayNumberSysytemToDayName = () => {\n    let now = new Date();\n    return daysUppercase[now.getDay() - 1];\n};\nconst currentDay = matchDayNumberSysytemToDayName();\nconst setLink = (card, place) => {\n    if (place === places.TOGETHER) {\n        return <LinkToMeeting {...card} />;\n    } else if (place === places.ONLINE) {\n        return getHref(card.linkToMeeting);\n    }\n    return null;\n};\n\nconst getWeekNumber = (startScheduleDate, date) => {\n    const parsed = Array.from(startScheduleDate);\n\n    const startDay = new Date(\n        parsed[3] +\n        parsed[4] +\n        parsed[5] +\n        parsed[0] +\n        parsed[1] +\n        parsed[2] +\n        parsed[6] +\n        parsed[7] +\n        parsed[8] +\n        parsed[9]\n    );\n\n    const numberOfDays = Math.floor((date - startDay) / (24 * 60 * 60 * 1000));\n    return Math.ceil((date.getDay() + 1 + numberOfDays) / 7);\n};\nconst printWeekNumber = startScheduleDate => {\n    let date = new Date();\n    let result = getWeekNumber(startScheduleDate, date);\n    return result;\n};\n\nfunction isOddFunction(num) {\n    return num % 2;\n}\n\nlet currentWeekType = 0;\n\nconst renderClassCell = classItem => {\n    return (classItem.class_name +\n        '\\n\\r\\n\\r' +\n        classItem.startTime +\n        ' - ' +\n        classItem.endTime);\n};\n\nexport const prepareLessonCardCell = card => {\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        inner = getTeacherShortPosition(card.teacher) + '\\n' + card.subjectForSite + '\\n';\n    }\n    return inner;\n};\nexport const prepareLessonSubCardCell = (card, place) => {\n    const room = place !== places.ONLINE ? card.room : '';\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        inner =\n            i18next.t(\n                `formElements:lesson_type_${card.lessonType.toLowerCase()}_label`\n            );\n        if (room !== '') {\n            inner = `(${inner}, ${card.room.name})`;\n        }\n    }\n    return inner;\n};\nconst getHref = (link) => {\n    return (<a title={link} className='link-to-meeting' href={link}\n               target='_blank'>{i18n.t(`common:link_to_meeting_word`)}</a>);\n};\n\nexport const prepareLessonTemporaryCardCell = (card, place) => {\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        if (card.temporary_schedule) {\n            if (card.temporary_schedule.vacation === true) {\n                inner +=\n                    card.temporary_schedule.date +\n                    '\\n\\r' +\n                    i18next.t(`common:vacation_label`);\n            } else {\n                inner +=\n                    card.temporary_schedule.date +\n                    '\\n\\r' +\n                    getTeacherForSite(card.temporary_schedule) +\n                    '\\n' +\n                    card.temporary_schedule.subjectForSite;\n                if (card.temporary_schedule.room) {\n                    inner += ', ' + card.temporary_schedule.room.name + ' )';\n                }\n            }\n            let title =\n                i18next.t(`common:regular_lesson_label`) +\n                '\\r' +\n                prepareLessonCardCell(card, place) +\n                '\\r' +\n                prepareLessonSubCardCell(card, place) +\n                '\\r';\n\n            return inner.length > 0 ? (\n                <>\n                    <p className='temporary-class' title={title}>\n                        {inner}\n                    </p>\n                    {setLink(card, place)}\n                </>\n\n            ) : (\n                ''\n            );\n        } else {\n            return (\n                <>\n                    <p>{prepareLessonCardCell(card, place)}</p>\n                    <p>{prepareLessonSubCardCell(card, place)}</p>\n                    {setLink(card, place)}\n                </>\n            );\n        }\n    } else {\n        return '';\n    }\n};\n\nexport const prepareTeacherCardCell = card => {\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        inner = card.subjectForSite;\n    }\n    return inner;\n};\n\nexport const prepareTeacherCardRegularCell = (card, place) => {\n    let inner = buildLessonWithRoom(card, place);\n    inner += '\\n' +\n        card.group.title + '\\n';\n    return inner;\n\n};\n\nexport const buildLessonWithRoom = (card, place) => {\n    const room = place !== places.ONLINE ? card.room : '';\n    let inner = '';\n    inner += prepareTeacherCardCell(card) +\n        '\\n';\n\n    if (room !== '') {\n        inner += `(${i18next.t(\n            `formElements:lesson_type_${card.lessonType.toLowerCase()}_label`\n        )} ,${card.room})\\n`;\n    } else {\n        inner += i18next.t(\n            `formElements:lesson_type_${card.lessonType.toLowerCase()}_label`\n        ) + '\\n';\n    }\n    return inner;\n\n\n};\nexport const buildGroupNumber = card => {\n\n    return card.group.title + '\\n';\n};\n\nexport const prepareTeacherTemporaryCardCell = (cards, place) => {\n\n    let inner = '';\n    let title = '';\n    if (!cards) {\n        return '';\n    }\n\n    if (cards.length === 1) {\n        if (cards[0] === undefined || cards[0] === null) {\n            return '';\n        }\n        const card = cards[0];\n\n        if (!card.temporary_schedule) {\n            return <>\n                {prepareTeacherCardRegularCell(card, place)}\n                {setLink(card, place)}\n            </>;\n\n        }\n        if (card.temporary_schedule.vacation === true) {\n            inner +=\n                card.temporary_schedule.date +\n                '\\n' +\n                i18next.t(`common:vacation_label`);\n        } else {\n\n            inner +=\n                card.temporary_schedule.date +\n                '\\n';\n            if (card.temporary_schedule.room) {\n                inner += `(${card.temporary_schedule.subjectForSite}, ${card.temporary_schedule.room.name})\\n`;\n            } else {\n                inner += card.temporary_schedule.subjectForSite + '\\n';\n            }\n        }\n        title =\n            i18next.t(`common:regular_lesson_label`) +\n            '\\r' +\n            prepareTeacherCardRegularCell(card, place);\n        return inner.length > 0 ? (\n            <p className='temporary-class' title={title}>\n                {inner}\n                {setLink(card, place)}\n            </p>\n        ) : (\n            ''\n        );\n    }\n    let card = cards[0];\n\n    inner += buildLessonWithRoom(card, place);\n    cards.map(card => {\n        if (!card.temporary_schedule) {\n            inner +=\n                buildGroupNumber(card);\n        } else if (card.temporary_schedule.vacation === true) {\n\n            inner +=\n                card.temporary_schedule.date +\n                '\\n' +\n                i18next.t(`common:vacation_label`) +\n                '\\n';\n        } else {\n            inner +=\n                card.temporary_schedule.date +\n                '\\n' +\n                getTeacherFullName(card.temporary_schedule.teacher) +\n                '\\n';\n            if (card.temporary_schedule.room) {\n                inner += `${card.temporary_schedule.subjectForSite}, ${card.temporary_schedule.room.name}\\n`;\n            } else {\n                inner += card.temporary_schedule.subjectForSite + '\\n';\n            }\n        }\n        title +=\n            i18next.t(`common:regular_lesson_label`) +\n            '\\r' +\n            prepareTeacherCardRegularCell(card, place) +\n            '\\r';\n    });\n\n    return inner.length > 0 ? (\n        <p className='temporary-class' title={title}>\n            {inner}\n            {setLink(card, place)}\n        </p>\n    ) : (\n        ''\n    );\n};\n\nexport const renderGroupDayClass = (classDay, isOddWeek, place) => {\n    let res = [];\n    for (let [key, value] of Object.entries(classDay.cards)) {\n        value.day = key;\n        res.push(value);\n    }\n    return (\n        <TableRow key={shortid.generate()}>\n            <TableCell className=' lesson groupLabelCell'>\n                {renderClassCell(classDay.class)}\n            </TableCell>\n            {res.map(day => {\n                let className = 'lesson ';\n                if (currentDay === day.day && currentWeekType === isOddWeek) {\n                    className += ' currentDay';\n                }\n                return (\n                    <TableCell key={shortid.generate()} className={className}>\n                        {/* <p>{prepareLessonCardCell(day.card, currentDay)}</p>\n                        <p>{prepareLessonSubCardCell(day.card, currentDay)}</p> */}\n                        {prepareLessonTemporaryCardCell(day.card, place)}\n\n                    </TableCell>\n                );\n            })}\n        </TableRow>\n    );\n};\n\nexport const renderScheduleGroupHeader = daysUppercase => (\n    <TableHead>\n        <TableRow>\n            <TableCell className='groupLabelCell'></TableCell>\n            {daysUppercase.map(day => (\n                <TableCell key={shortid.generate()}>\n                    {i18next.t(`day_of_week_${day}`)}\n                </TableCell>\n            ))}\n        </TableRow>\n    </TableHead>\n);\n\nexport const renderGroupTable = (classes, isOdd, semester, place) => {\n    if (semester) {\n        currentWeekType = isOddFunction(printWeekNumber(semester.startDay));\n    }\n\n    return (\n        <TableContainer>\n            <Table aria-label='sticky table'>\n                {renderScheduleGroupHeader(daysUppercase)}\n                <TableBody>\n                    {classes.map((classDay, classIndex) => {\n                        if (classDay) {\n                            return renderGroupDayClass(classDay, isOdd, place);\n                        }\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nexport const renderGroupCells = (\n    groups,\n    place,\n    isOdd = 0,\n    currentWeekType = 0,\n    isCurrentDay = 0\n) => {\n    return groups.map((group, groupIndex) => {\n        let colspan = 1;\n        let rowspan = 1;\n        let classname = 'lesson';\n\n        if (currentWeekType === isOdd && isCurrentDay) {\n            classname += ' currentDay';\n        }\n        if (group.card !== null && group.card.skip_render === 1) {\n            return;\n        }\n        if (group.card !== null && group.card.weekly_render === 1) {\n            rowspan = 2;\n            classname += ' weekly';\n        }\n        for (let i = groupIndex + 1; i < groups.length; i++) {\n            if (\n                group &&\n                groups[i] &&\n                group.card !== null &&\n                groups[i].card !== null\n\n            ) {\n\n                if (\n                    group.card.teacher &&\n                    group.card.teacher.surname ===\n                    groups[i].card.teacher.surname &&\n                    group.card.teacher.name ===\n                    groups[i].card.teacher.name &&\n                    group.card.subjectForSite ===\n                    groups[i].card.subjectForSite &&\n                    group.card.room.id === groups[i].card.room.id\n                    &&\n                    group.card.weekly_render ===\n                    groups[i].card.weekly_render\n\n\n                ) {\n\n                    groups[i].card.skip_render = 1;\n                    colspan++;\n                    classname += ' grouped';\n                } else break;\n\n            } else break;\n\n        }\n\n        return (\n\n            <TableCell\n\n                key={shortid.generate()}\n                colSpan={colspan}\n                rowSpan={rowspan}\n                className={classname}\n            >\n                {prepareLessonTemporaryCardCell(group.card, place)}\n            </TableCell>\n        );\n    });\n};\n\nexport const renderScheduleHeader = groups => (\n    <TableHead>\n        <TableRow>\n            <TableCell className='groupLabelCell' colSpan={3}>\n                {i18next.t('group_y_label')}\n            </TableCell>\n            {groups.map(group => (\n                <TableCell key={shortid.generate()}>{group}</TableCell>\n            ))}\n        </TableRow>\n    </TableHead>\n);\n\nexport const renderFirstDayFirstClassFirstCardLine = (\n    day_name,\n    classItem,\n    groups,\n    classesCount,\n    place\n) => {\n    let dayClassName = 'dayNameCell ';\n    let classClassName = 'classNameCell ';\n\n    let oddWeekClass = '';\n    let evenWeekClass = '';\n    if (currentDay === day_name) {\n        dayClassName += ' currentDay';\n\n        if (currentWeekType === 1) {\n            oddWeekClass = ' currentDay';\n        } else {\n            evenWeekClass = ' currentDay';\n        }\n    }\n\n    if (groups.even.length <= 2 || groups.odd.length <= 2) {\n        dayClassName += ' minHeightDouble';\n    }\n\n    return (\n        <React.Fragment key={shortid.generate()}>\n            <TableRow>\n                <TableCell rowSpan={classesCount * 2} className={dayClassName}>\n                    <span className='dayName'>\n                        <b>{i18next.t(`common:day_of_week_${day_name}`)}</b>\n                    </span>\n                </TableCell>\n                <TableCell className={classClassName} rowSpan={2}>\n                    {renderClassCell(classItem)}\n\n                </TableCell>\n                <TableCell\n                    className={classClassName + oddWeekClass + ' subClassName'}\n                >\n                    1\n                </TableCell>\n                {renderGroupCells(groups.odd, place)}\n            </TableRow>\n            <TableRow>\n                <TableCell\n                    className={classClassName + evenWeekClass + ' subClassName'}\n                >\n                    2\n                </TableCell>\n                {renderGroupCells(groups.even, place)}\n            </TableRow>\n        </React.Fragment>\n    );\n};\n\nexport const renderFirstDayOtherClassFirstCardLine = (\n    day_name,\n    classItem,\n    groups,\n    place\n) => {\n\n    let classClassName = 'classNameCell ';\n    let oddWeekClass = '';\n    let evenWeekClass = '';\n\n    if (currentDay === day_name) {\n        if (currentWeekType === 1) {\n            oddWeekClass = ' currentDay';\n        } else {\n            evenWeekClass = ' currentDay';\n        }\n    }\n\n    return (\n        <React.Fragment key={shortid.generate()}>\n            <TableRow>\n                <TableCell className={classClassName} rowSpan={2}>\n                    {renderClassCell(classItem)}\n                </TableCell>\n                <TableCell\n                    className={classClassName + oddWeekClass + ' subClassName'}\n                >\n                    1\n                </TableCell>\n                {renderGroupCells(groups.odd, place, 1)}\n            </TableRow>\n            <TableRow>\n                <TableCell\n                    className={classClassName + evenWeekClass + ' subClassName'}\n                >\n                    2\n                </TableCell>\n                {renderGroupCells(groups.even, place, 0)}\n            </TableRow>\n        </React.Fragment>\n    );\n};\n\nconst prepareForRender = classItem => {\n    if (classItem.cards) {\n        classItem.cards.odd.forEach((card, cardIndex, map) => {\n            if (\n                classItem.cards.even[cardIndex] &&\n                card.group.id === classItem.cards.even[cardIndex].group.id\n            ) {\n                if (\n                    card.card !== null &&\n                    classItem.cards.even[cardIndex].card !== null\n                ) {\n                    if (\n                        card.card.teacher.name ===\n                        classItem.cards.even[cardIndex].card\n                            .teacher.name &&\n                        card.card.teacher.surname ===\n                        classItem.cards.even[cardIndex].card\n                            .teacher.surname &&\n                        card.card.subjectForSite ===\n                        classItem.cards.even[cardIndex].card\n                            .subjectForSite &&\n                        card.card.room.id ===\n                        classItem.cards.even[cardIndex].card.room.id\n                    ) {\n                        classItem.cards.odd[cardIndex].card.weekly_render = 1;\n                        classItem.cards.even[cardIndex].card.skip_render = 1;\n                    }\n                }\n            }\n        });\n    }\n    return classItem;\n};\n\nexport const renderDay = (dayName, dayItem, semesterClassesCount, place) => {\n\n\n    return dayItem.map((classItem, classIndex) => {\n        const t = prepareForRender(classItem);\n        if (classIndex === 0) {\n            return renderFirstDayFirstClassFirstCardLine(\n                dayName,\n                classItem.class,\n                classItem.cards,\n                semesterClassesCount,\n                place\n            );\n        } else {\n            return renderFirstDayOtherClassFirstCardLine(\n                dayName,\n                classItem.class,\n                classItem.cards,\n                place\n            );\n        }\n    });\n};\n\nexport const renderScheduleFullHeader = groupList => (\n    <TableHead>\n        <TableRow>\n            <TableCell colSpan={3}>\n                {i18next.t('formElements:group_label')}\n            </TableCell>\n            {groupList.map(group => (\n                <TableCell key={shortid.generate()} className='groupLabelCell'>\n                    {group.title}\n                </TableCell>\n            ))}\n        </TableRow>\n    </TableHead>\n);\n\nconst renderScheduleDays = (fullResultSchedule, place) => {\n    return fullResultSchedule.resultArray.map((dayItem, dayName) => {\n        return renderDay(\n            dayItem.day,\n            dayItem.classes,\n            fullResultSchedule.semester_classes.length,\n            place\n        );\n    });\n};\n\nexport const renderFullSchedule = (fullResultSchedule, place) => {\n    currentWeekType = isOddFunction(\n        printWeekNumber(fullResultSchedule.semester.startDay)\n    );\n    let scheduleTitle = '';\n    if (fullResultSchedule.semester) {\n        scheduleTitle =\n            fullResultSchedule.semester.description +\n            ' (' +\n            fullResultSchedule.semester.startDay +\n            '-' +\n            fullResultSchedule.semester.endDay +\n            ')';\n    }\n\n    return (\n        <>\n            <h1>{scheduleTitle}</h1>\n            <TableContainer>\n                <Table aria-label='sticky table'>\n                    {renderScheduleFullHeader(fullResultSchedule.groupList)}\n                    <TableBody>\n                        {renderScheduleDays(fullResultSchedule, place)}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n};\n\nconst renderClassRow = (classItem, days, scheduleRow, place) => (\n\n    <TableRow key={shortid.generate()}>\n        <TableCell className='lesson groupLabelCell'>\n\n            {renderClassCell(classItem)}\n        </TableCell>\n        {days.map(dayName => {\n\n            if (scheduleRow) {\n                return renderTeacherClassCell(\n                    scheduleRow.find(clas => clas.day === dayName), place\n                );\n            }\n        })}\n    </TableRow>\n);\nconst renderTeacherClassCell = (cards, place) => {\n    let teacherLessonAddCellClass = '';\n\n    if (cards !== undefined) {\n        if (cards.cards.length > 1) {\n            cards.cards.map((card, cardIndex) => {\n                if (\n                    cards.cards[cardIndex + 1] &&\n                    card.room !== cards.cards[cardIndex + 1].room\n                ) {\n                    teacherLessonAddCellClass += 'intersection-on-schedule';\n                }\n            });\n        }\n    }\n    return (\n        <TableCell\n            key={shortid.generate()}\n            className={`lesson ${teacherLessonAddCellClass}`}\n        >\n\n            {prepareTeacherTemporaryCardCell(cards && cards.cards, place)}\n        </TableCell>\n    );\n};\nexport const renderWeekTable = (schedule, isOdd, place) => {\n    if (schedule) {\n        return (\n            <TableContainer>\n                <Table aria-label='sticky table'>\n                    {renderScheduleGroupHeader(schedule.days)}\n                    <TableBody>\n                        {schedule.classes.map(classItem => {\n                            return renderClassRow(\n                                classItem,\n                                schedule.days,\n                                schedule.cards[classItem.id],\n                                place\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n};\n\nexport const renderTeacherRangeSchedule = (\n    schedule,\n    viewTeacherScheduleResults\n) => {\n    if (schedule === undefined) return;\n    if (schedule) {\n        if (schedule.length === 0) {\n            return i18next.t('empty_schedule');\n        }\n        return schedule.map((dayItem, dayIndex) => {\n            const parsed = Array.from(dayItem.date);\n\n            const startDay = new Date(\n                parsed[3] +\n                parsed[4] +\n                parsed[5] +\n                parsed[0] +\n                parsed[1] +\n                parsed[2] +\n                parsed[6] +\n                parsed[7] +\n                parsed[8] +\n                parsed[9]\n            );\n            return (\n                <Card\n                    class={\n                        viewTeacherScheduleResults +\n                        ' ' +\n                        'form-card teacher-schedule-day-card'\n                    }\n                    key={shortid.generate()}\n                >\n                    <h3>\n                        {dayItem.date +\n                        ' ( ' +\n                        i18next.t(`day_of_week_${startDay.getDay() + 1}`) +\n                        ' )'}\n                    </h3>\n                    {renderTeacherRangeDay(dayItem.schedule)}\n                </Card>\n            );\n        });\n    }\n};\n\nconst renderLessonsFirstLine = lessonItem => {\n    return (\n        <>\n            <TableCell>{lessonItem.lesson.subject_for_site}</TableCell>\n            <TableCell>{lessonItem.lesson.group_name}</TableCell>\n            <TableCell>{lessonItem.lesson.room.name}</TableCell>\n        </>\n    );\n};\n\nconst renderLessonsRestLines = lessons => {\n    if (lessons.length === 1) {\n        return;\n    }\n    let lessonClassName = '';\n    lessonClassName = 'groupped';\n    lessons.forEach((lessonItem, lessonIndex) => {\n        if (\n            lessons[lessonIndex + 1] &&\n            (lessonItem.lesson.subject_for_site !==\n                lessons[lessonIndex + 1].lesson.subject_for_site ||\n                lessonItem.lesson.room.id !==\n                lessons[lessonIndex + 1].lesson.room.id)\n        ) {\n            lessonClassName = 'overlap';\n        }\n    });\n    return lessons.map((lessonItem, lessonIndex) => {\n        if (lessonIndex === 0) {\n            return;\n        }\n        return (\n            <TableRow className={lessonClassName} key={shortid.generate()}>\n                <TableCell>{lessonItem.lesson.subject_for_site}</TableCell>\n                <TableCell>{lessonItem.lesson.group_name}</TableCell>\n                <TableCell>{lessonItem.lesson.room.name}</TableCell>\n            </TableRow>\n        );\n    });\n};\n\nconst renderFirstLineTable = classItem => {\n    return (\n        <TableRow key={shortid.generate()}>\n            <TableCell rowSpan={classItem.lessons.length}>\n                {classItem.class.class_name +\n                ' ( ' +\n                classItem.class.startTime +\n                ' - ' +\n                classItem.class.endTime +\n                ')'}\n            </TableCell>\n            {renderLessonsFirstLine(classItem.lessons[0])}\n        </TableRow>\n    );\n};\n\nexport const renderTeacherRangeDay = schedule => {\n    if (schedule) {\n        return (\n            <TableContainer key={shortid.generate()}>\n                <Table aria-label='sticky table'>\n                    <TableBody>\n                        {schedule.map(classItem => {\n                            return (\n                                <React.Fragment key={shortid.generate()}>\n                                    {renderFirstLineTable(classItem)}\n                                    {renderLessonsRestLines(classItem.lessons)}\n                                </React.Fragment>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n};\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\n\nimport Button from '@material-ui/core/Button';\nimport { MdPlayArrow } from 'react-icons/md';\n\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport {\n    showAllPublicSemestersService,\n    showAllPublicGroupsService,\n    showAllPublicTeachersService, getFullSchedule\n} from '../../services/scheduleService';\n\nimport './GroupSchedulePageTop.scss';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Card from '../../share/Card/Card';\n\nimport { SCHEDULE_SEARCH_FORM } from '../../constants/reduxForms';\nimport { required } from '../../validation/validateFields';\nimport { MenuItem, Select } from '@material-ui/core';\nimport { places } from '../../constants/places';\nimport { getTeacherFullName } from '../../helper/renderTeacher';\nconst shortid = require('shortid');\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    }\n}));\n\nconst GroupSchedulePageTop = props => {\n    const [groupDisabled,setGroupDisabled]=useState(true);\n    const classes = useStyles();\n    const { t } = useTranslation('common');\n    const {\n        groups,\n        teachers,\n        semesters,\n        handleSubmit,\n        pristine,\n        submitting\n    } = props;\n    const isLoading = props.loading;\n    const [semesterId,setSemesterId]=useState(props.initialValues.semester);\n    let loadingContainer = '';\n    if (isLoading) {\n        loadingContainer = (\n            <section className=\"centered-container\">\n                <CircularProgress />\n            </section>\n        );\n    }\n    useEffect(() => showAllPublicGroupsService(semesterId), [semesterId]);\n    useEffect(() => showAllPublicTeachersService(), []);\n    useEffect(() => showAllPublicSemestersService(), []);\n    useEffect(() => {\n        if(groups.length!==0){\n            setGroupDisabled(false)\n        }\n        else {\n            setGroupDisabled(true)\n        }\n    }, [groups]);\n    const renderSemesterList = () => {\n        if (semesters) {\n            if (semesters.length > 1) {\n\n                return (\n                    <Field\n                        id=\"semester\"\n                        name=\"semester\"\n                        component={renderSelectField}\n                        label={t('formElements:semester_label')}\n                        type=\"text\"\n                        validate={[required]}\n                        onChange={(e)=>setSemesterId(e.target.value)}\n                    >\n                        <option />\n                        {semesters.map((semester, index) => (\n\n                            <option\n                                key={shortid.generate()}\n                                value={semester.id}\n\n                            >\n                                {semester.description}\n                            </option>\n\n                        ))}\n                    </Field>\n                );\n            }\n            else if (semesters.length === 1) {\n                handleSubmit({ semester: semesters[0].id });\n                return <p>{semesters[0].description}</p>;\n            }\n        }\n    };\n    const renderTeacherList=()=>{\n      return  (<Field\n            id=\"teacher\"\n            name=\"teacher\"\n            component={renderSelectField}\n            label={t('formElements:teacher_label')}\n            type=\"text\"\n            onChange={() => props.change('group', 0)}\n\n        >\n            <option />\n            {teachers.map((teacher, index) => (\n                <option\n                    key={shortid.generate()}\n                    value={teacher.id}\n                >\n                    {getTeacherFullName(teacher)}\n                </option>\n            ))}\n        </Field>)\n    };\n    const renderGroupList=()=>{\n       return (<Field\n            disabled={groupDisabled}\n            id=\"group\"\n            name=\"group\"\n            component={renderSelectField}\n            label={t('formElements:group_label')}\n            type=\"text\"\n            onChange={() => {\n                props.change('teacher', 0);\n            }}\n        >\n            <option />\n            {groups.map((group, index) => (\n                <option\n                    key={shortid.generate()}\n                    value={group.id}\n                >\n                    {group.title}\n                </option>\n            ))}\n        </Field>)\n    }\n\n    useEffect(()=>{\n\n        props.initialize({\n            semester:props.initialValues.semester,\n            group: props.initialValues.group,\n            teacher:props.initialValues.teacher\n        })\n    },[])\n\n    return (\n        <section className={classes.root}>\n            <p>{t('greetings_schedule_message')}</p>\n            <p>{t('greetings_schedule_message_hint')}</p>\n            <section className=\"form-buttons-container top\">\n                <Card class=\"form-card width-auto\">\n                    <form onSubmit={handleSubmit}>\n                        {renderSemesterList()}\n                        {renderGroupList()}\n                        {renderTeacherList()}\n\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            disabled={pristine || submitting}\n\n                        >\n\n                            <MdPlayArrow\n                                title={t('teacher_schedule_label')}\n                                className=\"svg-btn\"\n                            />\n                        </Button>\n\n                    </form>\n\n                </Card>\n                <span id=\"select-place\">\n                    <label htmlFor={\"demo-controlled-open-select\"}>{t('place_for_class_label')}</label>\n                <Select className=\"place\"\n                        labelId=\"demo-controlled-open-select-label\"\n                        id=\"demo-controlled-open-select\"\n                        value={props.place}\n                        onChange={props.onChange}\n\n                >\n\n                    {\n                        Object.entries(places).map(function(data, index) {\n                            return <MenuItem value={data[1]} key={data[0]}>{t(`${data[1]}_label`)}</MenuItem>\n                        }, this)\n                    }\n\n                </Select>\n                </span>\n\n            </section>\n            {loadingContainer}\n        </section>\n    );\n};\n\nconst mapStateToProps = state => ({\n    defaultSemester: state.schedule.defaultSemester,\n    groups: state.groups.groups,\n    teachers: state.teachers.teachers,\n    semesters: state.schedule.semesters,\n    loading: state.loadingIndicator.loading,\n    initialValues:{semester: state.schedule.scheduleSemesterId,group: state.schedule.scheduleGroupId,teacher: state.schedule.scheduleTeacherId},\n\n});\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SCHEDULE_SEARCH_FORM\n    })(GroupSchedulePageTop)\n);\n\n\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport {\n    PUBLIC_DOWNLOAD_GROUP_SCHEDULE_URL,\n    PUBLIC_DOWNLOAD_TEACHER_SCHEDULE_URL\n} from '../../constants/axios';\n\nimport './GroupSchedulePage.scss';\nimport { MdPictureAsPdf } from 'react-icons/md';\n\nimport {\n    makeGroupSchedule,\n    makeFullSchedule,\n    makeTeacherSchedule\n} from '../../helper/prepareSchedule';\nimport {\n    renderGroupTable,\n    renderFullSchedule,\n    renderWeekTable\n} from '../../helper/renderScheduleTable';\nimport {\n    getDefaultSemesterService,\n    getFullSchedule, getGroupSchedule, getTeacherSchedule,\n    setScheduleGroupIdService,\n    setScheduleSemesterIdService,\n    setScheduleTeacherIdService, showAllPublicSemestersService,\n    submitSearchSchedule, submitSearchSchedule1\n} from '../../services/scheduleService';\n\nimport GroupSchedulePageTop from '../GroupSchedulePageTop/GroupSchedulePageTop';\nimport { setLoadingService } from '../../services/loadingService';\nimport {useHistory,useLocation} from 'react-router-dom';\nimport { links } from '../../constants/links';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { FormLabel, InputLabel, MenuItem, Select } from '@material-ui/core';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport { places } from '../../constants/places';\nimport i18n from 'i18next';\nimport { Contactless } from '@material-ui/icons';\nimport { getTeacherWithPosition } from '../../helper/renderTeacher';\nconst GroupSchedulePage = props => {\n\n    const [place,setPlace]=useState(places.TOGETHER);\n    let {scheduleType, groupSchedule, fullSchedule, teacherSchedule,groupId,teacherId ,semesterId,loading,defaultSemester,semesters} = props;\n    let history = useHistory();\n\n    const location = useLocation();\n    const emptySchedule = () => (\n        <p className=\"empty_schedule\">{t('common:empty_schedule')}</p>\n    );\n    const { t } = useTranslation('common');\n    const renderDownloadLink = (entity, semesterId, entityId) => {\n        let link = '';\n        const {language}=i18n;\n        const languageToRequest=`&language=${language}`;\n        if (semesterId && entityId) {\n            switch (entity) {\n                case 'group':\n                    link =\n                        PUBLIC_DOWNLOAD_GROUP_SCHEDULE_URL +\n                        '?groupId=' +\n                        entityId +\n                        '&semesterId=' +\n                        semesterId+\n                        languageToRequest;\n                    break;\n                case 'teacher':\n                    link =\n                        PUBLIC_DOWNLOAD_TEACHER_SCHEDULE_URL +\n                        '?teacherId=' +\n                        entityId +\n                        '&semesterId=' +\n                        semesterId+\n                        languageToRequest;\n                    break;\n                default:\n                    break;\n            }\n            return (\n                <a\n                    href={link}\n                    target=\"_blank\"\n                    rel=\"noreferrer noopener\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className=\"pdf_link\"\n                    download\n                >\n                    <MdPictureAsPdf className=\"svg-btn\" />\n                    {t('common:download_pdf')}\n                </a>\n            );\n        }\n    };\n\n    const renderGroupScheduleTitle = (semester, group) => {\n        let title = '';\n        if (semester) {\n            title +=\n                semester.description +\n                ' (' +\n                semester.startDay +\n                '-' +\n                semester.endDay +\n                ') : ';\n        }\n        if (group) {\n            title += group.title ? group.title : '';\n        }\n        return title;\n    };\n    const renderTeacherScheduleTitle = (semester, teacher) => {\n        let title = '';\n        if (semester) {\n            title +=\n                semester.description +\n                ' (' +\n                semester.startDay +\n                '-' +\n                semester.endDay +\n                ') : ';\n        }\n        if (teacher) {\n            title +=\n                getTeacherWithPosition(teacher);\n        }\n        return title;\n    };\n\n    const renderSchedule = () => {\n        switch (props.scheduleType) {\n            case 'group':\n                if (\n                    (!groupSchedule ||\n                        (groupSchedule.schedule &&\n                            groupSchedule.schedule.length === 0)) &&\n                    !props.loading\n                ) {\n                    return emptySchedule();\n                }\n\n                const resultArrays = makeGroupSchedule(groupSchedule);\n                if (resultArrays.done) {\n                    setLoadingService(false);\n                    return (\n                        <>\n                            <h1>\n                                {renderGroupScheduleTitle(\n                                    resultArrays.semester,\n                                    resultArrays.group\n                                )}\n                                {renderDownloadLink(\n                                    'group',\n                                    props.semesterId,\n                                    props.groupId\n                                )}\n                            </h1>\n                            <h2>{t('common:odd_week')}</h2>\n                            {renderGroupTable(\n                                resultArrays.oddArray,\n                                1,\n                                resultArrays.semester,\n                                place\n                            )}\n                            <h2>{t('common:even_week')}</h2>\n                            {renderGroupTable(\n                                resultArrays.evenArray,\n                                0,\n                                resultArrays.semester,\n                                place\n                            )}\n                        </>\n                    );\n                }\n                else setLoadingService(false)\n                break;\n            case 'teacher':\n                if (\n                    (!teacherSchedule ||\n                        !teacherSchedule.days ||\n                        teacherSchedule.days.length === 0) &&\n                    !props.loading\n                ) {\n                    return emptySchedule();\n                }\n                    if(teacherSchedule) {\n                        const teacher = makeTeacherSchedule(teacherSchedule);\n                        if (teacher.done) {\n                            setLoadingService(false);\n                            return (\n                                <>\n                                    <h1>\n                                        {renderTeacherScheduleTitle(\n                                            teacher.semester,\n                                            teacher.teacher\n                                        )}\n                                        {renderDownloadLink(\n                                            'teacher',\n                                            props.semesterId,\n                                            props.teacherId\n                                        )}\n                                    </h1>\n                                    <h2>{t('common:odd_week')}</h2>\n                                    {renderWeekTable(teacher.odd, 1,place)}\n                                    <h2>{t('common:even_week')}</h2>\n                                    {renderWeekTable(teacher.even, 0,place)}\n                                </>\n                            );\n                        }\n                    }\n                    else setLoadingService(false)\n                break;\n            case 'full':\n\n                if (\n                    (!fullSchedule.schedule ||\n                        fullSchedule.schedule.length === 0) &&\n                    !props.loading\n                ) {\n                    return emptySchedule();\n                }\n                const result = makeFullSchedule(fullSchedule);\n\n                if (result.groupsCount || result.done) {\n                    setLoadingService(false);\n                    return renderFullSchedule(result,place);\n                }\n                else setLoadingService(false)\n                break;\n            case 'archived':\n                if (\n                    (!fullSchedule.schedule ||\n                        fullSchedule.schedule.length === 0) &&\n                    !props.loading\n                ) {\n                    return '';\n                }\n                const archive = makeFullSchedule(fullSchedule);\n                if (archive.groupsCount || archive.done) {\n                    setLoadingService(false);\n                    return renderFullSchedule(archive,place);\n                }\n                else setLoadingService(false)\n                break;\n\n\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = values => {\n        const {semester,group,teacher}=values\n        const groupPath=group?\"&group=\"+group:\"\";\n        const teacherPath=teacher?\"&teacher=\"+teacher:\"\";\n        setLoadingService('true');\n        submitSearchSchedule(values, history);\n        history.push(links.ScheduleFor+\"?semester=\"+semester+groupPath+teacherPath);\n\n    };\n    useEffect(()=>getFullSchedule(),[place])\n\n\n    useEffect(()=> {\n         if(scheduleType===\"group\")\n         getGroupSchedule(groupId, semesterId);\n     },[groupId])\n     useEffect(()=> {\n         if(scheduleType===\"teacher\")\n         getTeacherSchedule(teacherId, semesterId);\n     },[teacherId])\n\n    useEffect(()=> {\n        if((scheduleType===\"full\"&&fullSchedule.length===0)) {\n            getFullSchedule();\n        }\n    },)\n    useEffect(()=>{\n        getDefaultSemesterService()\n    },[])\n\n   const getSchedule=()=>{\n       if((props.scheduleType===\"\")&&(props.defaultSemester.id!==undefined)){\n           const semester=`${props.defaultSemester.id}`;\n           handleSubmit({ \"semester\":semester });\n\n           return\n       }\n       if(props.scheduleType!==\"\"|| location.pathname===links.HOME_PAGE){\n\n           return renderSchedule();\n\n       }\n\n\n       const params = new URLSearchParams(location.search);\n\n       const semester= params.get(\"semester\");\n       const teacher=params.get(\"teacher\");\n       const group=params.get(\"group\");\n\n       if(semester!==null) {\n           handleSubmit({ semester, 'group': group != null ? group : 0, 'teacher': teacher != null ? teacher : 0 });\n        return\n       }\n       else return null;\n    }\n\n    const getTop=()=>{\n\n       if(props.scheduleType !== 'archived') {\n\n         return (\n             <GroupSchedulePageTop\n                  scheduleType={props.scheduleType}\n                 onSubmit={handleSubmit} place={place} onChange={changePlace}\n             />\n         );\n\n\n       }\n       return null;\n    }\n    const changePlace=(e)=>{\n        if(e.target) {\n            setPlace(e.target.value);}\n    }\n\n\n    return (\n        <>\n            {getTop()}\n            {getSchedule()}\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    scheduleType: state.schedule.scheduleType,\n    groupSchedule: state.schedule.groupSchedule,\n    fullSchedule: state.schedule.fullSchedule,\n    teacherSchedule: state.schedule.teacherSchedule,\n    groupId: state.schedule.scheduleGroupId,\n    teacherId: state.schedule.scheduleTeacherId,\n    semesterId: state.schedule.scheduleSemesterId,\n    loading: state.loadingIndicator.loading,\n    defaultSemester: state.schedule.defaultSemester,\n    semesters: state.schedule.semesters,\n\n\n});\nexport default connect(mapStateToProps)(GroupSchedulePage);\n","import React, { Fragment, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\n\nimport { userRoles } from '../../constants/userRoles';\n\nimport GroupSchedulePage from '../../components/GroupSchedulePage/GroupSchedulePage';\n\n\nimport {\n    getDefaultSemesterService,\n\n    setScheduleSemesterIdService,\n    setScheduleTypeService,\n} from '../../services/scheduleService';\nimport { getPublicClassScheduleListService } from '../../services/classService';\n\nconst HomePage = props => {\n    const { t } = useTranslation('common');\n\n    useEffect(() => getPublicClassScheduleListService(), []);\n    setScheduleSemesterIdService(null)\n    setScheduleTypeService(\"\")\n\n    // useEffect(() => showAllPublicSemestersService(), []);\n\n    useEffect(() => {\n        if (props.userRole === null) {\n            //disableDefaultSemesterService();\n            getDefaultSemesterService();\n            setScheduleTypeService(\"\");\n        }\n    }, []);\n    useEffect(() => {\n        if (props.userRole === userRoles.TEACHER) {\n            //disableDefaultSemesterService();\n            getDefaultSemesterService();\n            setScheduleTypeService(\"\");\n        }\n    }, []);\n    useEffect(() => {\n        if (props.userRole === userRoles.MANAGER) {\n           // disableDefaultSemesterService();\n            getDefaultSemesterService();\n            setScheduleTypeService(\"\");\n        }\n    }, []);\n\n    return (\n\n        <Fragment>\n\n            <h1>{t('home_title')}</h1>\n            <GroupSchedulePage scheduleType=\"default\"  />\n        </Fragment>\n    );\n};\n\nconst mapStateToProps = state => ({\n    userRole: state.auth.role ,\n});\n\nexport default connect(mapStateToProps)(HomePage);\n","import React from 'react';\nimport MomentUtils from '@date-io/moment';\nimport * as moment from 'moment';\nimport { MuiPickersUtilsProvider, DatePicker } from '@material-ui/pickers';\n\nconst renderMounthPicker = ({\n    label,\n    input: { value, ...inputProps },\n    meta: { touched, invalid, error },\n    ...custom\n}) => {\n    return (\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n            <DatePicker\n                minDate={new Date()}\n                clearable\n                value={value ? moment(value, 'DD/MM/YYYY').toDate() : null}\n                format=\"DD/MM/YYYY\"\n                error={touched && invalid}\n                helperText={touched && error ? touched && error : label}\n                {...inputProps}\n                {...custom}\n            />\n        </MuiPickersUtilsProvider>\n    );\n};\nexport default renderMounthPicker;\n","import React, { useEffect } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport './TeacherScheduleForm.scss';\n\nimport renderMonthPicker from '../../share/renderedFields/timeSemester';\nimport { MdPlayArrow, MdViewModule, MdViewHeadline } from 'react-icons/md';\n\nimport Button from '@material-ui/core/Button';\n\nimport {\n    required,\n    lessThanDate,\n    greaterThanDate\n} from '../../validation/validateFields';\n\nimport { TEACHER_SCHEDULE_FORM } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\nimport * as moment from 'moment';\nimport { setTeacherServiceViewType } from '../../services/scheduleService';\n\nlet TeacherScheduleForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n    const isSchedule = false;\n\n    useEffect(() => {\n        props.initialize({\n            startDay: moment(new Date(), 'DD/MM/YYYY').format('DD/MM/YYYY'),\n            endDay: moment(new Date(), 'DD/MM/YYYY')\n                .add(7, 'd')\n                .format('DD/MM/YYYY')\n        });\n    }, [isSchedule]);\n    return (\n        <Card class={'form-card teacher-schedule-form'}>\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-line-block\">\n                    <h2 className=\"form-title\">\n                        {t('common:select_dates_for_teacher_schedule')}\n                    </h2>\n                    <Field\n                        className=\"time-input\"\n                        name=\"startDay\"\n                        component={renderMonthPicker}\n                        label={t('class_from_label') + ':'}\n                        validate={[required, lessThanDate]}\n                    />\n                    <Field\n                        className=\"time-input\"\n                        name=\"endDay\"\n                        component={renderMonthPicker}\n                        label={t('class_to_label') + ':'}\n                        validate={[required, greaterThanDate]}\n                    />\n                    <div className=\"form-buttons-container\">\n                        <Button\n                            className=\"buttons-style\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >\n                            <MdPlayArrow\n                                title={t('full_schedule_label')}\n                                className=\"svg-btn\"\n                            />\n                        </Button>\n                        <Button\n                            className=\"view-type-icon first-view-type-button\"\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            title={t('common:block_view')}\n                            onClick={() =>\n                                setTeacherServiceViewType('blocks-view')\n                            }\n                        >\n                            <MdViewModule className=\"svg-btn\" />\n                        </Button>\n                        <Button\n                            className=\"view-type-icon\"\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            title={t('common:list_view')}\n                            onClick={() =>\n                                setTeacherServiceViewType('list-view')\n                            }\n                        >\n                            <MdViewHeadline className=\"svg-btn\" />\n                        </Button>\n                    </div>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: TEACHER_SCHEDULE_FORM\n    })(TeacherScheduleForm)\n);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport './TeacherSchedule.scss';\n\nimport TeacherScheduleForm from '../TeacherScheduleForm/TeacherScheduleForm';\nimport {\n    clearTeacherScheduleFormService,\n    getTeacherScheduleService\n} from '../../services/scheduleService';\n\nimport { renderTeacherRangeSchedule } from '../../helper/renderScheduleTable';\nconst TeacherSchedule = props => {\n    const handleFormReset = () => {\n        clearTeacherScheduleFormService();\n    };\n    const submit = values => {\n        getTeacherScheduleService(values);\n    };\n\n    useEffect(() => {\n        renderTeacherRangeSchedule(\n            props.schedule,\n            props.viewTeacherScheduleResults\n        );\n    }, [props.viewTeacherScheduleResults]);\n\n    return (\n        <>\n            <TeacherScheduleForm onSubmit={submit} onReset={handleFormReset} />\n            <section>\n                {renderTeacherRangeSchedule(\n                    props.schedule,\n                    props.viewTeacherScheduleResults\n                )}\n            </section>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    loading: state.loadingIndicator.loading,\n    schedule: state.schedule.teacherRangeSchedule,\n    viewTeacherScheduleResults: state.schedule.viewTeacherScheduleResults\n});\nexport default connect(mapStateToProps)(TeacherSchedule);\n","import { reset } from 'redux-form';\n\nimport { store } from '../index';\nimport axios from '../helper/axios';\nimport { DISABLED_GROUPS_URL, GROUP_URL } from '../constants/axios';\nimport { GROUP_FORM } from '../constants/reduxForms';\nimport {\n    showAllGroups,\n    deleteGroup,\n    addGroup,\n    selectGroup,\n    updateGroup,\n    clearGroup,\n    setDisabledGroups\n} from '../redux/actions/index';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport i18n from '../helper/i18n';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const selectGroupService = groupId => {\n    store.dispatch(selectGroup(groupId));\n}\n\nexport const handleGroupService = values =>\n    values.id ? updateGroupService(values) : createGroupService(values);\n\nexport const clearGroupService = () => {\n    store.dispatch(clearGroup());\n    resetFormHandler(GROUP_FORM);\n};\n\nexport const showAllGroupsService = () => {\n    axios\n        .get(GROUP_URL)\n        .then(response => {\n            store.dispatch(showAllGroups(response.data.sort((a, b) => a - b)));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const removeGroupCardService = groupId => {\n    axios\n        .delete(GROUP_URL + `/${groupId}`)\n        .then(response => {\n            store.dispatch(deleteGroup(groupId));\n            getDisabledGroupsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:group_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createGroupService = data => {\n    axios\n        .post(GROUP_URL, data)\n        .then(response => {\n            store.dispatch(addGroup(response.data));\n            resetFormHandler(GROUP_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:group_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const updateGroupService = data => {\n    return axios\n        .put(GROUP_URL, data)\n        .then(response => {\n            store.dispatch(updateGroup(response.data));\n            selectGroupService(null);\n            getDisabledGroupsService();\n            showAllGroupsService();\n            resetFormHandler(GROUP_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:group_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getDisabledGroupsService = () => {\n    axios\n        .get(DISABLED_GROUPS_URL)\n        .then(res => {\n            store.dispatch(setDisabledGroups(res.data));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const setDisabledGroupService = group => {\n    group.disable = true;\n    updateGroupService(group);\n};\n\nexport const setEnabledGroupService = group => {\n    group.disable = false;\n    updateGroupService(group);\n};\n","export const isObjectEmpty=(object)=> {\n    return (\n        Object.prototype.toString.call(object) === '[object Object]' &&\n        JSON.stringify(object) === '{}'\n    );\n}","import { store } from '../index';\nimport {\n    DISABLED_TEACHERS_URL,\n    TEACHER_URL,\n    TEACHERS_WITHOUT_ACCOUNT_URL\n} from '../constants/axios';\nimport { TEACHER_FORM } from '../constants/reduxForms';\n\nimport axios from '../helper/axios';\n\nimport i18n from '../helper/i18n';\n\nimport {\n    addTeacher,\n    deleteTeacher,\n    selectTeacherCard,\n    setDisabledTeachers,\n    showAllTeachers,\n    updateTeacherCard\n} from '../redux/actions';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { setLoadingService } from './loadingService';\nimport { isObjectEmpty } from '../helper/ObjectRevision';\n\nexport const showAllTeachersService = () => {\n    axios\n        .get(TEACHER_URL)\n        .then(response => {\n            store.dispatch(showAllTeachers(response.data));\n            setLoadingService(false);\n        })\n        .catch(error => errorHandler(error));\n};\n\n\n\nexport const getTeachersWithoutAccount = () => {\n    axios\n        .get(TEACHERS_WITHOUT_ACCOUNT_URL)\n        .then(response => {\n            store.dispatch(showAllTeachers(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createTeacherService = values => {\n    let result= {... values };\n   if(isObjectEmpty(values.department)||values.department.id===null){\n       const {department,...res}=values;\n       result= { ...res };\n   }\n    axios\n        .post(TEACHER_URL, result)\n        .then(response => {\n            store.dispatch(addTeacher(response.data));\n            resetFormHandler(TEACHER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_a_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nconst cardTeacher = teacher => {\n    return {\n        teacher: {\n            id: teacher.id,\n            name: teacher.name,\n            surname: teacher.surname,\n            patronymic: teacher.patronymic,\n            position: teacher.position,\n            email:teacher.email,\n            department: teacher.department\n        }\n    };\n};\n\nexport const updateTeacherService = data => {\n    let result={...data.teacher};\n    if(isObjectEmpty(result.department)||result.department.id===null){\n        const {department,...res}=result;\n        result={...res};\n    }\n    return axios\n        .put(TEACHER_URL, result)\n        .then(response => {\n            store.dispatch(updateTeacherCard(response.data));\n            if (response.data.disable) {\n                store.dispatch(deleteTeacher(response.data.id));\n            }\n            showAllTeachersService();\n            getDisabledTeachersService();\n\n            selectTeacherCardService(null);\n            resetFormHandler(TEACHER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_a_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const handleTeacherService = values => {\n    const teacher = cardTeacher(values);\n\n    if (values.id) {\n        updateTeacherService(teacher);\n    } else {\n        createTeacherService(values);\n    }\n};\n\nexport const removeTeacherCardService = id => {\n    axios\n        .delete(TEACHER_URL + `/${id}`)\n        .then(response => {\n            store.dispatch(deleteTeacher(id));\n            getDisabledTeachersService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_a_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const selectTeacherCardService = teacherCardId => {\n    store.dispatch(selectTeacherCard(teacherCardId));\n};\n\nexport const getDisabledTeachersService = () => {\n    axios\n        .get(DISABLED_TEACHERS_URL)\n        .then(res => {\n            store.dispatch(setDisabledTeachers(res.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const setDisabledTeachersService = teacher => {\n    teacher.disable = true;\n    updateTeacherService({ teacher });\n};\n\nexport const setEnabledTeachersService = teacher => {\n    teacher.disable = false;\n    updateTeacherService({ teacher });\n};\n","import axios from '../helper/axios';\nimport { store } from '../index';\n\nimport {\n    LESSON_TYPES_URL,\n    LESSON_URL,\n    COPY_LESSON_URL\n} from '../constants/axios';\nimport { LESSON_FORM } from '../constants/reduxForms';\n\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { setLoadingService } from './loadingService';\n\nimport {\n    deleteLessonCard,\n    selectGroupId,\n    selectLessonCard,\n    setLessonsCards,\n    setLessonTypes,\n    setUniqueError,\n    storeLessonCard,\n    updateLessonCard\n} from '../redux/actions/index';\n\nimport { snackbarTypes } from '../constants/snackbarTypes';\n\nimport { checkUniqLesson } from '../validation/storeValidation';\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { getTeacherById } from './teacherService';\n\nexport const getLessonsByGroupService = groupId => {\n    axios\n        .get(LESSON_URL + `?groupId=${Number(groupId)}`)\n        .then(response => {\n            store.dispatch(setLessonsCards(response.data));\n            setLoadingService(false);\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const getLessonTypesService = () => {\n    axios\n        .get(LESSON_TYPES_URL)\n        .then(response => {\n            store.dispatch(setLessonTypes(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\nconst cardObjectHandler = (card, groupId, semester) => {\n    const groupData = (card.groups.map(group => group.id).includes(groupId) && card.groups.length !== 1) ? { groups: card.groups } : { groups: [{ id: groupId }] };\n    return {\n        ...groupData,\n        id: Number(card.lessonCardId),\n        hours: Number(card.hours),\n        subject: {\n            id: Number(card.subject)\n        },\n        lessonType: card.type,\n        subjectForSite: card.subjectForSite,\n        teacher: { id: Number(card.teacher) },\n        linkToMeeting: card.linkToMeeting,\n        grouped: card.grouped,\n        semester\n    };\n};\n\nconst updateLessonHandler = (data, groupId) => {\n    let res = { ...data };\n    const { groups, ...result } = res;\n    res = { ...result };\n    res.group = { id: groupId };\n    return axios\n        .put(LESSON_URL, res)\n        .then(response => {\n            store.dispatch(updateLessonCard(response.data));\n            selectLessonCardService(null);\n            resetFormHandler(LESSON_FORM);\n\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nconst createLessonHandler = (data, isCopy) => {\n    return axios\n        .post(LESSON_URL, data)\n        .then(response => {\n            if (!isCopy) {\n                store.dispatch(storeLessonCard(response.data));\n            }\n            resetFormHandler(LESSON_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const handleLessonCardService = (card, groupId, semester) => {\n\n    let cardObj = cardObjectHandler(card, groupId, semester);\n    if (!checkUniqLesson(cardObj)) {\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.ERROR,\n            i18n.t('common:lesson_service_is_not_unique')\n        );\n        setUniqueErrorService(true);\n        return;\n    }\n\n    axios\n        .get(`teachers/${cardObj.teacher.id}`)\n        .then(res => {\n            cardObj = { ...cardObj, teacher: res.data };\n            cardObj.id ? updateLessonHandler(cardObj, groupId) : createLessonHandler(cardObj, false);\n        })\n        .catch(error => errorHandler(error));\n};\nexport const removeLessonCardService = lessonCardId => {\n    axios\n        .delete(LESSON_URL + `/${lessonCardId}`)\n        .then(res => {\n            store.dispatch(deleteLessonCard(lessonCardId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const selectLessonCardService = lessonCardId => {\n    store.dispatch(selectLessonCard(lessonCardId));\n};\n\nexport const copyLessonCardService = lessonGroupObj => {\n    const groupList = [];\n    lessonGroupObj.group.map(groupItem => groupList.push(groupItem.id));\n    axios\n        .post(\n            COPY_LESSON_URL + `?lessonId=${lessonGroupObj.lesson.id}`,\n            groupList\n        )\n        .then(response => {\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:copied_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const selectGroupIdService = groupId => {\n    store.dispatch(selectGroupId(groupId));\n};\n\nexport const setUniqueErrorService = isUniqueError => {\n    store.dispatch(setUniqueError(isUniqueError));\n};\n","import * as actionTypes from './actionsType';\n\nexport const storeLessonCard = res => {\n    return {\n        type: actionTypes.ADD_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const setLessonsCards = res => {\n    return {\n        type: actionTypes.SET_LESSONS_CARDS,\n        result: res\n    };\n};\n\nexport const setLessonTypes = res => {\n    return {\n        type: actionTypes.SET_LESSON_TYPES,\n        result: res\n    };\n};\n\nexport const deleteLessonCard = res => {\n    return {\n        type: actionTypes.DELETE_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const selectLessonCard = res => {\n    return {\n        type: actionTypes.SELECT_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const updateLessonCard = res => {\n    return {\n        type: actionTypes.UPDATE_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const selectGroupId = res => {\n    return {\n        type: actionTypes.SELECT_GROUP_ID,\n        result: res\n    };\n};\n\nexport const setUniqueError = res => {\n    return {\n        type: actionTypes.SET_UNIQUE_ERROR,\n        result: res\n    };\n};\n","import { store } from '../index';\nimport { DISABLED_ROOMS_URL, ROOM_URL } from '../constants/axios';\nimport { ROOM_FORM } from '../constants/reduxForms';\nimport axios from '../helper/axios';\n\nimport {\n    showListOfRooms,\n    deleteRoom,\n    addRoom,\n    selectOneRoom,\n    updateOneRoom,\n    clearRoomOne,\n    setDisabledRooms\n} from '../redux/actions/rooms';\n\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nimport i18n from '../helper/i18n';\n\nexport const showListOfRoomsService = () => {\n    axios\n        .get(ROOM_URL)\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(showListOfRooms(bufferArray));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const deleteRoomCardService = id => {\n    axios\n        .delete(ROOM_URL + `/${id}`)\n        .then(res => {\n            store.dispatch(deleteRoom(id));\n            getDisabledRoomsService();\n            showListOfRoomsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:room_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getDisabledRoomsService = () => {\n    axios\n        .get(DISABLED_ROOMS_URL)\n        .then(res => {\n            store.dispatch(setDisabledRooms(res.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const setDisabledRoomsService = room => {\n    room.disable = true;\n    put(room);\n};\n\nexport const setEnabledRoomsService = room => {\n    room.disable = false;\n    put(room);\n};\n\nconst put = values => {\n    axios\n        .put(ROOM_URL, values)\n        .then(result => {\n            store.dispatch(updateOneRoom(result.data));\n            resetFormHandler(ROOM_FORM);\n            getDisabledRoomsService();\n            showListOfRoomsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:room_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nconst post = values => {\n    axios\n        .post(ROOM_URL, values)\n        .then(res => {\n            store.dispatch(addRoom(res.data));\n            resetFormHandler(ROOM_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:room_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createRoomService = values => {\n    if (values.id) {\n        const newValue = {\n            id: values.id,\n            name: values.name,\n            type: { id: +values.type, description: values.typeDescription }\n        };\n        put(newValue);\n    } else {\n        const newValue = {\n            name: values.name,\n            type: { id: +values.type, description: values.typeDescription }\n        };\n\n        post(newValue);\n    }\n};\n\nexport const selectOneRoomService = roomId => {\n    store.dispatch(selectOneRoom(roomId));\n};\n\nexport const clearRoomOneService = () => {\n    store.dispatch(clearRoomOne());\n    resetFormHandler(ROOM_FORM);\n};\n","import * as actionsType from './actionsType';\n\nexport const addRoom = room => {\n    return {\n        type: actionsType.ADD_ROOM,\n        result: room\n    };\n};\n\nexport const deleteRoom = id => {\n    return {\n        type: actionsType.DELETE_ROOM,\n        result: id\n    };\n};\n\nexport const showListOfRooms = rooms => {\n    return {\n        type: actionsType.SHOW_LIST_OF_ROOMS,\n        result: rooms\n    };\n};\n\nexport const  setDisabledRooms = rooms => {\n    return {\n        type: actionsType.SET_DISABLED_ROOMS,\n        result: rooms\n    };\n};\n\nexport const selectOneRoom = id => {\n    return {\n        type: actionsType.SELECT_ONE_ROOM,\n        result: id\n    };\n};\n\nexport const updateOneRoom = room => {\n    return {\n        type: actionsType.UPDATE_ONE_ROOM,\n        result: room\n    };\n};\n\nexport const clearRoomOne = () => ({\n    type: actionsType.CLEAR_ROOM_ONE\n});\n\n\n","import React from 'react';\n\nimport { colors } from '../../constants/schedule/colors';\nimport { cssClasses } from '../../constants/schedule/cssClasses';\nimport { checkAvailabilityScheduleService } from '../../services/scheduleService';\nimport { setLoadingService } from '../../services/loadingService';\nimport './Board.scss';\n\nconst Board = props => {\n    const itemGroupId = props.itemGroupId;\n    const { day, classDay, classes,group } = props;\n    const drop = e => {\n        e.preventDefault();\n        const card_id = e.dataTransfer.getData('card_id');\n\n        const card = document.getElementById(card_id);\n        if (card) card.style.display = 'block';\n\n        const arr = e.target.id.split('-');\n        const day = arr[3];\n        const classId = arr[5];\n        const week = arr[7];\n\n        const item = JSON.parse(card.childNodes[0].value);\n        let itemId = item.id;\n\n        let obj = {\n            lessonId: item.lesson.id,\n            dayOfWeek: day.toUpperCase(),\n            periodId: +classId,\n            evenOdd: week.toUpperCase(),\n            semesterId: props.currentSemester.id\n        };\n\n        checkAvailabilityScheduleService(obj);\n\n        setLoadingService(true);\n        if (itemId) obj = { ...obj, id: itemId };\n\n        props.setModalData({ item: obj, groupId: item.lesson.group.id });\n        props.openDialog();\n    };\n\n    const dragOver = e => {\n        const target = e.target;\n        const children = target.childNodes;\n        const arr = target.id.split('-');\n        const borderGroupId = +arr[1];\n\n        if (\n            borderGroupId !== itemGroupId &&\n            target.classList.contains(cssClasses.SCHEDULE_BOARD)\n        ) {\n            target.style.backgroundColor = colors.DANGER;\n        } else if (\n            target.classList.contains(cssClasses.SCHEDULE_BOARD) &&\n            children[1]\n        ) {\n            children[1].style.backgroundColor = colors.DANGER;\n            target.style.backgroundColor = colors.DANGER;\n        } else if (\n            !children[1] &&\n            target.classList.contains(cssClasses.SCHEDULE_BOARD)\n        ) {\n            target.style.backgroundColor = colors.ALLOW;\n            e.preventDefault();\n        }\n    };\n\n    const dragLeave = e => {\n        const target = e.target;\n        const children = target.childNodes;\n        const parent = target.parentNode;\n\n        const arr = target.id.split('-');\n        const borderGroupId = +arr[1];\n\n        if (borderGroupId === itemGroupId && !target.childNodes[1]) {\n            target.style.backgroundColor = colors.POSSIBILITY;\n        } else if (\n            target.classList.contains(cssClasses.SCHEDULE_BOARD) &&\n            children[1]\n        ) {\n            target.style.backgroundColor = colors.NOTHING;\n            children[1].style.backgroundColor = colors.NOTHING;\n        } else if (\n            parent &&\n            parent.classList.contains(cssClasses.SCHEDULE_BOARD)\n        ) {\n            parent.style.backgroundColor = colors.NOTHING;\n            parent.parentNode.style.backgroundColor = colors.NOTHING;\n        } else {\n            target.style.backgroundColor = colors.NOTHING;\n        }\n    };\n    const addClassDayBoard = () => {\n        if (classDay !== null && classDay !== undefined) {\n            const dayClassWeek = document.getElementsByClassName(classDay);\n            dayClassWeek[0].classList.add('day-class-week');\n            dayClassWeek[1].classList.add('day-class-week');\n        }\n    };\n    const addClass = () => {\n        if (classes !== null && classes !== undefined) {\n            const classesTmp = document.getElementById(classes);\n            classesTmp.classList.add('classes');\n        }\n    };\n    const addDay = () => {\n        if (day !== null && day !== undefined) {\n            const tmp = document.getElementById(day.toUpperCase());\n            tmp.classList.add('day');\n        }\n    };\n    const addGroup = () => {\n        if (group !== null && group !== undefined) {\n            const tmp = document.getElementById(group);\n            tmp.classList.add('group');\n        }\n    };\n    const addEffect = () => {\n        if (props.children[1]) {\n            addClassDayBoard();\n            addClass();\n            addDay();\n            addGroup();\n        }\n    };\n    const removeClassDayBoard = () => {\n        if (classDay !== null && classDay !== undefined) {\n            const dayClassWeek = document.getElementsByClassName(classDay);\n            dayClassWeek[0].classList.remove('day-class-week');\n            dayClassWeek[1].classList.remove('day-class-week');\n        }\n    };\n    const removeClass = () => {\n        if (classes !== null && classes !== undefined) {\n            const classesTmp = document.getElementById(classes);\n            classesTmp.classList.remove('classes');\n        }\n    };\n    const removeDay = () => {\n        if (day !== null && day !== undefined) {\n            const tmp = document.getElementById(day.toUpperCase());\n            tmp.classList.remove('day');\n        }\n    };\n    const removeGroup = () => {\n        if (group !== null && group !== undefined) {\n            const tmp = document.getElementById(group);\n            tmp.classList.remove('group');\n        }\n    };\n    const removeEffect = () => {\n        if (props.children[1]) {\n            removeClassDayBoard();\n            removeClass();\n            removeDay();\n            removeGroup();\n        }\n    };\n    return (\n        <>\n\n            <div\n\n                id={props.id}\n                onDrop={drop}\n                onDragOver={dragOver}\n                onDragLeave={dragLeave}\n                className={props.className}\n                onMouseOver={addEffect}\n                onMouseLeave={removeEffect}\n            >\n                {props.children}\n            </div>\n        </>\n\n    );\n};\n\nexport default Board;\n","import React from 'react';\nimport { MdDelete, MdEdit } from 'react-icons/md';\n\nimport Card from '../../share/Card/Card';\nimport { FaUserPlus } from 'react-icons/fa';\nimport { getTeacherFullName } from '../../helper/renderTeacher';\n\nconst ScheduleItem = props => {\n    let lesson = props.lesson;\n    let itemId;\n\n    const item = props.item || null;\n    const t = props.translation;\n    const { fStrLetterCapital } = props;\n\n    if (item) {\n        lesson = item.lesson;\n        itemId = item.id;\n    }\n\n    const addition = props.addition;\n\n    const itemNodeId = `card-${lesson.id}-group-${lesson.group.id}-${addition}`;\n    const deleteNodeId = `delete-${lesson.id}-${lesson.group.id}-${addition}`;\n\n    const isGroupped = grouped =>\n        grouped ? (\n            <FaUserPlus\n                title={t('formElements:grouped_label')}\n                className=\"svg-btn copy-btn align-left info-btn\"\n            />\n        ) : (\n            ''\n        );\n\n    return (\n        <Card id={itemNodeId} class={props.class} draggable={true}>\n            <input\n                type=\"hidden\"\n                value={JSON.stringify({\n                    lesson: lesson,\n                    id: itemId\n                })}\n            />\n            {props.inBoard ? (\n                <>\n                    <div className=\"cards-btns delete-item\" id={deleteNodeId}>\n                        <MdDelete\n                            title={t('common:delete_schedule_item')}\n                            className=\"svg-btn delete-btn\"\n                            onClick={() =>\n                                props.deleteItem(itemId, item.lesson.group.id)\n                            }\n                        />\n                        <MdEdit\n                            title={t('common:edit_schedule_item')}\n                            className=\"svg-btn edit-btn\"\n                            onClick={() => props.editItem(item)}\n                        />\n                    </div>\n                </>\n            ) : (\n                ''\n            )}\n\n            <p>\n                {fStrLetterCapital(lesson.subjectForSite)} (\n                {t(\n                    `formElements:lesson_type_${lesson.lessonType.toLowerCase()}_label`\n                )}\n                )\n            </p>\n            <p>{getTeacherFullName(lesson.teacher)}</p>\n            {props.inBoard ? (\n                <p>\n                    {isGroupped(lesson.grouped)}\n                    <b>{item.room.name}</b>\n                </p>\n            ) : (\n                <p>\n                    {isGroupped(lesson.grouped)}\n                    <b>1</b> {t('formElements:hours_label')}\n                </p>\n            )}\n        </Card>\n    );\n};\n\nexport default ScheduleItem;\n","export const firstStringLetterCapital = str => {\n    return str.replace(/^\\w/, c => c.toUpperCase());\n};\n","import React from 'react';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { styled } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nimport Board from '../Board/Board';\nimport ScheduleItem from '../ScheduleItem/ScheduleItem';\n\nimport { selectGroupIdService } from '../../services/lessonService';\n\nimport { firstStringLetterCapital } from '../../helper/strings';\n\nconst GroupField = styled(TextField)({\n    width: '150px'\n});\n\nconst ScheduleLessonsList = props => {\n    const { groups, groupId } = props;\n\n    let lessons = props.lessons;\n    const items = props.items;\n\n    const t = props.translation;\n\n    const handleGroupSelect = group => {\n        if (group) selectGroupIdService(group.id);\n    };\n\n    const groupFinderHandle = groupId => {\n        if (groupId) return groups.find(group => group.id === groupId);\n        else return '';\n    };\n\n    const defaultProps = {\n        options: groups,\n        getOptionLabel: option => (option ? option.title : '')\n    };\n\n    const firstStringLetterCapitalHandle = str => {\n        return firstStringLetterCapital(str);\n    };\n\n    const lessonItems = lesson => {\n        let hours = lesson.hours;\n        const lessonItem = [];\n        let els = [];\n        let hoursInSchedule = 0;\n\n        if (items.length > 0) {\n            els = items.filter(item => item.lesson.id === lesson.id);\n        }\n\n        els.forEach(() => {\n            hoursInSchedule += 1;\n        });\n\n        for (let i = 0; i < hours - hoursInSchedule; i++) {\n            lessonItem.push(\n                <section key={lesson.id + i}>\n                    <ScheduleItem\n                        index={i}\n                        lesson={lesson}\n                        fStrLetterCapital={firstStringLetterCapitalHandle}\n                        translation={t}\n                        classScheduler={props.classScheduler}\n                    />\n                </section>\n            );\n        }\n        return lessonItem;\n    };\n\n    return (\n        <>\n            {t('common:select_group_schedule')}\n            <Autocomplete\n                {...defaultProps}\n                id=\"group\"\n                clearOnEscape\n                openOnFocus\n                value={groupFinderHandle(groupId)}\n                onChange={(event, newValue) => {\n                    handleGroupSelect(newValue);\n                }}\n                renderInput={params => (\n                    <GroupField\n                        {...params}\n                        label={t('formElements:group_label')}\n                        margin=\"normal\"\n                    />\n                )}\n            />\n            {lessons.length > 0 ? (\n                <Board className=\"board lesson-board\">\n                    {lessons.map(lesson => lessonItems(lesson))}\n                </Board>\n            ) : groupId ? (\n                t('lesson_no_lesson_for_group_label')\n            ) : (\n                ''\n            )}\n        </>\n    );\n};\n\nexport default ScheduleLessonsList;\n","import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from '@material-ui/core';\n\nimport '../../share/modals/dialog.scss';\nimport './ScheduleDialog.scss';\n\nconst useStyles = makeStyles(() => ({\n    roomField: {\n        '&': {\n            margin: '0 auto',\n            width: 250\n        }\n    }\n}));\n\nconst ScheduleDialog = props => {\n    const {\n        onClose,\n        itemData,\n        open,\n        rooms,\n        availability,\n        translation,\n        isLoading\n    } = props;\n\n    const [room, setRoom] = useState('');\n    const [sure, setSure] = useState(true);\n\n    const classes = useStyles();\n\n    const handleClose = () => {\n        onClose();\n    };\n\n    const chooseClickHandle = () => {\n        if (!room) return;\n\n        if (\n            !room.available ||\n            !availability.teacherAvailable ||\n            !availability.classSuitsToTeacher\n        ) {\n            setSure(false);\n            return;\n        }\n        onClose({ itemData, room });\n        setRoom(null);\n    };\n\n    const groupByAvailability = arr => {\n        arr.sort((x, y) => {\n            return x === y ? 0 : x ? 1 : -1;\n        });\n        return arr;\n    };\n\n    const defaultProps = {\n        options: availability.rooms\n            ? groupByAvailability(availability.rooms)\n            : rooms,\n        getOptionLabel: option =>\n            option\n                ? option.available\n                    ? option.name + ` (${translation('common:available')})`\n                    : option.name + ` (${translation('common:unavailable')})`\n                : ''\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby='simple-dialog-title'\n            open={open}\n        >\n            {sure ? (\n                <>\n                    {isLoading ? (\n                        <div className='circular-progress-dialog'>\n                            <CircularProgress />\n                        </div>\n                    ) : (\n                        <>\n                            <DialogTitle id='simple-dialog-title'>\n                                {translation('common:schedule_dialog_title')}\n                            </DialogTitle>\n                            <div className='availability-info'>\n                                {!availability.classSuitsToTeacher ? (\n                                    <p className='availability-warning'>\n                                        {translation(\n                                            'common:class_does_not_suit_for_teacher'\n                                        )}\n                                    </p>\n                                ) : (\n                                    ''\n                                )}\n                                {!availability.teacherAvailable ? (\n                                    <p className='availability-warning'>\n                                        {translation(\n                                            'common:teacher_is_unavailable'\n                                        )}{' '}\n                                    </p>\n                                ) : (\n                                    ''\n                                )}\n                            </div>\n                            <Autocomplete\n                                {...defaultProps}\n                                id='group'\n                                clearOnEscape\n                                openOnFocus\n                                className={classes.roomField}\n                                onChange={(event, newValue) => {\n                                    setRoom(newValue);\n                                }}\n                                renderInput={params => (\n                                    <TextField\n                                        {...params}\n                                        label={translation(\n                                            'formElements:room_label'\n                                        )}\n                                        margin='normal'\n                                    />\n                                )}\n                            />\n                            <div className='buttons-container'>\n                                <Button\n                                    className='dialog-button'\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => chooseClickHandle()}\n                                >\n                                    {translation(\n                                        'formElements:choose_button_title'\n                                    )}\n                                </Button>\n                                <Button\n                                    className='dialog-button'\n                                    variant='contained'\n                                    onClick={() => onClose()}\n                                >\n                                    {translation(\n                                        'formElements:cancel_button_title'\n                                    )}\n                                </Button>\n                            </div>\n                        </>\n                    )}\n                </>\n            ) : (\n                <>\n                    <DialogTitle id='simple-dialog-title'>\n                        <p className='availability-warning'>\n                            {!room.available\n                                ? translation('common:room_is_unavailable') +\n                                '. '\n                                : ''}\n                        </p>\n                        <p className='availability-warning'>\n                            {!availability.teacherAvailable\n                                ? translation('common:teacher_is_unavailable') +\n                                '. '\n                                : ''}\n                        </p>\n\n                        <p className='availability-warning'>\n                            {!availability.classSuitsToTeacher\n                                ? translation(\n                                'common:class_does_not_suit_for_teacher'\n                            ) + '. '\n                                : ''}\n                        </p>\n\n                        {translation('common:are_you_sure')}\n                    </DialogTitle>\n                    <div className='buttons-container'>\n                        <Button\n                            className='dialog-button'\n                            variant='contained'\n                            color='primary'\n                            onClick={() => {\n                                onClose({ itemData, room });\n                                setSure(true);\n                            }}\n                        >\n                            {translation('common:yes_button_title')}\n                        </Button>\n                        <Button\n                            className='dialog-button'\n                            variant='contained'\n                            onClick={() => setSure(true)}\n                        >\n                            {translation('common:no_button_title')}\n                        </Button>\n                    </div>\n                </>\n            )}\n        </Dialog>\n    );\n};\n\nScheduleDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    rooms: PropTypes.array.isRequired,\n    availability: PropTypes.object.isRequired\n};\n\nexport default ScheduleDialog;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { IoMdMore } from 'react-icons/all';\n\nimport Board from '../Board/Board';\nimport ScheduleItem from '../ScheduleItem/ScheduleItem';\nimport ScheduleDialog from '../ScheduleDialog/ScheduleDialog';\n\nimport { firstStringLetterCapital } from '../../helper/strings';\n\nimport {\n    addItemToScheduleService,\n    deleteItemFromScheduleService,\n    checkAvailabilityChangeRoomScheduleService,\n    editRoomItemToScheduleService\n} from '../../services/scheduleService';\n\nimport {\n    getLessonsByGroupService,\n    selectGroupIdService\n} from '../../services/lessonService';\nimport { setLoadingService } from '../../services/loadingService';\n\nimport { cssClasses } from '../../constants/schedule/cssClasses';\nimport { colors } from '../../constants/schedule/colors';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport './Schedule.scss';\nimport i18n from 'i18next';\n\nconst Schedule = props => {\n    const { groups, itemGroupId, groupId } = props;\n    const [open, setOpen] = useState(false);\n    const [itemData, setItemData] = useState(null);\n    const prevGroupId = usePrevious(groupId);\n\n    function usePrevious(value) {\n        const ref = useRef();\n        useEffect(() => {\n            ref.current = value;\n        });\n        return ref.current;\n    }\n\n    useEffect(() => {\n        if (groupId !== null) {\n            const el = document.getElementById(`group-${groupId}`);\n            el.scrollIntoView({ block: 'center', inline: 'center' });\n            const parent = el.parentNode;\n            parent.classList.add('selected-group');\n        }\n        if (prevGroupId) {\n            const prevEl = document.getElementById(`group-${prevGroupId}`);\n            const parent = prevEl.parentNode;\n            parent.classList.remove('selected-group');\n        }\n    }, [groupId]);\n\n    const setNewItemHandle = (item, room, groupId) => {\n        getLessonsByGroupService(groupId);\n        selectGroupIdService(groupId);\n        if (item.id) deleteItemFromScheduleService(item.id);\n\n        addItemToScheduleService({ ...item, roomId: room.id });\n    };\n\n    const setEditItemHandle = (itemId, roomId, groupId) => {\n        getLessonsByGroupService(groupId);\n        selectGroupIdService(groupId);\n        editRoomItemToScheduleService({ itemId, roomId });\n    };\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = value => {\n        setOpen(false);\n        if (value) {\n            setLoadingService(true);\n            let el = '';\n            if (value.itemData.item.id) {\n                setEditItemHandle(\n                    value.itemData.item.id,\n                    value.room.id,\n                    value.itemData.groupId\n                );\n\n                el = document.getElementById(\n                    'card-' +\n                    value.itemData.item.lesson.id +\n                    '-group-' +\n                    value.itemData.groupId +\n                    '-in-day-' +\n                    value.itemData.item.dayOfWeek.toLowerCase() +\n                    '-class-' +\n                    value.itemData.item.period.id +\n                    '-week-' +\n                    value.itemData.item.evenOdd.toLowerCase()\n                );\n            } else {\n                setNewItemHandle(\n                    value.itemData.item,\n                    value.room,\n                    value.itemData.groupId\n                );\n                el = document.getElementById(\n                    'group-' +\n                    value.itemData.groupId +\n                    '-day-' +\n                    value.itemData.item.dayOfWeek.toLowerCase() +\n                    '-class-' +\n                    value.itemData.item.periodId +\n                    '-week-' +\n                    value.itemData.item.evenOdd.toLowerCase()\n                );\n            }\n            el.scrollIntoView();\n            setTimeout(() => {\n                el.style.backgroundColor = colors.ALLOW;\n            }, 1000);\n\n            setTimeout(() => {\n                el.style.backgroundColor = colors.NOTHING;\n            }, 3000);\n        }\n    };\n\n    const items = props.items;\n\n    const currentSemester = props.currentSemester;\n    const days = currentSemester.semester_days;\n    const classes = currentSemester.semester_classes;\n\n    const t = props.translation;\n\n    //const dayContainerHeight = classes.length * 185.5 + 4.6 * classes.length;\n    const dayContainerHeight = classes.length * 150;\n\n    const useStyles = makeStyles({\n        dayContainer: {\n            // height: dayContainerHeight,\n            // maxHeight: dayContainerHeight\n        },\n        day: {\n            height: dayContainerHeight,\n            maxHeight: dayContainerHeight\n        }\n    });\n    const elClasses = useStyles();\n\n    const firstStringLetterCapitalHandle = str => {\n        return firstStringLetterCapital(str);\n    };\n\n    const deleteItemFromScheduleHandler = (itemId, groupId) => {\n        deleteItemFromScheduleService(itemId);\n        getLessonsByGroupService(groupId);\n        selectGroupIdService(groupId);\n    };\n    const editItemOnScheduleHandler = item => {\n        setItemData({ item: item, groupId: item.lesson.group.id });\n        getLessonsByGroupService(item.lesson.group.id);\n        selectGroupIdService(item.lesson.group.id);\n\n        let itemId = item.id;\n\n        let obj = {\n            dayOfWeek: item.dayOfWeek,\n            periodId: +item.period.id,\n            evenOdd: item.evenOdd,\n            semesterId: item.lesson.semester.id\n        };\n        checkAvailabilityChangeRoomScheduleService(obj);\n        setLoadingService(true);\n        if (itemId) obj = { ...obj, id: itemId };\n        setOpen(true);\n    };\n\n    const conditionFunc = (item, lesson, group) => {\n        return (\n            `group-${\n                item.lesson.group.id\n            }-day-${item.dayOfWeek.toLowerCase()}-class-${\n                item.period.id\n            }-week-${item.evenOdd.toLowerCase()}` ===\n            `group-${group.id}-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`\n        );\n    };\n\n    const addDeleteBtnToItem = (item, group, lesson) => {\n        const addition = `in-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`;\n        const itemNodeId = `card-${item.lesson.id}-group-${group.id}-${addition}`;\n        const deleteNodeId = `delete-${item.lesson.id}-${group.id}-${addition}`;\n        setTimeout(() => {\n            const itemNode = document.getElementById(itemNodeId);\n            const deleteNode = document.getElementById(deleteNodeId);\n            if (deleteNode && itemNode) {\n                itemNode.addEventListener('mouseenter', () => {\n                    deleteNode.style.display = 'block';\n                });\n                itemNode.addEventListener('mouseleave', () => {\n                    deleteNode.style.display = 'none';\n                });\n            }\n        }, 1000);\n    };\n\n    const itemInBoard = (group, lesson, index) => {\n        for (let item of items) {\n            if (conditionFunc(item, lesson, group)) {\n                const addition = `in-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`;\n                addDeleteBtnToItem(item, group, lesson);\n                return (\n                    <section\n                        key={group.id + index + item.id}\n                        className={cssClasses.IN_BOARD_SECTION}\n                    >\n                        <ScheduleItem\n                            inBoard={true}\n                            addition={addition}\n                            class={cssClasses.IN_BOARD_CARD}\n                            item={item}\n                            deleteItem={deleteItemFromScheduleHandler}\n                            editItem={editItemOnScheduleHandler}\n                            fStrLetterCapital={firstStringLetterCapitalHandle}\n                            translation={t}\n                        />\n                    </section>\n                );\n            }\n        }\n    };\n\n    const allLessons = [];\n    days.forEach(day => {\n        classes.forEach(classNumber => {\n            for (let i = 0; i < 2; i++) {\n                if ((i + 1) % 2 === 0) {\n                    allLessons.push({\n                        day: { name: day.toLowerCase() },\n                        classNumber,\n                        week: 'even'\n                    });\n                } else {\n                    allLessons.push({\n                        day: { name: day.toLowerCase() },\n                        classNumber,\n                        week: 'odd'\n                    });\n                }\n            }\n        });\n    });\n    const getDayColour = (index) => {\n        return index % 2 ? 'violet-day' : 'blue-day';\n    };\n\n    return (\n        <section className='cards-container schedule'>\n\n            <ScheduleDialog\n                translation={t}\n                itemData={itemData}\n                rooms={props.rooms}\n                availability={props.availability}\n                open={open}\n                isLoading={props.isLoading}\n                onClose={handleClose}\n            />\n            <aside className='day-classes-aside'>\n                <section className='card empty-card'>Група\n                </section>\n                {days.map((day, index) => (\n\n                    <section\n                        className={\n                            elClasses.dayContainer +\n                            ' cards-container day-container'\n                        }\n                        key={day}\n                    >\n                        <section\n                            id={day}\n                            className={`${elClasses.day} ${getDayColour(index)} schedule-day card`\n                            }\n                        >\n                            {t(`day_of_week_${day}`)}\n                        </section>\n                        <section className='class-section'>\n                            {classes.map(classScheduler => (\n                                <>\n                                    <p className={`day-class-week-general ${day}-${classScheduler.id}`}>\n                                    </p>\n                                    <section\n                                        id={`${classScheduler.id}-${day}`}\n                                        className='card schedule-class'\n                                        key={classScheduler.id}\n                                    >\n                                        {classScheduler.class_name}\n                                    </section>\n                                    <p className={`day-class-week-general ${day}-${classScheduler.id}`}>\n                                    </p>\n                                </>\n\n                            ))}\n                        </section>\n                    </section>\n                ))}\n            </aside>\n\n            <section className='groups-section '>\n                {groups.map((group) => (\n                    <section\n                        key={'group-' + group.id}\n                        className='group-section'\n                        id={`${group.id}`}\n                    >\n\n                        <div\n                            className={`group-title card`}\n                            id={`group-${group.id}`}\n                        >\n\n\n                            {group.title}\n                        </div>\n                        {allLessons.map((lesson, index) => (\n                            <div\n                                key={group + '-' + index}\n                                className={`board-div`}\n                            >\n                                <Board\n                                    group={group.id}\n                                    day={lesson.day.name}\n                                    classes={`${lesson.classNumber.id}-${(lesson.day.name).toUpperCase()}`}\n                                    classDay={`${(lesson.day.name).toUpperCase()}-${lesson.classNumber.id}`}\n                                    currentSemester={currentSemester}\n                                    setModalData={setItemData}\n                                    openDialog={handleClickOpen}\n                                    itemGroupId={itemGroupId}\n                                    id={`group-${group.id}-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`}\n                                    className={`board card ${cssClasses.SCHEDULE_BOARD} group-${group.id} schedule-board `}\n                                >\n                                    <IoMdMore\n                                        className='more-icon'\n                                        title={\n                                            `${t(\n                                                `formElements:day_label`\n                                            )}: ` +\n                                            t(\n                                                `day_of_week_${lesson.day.name.toUpperCase()}`\n                                            ).toLowerCase() +\n                                            `\\n${t(`week_label`)}: ` +\n                                            t(`week_${lesson.week}_title`) +\n                                            `\\n${t('class_schedule')}: ` +\n                                            lesson.classNumber.class_name\n                                        }\n                                    />\n                                    {itemInBoard(group, lesson, index)}\n                                </Board>\n                            </div>\n                        ))}\n                        <div\n                            className={`group-title card`}\n                            id={`group-${group.id}`}\n                        >\n                            {group.title}\n                        </div>\n                    </section>\n                ))}\n\n            </section>\n        </section>\n    );\n};\n\nexport default Schedule;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\n\nimport { showAllGroupsService } from '../../services/groupService';\nimport { getLessonsByGroupService } from '../../services/lessonService';\nimport {\n    setLoadingService,\n    setScheduleLoadingService\n} from '../../services/loadingService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport {\n    getScheduleItemsService,\n    clearSchedule, showAllPublicGroupsService\n} from '../../services/scheduleService';\nimport { showListOfRoomsService } from '../../services/roomService';\n\nimport ScheduleLessonsList from '../../components/ScheduleLessonsList/ScheduleLessonsList';\nimport Schedule from '../../components/Schedule/Schedule';\n\nimport { CircularProgress } from '@material-ui/core';\n\nimport './SchedulePage.scss';\n\nconst SchedulePage = props => {\n    const { t } = useTranslation('common');\n\n    document.title = t('schedule_title');\n\n    const { groups, groupId } = props;\n\n    const itemGroupId = props.itemGroupId;\n\n    const scheduleItems = props.scheduleItems;\n\n    let lessons = props.lessons;\n\n    const isLoading = props.loading;\n\n    useEffect(() => {\n        setLoadingService(true);\n        setScheduleLoadingService(true);\n        getScheduleItemsService();\n    }, []);\n\n    useEffect(() => {\n        showAllGroupsService();\n    }, []);\n    // useEffect(() => showAllPublicGroupsService(props.currentSemester.id), [props.currentSemester.id]);\n\n    useEffect(() => {\n        if (groupId) {\n            setLoadingService(true);\n            getLessonsByGroupService(groupId);\n        }\n    }, [groupId]);\n\n    useEffect(() => getClassScheduleListService(), []);\n\n    useEffect(() => showListOfRoomsService(), []);\n    const handleClearSchedule = () => {\n        if (props.currentSemester.id) {\n            clearSchedule(props.currentSemester.id);\n            if (groupId) {\n                setLoadingService(true);\n                getLessonsByGroupService(groupId);\n            }\n        }\n    };\n\n    return (\n        <>\n\n            <section className=\"cards-container schedule-page\">\n                <section className=\"flexbox card \">\n                    {props.scheduleLoading ? (\n                        <CircularProgress />\n                    ) : (\n                        <>\n                            {!props.currentSemester.id ? (\n                                <h2 className=\"no-current-semester\">\n                                    {t('no_current_semester')}\n                                </h2>\n                            ) : (\n                                <Schedule\n                                    groupId={groupId}\n                                    currentSemester={props.currentSemester}\n                                    groups={groups}\n                                    itemGroupId={itemGroupId}\n                                    items={scheduleItems}\n                                    translation={t}\n                                    rooms={props.rooms}\n                                    availability={props.availability}\n                                    isLoading={isLoading}\n                                />\n                            )\n                            }\n                        </>\n                    )}\n                </section>\n                <aside className=\"lesson-list card\">\n                    {isLoading ? (\n                        <CircularProgress />\n                    ) : (\n                        <>\n                            <Button\n                                className=\"buttons-style\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => handleClearSchedule()}\n                            >\n                                {t('clear_schedule_label')}\n                            </Button>\n                            <ScheduleLessonsList\n                                items={scheduleItems}\n                                groups={groups}\n                                lessons={lessons}\n                                groupId={groupId}\n                                translation={t}\n                                classScheduler={\n                                    props.currentSemester.semester_classes\n                                }\n                            />\n                        </>\n                    )}\n                </aside>\n            </section>\n            <section className=\"for-phones-and-tablets card\">\n                <h1>{t('use_pc')}</h1>\n            </section>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    groups: state.groups.groups,\n    lessons: state.lesson.lessons,\n    groupId: state.lesson.groupId,\n    loading: state.loadingIndicator.loading,\n    scheduleLoading: state.loadingIndicator.scheduleLoading,\n    scheduleItems: state.schedule.items,\n    itemGroupId: state.schedule.itemGroupId,\n    availability: state.schedule.availability,\n    currentSemester: state.schedule.currentSemester,\n    semester:state.schedule.semester,\n    rooms: state.rooms.rooms\n});\n\nexport default connect(mapStateToProps)(SchedulePage);\n","import React from \"react\";\n\nimport TextField from \"@material-ui/core/TextField\";\n\nconst renderTextField = ({\n  label,\n  input,\n  meta: { touched, invalid, error },\n  ...custom\n}) => {\n  return (\n    <TextField\n      label={label}\n      placeholder={label}\n      error={touched && invalid}\n      helperText={touched && error}\n      {...input}\n      {...custom}\n    />\n  );\n};\n\nexport default renderTextField;\n","import * as actionTypes from './actionsType';\n\nexport const addDepartment = res => {\n    return {\n        type: actionTypes.ADD_DEPARTMENT,\n        result: res\n    };\n};\nexport const getAllDepartments=res=>{\n    return{\n        type:actionTypes.GET_ALL_DEPARTMENTS,\n        result:res\n    }\n}\nexport const getDisabledDepartments=res=>{\n    return{\n        type:actionTypes.GET_DISABLED_DEPARTMENTS,\n        result:res\n    }\n}\nexport const setDisabledDepartment=res=>{\n    return{\n        type:actionTypes.SET_DISABLED_DEPARTMENT,\n        result:res\n    }\n}\nexport const setEnabledDepartment=res=>{\n    return{\n        type:actionTypes.SET_ENABLED_DEPARTMENT,\n        result:res\n    }\n}\nexport const clearDepartmentForm=()=>{\n    return{\n        type:actionTypes.CLEAR_DEPARTMENT_FORM\n    }\n}\nexport const deleteDepartment=res=>{\n    return{\n        type:actionTypes.DELETE_DEPARTMENT,\n        result:res\n    }\n}\nexport const getDepartItemById=res=>{\n    return {\n        type:actionTypes.GET_DEPARTMENT_BY_ID,\n        result:res\n    }\n}\nexport const updateDepart=res=>{\n    return {\n        type:actionTypes.UPDATE_DEPARTMENT,\n        result:res\n    }\n}","import axios from '../helper/axios';\nimport { DEPARTMENT_URL, SUBJECT_URL } from '../constants/axios';\nimport { store } from '../index';\nimport { addSubject } from '../redux/actions';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { DEPARTMENT_FORM, SUBJECT_FORM } from '../constants/reduxForms';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport i18n from '../helper/i18n';\nimport {\n    addDepartment,\n    clearDepartmentForm,\n    deleteDepartment,\n    getAllDepartments, getDepartItemById,\n    getDisabledDepartments, setDisabledDepartment, setEnabledDepartment, updateDepart\n} from '../redux/actions/departments';\n\nexport const createDepartmentService = data => {\n    axios\n        .post(DEPARTMENT_URL, data)\n        .then(response => {\n            store.dispatch(addDepartment(response.data));\n            resetFormHandler(DEPARTMENT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:department_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getAllDepartmentsService = () => {\n    axios\n        .get(DEPARTMENT_URL)\n        .then(response => {\n            store.dispatch(getAllDepartments(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const getDisabledDepartmentsService = () => {\n    axios\n        .get(`${DEPARTMENT_URL}/disabled`)\n        .then(response => {\n            store.dispatch(getDisabledDepartments(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const setDisabledDepartmentService = (data) => {\n    axios\n        .put(`${DEPARTMENT_URL}`, data)\n        .then(response => {\n            store.dispatch(setDisabledDepartment(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const setEnabledDepartmentService = (data) => {\n    axios\n        .put(`${DEPARTMENT_URL}`, data)\n        .then(response => {\n            store.dispatch(setEnabledDepartment(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const updateDepartmentService = (data) => {\n    axios\n        .put(`${DEPARTMENT_URL}`, data)\n        .then(response => {\n            store.dispatch(updateDepart(response.data));\n            resetFormHandler(DEPARTMENT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:department_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const deleteDepartmentsService = (id) => {\n    axios\n        .delete(`${DEPARTMENT_URL}/${id}`)\n        .then(response => {\n            store.dispatch(deleteDepartment(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const clearDepartment = () => {\n    store.dispatch(clearDepartmentForm());\n    resetFormHandler(DEPARTMENT_FORM);\n};\nexport const getDepartmentByIdService = (id) => {\n    store.dispatch(getDepartItemById(Number(id)));\n};\n","export const setDisableButton = (pristine, submitting, id) => {\n    if (id !== undefined) {\n        return false;\n    }\n    if (!pristine) {\n        return false;\n    }\n    if (submitting) {\n        return true;\n    }\n    if (id === undefined) {\n        return true;\n    }\n};\nexport const getClearOrCancelTitle = (id, t) => {\n    return id === undefined ? t('clear_button_label') : t('cancel_button_title');\n};","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport { required } from '../../validation/validateFields';\n\nimport Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/core/styles';\n\nimport Card from '../../share/Card/Card';\n\nimport { TEACHER_FORM } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\n\nimport './AddTeacherForm.scss';\nimport Select from 'react-select';\nimport { ReduxFormSelect } from '../../helper/ReduxFormSelect';\nimport renderSelectField from '../../share/renderedFields/select';\nimport { getDepartmentByIdService } from '../../services/departmentService';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nlet AddTeacher = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, submitting, reset,departments,teacher } = props;\n\n    const teacherId = teacher.id;\n\n    useEffect(() => {\n        if (teacherId) {\n            initializeFormHandler(teacher);\n        } else {\n            props.initialize();\n        }\n    }, [teacherId]);\n\n    const initializeFormHandler = teacher => {\n        const department=teacher.department?teacher.department.id:0;\n        props.initialize({\n            id: teacher.id,\n            surname: teacher.surname,\n            name: teacher.name,\n            patronymic: teacher.patronymic,\n            position: teacher.position,\n            email:teacher.email,\n            department\n        });\n    };\n\n    return (\n        <Card class=\"form-card teacher-form\">\n            <form className=\"createTeacherForm w-100\" onSubmit={handleSubmit}>\n                <h2 className=\"form-title\">\n                    {teacherId ? t('edit_title') : t('create_title')}{' '}\n                    {t('teacher_a_label')}\n                </h2>\n\n                <Field\n                    className=\"form-field\"\n                    name=\"surname\"\n                    id=\"surname\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_surname')}\n                    label={t('teacher_surname')}\n                    validate={[required]}\n                />\n\n                <Field\n                    className=\"form-field\"\n                    name=\"name\"\n                    id=\"name\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_first_name')}\n                    label={t('teacher_first_name')}\n                    validate={[required]}\n                />\n\n                <Field\n                    className=\"form-field\"\n                    name=\"patronymic\"\n                    id=\"patronymic\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_patronymic')}\n                    label={t('teacher_patronymic')}\n                    validate={[required]}\n                />\n\n                <Field\n                    className=\"form-field\"\n                    name=\"position\"\n                    id=\"position\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_position')}\n                    label={t('teacher_position')}\n                    validate={[required]}\n                />\n                <Field\n                    className=\"form-field\"\n                    name=\"email\"\n                    id=\"email\"\n                    component={renderTextField}\n                    type=\"email\"\n                    placeholder={t('email_field')}\n                    label={t('email_field')}\n                />\n                <Field\n                    name=\"department\"\n                    className=\"week-days\"\n                    component={renderSelectField}\n                    label={t('department_teachers_label')}\n                    type=\"text\"\n                    onChange={({target})=> {\n                        getDepartmentByIdService(target.value)\n                    }}\n                >\n                    <option />\n                    {departments.map((item) => (\n                        <option key={item.id} value={item.value}>\n                            {item.label}\n                        </option>\n                    ))}\n                </Field>\n\n                <div className=\"form-buttons-container\">\n                    <Button\n                        className=\"buttons-style\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                        type=\"submit\"\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        className=\"buttons-style\"\n                        variant=\"contained\"\n                        disabled={setDisableButton(pristine,submitting,teacher.id)}\n                        onClick={() => {\n                            reset();\n                            props.onSetSelectedCard(null);\n                        }}\n                    >\n                        {getClearOrCancelTitle(teacher.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({ teacher: state.teachers.teacher });\n\nAddTeacher = reduxForm({\n    form: TEACHER_FORM\n})(AddTeacher);\n\nexport default connect(mapStateToProps)(AddTeacher);\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './dialog.scss';\n\nimport i18n from '../../helper/i18n';\nimport { disabledCard } from '../../constants/disabledCard';\n\nexport const ConfirmDialog = props => {\n    const { onClose, whatDelete, cardId, isHide, open } = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">\n                <>\n                    {isHide ? (\n                        <>\n                            {isHide === disabledCard.HIDE ? (\n                                <>{i18n.t('common:do_you_wanna_disable')}</>\n                            ) : (\n                                <>{i18n.t('common:do_you_wanna_show')}</>\n                            )}\n                        </>\n                    ) : (\n                        <>\n                            {i18n.t('common:do_you_wanna')}{' '}\n                            <span className=\"delete-word\">\n                                {i18n.t('common:delete_word')}\n                            </span>{' '}\n                        </>\n                    )}\n\n                    {i18n.t('common:this_card_type', {\n                        cardType: i18n.t(`formElements:${whatDelete}_element`)\n                    })}\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => onClose(cardId)}\n                >\n                    {i18n.t('common:yes_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                >\n                    {i18n.t('common:no_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nConfirmDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default ConfirmDialog;\n","export const cardType = {\n    LESSON: 'Lesson',\n    TEACHER: 'Teacher',\n    CLASS: 'Class',\n    GROUP: 'Group',\n    ROOM: 'Room',\n    TYPE: 'Type',\n    TEMPORARY_SCHEDULE: 'temporary_schedule',\n    SUBJECT: 'Subject',\n    SEMESTER: 'Semester'\n};\n","export const search = (items, term, arr) => {\n\n    if (term.length === 0) return items;\n    \n    return items.filter( item => {\n        for (let i = 0; i < arr.length; i++) {\n            if (String(item[arr[i]]).toLowerCase().indexOf(term.toLowerCase()) > -1) return true;\n        }\n        return false\n    })\n}","import React, { useState } from 'react';\nimport { FaSearch } from 'react-icons/fa';\nimport { TextField } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport './SearchPanel.scss';\nimport Card from '../../share/Card/Card';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nconst SearchPanel = ({ SearchChange, showDisabled, showArchived }) => {\n    const { t } = useTranslation('formElements');\n    const [term, setTerm] = useState('');\n\n    const [state, setState] = React.useState({\n        checkedB: false,\n        checkedArchived: false\n    });\n\n    const handleChange = event => {\n        switch (event.target.name) {\n            case 'checkedArchived':\n                setState({\n                    ...state,\n                    checkedB: false,\n                    [event.target.name]: event.target.checked\n                });\n                showArchived();\n                break;\n            default:\n                setState({\n                    ...state,\n                    checkedArchived: false,\n                    [event.target.name]: event.target.checked\n                });\n\n                break;\n        }\n        showDisabled();\n\n    };\n\n    const onSearchChange = e => {\n        const term = e.target.value;\n        setTerm(term);\n        SearchChange(term);\n    };\n\n    return (\n        <Card class='search-group'>\n            <FormControlLabel\n                control={\n                    <Switch\n                        checked={state.checkedB}\n                        onChange={handleChange}\n                        name='checkedB'\n                        color='primary'\n                    />\n                }\n                label={\n                    !state.checkedB\n                        ? t('common:show_disabled')\n                        : t('common:show_enabled')\n                }\n            />\n            {showArchived ? (\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={state.checkedArchived}\n                            onChange={handleChange}\n                            name='checkedArchived'\n                            color='secondary'\n                        />\n                    }\n                    label={\n                        !state.checkedArchived\n                            ? t('show_archived')\n                            : t('show_regular')\n                    }\n                />\n            ) : (\n                ''\n            )}\n\n            <TextField\n                className='form-field'\n                label={<FaSearch />}\n                placeholder={t('type_to_search')}\n                value={term}\n                onChange={onSearchChange}\n            />\n        </Card>\n    );\n};\n\nexport default SearchPanel;\n","import React from 'react'\nimport { FaSadCry } from 'react-icons/fa'\nimport { useTranslation } from 'react-i18next'\n\nimport './NotFound.scss'\n\nconst NotFound = ({name}) => {\n    const {t} = useTranslation('formElements')\n\n    return (\n        <div className='not-found__wrapper'>\n            <div>\n                <FaSadCry className='not-found__icon'/>\n            </div>\n            <p className='not-found__text'>{t('there_is_no')} {name}</p>\n        </div>\n    )\n}\n\nexport default NotFound\n","import { connect } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport Button from '@material-ui/core/Button';\nimport { useTranslation } from 'react-i18next';\n\nimport './AddGroupForms.scss';\nimport Card from '../../share/Card/Card';\nimport { GROUP_FORM } from '../../constants/reduxForms';\nimport renderTextField from '../../share/renderedFields/input';\nimport {\n    required,\n    uniqueGroup,\n    minLengthValue\n} from '../../validation/validateFields';\nimport { links } from '../../constants/links';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nlet AddGroup = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting,match,group } = props;\n\n    useEffect(() => {\n        if (group&&match.url.includes(links.Edit)&&!match.url.includes(links.Student)) {\n            if (group.id) {\n                props.initialize({\n                    id: group.id,\n                    title: group.title\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [group.id]);\n\n    return (\n        <Card class=\"form-card group-form\">\n            <h2 className=\"group-form__title\">\n                {group.id ? t('edit_title') : t('create_title')}\n                {t('group_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    className=\"form-field\"\n                    name=\"title\"\n                    id=\"title\"\n                    label={t('group_label') + ':'}\n                    component={renderTextField}\n                    validate={[required, minLengthValue, uniqueGroup]}\n                />\n                <div className=\"form-buttons-container group-btns\">\n                    <Button\n                        variant=\"contained\"\n                        className=\"buttons-style \"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                        type=\"submit\"\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        type=\"button\"\n                        className=\"buttons-style\"\n                        variant=\"contained\"\n                        disabled={setDisableButton(pristine,submitting,group.id)}\n                        onClick={onReset}\n                    >\n                        {getClearOrCancelTitle(group.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    group: state.groups.group\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: GROUP_FORM\n    })(AddGroup)\n);\n","import React from 'react';\n\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\n\nconst Alert = props => {\n    return <MuiAlert elevation={6} variant='filled' {...props} />;\n};\n\nconst SnackbarComponent = props => {\n    const message = props.message;\n    const type = props.type;\n    const isOpen = props.isOpen;\n    const handleSnackbarClose = props.handleSnackbarClose;\n    return (\n        <Snackbar\n            open={isOpen}\n            autoHideDuration={props.type === snackbarTypes.ERROR ? null : 3000}\n            onClose={handleSnackbarClose}\n        >\n            <Alert onClose={handleSnackbarClose} severity={type}>\n                {message}\n            </Alert>\n\n        </Snackbar>\n    );\n};\n\nexport default SnackbarComponent;\n","import { store } from '../index';\nimport axios from '../helper/axios';\nimport { DISABLED_SUBJECTS_URL, SUBJECT_URL } from '../constants/axios';\nimport { SUBJECT_FORM } from '../constants/reduxForms';\nimport {\n    addSubject,\n    clearSubject,\n    deleteSubject,\n    selectSubject,\n    setDisabledSubjects,\n    showAllSubjects,\n    updateSubject\n} from '../redux/actions/index';\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const selectSubjectService = subjectId =>\n    store.dispatch(selectSubject(subjectId));\n\nexport const handleSubjectService = values =>\n    values.id ? updateSubjectService(values) : createSubjectService(values);\n\nexport const clearSubjectService = () => {\n    store.dispatch(clearSubject());\n    resetFormHandler(SUBJECT_FORM);\n};\n\nexport const showAllSubjectsService = () => {\n    axios\n        .get(SUBJECT_URL)\n        .then(response => {\n            store.dispatch(showAllSubjects(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const removeSubjectCardService = subjectId => {\n    axios\n        .delete(SUBJECT_URL + `/${subjectId}`)\n        .then(response => {\n            store.dispatch(deleteSubject(subjectId));\n            getDisabledSubjectsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:subject_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createSubjectService = data => {\n    axios\n        .post(SUBJECT_URL, data)\n        .then(response => {\n            store.dispatch(addSubject(response.data));\n            resetFormHandler(SUBJECT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:subject_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const updateSubjectService = data => {\n    return axios\n        .put(SUBJECT_URL, data)\n        .then(response => {\n            store.dispatch(updateSubject(response.data));\n            selectSubjectService(null);\n            showAllSubjectsService();\n            getDisabledSubjectsService();\n            resetFormHandler(SUBJECT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:subject_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getDisabledSubjectsService = () => {\n    axios\n        .get(DISABLED_SUBJECTS_URL)\n        .then(res => {\n            store.dispatch(setDisabledSubjects(res.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const setDisabledSubjectsService = subject => {\n    subject.disable = true;\n    updateSubjectService(subject);\n};\n\nexport const setEnabledSubjectsService = subject => {\n    subject.disable = false;\n    updateSubjectService(subject);\n};\n","import * as actionTypes from './actionsType';\n\nexport const showAllSubjects = res => {\n    return {\n        type: actionTypes.SHOW_ALL_SUBJECTS,\n        result: res\n    };\n};\n\nexport const setDisabledSubjects = res => {\n    return {\n        type: actionTypes.SET_DISABLED_SUBJECTS,\n        result: res\n    };\n};\n\nexport const addSubject = res => {\n    return {\n        type: actionTypes.ADD_SUBJECT,\n        result: res\n    };\n};\n\nexport const deleteSubject = res => {\n    return {\n        type: actionTypes.DELETE_SUBJECT,\n        result: res\n    };\n};\n\nexport const selectSubject = res => {\n    return {\n        type: actionTypes.SELECT_SUBJECT,\n        result: res\n    };\n};\n\nexport const updateSubject = res => {\n    return {\n        type: actionTypes.UPDATE_SUBJECT,\n        result: res\n    };\n};\n\nexport const clearSubject = () => {\n    return{\n        type: actionTypes.CLEAR_SUBJECT\n    }\n\n};\n\n","import axios from '../helper/axios';\nimport { STUDENT_URL, SUBJECT_URL } from '../constants/axios';\nimport { store } from '../index';\nimport { addSubject, deleteSubject, selectGroup, updateSubject } from '../redux/actions';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { STUDENT_FORM, SUBJECT_FORM } from '../constants/reduxForms';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport i18n from '../helper/i18n';\nimport {\n    addStudent,\n    deleteStudent,\n    setStudent, showAllStudents,\n    showAllStudentsByGroupId,\n    updateStudent\n} from '../redux/actions/students';\nimport { getDisabledSubjectsService, selectSubjectService, showAllSubjectsService } from './subjectService';\n\nexport const createStudentService = data => {\n\n    axios\n        .post(STUDENT_URL, data)\n        .then(response => {\n            store.dispatch(addStudent(response.data));\n            resetFormHandler(STUDENT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:student_a_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const getAllStudentsByGroupId = groupId => {\n    axios\n        .get(STUDENT_URL)\n        .then(response => {\n            let result=response.data.filter(({ group })=>group.id===groupId)\n            store.dispatch(showAllStudentsByGroupId(result));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const getAllStudentsService = () => {\n    axios\n        .get(STUDENT_URL)\n        .then(response => {\n            store.dispatch(showAllStudents(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const deleteStudentService = student => {\n    axios\n        .delete(STUDENT_URL + `/${student.id}`)\n        .then(response => {\n            store.dispatch(deleteStudent(student.id));\n            getAllStudentsByGroupId(student.group.id)\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:student_a_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const updateStudentService = data => {\n    return axios\n        .put(STUDENT_URL, data)\n        .then(response => {\n            store.dispatch(updateStudent(response.data));\n            selectStudentService(null);\n            getAllStudentsByGroupId(data.prevGroup.id)\n            resetFormHandler(STUDENT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:student_a_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const selectStudentService = studentId =>\n    store.dispatch(setStudent(studentId));","import * as actionTypes from './actionsType';\n\nexport const addStudent = res => {\n    return {\n        type: actionTypes.ADD_STUDENT,\n        result: res\n    };\n};\nexport const showAllStudents=res=>{\n    return{\n        type:actionTypes.SHOW_ALL_STUDENTS,\n        result:res\n    };\n}\nexport const showAllStudentsByGroupId=res=>{\n    return{\n        type:actionTypes.SHOW_ALL_STUDENTS_BY_GROUP_ID,\n        result:res\n    };\n}\nexport const deleteStudent=res=>{\n    return{\n        type:actionTypes.DELETE_STUDENT,\n        result:res\n    }\n}\nexport const setStudent=res=>{\n    return{\n        type:actionTypes.SET_STUDENT,\n        result:res\n    }\n}\nexport const updateStudent = res => {\n    return {\n        type: actionTypes.UPDATE_STUDENT,\n        result: res\n    };\n};","import { useHistory } from 'react-router-dom/cjs/react-router-dom';\nimport { links } from '../constants/links';\n\n export const  goToGroupPage =(history) =>{\n        history.push(links.GroupList);\n    }\n","import React, { useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport '../dialog.scss';\nimport './showDataDialog.scss'\nimport './addStudentDialog.scss'\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport Card from '../../Card/Card';\nimport { Field, reduxForm } from 'redux-form';\nimport renderTextField from '../../renderedFields/input';\nimport { required } from '../../../validation/validateFields';\nimport { STUDENT_FORM, TEACHER_FORM } from '../../../constants/reduxForms';\nimport { FaWindowClose } from 'react-icons/fa';\nimport renderSelectField from '../../renderedFields/select';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom';\nimport { goToGroupPage } from '../../../helper/pageRedirection';\n let AddStudentDialog =( props) => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, submitting, reset,open,groups,student,match} = props;\n    const studentId = student.id;\n    const history =useHistory();\n    useEffect(() => {\n        if (studentId) {\n            initializeFormHandler(student);\n        } else {\n            props.initialize();\n        }\n    },[studentId]);\n\n\n    const initializeFormHandler = student => {\n        props.initialize({\n            id: student.id,\n            surname: student.surname,\n            name: student.name,\n            patronymic: student.patronymic,\n            email:student.email,\n            group:student.group.id\n        });\n    };\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n\n            <FaWindowClose\n                title={t('close_label')}\n                className=\"close-dialog\"\n                variant=\"contained\"\n                onClick={() => {\n                    //reset();\n                    props.onSetSelectedCard(null);\n                    goToGroupPage(history);\n                }}\n\n            />\n            <DialogTitle id=\"confirm-dialog-title\">\n                <Card class=\"form-card teacher-form\">\n\n                    <form className=\"createTeacherForm w-100\" onSubmit={handleSubmit}>\n\n                        <h2 className=\"form-title\">\n                            {studentId ? t('edit_title') : t('create_title')}{' '}\n                            {t('student_a_label')}\n                        </h2>\n\n\n                        <Field\n                            className=\"form-field\"\n                            name=\"surname\"\n                            id=\"surname\"\n                            component={renderTextField}\n                            type=\"text\"\n                            placeholder={t('surname_placeholder')}\n                            label={t('surname_placeholder')}\n                            validate={[required]}\n                        />\n\n                        <Field\n                            className=\"form-field\"\n                            name=\"name\"\n                            id=\"name\"\n                            component={renderTextField}\n                            type=\"text\"\n                            placeholder={t('name_placeholder')}\n                            label={t('name_placeholder')}\n                            validate={[required]}\n                        />\n\n                        <Field\n                            className=\"form-field\"\n                            name=\"patronymic\"\n                            id=\"patronymic\"\n                            component={renderTextField}\n                            type=\"text\"\n                            placeholder={t('patronymic_placeholder')}\n                            label={t('patronymic_placeholder')}\n                            validate={[required]}\n                        />\n\n\n                        <Field\n                            className=\"form-field\"\n                            name=\"email\"\n                            id=\"email\"\n                            component={renderTextField}\n                            type=\"email\"\n                            placeholder={t('email_field')}\n                            label={t('email_field')}\n                            validate={[required]}\n                        />\n                        {studentId?\n\n                            <Field\n                                className='form-field'\n                                component={renderSelectField}\n                                name='group'\n                                label={t('type_label')}\n                                validate={[required]}>\n                                defaultValue={student.group.id}\n                                {groups.map(group => (\n                                    <option key={group.id} value={group.id}>\n                                        {group.title}\n                                    </option>\n                                ))}\n                            </Field>\n                            :null\n                        }\n\n\n                        <div className=\"form-buttons-container\">\n                            <Button\n                                className=\"buttons-style\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={pristine || submitting}\n                                type=\"submit\"\n                            >\n                                {t('save_button_label')}\n                            </Button>\n                            <Button\n                                className=\"buttons-style\"\n                                variant=\"contained\"\n                                disabled={pristine || submitting}\n                                onClick={() => {\n                                   reset();\n                                   goToGroupPage(history);\n                                    //props.onSetSelectedCard(null);\n                                }}\n                            >\n                                {studentId?t('cancel_button_label'):t('clear_button_label')}\n                            </Button>\n                        </div>\n                    </form>\n                </Card>\n            </DialogTitle>\n        </Dialog>\n    );\n};\n\nAddStudentDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\nconst mapStateToProps = state => ({\n    student: state.students.student,\n    groups: state.groups.groups,\n    group: state.groups.group,\n});\n\n\n\nAddStudentDialog = reduxForm({\n    form: STUDENT_FORM\n})(AddStudentDialog);\nexport default connect(mapStateToProps, {})(AddStudentDialog);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { getTeacherFullName } from './renderTeacher';\nimport { useTranslation } from 'react-i18next';\nimport { FaEnvelope } from 'react-icons/fa';\nimport TableHead from '@material-ui/core/TableHead';\nimport { Checkbox, withStyles } from '@material-ui/core';\nimport { FaEdit } from 'react-icons/all';\nimport { Delete } from '@material-ui/icons';\nimport ConfirmDialog from '../share/modals/dialog';\nimport  AddStudentDialog  from '../share/modals/modal/AddStudentDialog';\nimport { selectStudentService } from '../services/studentService';\nimport './renderStudentTable.scss'\nimport { links } from '../constants/links';\nimport { connect } from 'react-redux';\nimport {Link} from 'react-router-dom';\n\nconst useStyles1 = makeStyles((theme) => ({\n    root: {\n        flexShrink: 0,\n        marginLeft: theme.spacing(2.5),\n    },\n}));\n\nfunction RenderStudentTableActions(props) {\n    const classes = useStyles1();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onPageChange } = props;\n\n    const handleFirstPageButtonClick = (event) => {\n        onPageChange(event, 0);\n    };\n\n    const handleBackButtonClick = (event) => {\n        onPageChange(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event) => {\n        onPageChange(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event) => {\n        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.root}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nRenderStudentTableActions.propTypes = {\n    count: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nconst useStyles2 = makeStyles({\n    table: {\n        minWidth: 500,\n    },\n});\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.white,\n        color: theme.palette.common.black,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport default function RenderStudentTable(props) {\n    const ALL_ROWS=-1;\n    const classes = useStyles2();\n    const {students,onDeleteStudent,onSubmit,group,\n           match,student,checkBoxStudents,handleCheckElement,\n           handleAllChecked,handleAllClear,handleChangeCheckedAllBtn,\n        handleClearCheckedAllBtn,checkedAllBtn,handleAllCheckedBtn}=props;\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [openDeleteDialog,setOpenDeleteDialog]=useState(false);\n    const [openEditDialog,setOpenEditDialog]=useState(false);\n    const { t } = useTranslation('formElements');\n    useEffect(()=>{\n        if(match.path.includes(links.Student)&&match.path.includes(links.Edit)) {\n            handleEdit(student.id)\n        }\n    },[props.group.id])\n    useEffect(()=>{\n        if(match.path.includes(links.Student)&&match.path.includes(links.Delete)) {\n            setOpenDeleteDialog(true)\n        }\n    },[props.group.id]);\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, students.length - page * rowsPerPage);\n\n\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n        handleAllClear();\n        handleClearCheckedAllBtn();\n\n    };\n    const sendMail = (email) => {\n        const mailto =\n            `mailto:${email}`;\n        window.location.href = mailto;\n    }\n    const deleteStudent = (student) => {\n        setOpenDeleteDialog(false);\n        onDeleteStudent(student);\n    }\n    const handleEdit=(studentId)=>{\n        setOpenEditDialog(true);\n        selectStudentService(studentId)\n    }\n    const handleCloseEditDialog=()=>{\n        setOpenEditDialog(false);\n        selectStudentService(null)\n    }\n    const handleSubmit=(data)=>{\n        setOpenEditDialog(false);\n        const sendObject={...data,prevGroup:group}\n        onSubmit(sendObject);\n    }\n    const getCorrectRowCount = (pageItemsCount) => {\n        const resRows=checkBoxStudents.length-pageItemsCount*page;\n       if  (pageItemsCount>resRows||pageItemsCount===ALL_ROWS){\n         return   resRows;\n       }\n       return pageItemsCount;\n    }\nconst handleAllOnPageClick = (event) => {\n        const rowsCount=getCorrectRowCount(rowsPerPage)\n        handleChangeCheckedAllBtn();\n        handleAllChecked(event,rowsCount,page,rowsPerPage);\n}\n    const detectCheckingCheckAllBtn=()=>{\n        const rowsCount=getCorrectRowCount(rowsPerPage);\n        handleAllCheckedBtn (rowsCount,page,rowsPerPage);\n    }\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n\n\n    };\n    const handleCheckElem = (event) => {\n        handleCheckElement(event);\n        detectCheckingCheckAllBtn();\n    }\n    useEffect(()=>{\n        detectCheckingCheckAllBtn()\n    },[page])\n\n\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"custom pagination table\">\n\n                <TableHead>\n\n                    <TableRow>\n                        <StyledTableCell className=\"check-box\">\n                            <span className={'checked-all'}>\n                            <input\n                                id={'checked-all-input'}\n                                type=\"checkbox\"\n                                checked={checkedAllBtn}\n                                onClick={handleAllOnPageClick}\n                                value=\"checkedAll\"\n                                title={`${t('select_all')}`}\n                            />\n                            </span>\n                        </StyledTableCell>\n                        <StyledTableCell>{t('student_label')}</StyledTableCell>\n                        <StyledTableCell>\n                            <FaEnvelope\n                                className=\"svg-btn send-message\"\n                                title={`${t('send_letter_title')}`}\n                            />\n                        </StyledTableCell>\n                        <StyledTableCell>{t('student_actions')}</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n\n                <TableBody>\n                    {(rowsPerPage > 0\n                            ? checkBoxStudents.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            : checkBoxStudents\n                    ).map((student) => (\n                        <StyledTableRow key={student.id}>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                <input\n                                    key={student.id}\n                                    onClick={handleCheckElem}\n                                    type=\"checkbox\"\n                                    checked={student.checked}\n                                    value={student.id}\n                                    className={'checked-box'}\n                                    title={`${t(\"select_student\")} ${getTeacherFullName(student)}`}\n                                />\n                            </StyledTableCell>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                {getTeacherFullName(student)}\n                            </StyledTableCell>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                <span>\n                                   <button className=\"send-letter-button\"\n                                       title={`${t('send_letter_title')} ${student.email}`}\n                                       onClick={()=>sendMail(student.email)}\n                                   >\n                                       {student.email}\n                                   </button>\n                                </span>\n\n                            </StyledTableCell>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                <span className=\"edit-cell\">\n                                     <Link to={`${links.GroupList}${links.Group}/${group.id}${links.Student}/${student.id}${links.Edit}`}>\n                                    <FaEdit\n                                        className=\"edit-button\"\n                                        title={t('edit_title')}\n                                        onClick={() => handleEdit(student.id)}\n                                    />\n                                     </Link>\n                                     <Link to={`${links.GroupList}${links.Group}/${group.id}${links.Student}/${student.id}${links.Delete}`}>\n                                <Delete\n                                    title={t('delete-title')}\n                                    className=\"delete-button\"\n                                    onClick={()=>setOpenDeleteDialog(true)}\n                                />\n                                     </Link>\n                                </span>\n\n                            </StyledTableCell>\n\n                            <AddStudentDialog\n                                open={openEditDialog}\n                                onSubmit={handleSubmit}\n                                onSetSelectedCard={handleCloseEditDialog}\n                                match={match}\n                            />\n\n                            <ConfirmDialog\n                                selectedValue={''}\n                                cardId={student}\n                                whatDelete={'student'}\n                                open={openDeleteDialog}\n                                onClose={deleteStudent}\n                            />\n                        </StyledTableRow>\n                    ))}\n\n                    {emptyRows > 0 && (\n                        <StyledTableRow style={{ height: 53 * emptyRows }}>\n                            <TableCell colSpan={6} />\n                        </StyledTableRow>\n                    )}\n                </TableBody>\n                <TableFooter>\n                    <StyledTableRow>\n                        <TablePagination\n                            labelRowsPerPage={`${t('rows_per_page')}`}\n                            rowsPerPageOptions={[5, 10, 25, { label: `${t('all_page')}`, value: ALL_ROWS }]}\n                            colSpan={3}\n                            count={students.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            SelectProps={{\n                                inputProps: { 'aria-label': 'rows per page' },\n                                native: true,\n                            }}\n                            onPageChange={handleChangePage}\n                            onRowsPerPageChange={handleChangeRowsPerPage}\n                            ActionsComponent={RenderStudentTableActions}\n                        />\n                    </StyledTableRow>\n                </TableFooter>\n            </Table>\n        </TableContainer>\n    );\n}\n\nconst mapStateToProps = state => ({\n    student:state.students.student\n});\n\n connect(mapStateToProps, {})(RenderStudentTable);","import axios from '../helper/axios';\nimport { STUDENTS_TO_GROUP_FILE } from '../constants/axios';\nimport i18n from '../helper/i18n';\nimport { successHandler } from '../helper/handlerAxios';\n\nexport const uploadStudentsToGroupFile = (file, groupId) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    axios\n        .post(`${STUDENTS_TO_GROUP_FILE}${groupId}`, formData)\n        .then((res) => {\n            let students = res.data.length;\n            students += students !== 1 ? ` ${i18n.t('formElements:students_file_label')}` : ` ${i18n.t('formElements:student_file_label')}`;\n            successHandler(\n                i18n.t('serviceMessages:file_backend_success_operation', {\n                    cardType: students,\n                    actionType: i18n.t('serviceMessages:file_label')\n                })\n            );\n        })\n        .catch((err) => alert('File Upload Error'));\n};","import React, { useState } from 'react';\nimport { uploadStudentsToGroupFile } from '../../services/uploadFile';\nimport { Dialog, DialogTitle } from '@material-ui/core';\nimport './UploadFile.scss';\nimport { FaWindowClose } from 'react-icons/fa';\nimport { useTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport { setLoadingService } from '../../services/loadingService';\n\nexport const UploadFile = (props) => {\n    const { t } = useTranslation('formElements');\n    const [selectedFile, setSelectedFile] = useState(null);\n    const fileInputRef = React.useRef();\n    const { group: { id }, open, handleCloseDialogFile } = props;\n\n    const changeHandler = (event) => {\n        setSelectedFile(event.target.files[0]);\n    };\n\n    const handleSubmission = () => {\n        setLoadingService(true);\n        uploadStudentsToGroupFile(selectedFile, id);\n        fileInputRef.current.value = '';\n        setSelectedFile(null);\n    };\n\n    const setDisabledSendButton = () => {\n        return selectedFile === null;\n    };\n    return (\n        <Dialog\n\n            disableBackdropClick={true}\n            aria-labelledby='confirm-dialog-title'\n            open={open}\n        >\n            <DialogTitle className='upload-dialog' id='confirm-dialog-title'>\n                <FaWindowClose\n                    title={t('close_label')}\n                    className='close-dialog'\n                    variant='contained'\n                    onClick={handleCloseDialogFile}\n\n                />\n                <div>\n                    <input type='file' name='file' accept='.txt, .csv' onChange={changeHandler} ref={fileInputRef} />\n                    {selectedFile ? (\n                        <div>\n                            <p>{`${t('common:name_label')}: ${selectedFile.name}`}</p>\n                            <p>{`${t('common:type_label')}: ${selectedFile.type}`}</p>\n                            <p>{`${t('common:byte_size_label')}: ${selectedFile.size}`}</p>\n                            {/*<p>{`${t('common:last_modified_date')}: ${selectedFile.lastModifiedDate.toLocaleDateString()}`}</p>*/}\n                        </div>\n                    ) : (\n                        <p>{t('common:select_file_label')}</p>\n                    )}\n                    <div>\n                        <Button\n                            className='dialog-button'\n                            variant='contained'\n                            onClick={handleSubmission}\n                            color='primary'\n                            title={t('common:upload_title')}\n                            disabled={setDisabledSendButton()}\n                        >\n                            {t('common:upload_title')}\n                        </Button>\n                    </div>\n                </div>\n            </DialogTitle>\n\n        </Dialog>\n    );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport '../dialog.scss';\nimport './showDataDialog.scss';\n\nimport i18n from '../../../helper/i18n';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport RenderStudentTable from '../../../helper/renderStudentTable';\nimport { getAllStudentsByGroupId, updateStudentService } from '../../../services/studentService';\nimport Select from 'react-select';\nimport { isObjectEmpty } from '../../../helper/ObjectRevision';\nimport { successHandler } from '../../../helper/handlerAxios';\nimport { UploadFile } from '../../../components/UploadFile/UploadFile';\n\n\nexport const ShowStudentsDialog = props => {\n    const { onClose, cardId, open, onDeleteStudent, students, onSubmit, match, student, groups, group } = props;\n    const [checkBoxStudents, setCheckBoxStudents] = useState([]);\n    const [checkedAll, setCheckedAll] = useState(false);\n    const [openUploadFile, setOpenUploadFile] = useState(false);\n    const [showStudentList, setShowStudentList] = useState(false);\n    const setDefaultGroupOption = () => {\n        return { value: `${group.id}`, label: `${group.title}`, ...group };\n    };\n    const [groupOption, setGroupOption] = useState({});\n    const [defaultGroup, setDefaultGroup] = useState({});\n    useEffect(() => {\n        if (group.id !== null)\n            setDefaultGroup(setDefaultGroupOption());\n    }, [group.id]);\n    const { t } = useTranslation('formElements');\n    useEffect(() => {\n        getAllStudentsByGroupId(props.group.id);\n\n\n    }, [open]);\n    useEffect(() => {\n        getAllStudentsByGroupId(props.group.id);\n\n\n    }, [openUploadFile]);\n    useEffect(() => {\n        parseStudentToCheckBox();\n    }, [props.students]);\n\n    const setGroupsOption = () => {\n        return groups !== undefined ? groups.map(item => {\n            return { value: item.id, label: `${item.title}`, ...item };\n        }) : null;\n\n    };\n\n    const groupsOption = setGroupsOption();\n    const handleClose = () => {\n        onClose(cardId);\n    };\n\n\n    const parseStudentToCheckBox = () => {\n        const studentsCheckBox = [...students];\n        const res = studentsCheckBox.map((item) => {\n            return { ...item, checked: false };\n        });\n        setCheckBoxStudents(res);\n    };\n    const handleCheckElement = (event) => {\n        let studentsTmp = [...checkBoxStudents];\n        studentsTmp.forEach(student => {\n            if (student.id === Number(event.target.value))\n                student.checked = event.target.checked;\n        });\n        setCheckBoxStudents(studentsTmp);\n    };\n    const handleAllChecked = (event, pageItemsCount, page, rowsPerPage) => {\n        let studentsTmp = [...checkBoxStudents];\n        for (let i = (page) * rowsPerPage; i < pageItemsCount + (page) * rowsPerPage; i++) {\n            studentsTmp[i].checked = event.target.checked;\n        }\n        setCheckBoxStudents(studentsTmp);\n    };\n    const handleAllCheckedBtn = (pageItemsCount, page, rowsPerPage) => {\n        let studentsTmp = [...checkBoxStudents];\n        let start = (page) * rowsPerPage;\n        let finish = pageItemsCount + (page) * rowsPerPage;\n        while (start < finish) {\n            if (studentsTmp[start].checked) {\n                start++;\n            } else {\n                break;\n            }\n        }\n        setCheckedAll(start === finish && start !== 0);\n    };\n    const handleAllClear = () => {\n        let studentsTmp = [...checkBoxStudents];\n        studentsTmp.forEach(student => {\n            if (student.checked) {\n                student.checked = false;\n            }\n        });\n        setCheckBoxStudents(studentsTmp);\n    };\n    const handleChangeCheckedAllBtn = () => {\n        setCheckedAll(prevState => !prevState);\n    };\n    const handleClearCheckedAllBtn = () => {\n        setCheckedAll(false);\n    };\n\n\n    const setCurrentGroupOption = (group) => {\n        if (group.id === defaultGroup.id) {\n            getExistingGroupStudent();\n        }\n        setGroupOption(group);\n    };\n    const isChecked = ({ checked }) => {\n        return checked;\n    };\n    const setSelectDisabled = () => {\n        let resChecked = true;\n        for (let i = 0; i < checkBoxStudents.length; i++) {\n            if (isChecked(checkBoxStudents[i])) {\n                resChecked = false;\n                break;\n            }\n        }\n        return resChecked;\n    };\n    const isChooseCurrentGroup = () => {\n        if (isObjectEmpty(groupOption)) {\n            return true;\n        }\n        return groupOption.id === defaultGroup.id;\n    };\n    const setDisabledMoveToGroupBtn = () => {\n        return isChooseCurrentGroup();\n    };\n    const changeStudentItem = (group, student) => {\n        let resData = {};\n        if (student.checked) {\n            const { checked, ...res } = student;\n            resData = { ...res, group: { id: group.id } };\n        }\n        return resData;\n    };\n    const getExistingGroupStudent = () => {\n        return successHandler(\n            i18n.t('serviceMessages:students_exist_in_this_group', {\n                cardType: i18n.t('common:student_title'),\n                actionType: i18n.t('serviceMessages:student_label')\n            })\n        );\n    };\n    const clearSelection = () => {\n        // handleClearCheckedAllBtn();\n        onClose('');\n        setGroupOption({});\n        setShowStudentList(false);\n    };\n    const handleSubmitGroupStudents = () => {\n        if (isObjectEmpty(groupOption)) {\n            getExistingGroupStudent();\n            return;\n        }\n\n        const { value, label, ...res } = groupOption;\n        const currentStudents = [...checkBoxStudents];\n        const resData = [];\n        const prevGroup = { id: defaultGroup.id };\n        for (let i = 0; i < currentStudents.length; i++) {\n            const resItem = changeStudentItem(res, currentStudents[i]);\n            if (!isObjectEmpty(resItem)) {\n                resData.push(resItem);\n            }\n        }\n        ;\n        resData.forEach(item => updateStudentService({ ...item, prevGroup }));\n\n        clearSelection();\n    };\n    const cancelChoosing = () => {\n        clearSelection();\n    };\n    const getDialog = () => {\n        setShowStudentList(true);\n    };\n    const handleOpenDialogFile = () => {\n        setOpenUploadFile(true);\n    };\n    const handleCloseDialogFile = () => {\n        setOpenUploadFile(false);\n    };\n    return (\n        <>\n\n            <Dialog\n                disableBackdropClick={true}\n                onClose={handleClose}\n                aria-labelledby='confirm-dialog-title'\n                open={open}\n            >\n\n                <DialogTitle id='confirm-dialog-title'>\n                    <>\n\n                        <>\n\n\n                            {students.length === 0 ?\n\n                                <>\n\n                                    <h2 className='title-align'>{`${t('group_label')} - `}<span>{`${props.group.title}`}</span>\n                                    </h2>\n                                    {t('no_exist_students_in_group')}\n                                </>\n\n                                :\n                                <span className='table-student-data'>\n                                    <h3 className='title-align'><span>{students.length !== 1 ? `${t('students_label')} ` : `${t('student_label')} `}</span>{`${t('group_students')} `}<span>{`${props.group.title}`}</span></h3>\n\n                                    <RenderStudentTable group={props.group} onDeleteStudent={onDeleteStudent}\n                                                        students={students} onSubmit={onSubmit}\n                                                        match={match}\n                                                        student={props.student}\n                                                        checkBoxStudents={checkBoxStudents}\n                                                        handleCheckElement={handleCheckElement}\n                                                        handleAllChecked={handleAllChecked}\n                                                        handleAllClear={handleAllClear}\n                                                        handleChangeCheckedAllBtn={handleChangeCheckedAllBtn}\n                                                        handleClearCheckedAllBtn={handleClearCheckedAllBtn}\n                                                        checkedAllBtn={checkedAll}\n                                                        handleAllCheckedBtn={handleAllCheckedBtn}\n                                    />\n                            </span>\n                            }\n                        </>\n                    </>\n                </DialogTitle>\n                <div className='buttons-container'>\n                    {<UploadFile group={group} open={openUploadFile} handleCloseDialogFile={handleCloseDialogFile} />}\n                    <Button\n                        className={students.length !== 0 ? 'student-dialog-button-data' : 'student-dialog-button-no-data'}\n                        variant='contained'\n                        onClick={handleOpenDialogFile}\n                        color='primary'\n                        title={i18n.t('upload_from_file')}\n                    >\n                        {i18n.t('common:upload_from_file_title')}\n                    </Button>\n                    {students.length !== 0 ?\n                        <Button\n                            className='student-dialog-button-data'\n                            variant='contained'\n                            onClick={getDialog}\n                            color='primary'\n                            disabled={setSelectDisabled()}\n                            title={i18n.t('choose_group_title')}\n                        >\n                            {i18n.t('choose_group_title')}\n                        </Button>\n                        : null}\n                    <Button\n                        className={students.length !== 0 ? 'student-dialog-button-data' : 'student-dialog-button-no-data'}\n                        variant='contained'\n                        onClick={() => onClose('')}\n                        color='primary'\n                        title={i18n.t('close_title')}\n                    >\n                        {i18n.t('common:close_title')}\n                    </Button>\n                </div>\n            </Dialog>\n\n\n            {showStudentList && <Dialog\n                disableBackdropClick={true}\n                onClose={handleClose}\n                aria-labelledby='confirm-dialog-title'\n                open={open}\n            >\n\n                <DialogTitle id='confirm-dialog-title' className={'group-students'}>\n                    <>\n                        <h6>\n                            <Select\n                                className={'group-select'}\n                                defaultValue={defaultGroup}\n                                options={groupsOption}\n                                onChange={setCurrentGroupOption}\n                            />\n                        </h6>\n                    </>\n                    <div className='buttons-container'>\n                        <Button\n\n                            variant='contained'\n                            onClick={handleSubmitGroupStudents}\n                            color='primary'\n                            title={i18n.t('move_to_group_title')}\n                        >\n                            {i18n.t('common:move_to_group_title')}\n                        </Button>\n                        <Button\n\n                            variant='contained'\n                            onClick={cancelChoosing}\n                            color='primary'\n                            title={i18n.t('cancel_title')}\n                        >\n                            {i18n.t('cancel_title')}\n                        </Button>\n                    </div>\n                </DialogTitle>\n\n            </Dialog>}\n        </>\n    );\n};\n\nShowStudentsDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\nconst mapStateToProps = state => ({\n    //currentGroup:state.groups.currentGroup\n});\n\nexport default connect(mapStateToProps, {})(ShowStudentsDialog);\n\n","export const getShortTitle=(title,MAX_LENGTH)=>{\n    return title.length>MAX_LENGTH? `${ title.slice(0, MAX_LENGTH) }...`:title;\n}","import { connect } from 'react-redux';\nimport { FaEdit, FaUserPlus, FaUsers } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './GroupList.scss';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport AddGroup from '../../components/AddGroupForm/AddGroupForm';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport {\n    clearGroupService,\n    getDisabledGroupsService,\n    handleGroupService,\n    removeGroupCardService,\n    selectGroupService,\n    setDisabledGroupService,\n    setEnabledGroupService,\n    showAllGroupsService\n} from '../../services/groupService';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\nimport { disabledCard } from '../../constants/disabledCard';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\n\nimport {\n    createStudentService,\n    deleteStudentService,\n    getAllStudentsByGroupId, selectStudentService,\n    updateStudentService\n} from '../../services/studentService';\nimport { ShowStudentsDialog } from '../../share/modals/modal/showStudentsDialog';\nimport AddStudentDialog from '../../share/modals/modal/AddStudentDialog';\nimport { links } from '../../constants/links';\nimport './GroupList.scss';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom';\nimport '../../router/Router.scss';\nimport { goToGroupPage } from '../../helper/pageRedirection';\nimport { getShortTitle } from '../../helper/shortTitle';\n\nlet GroupList = props => {\n\n    const { isSnackbarOpen, snackbarType, snackbarMessage, students, groups, group, match, student } = props;\n    const { t } = useTranslation('formElements');\n\n    const [open, setOpen] = useState(false);\n    const [groupId, setGroupId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n    const [addStudentDialog, setAddStudentDialog] = useState(false);\n\n    const [disabled, setDisabled] = useState(false);\n    const [showStudents, setShowStudents] = useState(false);\n\n    const SearchChange = setTerm;\n    const history = useHistory();\n    // useEffect(()=>getAllStudentsByGroupId(groupId),[groupId])\n    useEffect(()=>{\n        getDisabledGroupsService();\n    },[])\n    useEffect(() => {\n        if (match.path.includes(links.Edit)) {\n            selectGroupService(match.params.id);\n        }\n\n    }, [props.groups.length]);\n    useEffect(() => {\n        if (match.path.includes(links.Delete)) {\n            handleClickOpen(props.match.params.id);\n        }\n\n    }, [props.groups.length]);\n    useEffect(() => {\n        if (match.path.includes(links.AddStudent)) {\n            handleAddUser(match.params.id);\n        }\n\n    }, [props.groups.length]);\n    useEffect(() => {\n        if (match.path.includes(links.SetDisable)) {\n            handleSetDisable(props.match.params.id);\n        }\n\n    }, []);\n    useEffect(() => {\n        if (match.path.includes(links.ShowStudents)) {\n            onShowStudentByGroup(Number(match.params.id));\n        }\n    }, [props.students.length]);\n    useEffect(() => {\n        if (match.path.includes(links.Student) && match.path.includes(links.Edit)) {\n            onShowStudentByGroup(Number(match.params.id));\n            selectStudentService(Number(match.params.idStudent));\n        }\n    }, [props.students.length]);\n    useEffect(() => {\n        if (match.path.includes(links.Student) && match.path.includes(links.Delete)) {\n            onShowStudentByGroup(Number(match.params.id));\n            selectStudentService(Number(match.params.idStudent));\n        }\n    }, [props.students.length]);\n\n    useEffect(() => showAllGroupsService(), []);\n    // useEffect(() => getDisabledGroupsService(), []);\n    const handleFormReset = () => {\n        clearGroupService();\n    };\n    const submit = values => handleGroupService(values);\n    const handleEdit = groupId => selectGroupService(groupId);\n    const visibleGroups = disabled\n        ? search(props.disabledGroups, term, ['title'])\n        : search(props.groups, term, ['title']);\n\n    const handleClickOpen = groupId => {\n        setGroupId(groupId);\n        setOpen(true);\n    };\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n    const handleAddUser = id => {\n        setGroupId(id);\n        setAddStudentDialog(true);\n    };\n\n    const handleClose = groupId => {\n        setOpen(false);\n        if (!groupId) {\n            goToGroupPage(history);\n            return;\n        }\n        if (hideDialog) {\n            if (disabled) {\n                const group = props.disabledGroups.find(\n                    group => group.id === groupId\n                );\n                setEnabledGroupService(group);\n            } else {\n                const group = groups.find(group => Number(group.id) === Number(groupId));\n                setDisabledGroupService(group);\n            }\n        } else {\n            removeGroupCardService(groupId);\n        }\n        setHideDialog(null);\n        goToGroupPage(history);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n    const studentSubmit = (data) => {\n        if (data.id !== undefined) {\n            const sendData = { ...data, group: { id: data.group } };\n            updateStudentService(sendData);\n        } else {\n            const sendData = { ...data, group: { id: groupId } };\n            createStudentService(sendData);\n        }\n        setAddStudentDialog(false);\n        goToGroupPage(history);\n    };\n\n    const selectStudentCard = () => {\n        setAddStudentDialog(false);\n    };\n    const onCloseShowStudents = () => {\n        setShowStudents(false);\n        goToGroupPage(history);\n    };\n    const onShowStudentByGroup = (groupId) => {\n        setShowStudents(true);\n        selectGroupService(groupId);\n        getAllStudentsByGroupId(groupId);\n    };\n    const onDeleteStudent = (student) => {\n        if (student !== '') {\n            deleteStudentService(student);\n        }\n    };\n    const handleSetDisable = (groupId) => {\n        setHideDialog(\n            disabledCard.HIDE\n        );\n        handleClickOpen(groupId);\n    };\n    const getGroupTitle = (title) => {\n        const MAX_LENGTH = 5;\n        return getShortTitle(title, MAX_LENGTH);\n    };\n\n    return (\n\n        <>\n            <NavigationPage name={navigationNames.GROUP_LIST} val={navigation.GROUPS} />\n\n            <ConfirmDialog\n                isHide={hideDialog}\n                cardId={groupId}\n                whatDelete={'group'}\n                open={open}\n                onClose={handleClose}\n            />\n            <AddStudentDialog\n                open={addStudentDialog}\n                onSubmit={studentSubmit}\n                onSetSelectedCard={selectStudentCard}\n            />\n            <ShowStudentsDialog\n                onClose={onCloseShowStudents}\n                open={showStudents}\n                students={students}\n                group={group}\n                onDeleteStudent={onDeleteStudent}\n                onSubmit={studentSubmit}\n                match={match}\n                student={student}\n                groups={groups}\n            />\n\n            <div className='cards-container'>\n                <aside className='search-list__panel'>\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    {disabled ? (\n                        ''\n                    ) : (\n\n                        <AddGroup\n                            match={match}\n                            className='form'\n                            onSubmit={submit}\n                            onReset={handleFormReset}\n                        />\n                    )}\n                </aside>\n                <div className='group-wrapper group-list'>\n                    {visibleGroups.length === 0 && (\n                        <NotFound name={t('group_y_label')} />\n                    )}\n                    {visibleGroups.map(group => (\n                        <section key={group.id} className='group-card'>\n\n                            <div className='group__buttons-wrapper'>\n                                {!disabled ? (\n                                    <>\n                                        <Link to={`${links.GroupList}${links.Group}/${group.id}${links.SetDisable}`}>\n                                            <GiSightDisabled\n                                                className='group__buttons-hide link-href'\n                                                title={t('common:set_disabled')}\n                                                onClick={() => {\n                                                    handleSetDisable(group.id);\n                                                }}\n                                            />\n                                        </Link>\n                                        <Link to={`${links.GroupList}${links.Group}${links.Edit}/${group.id}`}>\n                                            <FaEdit\n                                                className='group__buttons-edit link-href'\n                                                title={t('common:edit')}\n                                                onClick={() => handleEdit(group.id)}\n                                            />\n                                        </Link>\n                                    </>\n                                ) : (\n                                    <IoMdEye\n                                        className='group__buttons-hide link-href'\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(group.id);\n                                        }}\n                                    />\n                                )}\n                                <Link to={`${links.GroupList}${links.Group}${links.Delete}/${group.id}`}>\n                                    <MdDelete\n                                        className='group__buttons-delete link-href'\n                                        title={t('delete_title')}\n                                        onClick={() => handleClickOpen(group.id)}\n                                    />\n                                </Link>\n                                <Link to={`${links.GroupList}${links.Group}/${group.id}${links.AddStudent}`}>\n                                    <FaUserPlus\n                                        title={t('formElements:student_add_label')}\n                                        className='svg-btn copy-btn align-left info-btn'\n                                        onClick={() => {\n                                            handleAddUser(group.id);\n                                            // setCurrentGroup(group);\n                                        }}\n                                    />\n                                </Link>\n\n                            </div>\n                            <p className='group-card__description'>\n                                {t('group_label') + ':'}\n                            </p>\n                            <h1 className='group-card__number'>\n                                {getGroupTitle(group.title)}\n                            </h1>\n                            <Link to={`${links.GroupList}${links.Group}/${group.id}${links.ShowStudents}`}>\n                            <span className='students-group'>\n                                <FaUsers\n                                    title={t('formElements:show_students')}\n                                    className='svg-btn copy-btn align-left info-btn students'\n                                    onClick={\n                                        () => {\n                                            onShowStudentByGroup(group.id);\n                                        }\n                                    }\n                                />\n                            </span>\n                            </Link>\n\n                        </section>\n                    ))}\n                </div>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    groups: state.groups.groups,\n    group: state.groups.group,\n    disabledGroups: state.groups.disabledGroups,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message,\n    students: state.students.students,\n    student: state.students.student\n});\n\nexport default connect(mapStateToProps, {})(GroupList);\n","import React, {useEffect} from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport renderTextField from '../../share/renderedFields/input';\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport { ROOM_FORM } from '../../constants/reduxForms';\n\nimport { required, uniqueRoomName } from '../../validation/validateFields';\nimport Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\nimport Card from '../../share/Card/Card';\n\nimport './AddRoomForm.scss';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nlet AddRoom = props => {\n    const { t } = useTranslation('formElements')\n    const { handleSubmit, pristine, submitting, onReset,oneRoom } = props;\n\n    useEffect(() => {\n        if (props.oneRoom) {\n            if (props.oneRoom.id) {\n                props.initialize({\n                    name: props.oneRoom.name,\n                    type: props.oneRoom.type.id,\n                    id: props.oneRoom.id\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [props.oneRoom]);\n\n\n\n\n    return (\n        <Card class='form-card room-form'>\n            <form className='createGroupForm w-100' onSubmit={handleSubmit}>\n                <h2 className='form-title'>\n                    {props.oneRoom.id\n                        ? t('edit_title')\n                        : t('create_title')\n                    }{' '}\n                    {t('room_y_label')}\n                </h2>\n                <Field\n                    type='text'\n                    name='name'\n                    component={renderTextField}\n                    placeholder={t('number_label')}\n                    className='form-field'\n                    label={t('room_label')}\n                    validate={[required, uniqueRoomName]}\n                />\n                <Field\n                    className='form-field'\n                    component={renderSelectField}\n                    name='type'\n                    label={t('type_label')}\n                    validate={[required]}>\n                    <option value={''}></option>\n                    {props.roomTypes.map(roomType => (\n                        <option key={roomType.id} value={roomType.id}>\n                            {roomType.description}\n                        </option>\n                    ))}\n                </Field>\n                <div className='form-buttons-container'>\n                    <Button\n                        className='buttons-style'\n                        variant='contained'\n                        color='primary'\n                        disabled={pristine || submitting}\n                        type='submit'>\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        className='buttons-style'\n                        variant='contained'\n                        disabled={setDisableButton(pristine,submitting,oneRoom.id)}\n                        onClick={onReset}>\n                        {getClearOrCancelTitle(oneRoom.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    oneRoom: state.rooms.oneRoom,\n    roomTypes: state.roomTypes.roomTypes\n});\n\nAddRoom = reduxForm({\n    form: ROOM_FORM\n})(AddRoom);\n\nexport default connect(mapStateToProps)(AddRoom);\n","import { store } from '../index';\nimport { ROOM_FORM_TYPE } from '../constants/reduxForms';\nimport { ROOM_TYPES_URL } from '../constants/axios';\nimport axios from '../helper/axios';\n\nimport {\n    getAllRoomTypes,\n    deleteType,\n    updateOneType,\n    postOneType,\n    getOneNewType\n} from '../redux/actions/roomTypes';\n\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const getAllRoomTypesService = () => {\n    axios\n        .get(ROOM_TYPES_URL)\n        .then(res => {\n            store.dispatch(getAllRoomTypes(res.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const deleteTypeService = roomTypeId => {\n    axios\n        .delete(ROOM_TYPES_URL + `/${roomTypeId}`)\n        .then(response => {\n            store.dispatch(deleteType(roomTypeId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType:\n                        i18n.t('formElements:room_label') +\n                        ' ' +\n                        i18n.t('formElements:type_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const addNewTypeService = values => {\n    if (values.id) {\n        putNewType(values);\n    } else {\n        postNewType(values);\n    }\n};\n\nexport const putNewType = values => {\n    axios\n        .put(ROOM_TYPES_URL, values)\n        .then(response => {\n            store.dispatch(updateOneType(response.data));\n            resetFormHandler(ROOM_FORM_TYPE);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType:\n                        i18n.t('formElements:room_label') +\n                        ' ' +\n                        i18n.t('formElements:type_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const postNewType = values => {\n    axios\n        .post(ROOM_TYPES_URL, values)\n        .then(response => {\n            store.dispatch(postOneType(response.data));\n            resetFormHandler(ROOM_FORM_TYPE);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType:\n                        i18n.t('formElements:room_label') +\n                        ' ' +\n                        i18n.t('formElements:type_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getOneNewTypeService = roomId => {\n    store.dispatch(getOneNewType(roomId));\n};\n","import * as actionsType from './actionsType';\nimport roomTypes from '../reducers/roomTypes';\nimport actions from 'redux-form/lib/actions';\n\nexport const postOneType = roomType => {\n    return {\n        type: actionsType.POST_NEW_TYPE,\n        result: roomType\n    };\n};\n\nexport const getAllRoomTypes = roomType => {\n    return {\n        type: actionsType.GET_ALL_ROOM_TYPES,\n        result: roomType\n    };\n};\n\nexport const deleteType = roomType => {\n    return {\n        type: actionsType.DELETE_TYPE,\n        result: roomType\n    };\n\n\n};\n\nexport const updateOneType = roomType => {\n    return {\n        type: actionsType.UPDATE_ONE_TYPE,\n        result: roomType\n    };\n};\n\nexport const getOneNewType = roomType => {\n    return {\n        type: actionsType.GET_ONE_NEW_TYPE,\n        result: roomType\n    }\n}\n\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { ROOM_FORM_TYPE } from '../../constants/reduxForms';\n\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\nimport Card from '../../share/Card/Card';\nimport { useTranslation } from 'react-i18next';\nimport renderTextField from '../../share/renderedFields/input';\nimport Button from '@material-ui/core/Button';\nimport { MdDelete } from 'react-icons/md';\nimport { FaEdit } from 'react-icons/fa';\nimport {\n    deleteTypeService,\n    getOneNewTypeService\n} from '../../services/roomTypesService';\nimport './AddNewRoomType.scss';\n\nlet NewRoomType = props => {\n    const { handleSubmit, pristine, submitting, roomTypes } = props;\n   \n\n    const [open, setOpen] = useState(false);\n    const [typeId, setTypeId] = useState(-1);\n\n    useEffect(() => {\n        let defaultValue = {};\n        if (props.oneType.id) {\n            defaultValue={ description: props.oneType.description,\n                id: props.oneType.id};\n        }\n        props.initialize(defaultValue);\n\n    }, [props.oneType]);   \n\n    const { t } = useTranslation('formElements');\n\n    const handleClickOpen = typeId => {\n        setTypeId(typeId);\n        setOpen(true);\n    };\n\n    const handleClose = typeId => {\n        setOpen(false);\n        if (!typeId) {\n            return;\n        }\n        deleteTypeService(typeId);\n    };\n\n    const handleEdit = roomId => {\n        getOneNewTypeService(roomId);\n    };\n\n    return (\n        <>\n            <ConfirmDialog\n                selectedValue={''}\n                cardId={typeId}\n                whatDelete={cardType.TYPE.toLowerCase()}\n                open={open}\n                onClose={handleClose}\n            />\n            <Card class=\"form-card room-form\">\n                <form className=\"new-type-container\" onSubmit={handleSubmit}>\n                    <Field\n                        type=\"text\"\n                        name=\"description\"\n                        component={renderTextField}\n                        placeholder={t('add_type_label')}\n                        label={t('new_type_label')}\n                        className=\"form-field\"\n                        variant=\"outlined\"\n                    />\n                    <div className='btn-style-wrapper'>\n                        <Button\n                            color=\"primary\"\n                            className=\"btn-style\"\n                            disabled={pristine || submitting}\n                            variant=\"contained\"\n                            type=\"submit\"\n                        >\n                            {t('save_button_label')}\n                        </Button>\n                    </div>\n                </form>\n\n                <ul className=\"new-types\">\n                    {roomTypes.map(roomType => (\n                        <li\n                            key={roomType.id}\n                            value={roomType.description}\n                            className=\"new-types-list\"\n                        >\n                            <span className=\"typeDescription\">\n                                {roomType.description}\n                            </span>\n                            <span className=\"buttons\">\n                                <FaEdit\n                                    className=\"btn edit\"\n                                    onClick={() => handleEdit(roomType.id)}\n                                />\n                                <MdDelete\n                                    className=\"btn delete\"\n                                    onClick={() => handleClickOpen(roomType.id)}\n                                />\n                            </span>\n                        </li>\n                    ))}\n                </ul>\n            </Card>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    oneType: state.roomTypes.oneType,\n    roomTypes: state.roomTypes.roomTypes\n});\n\nNewRoomType = reduxForm({\n    form: ROOM_FORM_TYPE\n})(NewRoomType);\n\nexport default connect(mapStateToProps)(NewRoomType);\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\nimport FreeRooms from '../FreeRooms/freeRooms';\nimport AddRoom from '../../components/AddRoomForm/AddRoomForm';\nimport NewRoomType from '../../components/AddNewRoomType/AddNewRoomType';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport Card from '../../share/Card/Card';\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport './RoomList.scss';\nimport { useTranslation } from 'react-i18next';\nimport { search } from '../../helper/search';\n\nimport {\n    createRoomService,\n    showListOfRoomsService,\n    deleteRoomCardService,\n    selectOneRoomService,\n    clearRoomOneService,\n    getDisabledRoomsService,\n    setDisabledRoomsService,\n    setEnabledRoomsService\n} from '../../services/roomService';\n\nimport {\n    getAllRoomTypesService,\n    addNewTypeService\n} from '../../services/roomTypesService';\n\nimport NotFound from '../../share/NotFound/NotFound';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\n\nimport { disabledCard } from '../../constants/disabledCard';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst RoomList = props => {\n    const { rooms } = props;\n\n    useEffect(() => {\n        showListOfRoomsService();\n    }, []);\n\n    useEffect(() => {\n        getAllRoomTypesService();\n    }, []);\n\n    useEffect(() => {\n        getDisabledRoomsService();\n    }, []);\n\n    const { t } = useTranslation('formElements');\n    const [open, setOpen] = useState(false);\n    const [roomId, setRoomId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n\n    const [disabled, setDisabled] = useState(false);\n\n    const createRoom = values => {\n        const description = props.roomTypes.find(\n            type => type.id == values.type\n        );\n        values.typeDescription = description.description;\n        createRoomService(values);\n    };\n\n    const editHandler = roomId => {\n        selectOneRoomService(roomId);\n    };\n\n    const handleFormReset = () => {\n        clearRoomOneService();\n    };\n\n    const handleClickOpen = roomId => {\n        setRoomId(roomId);\n        setOpen(true);\n    };\n\n    const handleClose = roomId => {\n        setOpen(false);\n        if (!roomId) {\n            return;\n        }\n        if (hideDialog) {\n            if (disabled) {\n                const room = props.disabledRooms.find(\n                    room => room.id === roomId\n                );\n                setEnabledRoomsService(room);\n            } else {\n                const room = props.rooms.find(room => room.id === roomId);\n                setDisabledRoomsService(room);\n            }\n        } else {\n            deleteRoomCardService(roomId);\n        }\n        setHideDialog(null);\n    };\n\n    const submitType = values => {\n        addNewTypeService(values);\n    };\n\n    const visibleItems = disabled\n        ? search(props.disabledRooms, term, ['name'])\n        : search(rooms, term, ['name']);\n\n    const SearchChange = term => {\n        setTerm(term);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.ROOM_LIST} val={navigation.ROOMS}/>\n            <ConfirmDialog\n                cardId={roomId}\n                whatDelete={cardType.ROOM.toLowerCase()}\n                open={open}\n                isHide={hideDialog}\n                onClose={handleClose}\n            />\n            <div className=\"cards-container\">\n                <aside className=\"search-list__panel\">\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    {disabled ? (\n                        ''\n                    ) : (\n                        <>\n                            <AddRoom\n                                onSubmit={createRoom}\n                                onReset={handleFormReset}\n                            />\n                            <NewRoomType\n                                className=\"new-type\"\n                                onSubmit={submitType}\n                            />\n                        </>\n                    )}\n                </aside>\n                <section className=\"container-flex-wrap wrapper\">\n                    {visibleItems.length === 0 && (\n                        <NotFound name={t('room_y_label')} />\n                    )}\n                    {visibleItems.map((room, index) => (\n                        <Card key={index} {...room} class=\"room-card done-card\">\n                            <div className=\"cards-btns\">\n                                {!disabled ? (\n                                    <>\n                                        <GiSightDisabled\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_disabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.HIDE\n                                                );\n                                                handleClickOpen(room.id);\n                                            }}\n                                        />\n                                        <FaEdit\n                                            className=\"svg-btn\"\n                                            onClick={() => editHandler(room.id)}\n                                        />\n                                    </>\n                                ) : (\n                                    <IoMdEye\n                                        className=\"svg-btn copy-btn\"\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(room.id);\n                                        }}\n                                    />\n                                )}\n\n                                <MdDelete\n                                    className=\"svg-btn\"\n                                    onClick={() => handleClickOpen(room.id)}\n                                />\n                            </div>\n\n                            <span> {t('room_label') + ':'} </span>\n                            <h2 className=\"room-card__number\">{room.name}</h2>\n                            <span>{t('type_label') + ':'}</span>\n                            <h2 className=\"room-card__number\">\n                                {room.type.description}\n                            </h2>\n                        </Card>\n                    ))}\n                </section>\n            </div>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    rooms: state.rooms.rooms,\n    disabledRooms: state.rooms.disabledRooms,\n    oneRoom: state.rooms.oneRoom,\n    roomTypes: state.roomTypes.roomTypes,\n    oneType: state.roomTypes.oneType\n});\n\nexport default connect(mapStateToProps, {})(RoomList);\n","import { connect } from 'react-redux'\nimport React, { useEffect } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport Button from '@material-ui/core/Button'\nimport { useTranslation}  from 'react-i18next'\n\nimport './AddSubjectForm.scss'\nimport Card from '../../share/Card/Card'\nimport { SUBJECT_FORM } from '../../constants/reduxForms'\nimport renderTextField from '../../share/renderedFields/input'\nimport { required, uniqueSubject, maxLengthValue} from '../../validation/validateFields'\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nlet AddSubject = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting,subject } = props;\n\n    useEffect(() => {\n        if (props.subject) {\n            if (props.subject.id) {\n                props.initialize({\n                    id: props.subject.id,\n                    name: props.subject.name\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [props.subject]);\n\n    return (\n        <Card class='form-card subject-form'>\n            <h2 style={{ textAlign: 'center' }}>\n                {props.subject.id ? t('edit_title') : t('create_title')}\n                {t('subject_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    className='form-field'\n                    name='name'\n                    component={renderTextField}\n                    label={t('subject_label')+':'}\n                    validate={[required, uniqueSubject, maxLengthValue]}\n                />\n                <div className='form-buttons-container subject-btns'>\n                <Button\n                    variant='contained'\n                    color='primary'\n                    className='buttons-style '\n                    disabled={pristine || submitting}\n                    type='submit'>\n                    {t('save_button_label')}\n                </Button>\n                <Button\n                    type='button'\n                    variant='contained'\n                    className='buttons-style'\n                    disabled={setDisableButton(pristine,submitting,subject.id)}\n                    onClick={onReset}>\n                    {getClearOrCancelTitle(subject.id,t)}\n                </Button>\n                </div>\n            </form>\n        </Card>\n    )\n}\n\nconst mapStateToProps = state => ({\n    subject: state.subjects.subject\n})\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SUBJECT_FORM\n    })(AddSubject)\n)\n","import { connect } from 'react-redux';\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\n\nimport './SubjectPage.scss';\nimport Card from '../../share/Card/Card';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport AddSubject from '../../components/AddSubjectForm/AddSubjectForm';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport {\n    showAllSubjectsService,\n    removeSubjectCardService,\n    handleSubjectService,\n    selectSubjectService,\n    clearSubjectService,\n    setEnabledSubjectsService,\n    setDisabledSubjectsService,\n    getDisabledSubjectsService\n} from '../../services/subjectService';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst SubjectPage = props => {\n    const { t } = useTranslation('formElements');\n    const { isSnackbarOpen, snackbarType, snackbarMessage } = props;\n\n    const [open, setOpen] = useState(false);\n    const [subjectId, setSubjectId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n\n    const [disabled, setDisabled] = useState(false);\n\n    useEffect(() => showAllSubjectsService(), []);\n    useEffect(() => getDisabledSubjectsService(), []);\n\n    const submit = values => handleSubjectService(values);\n    const handleEdit = subjectId => selectSubjectService(subjectId);\n    const handleFormReset = () => clearSubjectService();\n    const visibleSubjects = disabled\n        ? search(props.disabledSubjects, term, ['name'])\n        : search(props.subjects, term, ['name']);\n    const SearchChange = setTerm;\n\n    const handleClickOpen = subjectId => {\n        setSubjectId(subjectId);\n        setOpen(true);\n    };\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n\n    const handleClose = subjectId => {\n        setOpen(false);\n        if (!subjectId) return;\n        if (hideDialog) {\n            if (disabled) {\n                const group = props.disabledSubjects.find(\n                    subject => subject.id === subjectId\n                );\n                setEnabledSubjectsService(group);\n            } else {\n                const group = props.subjects.find(\n                    subject => subject.id === subjectId\n                );\n                setDisabledSubjectsService(group);\n            }\n        } else {\n            removeSubjectCardService(subjectId);\n        }\n        setHideDialog(null);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.SUBJECT_PAGE} val={navigation.SUBJECTS}/>\n            <ConfirmDialog\n                isHide={hideDialog}\n                cardId={subjectId}\n                whatDelete={'subject'}\n                open={open}\n                onClose={handleClose}\n            />\n            <div className=\"cards-container\">\n                <aside className=\"search-list__panel\">\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    {disabled ? (\n                        ''\n                    ) : (\n                        <AddSubject\n                            className=\"form\"\n                            onSubmit={submit}\n                            onReset={handleFormReset}\n                        />\n                    )}\n                </aside>\n                <section className=\"container-flex-wrap wrapper\">\n                    {visibleSubjects.length === 0 && (\n                        <NotFound name={t('subject_y_label')} />\n                    )}\n                    {visibleSubjects.map(subject => (\n                        <Card key={subject.id} class=\"subject-card done-card\">\n                            <h2 className=\"subject-card__name\">\n                                {subject.name}\n                            </h2>\n                            <div className=\"cards-btns\">\n                                {disabled ? (\n                                    <IoMdEye\n                                        className=\"svg-btn copy-btn\"\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(subject.id);\n                                        }}\n                                    />\n                                ) : (\n                                    <>\n                                        <GiSightDisabled\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_disabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.HIDE\n                                                );\n                                                handleClickOpen(subject.id);\n                                            }}\n                                        />\n                                        <FaEdit\n                                            className=\"svg-btn edit-btn\"\n                                            title={t('edit_title')}\n                                            onClick={() =>\n                                                handleEdit(subject.id)\n                                            }\n                                        />\n                                    </>\n                                )}\n\n                                <MdDelete\n                                    className=\"svg-btn delete-btn\"\n                                    title={t('delete_title')}\n                                    onClick={() => handleClickOpen(subject.id)}\n                                />\n                            </div>\n                            {/* <p className=\"subject-card__description\">\n                                {t('subject_label') + ':'}{' '}\n                            </p> */}\n                        </Card>\n                    ))}\n                </section>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    subjects: state.subjects.subjects,\n    disabledSubjects: state.subjects.disabledSubjects,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message\n});\n\nexport default connect(mapStateToProps, {})(SubjectPage);\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './modal.scss';\n\nexport const ModalWindow = props => {\n    const { onClose, cardId, isHide, open, windowTitle } = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n    const renderOkButton = () => {\n        if (!props.isOkButton) {\n            return;\n        }\n        return (\n            <Button\n                className=\"dialog-button\"\n                variant=\"contained\"\n                color=\"primary\"\n                //onClick={() => onClose(cardId)}\n            >\n                {props.okButtonLabel}\n            </Button>\n        );\n    };\n    const renderNoButton = () => {\n        if (!props.isNoButton) {\n            return;\n        }\n        return (\n            <Button\n                className=\"dialog-button\"\n                variant=\"contained\"\n                onClick={() => onClose('')}\n            >\n                {props.noButtonLabel}\n            </Button>\n        );\n    };\n\n    const renderModalButtons = () => {\n        if (!props.isOkButton && !props.isNoButton) {\n            return;\n        }\n        return (\n            <div className=\"buttons-container\">\n                {renderOkButton()}\n                {renderNoButton()}\n            </div>\n        );\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">{windowTitle}</DialogTitle>\n            {props.children}\n            {renderModalButtons()}\n        </Dialog>\n    );\n};\n\nModalWindow.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default ModalWindow;\n","import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst renderCheckboxField = ({\n    custom,\n    input,\n    label,\n    name,\n    labelPlacement,\n    checked\n}) => {\n    return (\n        <FormControlLabel\n            labelPlacement={labelPlacement}\n            label={label}\n            name={name}\n            checked={checked}\n            control={<Checkbox color=\"primary\" {...custom} {...input} />}\n        />\n    );\n};\n\nexport default renderCheckboxField;\n","import React, { useRef } from \"react\";\nimport ReactSelect from \"react-select\";\nimport { Dialog, DialogTitle } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport '../helper/multiselect.scss'\nimport { useTranslation } from 'react-i18next';\nexport const MultiselectForGroups = props => {\n    const { t } = useTranslation('common');\n    const valueRef = useRef(props.value);\n    valueRef.current = props.value;\n    const {open,onClose,onCancel}=props;\n\n    const selectAllOption = {\n        value: \"<SELECT_ALL>\",\n        label: t('all_groups')\n    };\n\n    const isSelectAllSelected = () => {\n        if(props.options!==undefined&&valueRef.current) {\n          return   valueRef.current.length === props.options.length;\n        }\n    }\n    const isOptionSelected = option =>\n        valueRef.current.some(({ value }) => value === option.value) ||\n        isSelectAllSelected();\n\n    const getOptions = () => [selectAllOption, ...props.options];\n\n    const getValue = () =>\n        isSelectAllSelected() ? [selectAllOption] : props.value;\n\n    const onChange = (newValue, actionMeta) => {\n        const { action, option, removedValue } = actionMeta;\n\n        if (action === \"select-option\" && option.value === selectAllOption.value) {\n            props.onChange(props.options, actionMeta);\n        }\n        else if (\n            (action === \"deselect-option\" &&\n                option.value === selectAllOption.value) ||\n            (action === \"remove-value\" &&\n                removedValue.value === selectAllOption.value)\n        ) {\n            props.onChange([], actionMeta);\n        } else if (\n            actionMeta.action === \"deselect-option\" &&\n            isSelectAllSelected()\n        ) {\n            props.onChange(\n                props.options.filter(({ value }) => value !== option.value),\n                actionMeta\n            );\n        } else {\n            props.onChange(newValue || [], actionMeta);\n        }\n    };\n    return (\n\n        <Dialog id=\"select-dialog\"\n\n                disableBackdropClick={true}\n                aria-labelledby=\"confirm-dialog-title\"\n                open={open}\n        >\n            <DialogTitle id=\"select-dialog-title\" className=\"confirm-dialog\">\n\n                <ReactSelect\n                    isOptionSelected={isOptionSelected}\n                    options={getOptions()}\n                    value={getValue()}\n                    onChange={onChange}\n                    hideSelectedOptions={false}\n                    closeMenuOnSelect={false}\n                    isMulti\n                    placeholder={t('choose_groups')}\n                />\n\n\n            </DialogTitle>\n            <div className=\"buttons-container\">\n\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={onClose}\n                >\n                    {t('confirm_groups')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={onCancel}\n                >\n                    {t('cancel_groups')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n","import * as moment from 'moment';\nimport { connect } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Field, reduxForm } from 'redux-form';\nimport Button from '@material-ui/core/Button';\nimport './SemesterForm.scss';\nimport Card from '../../share/Card/Card';\nimport renderCheckboxField from '../../share/renderedFields/checkbox';\nimport { SEMESTER_FORM } from '../../constants/reduxForms';\nimport renderTextField from '../../share/renderedFields/input';\nimport renderMonthPicker from '../../share/renderedFields/timeSemester';\nimport {\n    required,\n    minYearValue,\n    lessThanDate,\n    greaterThanDate\n} from '../../validation/validateFields';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { daysUppercase } from '../../constants/schedule/days';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\nimport { showAllGroupsService } from '../../services/groupService';\nimport { MultiselectForGroups } from '../../helper/MultiselectForGroups';\nimport { useForm } from 'react-hook-form';\nimport formValueSelector from 'redux-form/lib/formValueSelector';\nimport { isObjectEmpty } from '../../helper/ObjectRevision';\n\nlet AddSemesterForm = props => {\n    const clearCheckboxes = () => {\n        setCurrent(false);\n        setByDefault(false);\n        setCheckedDates({\n            MONDAY: false,\n            TUESDAY: false,\n            WEDNESDAY: false,\n            THURSDAY: false,\n            FRIDAY: false,\n            SATURDAY: false,\n            SUNDAY: false\n        });\n    };\n    useEffect(() => getClassScheduleListService(), []);\n    useEffect(() => showAllGroupsService(), []);\n\n    const { t } = useTranslation('formElements');\n    const {\n        handleSubmit,\n        pristine,\n        onReset,\n        submitting,\n        semester,\n        groups,\n        selected,\n        setSelected,\n        selectedGroups,\n        setSelectedGroups\n    } = props;\n    const [openGroupDialog, setOpenGroupDialog] = useState(false);\n    useEffect(() => {\n        const { semester_groups } = semester;\n        if (semester_groups !== undefined && semester_groups !== null) {\n            setSelectedGroups(getGroupOptions(semester_groups));\n        }\n    }, [semester.id]);\n    const getGroupOptions = (groupOptions) => {\n\n        return groupOptions.map(item => {\n            return { id: item.id, value: item.id, label: `${item.title}` };\n        });\n    };\n    const options = getGroupOptions(groups);\n    const semesterOptions = getGroupOptions(groups.filter(x => !selectedGroups.includes(x)));\n    const openDialogForGroup = () => {\n        setOpenGroupDialog(true);\n    };\n    const closeDialogForGroup = () => {\n        setOpenGroupDialog(false);\n    };\n    const clearSelection = () => {\n        setSelected([]);\n    };\n    const onCancel = () => {\n        clearSelection();\n        closeDialogForGroup();\n    };\n\n    const onClose = () => {\n        closeDialogForGroup();\n    };\n    const onSubmit = (values) => {\n        handleSubmit(values);\n    };\n    const { setValue } = useForm();\n\n    let prepSetCheckedClasses = {};\n    useEffect(() => {\n        props.classScheduler.forEach(classItem => {\n            prepSetCheckedClasses[`${classItem.id}`] = false;\n        });\n        setCheckedClasses({ ...prepSetCheckedClasses });\n        clearCheckboxes();\n    }, [props.classScheduler, props.semester.id]);\n    const getToday = () => {\n        return new Date();\n    };\n    const getTomorrow = () => {\n        const tomorrow = new Date(getToday());\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        return tomorrow;\n    };\n    const [current, setCurrent] = React.useState(false);\n    const [byDefault, setByDefault] = React.useState(false);\n    const [startTime, setStartTime] = useState(getToday());\n    const [finishTime, setFinishTime] = useState(getTomorrow());\n    const [startValue, setStartValue] = useState();\n    const [finishValue, setFinishValue] = useState();\n    const [disabledFinishDate, setDisabledFinishDate] = useState(true);\n    const [checkedDates, setCheckedDates] = React.useState({\n        MONDAY: false,\n        TUESDAY: false,\n        WEDNESDAY: false,\n        THURSDAY: false,\n        FRIDAY: false,\n        SATURDAY: false,\n        SUNDAY: false\n    });\n\n    const [checkedClasses, setCheckedClasses] = React.useState(\n        prepSetCheckedClasses\n    );\n\n    const handleChange = (event, setState) => setState(event.target.checked);\n\n    const setMinFinishDate = time => {\n        let new_date = moment(time, 'DD/MM/YYYY').add(1, 'd');\n        setFinishTime(new_date.toDate());\n    };\n    const setEndTime = startTime => {\n        if (disabledFinishDate || moment(startValue).isSameOrBefore(finishValue)) {\n            setFinishValue(setMinFinishDate(startTime));\n            props.change(\n                'endDay',\n                moment(startTime, 'DD/MM/YYYY').add(7, 'd').format('DD/MM/YYYY')\n            );\n        }\n        return;\n    };\n    const setCheckedDaysHandler = React.useCallback(\n        day => {\n            return function(event) {\n                let changedDay = { [day]: event.target.checked };\n                setCheckedDates({\n                    ...checkedDates,\n                    ...changedDay\n                });\n            };\n        },\n        [checkedDates]\n    );\n    const setCheckedClassesHandler = React.useCallback(\n        classid => {\n            return function(event) {\n                let changedClass = { [classid]: event.target.checked };\n                setCheckedClasses({\n                    ...checkedClasses,\n                    ...changedClass\n                });\n            };\n        },\n        [checkedClasses]\n    );\n\n    const setSemesterClasses = () => {\n        const classes = Object.keys(checkedClasses);\n        return classes.map(classItem => {\n            const scheduleItem = props.classScheduler.find(\n                schedule => schedule.id === +classItem\n            );\n            return (\n                <Field\n                    key={props.semester.id + classItem}\n                    name={`semester_classes_markup_${classItem}`}\n                    label={\n                        scheduleItem.class_name +\n                        ' (' +\n                        scheduleItem.startTime +\n                        '-' +\n                        scheduleItem.endTime +\n                        ')'\n                    }\n                    labelPlacement='end'\n                    component={renderCheckboxField}\n                    defaultValue={checkedClasses[classItem]}\n                    checked={checkedClasses[classItem]}\n                    onChange={setCheckedClassesHandler(classItem)}\n                    color='primary'\n                />\n            );\n        });\n    };\n    const setSemesterDays = () => {\n        const days = Object.keys(checkedDates);\n        return days.map(semesterDay => {\n            return (\n                <Field\n                    key={props.semester.id + semesterDay}\n                    name={`semester_days_markup_${semesterDay}`}\n                    label={t(`common:day_of_week_${semesterDay}`)}\n                    labelPlacement='end'\n                    defaultValue={checkedDates[semesterDay]}\n                    component={renderCheckboxField}\n                    checked={checkedDates[semesterDay]}\n                    onChange={setCheckedDaysHandler(semesterDay)}\n                    color='primary'\n                />\n            );\n        });\n    };\n\n    useEffect(() => {\n        let semesterItem = {};\n        clearCheckboxes();\n\n        if (props.semester) {\n            if (props.semester.id) {\n                semesterItem = {\n                    id: props.semester.id,\n                    year: props.semester.year,\n                    description: props.semester.description,\n                    startDay: props.semester.startDay,\n                    endDay: props.semester.endDay,\n                    currentSemester: props.semester.currentSemester,\n                    defaultSemester: props.semester.defaultSemester,\n                    semester_days: props.semester.semester_days,\n                    semester_classes: props.semester.semester_classes,\n                    semester_groups: props.semester.semester_groups\n\n                };\n\n                daysUppercase.forEach(dayItem => {\n                    if (props.semester.semester_days.includes(dayItem)) {\n                        semesterItem[`semester_days_markup_${dayItem}`] = true;\n                    }\n                });\n                const newDays = props.semester.semester_days.reduce(\n                    (result, day) => {\n                        result[day] = true;\n                        return result;\n                    },\n                    {}\n                );\n\n                if (props.classScheduler) {\n                    props.classScheduler.forEach(classFullItem => {\n                        if (\n                            props.semester.semester_classes.findIndex(\n                                classItem => {\n                                    return classFullItem.id === classItem.id;\n                                }\n                            ) >= 0\n                        ) {\n                            semesterItem[\n                                `semester_classes_markup_${classFullItem.id}`\n                                ] = true;\n                        }\n                    });\n                }\n\n                const newClasses = props.semester.semester_classes.reduce(\n                    (result, classItem) => {\n                        result[classItem.id] = true;\n                        return result;\n                    },\n                    {}\n                );\n\n                setCurrent(props.semester.currentSemester);\n                setByDefault(props.semester.defaultSemester);\n\n                setCheckedDates({\n                    MONDAY: false,\n                    TUESDAY: false,\n                    WEDNESDAY: false,\n                    THURSDAY: false,\n                    FRIDAY: false,\n                    SATURDAY: false,\n                    SUNDAY: false,\n                    ...newDays\n                });\n\n                let prepSetCheckedClasses = {};\n                if (props.classScheduler) {\n                    props.classScheduler.forEach(classItem => {\n                        prepSetCheckedClasses[`${classItem.id}`] = false;\n                    });\n                }\n                setCheckedClasses({\n                    ...prepSetCheckedClasses,\n                    ...newClasses\n                });\n            }\n        }\n        props.initialize(semesterItem);\n    }, [props.semester.id]);\n\n    const getChosenSet = () => {\n        const beginGroups = semester.semester_groups.map(item => item.id);\n        const resGroup = selectedGroups.map(item => item.id);\n        return resGroup.filter(x => !beginGroups.includes(x));\n    };\n    const getChosenSetRemove = () => {\n        const beginGroups = semester.semester_groups.map(item => item.id);\n        const resGroup = selectedGroups.map(item => item.id);\n        return beginGroups.filter(x => !resGroup.includes(x));\n    };\n    const isChosenGroup = () => {\n        const semesterCopy = { ...semester };\n        if (semesterCopy.semester_groups.length < 0) {\n            return true;\n        }\n        if(getChosenSet().length > 0){\n            return true;\n        }\n        else return getChosenSetRemove().length>0\n    };\n    const getDisabledSaveButton = () => {\n        if(!isObjectEmpty(semester)&&semester.id!==null) {\n            return (selectedGroups.length > 0 ?\n                    !isChosenGroup() :\n                    selected.length === 0) &&\n                (pristine || submitting);\n        }\n        return (pristine||submitting)\n\n    };\n\n    return (\n\n        <Card class='form-card semester-form'>\n            <h2 style={{ textAlign: 'center' }}>\n                {props.semester.id ? t('common:edit') : t('common:create')}\n                {` ${t('common:semester')}`}\n            </h2>\n            {selectedGroups.length === 0 ?\n                <MultiselectForGroups\n                    open={openGroupDialog}\n                    options={options}\n                    value={selected}\n                    onChange={setSelected}\n                    onCancel={onCancel}\n                    onClose={onClose}\n                /> :\n                <MultiselectForGroups\n                    open={openGroupDialog}\n                    options={semesterOptions}\n                    value={selectedGroups}\n                    onChange={setSelectedGroups}\n                    onCancel={onCancel}\n                    onClose={onClose}\n                />}\n            <form onSubmit={onSubmit}>\n                <div className='semester-checkbox group-options'>\n                    <div>\n                        <Field\n                            name='currentSemester'\n                            label={t('common:current_label')}\n                            labelPlacement='start'\n                            component={renderCheckboxField}\n                            checked={current}\n                            onChange={(e) => handleChange(e, setCurrent)}\n                            color='primary'\n                        />\n                        <Field\n                            name='defaultSemester'\n                            label={t('common:default_label')}\n                            labelPlacement='start'\n                            component={renderCheckboxField}\n                            checked={byDefault}\n                            onChange={(e) => handleChange(e, setByDefault)}\n                            color='primary'\n                        />\n                    </div>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className='buttons-style '\n                        onClick={openDialogForGroup}\n                    >\n                        {t('common:choose_groups_button_label')}\n                    </Button>\n                </div>\n                <Field\n                    className='form-field'\n                    name='year'\n                    type='number'\n                    component={renderTextField}\n                    label={t('common:year_label') + ':'}\n                    validate={[required, minYearValue]}\n                />\n                <Field\n                    className='form-field'\n                    name='description'\n                    component={renderTextField}\n                    label={t('common:semester_label') + ':'}\n                    validate={[required]}\n                />\n                <div className='form-time-block'>\n                    <Field\n                        className='time-input'\n                        name='startDay'\n                        component={renderMonthPicker}\n                        label={t('common:class_from_label') + ':'}\n                        validate={[required, lessThanDate]}\n                        minDate={startTime}\n                        onChange={(event, value) => {\n                            if (value) {\n                                setStartValue(value);\n                                setMinFinishDate(value);\n                                setEndTime(value);\n                                setDisabledFinishDate(false);\n                            }\n                        }}\n                    />\n                    <Field\n                        className='time-input'\n                        name='endDay'\n                        component={renderMonthPicker}\n                        label={t('common:class_to_label') + ':'}\n                        validate={[required, greaterThanDate]}\n                        minDate={finishTime}\n                        disabled={disabledFinishDate}\n                        onChange={(event, value) => {\n                            setFinishValue(value);\n                        }}\n                    />\n                </div>\n                <div className=''>\n                    <p>{t('common:days_label') + ': '}</p>\n                    {setSemesterDays()}\n                </div>\n                <div className=''>\n                    <p>{t('common:ClassSchedule_management_title') + ': '}</p>\n                    {setSemesterClasses()}\n                </div>\n                <div className='form-buttons-container semester-btns'>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className='buttons-style '\n                        disabled={getDisabledSaveButton()}\n                        type='submit'\n                    >\n                        {t('common:save_button_label')}\n                    </Button>\n                    <Button\n                        type='button'\n                        variant='contained'\n                        className='buttons-style'\n                        disabled={setDisableButton(pristine, submitting, semester.id) && selected.length === 0}\n                        onClick={() => {\n                            onReset();\n                            setSelected([]);\n                        }}\n                    >\n                        {getClearOrCancelTitle(semester.id, t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    semester: state.semesters.semester,\n    classScheduler: state.classActions.classScheduler,\n    groups: state.groups.groups\n\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SEMESTER_FORM\n    })(AddSemesterForm)\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\n\nimport Button from '@material-ui/core/Button';\nimport { MdPlayArrow } from 'react-icons/md';\n\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport './SemesterCopyForm.scss';\n\nimport { SEMESTER_COPY_FORM } from '../../constants/reduxForms';\nimport { required } from '../../validation/validateFields';\nconst shortid = require('shortid');\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    }\n}));\n\nconst SemesterCopyForm = props => {\n    const classes = useStyles();\n    const { t } = useTranslation('common');\n    const { semesterId, semesters, handleSubmit, pristine, submitting } = props;\n\n    const renderSemesterList = () => {\n        const available_semesters_for_copy = semesters.filter(\n            semester => semester.id !== semesterId\n        );\n        if (available_semesters_for_copy) {\n            if (available_semesters_for_copy.length > 1) {\n                return (\n                    <>\n                        <Field\n                            id=\"toSemesterId\"\n                            name=\"toSemesterId\"\n                            component={renderSelectField}\n                            label={t('formElements:semester_label')}\n                            type=\"text\"\n                            validate={[required]}\n                        >\n                            <option />\n                            {available_semesters_for_copy.map(\n                                (semester, index) => (\n                                    <option\n                                        key={shortid.generate()}\n                                        value={semester.id}\n                                    >\n                                        {semester.description}\n                                    </option>\n                                )\n                            )}\n                        </Field>\n                    </>\n                );\n            } else if (available_semesters_for_copy.length === 1) {\n                return <p>{available_semesters_for_copy[0].description}</p>;\n            }\n        }\n    };\n\n    return (\n        <section className={classes.root}>\n            <p>{t('formElements:semester_copy_hint')}</p>\n            <p className=\"red-color\">\n                {t('formElements:semester_copy_red_hint')}\n            </p>\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-buttons-container\">\n                    {renderSemesterList()}\n                    <Button\n                        className='semester-copy-btn'\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={pristine || submitting}\n                    >\n                        <MdPlayArrow\n                            title={t('teacher_schedule_label')}\n                            className=\"svg-btn\"\n                        />\n                        {props.submitButtonLabel}\n                    </Button>\n                </div>\n            </form>\n        </section>\n    );\n};\n\nconst mapStateToProps = state => ({\n    semesters: state.semesters.semesters\n});\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SEMESTER_COPY_FORM\n    })(SemesterCopyForm)\n);\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './modal.scss';\n\nimport i18n from 'i18next';\nimport { disabledCard } from '../../../constants/disabledCard';\nimport './setDefaultDialog.scss'\nexport const SetChangeDialog = props => {\n    const { onClose, cardId, isHide, open} = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n    const className=\"set-default\";\n    return (\n        <Dialog\n\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">\n                <>\n                    {isHide ? (\n                        <>\n                            {isHide === disabledCard.HIDE ? (\n                                <>{i18n.t('common:do_you_wanna_disable')}</>\n                            ) : (\n                                <>{i18n.t('common:do_you_wanna_show')}</>\n                            )}\n                        </>\n                    ) : (\n                        <>\n                            {i18n.t('common:do_you_wanna')}{' '}\n                            <span className={className}>\n                                {i18n.t(`common:set_default_word`)}\n                            </span>{' '}\n                        </>\n                    )}\n\n                    {i18n.t('common:this_card_type', {\n                        cardType: i18n.t(`formElements:semester_element`)\n                    })}\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => onClose(cardId)}\n                >\n                    {i18n.t('common:yes_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                >\n                    {i18n.t('common:no_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nSetChangeDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default SetChangeDialog;\n","import { connect } from 'react-redux';\nimport { FaEdit, FaUsers } from 'react-icons/fa';\nimport { MdDelete, MdDonutSmall, MdEdit } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\n\nimport './SemesterPage.scss';\nimport Card from '../../share/Card/Card';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport ModalWindow from '../../share/modals/modal/modal';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport SemesterForm from '../../components/SemesterForm/SemesterForm';\nimport SemesterCopyForm from '../../components/SemesterCopyForm/SemesterCopyForm';\nimport {\n    clearSemesterService,\n    getDisabledSemestersService,\n    handleSemesterService,\n    removeSemesterCardService,\n    selectSemesterService,\n    setDisabledSemestersService,\n    setEnabledSemestersService,\n    showAllSemestersService,\n    semesterCopy,\n    createArchiveSemesterService,\n    getArchivedSemestersService,\n    viewArchivedSemester, setDefaultSemesterById, setGroupsToSemester\n} from '../../services/semesterService';\nimport { setScheduleTypeService } from '../../services/scheduleService';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { GiSightDisabled, IoMdEye, FaCopy } from 'react-icons/all';\nimport { FaFileArchive } from 'react-icons/fa';\n\nimport GroupSchedulePage from '../../components/GroupSchedulePage/GroupSchedulePage';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport SetDefaultDialog from '../../share/modals/modal/setDefaultDialog';\nimport SetChangeDialog from '../../share/modals/modal/setDefaultDialog';\nimport { MultiselectForGroups } from '../../helper/MultiselectForGroups';\nimport { showAllGroupsService } from '../../services/groupService';\nimport { successHandler } from '../../helper/handlerAxios';\nimport i18n from '../../helper/i18n';\n\nconst SemesterPage = props => {\n    const { t } = useTranslation('formElements');\n    const [open, setOpen] = useState(false);\n    const [openDefault, setOpenDefault] = useState(false);\n    const [openModal, setOpenModal] = useState(false);\n    const [openGroupsDialog, setOpenGroupsDialog] = useState(false);\n    const [semesterId, setSemesterId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const { isSnackbarOpen, snackbarType, snackbarMessage, semester, groups } = props;\n    const [selected, setSelected] = useState([]);\n    const [selectedGroups, setSelectedGroups] = useState([]);\n    const [semesterOptions, setSemesterOptions] = useState([]);\n    const [edit, setEdit] = useState(false);\n    const getGroupOptions = (groupOptions) => {\n\n        return groupOptions.map(item => {\n            return { id: item.id, value: item.id, label: `${item.title}` };\n        });\n    };\n    const options = getGroupOptions(groups.filter(x => !selectedGroups.includes(x)));\n    useEffect(() => {\n        if (semester.semester_groups !== undefined && semester.semester_groups.length > 0) {\n            setSemesterOptions(getGroupOptions(semester.semester_groups));\n        }\n    }, [semester.id]);\n    useEffect(() => showAllSemestersService(), []);\n    useEffect(() => {\n        getDisabledSemestersService();\n    }, []);\n    useEffect(() => getArchivedSemestersService(), []);\n    useEffect(() => showAllGroupsService(), []);\n    const [hideDialog, setHideDialog] = useState(null);\n    const [hideDialogModal, setHideDialogModal] = useState(null);\n    const [disabled, setDisabled] = useState(false);\n    const [archived, setArchived] = useState(false);\n\n    setScheduleTypeService('archived');\n\n    const SearchChange = setTerm;\n    const isEqualsArrObjects = (arr1, arr2) => {\n        const a = [...arr1];\n        const b = [...arr2];\n        if (a.length !== b.length)\n            return false;\n\n        for (let i = 0; i < a.length; i++)\n            if (a[i].id !== b[i].id)\n                return false;\n        return true;\n    };\n    const onChangeGroups = () => {\n        const beginGroups = semester.semester_groups !== undefined ? getGroupOptions(semester.semester_groups) : [];\n        const finishGroups = [...semesterOptions];\n        if (isEqualsArrObjects(beginGroups, finishGroups)) {\n            successHandler(\n                i18n.t('serviceMessages:group_exist_in_this_semester', {\n                    cardType: i18n.t('common:group_title'),\n                    actionType: i18n.t('serviceMessages:student_label')\n                })\n            );\n            return;\n        }\n        setGroupsToSemester(semesterId, semesterOptions);\n        setOpenGroupsDialog(false);\n    };\n    const onCancel = () => {\n        setSemesterOptions(getGroupOptions(semester.semester_groups));\n        setOpenGroupsDialog(false);\n    };\n    const handleFormReset = () => {\n        setSelectedGroups([]);\n        clearSemesterService();\n    };\n\n    const submit = (values) => {\n        const groupsForService = selected.length === 0 ? selectedGroups : selected;\n        const semester_groups = groupsForService.map(group => {\n            return { id: group.id,title:group.label };\n        });\n        const data = { ...values, semester_groups };\n        handleSemesterService(data);\n    };\n    const handleEdit = semesterId => selectSemesterService(semesterId);\n    const handleCreateArchive = semesterId =>\n        createArchiveSemesterService(semesterId);\n\n    const searchArr = ['year', 'description', 'startDay', 'endDay'];\n\n    let visibleItems = [];\n    if (disabled) {\n        visibleItems = search(props.disabledSemesters, term, searchArr);\n    } else if (archived) {\n        visibleItems = search(props.archivedSemesters, term, searchArr);\n    } else {\n        visibleItems = search(props.semesters, term, searchArr);\n    }\n\n    const handleClickOpen = semesterId => {\n        setSemesterId(semesterId);\n        setOpen(true);\n    };\n    const handleClickOpenDefault = semesterId => {\n        setSemesterId(semesterId);\n        setOpenDefault(true);\n    };\n    const handleClickOpenModal = semesterId => {\n        setSemesterId(semesterId);\n        setOpenModal(true);\n    };\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n\n    const handleCloseModal = (event, reason) => {\n        setOpenModal(false);\n        setHideDialogModal(null);\n        if (reason === 'clickaway') return;\n    };\n\n    const handleClose = semesterId => {\n        const setDelete = open;\n        const setDefault = openDefault;\n        setOpen(false);\n        setOpenDefault(false);\n        if (!semesterId) return;\n        if (hideDialog) {\n            if (disabled) {\n                const semester = props.disabledSemesters.find(\n                    semester => semester.id === semesterId\n                );\n                setEnabledSemestersService(semester);\n            } else {\n                const semester = props.semesters.find(\n                    semester => semester.id === semesterId\n                );\n                setDisabledSemestersService(semester);\n            }\n        } else if (setDelete) {\n            removeSemesterCardService(semesterId);\n        } else if (setDefault) {\n            setDefaultSemesterById(semesterId);\n        }\n        setHideDialog(null);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n        setArchived(false);\n    };\n\n    const showArchivedHandler = () => {\n        setArchived(!archived);\n        !archived === true\n            ? setScheduleTypeService('archived')\n            : setScheduleTypeService('default');\n        setDisabled(false);\n    };\n    const handleSemesterCopySubmit = values => {\n        semesterCopy({\n            fromSemesterId: +semesterId,\n            toSemesterId: +values.toSemesterId\n        });\n        setOpenModal(false);\n        setHideDialogModal(null);\n    };\n\n    const handleSemesterArchivedPreview = semesterId => {\n        viewArchivedSemester(+semesterId);\n    };\n    const setClassNameForDefaultSemester = semester => {\n        const defaultSemesterName = 'default';\n        const className = 'svg-btn edit-btn';\n        return semester.defaultSemester === true ? `${className} ${defaultSemesterName}` : className;\n    };\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.SEMESTER_PAGE} val={navigation.SEMESTERS} />\n            <ConfirmDialog\n                cardId={semesterId}\n                whatDelete={'semester'}\n                isHide={hideDialog}\n                open={open}\n                onClose={handleClose}\n            />\n            <SetChangeDialog\n                cardId={semesterId}\n                isHide={hideDialog}\n                open={openDefault}\n                onClose={handleClose}\n            />\n            <ModalWindow\n                whatDelete={'semester'}\n                isHide={hideDialogModal}\n                open={openModal}\n                onClose={handleCloseModal}\n                windowTitle={t('semester_copy_label')}\n                isOkButton={false}\n                isNoButton={true}\n                noButtonLabel={t('close_label')}\n            >\n                <SemesterCopyForm\n                    semesterId={semesterId}\n                    onSubmit={handleSemesterCopySubmit}\n                    submitButtonLabel={t('copy_label')}\n                />\n            </ModalWindow>\n            <div className='cards-container'>\n                <aside className='search-list__panel'>\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                        showArchived={showArchivedHandler}\n                    />\n                    {disabled || archived ? (\n                            ''\n                        ) :\n                        <SemesterForm\n                            selectedGroups={selectedGroups}\n                            setSelectedGroups={setSelectedGroups}\n                            selected={selected}\n                            setSelected={setSelected}\n                            className='form'\n                            onSubmit={submit}\n                            onReset={handleFormReset}\n                            semester={edit ? semester : {}}\n\n                        />\n                    }\n                </aside>\n                <section className='container-flex-wrap wrapper'>\n                    {visibleItems.length === 0 && (\n                        <NotFound name={t('semestry_label')} />\n                    )}\n                    {visibleItems.map((semester, index) => {\n                        const sem_days = [];\n\n                        semester.semester_days.forEach(day =>\n                            sem_days.push(t(`common:day_of_week_${day}`))\n                        );\n                        return (\n                            <Card\n                                key={index}\n                                class={`semester-card done-card ${\n                                    semester.currentSemester ? 'current' : ''\n                                }`}\n                            >\n                                <div className='cards-btns'>\n                                    {!disabled && !archived ? (\n                                        <>\n                                            <GiSightDisabled\n                                                className='svg-btn copy-btn'\n                                                title={t('common:set_disabled')}\n                                                onClick={() => {\n                                                    setHideDialog(\n                                                        disabledCard.HIDE\n                                                    );\n                                                    handleClickOpen(\n                                                        semester.id\n                                                    );\n                                                }}\n                                            />\n                                            <FaEdit\n                                                className='svg-btn edit-btn'\n                                                title={t('edit_title')}\n                                                onClick={() => {\n                                                    handleEdit(semester.id);\n                                                    setEdit(true);\n                                                }\n\n                                                }\n                                            />\n                                            <FaCopy\n                                                className='svg-btn copy-btn'\n                                                title={t('copy_label')}\n                                                onClick={() => {\n                                                    handleClickOpenModal(\n                                                        semester.id\n                                                    );\n                                                }}\n                                            />\n                                            {semester.currentSemester ? (\n                                                ''\n                                            ) : (\n                                                <FaFileArchive\n                                                    className='svg-btn archive-btn'\n                                                    title={t(\n                                                        'common:make_archive'\n                                                    )}\n                                                    onClick={() => {\n                                                        handleCreateArchive(\n                                                            semester.id\n                                                        );\n                                                    }}\n                                                />\n                                            )}\n                                        </>\n                                    ) : !archived ? (\n                                        <IoMdEye\n                                            className='svg-btn copy-btn'\n                                            title={t('common:set_enabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.SHOW\n                                                );\n                                                handleClickOpen(semester.id);\n                                            }}\n                                        />\n                                    ) : (\n                                        <IoMdEye\n                                            className='svg-btn copy-btn'\n                                            title={t('common:preview')}\n                                            onClick={() => {\n                                                handleSemesterArchivedPreview(\n                                                    semester.id\n                                                );\n                                            }}\n                                        />\n                                    )}\n                                    <MdDelete\n                                        className='svg-btn delete-btn'\n                                        title={t('delete_title')}\n                                        onClick={() =>\n                                            handleClickOpen(semester.id)\n                                        }\n                                    />\n\n                                    <MdDonutSmall\n                                        className={setClassNameForDefaultSemester(semester)}\n                                        title={t('set_default_title')}\n                                        onClick={() =>\n                                            handleClickOpenDefault(semester.id)\n                                        }\n                                    />\n\n\n                                </div>\n\n                                <p className='semester-card__description'>\n                                    <small>{t('semester_label') + ':'}</small>\n                                    <b>{semester.description}</b>\n                                    {' ( ' + semester.year + ' )'}\n                                </p>\n                                <p className='semester-card__description'>\n                                    <b>\n                                        {semester.startDay} - {semester.endDay}\n                                    </b>\n                                </p>\n                                <p className='semester-card__description'>\n                                    {t('common:days_label') + ': '}\n                                    {sem_days.join(', ')}\n                                </p>\n                                <p className='semester-card__description'>\n                                    {t(\n                                        'common:ClassSchedule_management_title'\n                                    ) + ': '}\n                                    {semester.semester_classes\n                                        .map(classItem => {\n                                            return classItem.class_name;\n                                        })\n                                        .join(', ')}\n                                </p>\n\n                                <FaUsers\n                                    title={t('formElements:show_groups')}\n                                    className='svg-btn copy-btn  semester-groups'\n                                    onClick={\n                                        () => {\n                                            setSemesterId(semester.id);\n                                            selectSemesterService(semester.id);\n                                            setOpenGroupsDialog(true);\n                                        }\n                                    }\n                                />\n                            </Card>\n\n                        );\n                    })}\n                </section>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n            <GroupSchedulePage scheduleType='archived' />\n            <MultiselectForGroups\n                open={openGroupsDialog}\n                options={options}\n                value={semesterOptions}\n                onChange={setSemesterOptions}\n                onCancel={onCancel}\n                onClose={onChangeGroups}\n            />\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    semesters: state.semesters.semesters,\n    semester: state.semesters.semester,\n    disabledSemesters: state.semesters.disabledSemesters,\n    archivedSemesters: state.semesters.archivedSemesters,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message,\n    groups: state.groups.groups\n});\n\nexport default connect(mapStateToProps, {})(SemesterPage);\n","import axios from '../helper/axios';\nimport { store } from '../index';\n\nimport {\n    MERGE_USER_AND_TEACHER_URL,\n    USERS_URL,\n    USER_PROFILE,\n    UPDATE_USER_PROFILE\n} from '../constants/axios';\nimport { setUsers, setUser, setTeacher } from '../redux/actions/index';\n\nimport i18n from '../helper/i18n';\nimport { setLoadingService } from './loadingService';\nimport { getTeachersWithoutAccount } from './teacherService';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\n\nexport const getUsersService = () => {\n    axios\n        .get(USERS_URL)\n        .then(response => {\n            store.dispatch(setUsers(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getUserProfile = () => {\n    axios\n        .get(USER_PROFILE)\n        .then(response => {\n            store.dispatch(setUser(response.data));\n            if (response.data.teacher_name) {\n                store.dispatch(\n                    setTeacher({\n                        id: 15,\n                        name: response.data.teacher_name,\n                        surname: response.data.teacher_surname,\n                        patronymic: response.data.teacher_patronymic,\n                        position: response.data.teacher_position\n                    })\n                );\n            }\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const updateUserPassword = values => {\n    axios\n        .put(UPDATE_USER_PROFILE, {\n            current_password: values.current_password,\n            new_password: values.new_password\n        })\n        .then(response => {\n            store.dispatch(setUser(response.data));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_label'),\n                    actionType: i18n.t('serviceMessages:updated')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const updateUserTeacher = values => {\n    axios\n        .put(UPDATE_USER_PROFILE, {\n            teacher_name: values.name,\n            teacher_surname: values.surname,\n            teacher_patronymic: values.patronymic,\n            teacher_position: values.position\n        })\n        .then(response => {\n            store.dispatch(setUser(response.data));\n            store.dispatch(\n                setTeacher({\n                    id: 15,\n                    name: response.data.teacher_name,\n                    surname: response.data.teacher_surname,\n                    patronymic: response.data.teacher_patronymic,\n                    position: response.data.teacher_position\n                })\n            );\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:user_label'),\n                    actionType: i18n.t('serviceMessages:updated')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const mergeUserAndTeacherService = mergeObj => {\n    axios\n        .put(MERGE_USER_AND_TEACHER_URL, mergeObj)\n        .then(response => {\n            getTeachersWithoutAccount();\n            getUsersService();\n            setLoadingService(false);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:user_label'),\n                    actionType: i18n.t('serviceMessages:successfully_merged')\n                })\n            );\n        })\n        .catch(error => {\n            setLoadingService(false);\n            errorHandler(error);\n        });\n};\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    getUsersService,\n    mergeUserAndTeacherService\n} from '../../services/userService';\nimport { getTeachersWithoutAccount } from '../../services/teacherService';\nimport { setLoadingService } from '../../services/loadingService';\n\n\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from '@material-ui/core';\n\nimport Card from '../../share/Card/Card';\n\nimport './MergeRolePage.scss';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst useStyles = makeStyles(() => ({\n    autoCompleteField: {\n        '&': {\n            display: 'inline-block',\n            margin: '0 10px 10px 0',\n            width: 200\n        }\n    }\n}));\n\nconst MergeRolePage = props => {\n    const { t } = useTranslation('common');\n\n    const [teacher, setTeacher] = useState(null);\n    const [user, setUser] = useState(null);\n\n    const classes = useStyles();\n\n    const teachers = props.teachers;\n    const users = props.users;\n\n    useEffect(() => getTeachersWithoutAccount(), []);\n    useEffect(() => getUsersService(), []);\n\n    const defaultPropsTeachers = {\n        options: teachers,\n        getOptionLabel: option =>\n            option\n                ? option.position +\n                  ' ' +\n                  option.surname +\n                  ' ' +\n                  option.name +\n                  ' ' +\n                  option.patronymic\n                : ''\n    };\n\n    const defaultPropsUsers = {\n        options: users,\n        getOptionLabel: option => (option ? option.email : '')\n    };\n\n    const mergeUserAndTeacherHandle = () => {\n        if (!user || !teacher) return;\n        mergeUserAndTeacherService({ teacherId: teacher.id, userId: user.id });\n        setUser(null);\n        setTeacher(null);\n        setLoadingService(true);\n    };\n\n    return (\n        <>\n            <NavigationPage  val={navigation.USERS}/>\n            <div className=\"merge-role-form\">\n                <Card class=\"merge-role-card\">\n                    <h2 className=\"under-line\">{t('merge_header')}</h2>\n                    {props.loading ? (\n                        <CircularProgress />\n                    ) : (\n                        <>\n                            <div className=\"autocomplete-group\">\n                                <Autocomplete\n                                    {...defaultPropsTeachers}\n                                    clearOnEscape\n                                    openOnFocus\n                                    className={classes.autoCompleteField}\n                                    onChange={(event, newValue) => {\n                                        setTeacher(newValue);\n                                    }}\n                                    renderInput={params => (\n                                        <TextField\n                                            {...params}\n                                            label={t(\n                                                'formElements:teacher_label'\n                                            )}\n                                            margin=\"normal\"\n                                        />\n                                    )}\n                                />\n                                <Autocomplete\n                                    {...defaultPropsUsers}\n                                    clearOnEscape\n                                    openOnFocus\n                                    className={classes.autoCompleteField}\n                                    onChange={(event, newValue) => {\n                                        setUser(newValue);\n                                    }}\n                                    renderInput={params => (\n                                        <TextField\n                                            {...params}\n                                            label={t('formElements:user_label')}\n                                            margin=\"normal\"\n                                        />\n                                    )}\n                                />\n                            </div>\n                            <Button\n                                className=\"merge-btn\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => mergeUserAndTeacherHandle()}\n                            >\n                                {t('formElements:merge_button')}\n                            </Button>\n                        </>\n                    )}\n                </Card>\n            </div>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    teachers: state.teachers.teachers,\n    users: state.users.users,\n    loading: state.loadingIndicator.loading\n});\n\nexport default connect(mapStateToProps)(MergeRolePage);\n","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { connect } from 'react-redux';\n\nimport './ChangePasswordForm.scss';\n\nimport renderTextField from '../../share/renderedFields/input';\n\nimport Button from '@material-ui/core/Button';\n\nimport { required, password } from '../../validation/validateFields';\n\nimport { PROFILE_FORM } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\nimport NavigationPage from '../Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport { Accordion, AccordionDetails, AccordionSummary } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\n\n\nfunction ExpandMoreIcon() {\n    return null;\n}\n\nlet ChangePasswordForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting } = props;\n\n    return (\n        <>\n            <Accordion>\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls='panel1a-content'\n                    id='panel1a-header'\n                >\n                    <Typography>{t('change_password_form_title')}</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Typography>\n                        <form onSubmit={handleSubmit}>\n                            <Field\n                                component={renderTextField}\n                                className='form-field'\n                                name='current_password'\n                                id='current_password'\n                                label={t('password_label')}\n                                type='password'\n                                validate={[required, password]}\n                            />\n                            <Field\n                                component={renderTextField}\n                                className='form-field'\n                                name='new_password'\n                                id='new_password'\n                                label={t('new_password_label')}\n                                type='password'\n                                validate={[required, password]}\n                            />\n                            <Field\n                                component={renderTextField}\n                                className='form-field'\n                                name='confirm_password'\n                                id='confirm_password'\n                                label={t('retype_password_label')}\n                                type='password'\n                                validate={[required, password]}\n                            />\n\n                            <div className='form-buttons-container'>\n                                <Button\n                                    className='buttons-style'\n                                    type='submit'\n                                    variant='contained'\n                                    color='primary'\n                                    disabled={pristine || submitting}\n                                >\n                                    {t('save_button_label')}\n                                </Button>\n                                <Button\n                                    className='buttons-style'\n                                    type='button'\n                                    variant='contained'\n                                    disabled={pristine || submitting}\n                                    onClick={onReset}\n                                >\n                                    {t('clear_button_label')}\n                                </Button>\n                            </div>\n                        </form>\n                    </Typography>\n                </AccordionDetails>\n            </Accordion>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: PROFILE_FORM\n    })(ChangePasswordForm)\n);\n","import React, { useEffect, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport Card from '../../share/Card/Card';\nimport './BusyRooms.scss';\nimport { useTranslation } from 'react-i18next';\nimport { getScheduleItemsService } from '../../services/scheduleService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { CircularProgress } from '@material-ui/core';\nimport { setLoadingService } from '../../services/loadingService';\nimport AdminPage from '../AdminPage/AdminPage';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst BusyRooms = props => {\n    const { t } = useTranslation('common');\n\n    useEffect(() => getScheduleItemsService(), []);\n    useEffect(() => {\n        getClassScheduleListService();\n        setLoadingService(true);\n    }, []);\n\n    const busyRooms = props.busyRooms[0];\n\n    const isLoading = props.loading;\n\n    let conflictLesson = 'more-then-one-conflict';\n    let grouppedLesson = 'more-then-one';\n\n    let busyRoomsLength;\n\n    if (busyRooms !== undefined) {\n        busyRoomsLength = busyRooms.length;\n    }\n\n    const renderRoomTitle = (name, type) => (\n        <h3 className=\"room-heading\">\n            <span className=\"room-name\">{name}</span>\n            <span className=\"room-type\">{type}</span>\n        </h3>\n    );\n\n    const renderWeekRoomInfo = (schedule, index, type = 'odd') => {\n        return props.currentSemester.semester_classes.map(scheduleClass => {\n            let in_arrayIndex = -1;\n            in_arrayIndex =\n                type === 'odd'\n                    ? schedule.classes[0].odd.findIndex(\n                          classItem => classItem.class_id === scheduleClass.id\n                      )\n                    : schedule.classes[0].even.findIndex(\n                          classItem => classItem.class_id === scheduleClass.id\n                      );\n            let classOne =\n                type === 'odd'\n                    ? schedule.classes[0].odd.find(\n                          classItem => classItem.class_id === scheduleClass.id\n                      )\n                    : schedule.classes[0].even.find(\n                          classItem => classItem.class_id === scheduleClass.id\n                      );\n            if (\n                in_arrayIndex < 0 ||\n                !classOne ||\n                classOne.lessons.length <= 0\n            ) {\n                return (\n                    <div\n                        className=\"class-info\"\n                        key={index + scheduleClass.class_name}\n                    >\n                        <div className=\"class-info-data class-number\">\n                            {scheduleClass.class_name}\n                        </div>\n                        <div className=\"class-info-data\">\n                            <div className=\"green-free\"></div>\n                        </div>\n                    </div>\n                );\n            } else {\n                let intersectClass = '';\n                if (\n                    classOne &&\n                    classOne.lessons &&\n                    classOne.lessons.length > 1\n                ) {\n                    intersectClass = conflictLesson;\n                }\n                let grouppedLessonClass = '';\n                classOne.lessons.map(lessonOne => {\n                    grouppedLessonClass =\n                        lessonOne.groups.length > 1 ? grouppedLesson : '';\n                });\n                return (\n                    <div\n                        className=\"class-info\"\n                        key={index + classOne.class_name + classOne.group_name}\n                    >\n                        <div className=\"class-info-data class-number\">\n                            {classOne.class_name}\n                        </div>\n                        <div\n                            className={`class-info-data group-height ${grouppedLessonClass}${intersectClass}`}\n                        >\n                            {classOne.lessons.map(lessonOne => {\n                                return lessonOne.groups.map(groupItem => {\n                                    const hoverInfo =\n                                        lessonOne.teacher_for_site +\n                                        lessonOne.subject_for_site;\n                                    return (\n                                        <p\n                                            title={hoverInfo}\n                                            key={hoverInfo + lessonOne.name}\n                                        >\n                                            {groupItem.group_name}\n                                        </p>\n                                    );\n                                });\n                            })}\n                        </div>\n                    </div>\n                );\n            }\n        });\n    };\n\n    const renderRoomDay = (schedule, index) => (\n        <section className=\"room-day\" key={index + schedule.day}>\n            <h3 className=\"room-heading\">{t(`day_of_week_${schedule.day}`)}</h3>\n            <section>\n                <Fragment key={index}>\n                    <div className=\"even-odd-week\">\n                        <span className=\"even-odd-heading\">\n                            {t('week_odd_title')}\n                        </span>\n                        {renderWeekRoomInfo(schedule, index, 'odd')}\n                    </div>\n                    <div className=\"even-odd-week\">\n                        <span className=\"even-odd-heading\">\n                            {t('week_even_title')}\n                        </span>\n                        {renderWeekRoomInfo(schedule, index, 'even')}\n                    </div>\n                </Fragment>\n            </section>\n        </section>\n    );\n    return (\n        <div className=\"busy-rooms-container\">\n            {isLoading ? (\n                <h2 className=\"busy-heading\">\n                    <CircularProgress />\n                </h2>\n            ) : (\n                <>\n\n                    {busyRoomsLength > 0 ? (\n                        <>\n                            <NavigationPage val={navigation.BUSY_ROOMS}/>\n                            <h2 className=\"busy-heading\">\n                                {t('busy_rooms_heading')}\n                            </h2>\n                            <section className=\"view-rooms\">\n                                {busyRooms.map(busyRoom => (\n                                    <Card\n                                        class=\"busy-room\"\n                                        key={busyRoom.room_id}\n                                    >\n                                        {renderRoomTitle(\n                                            busyRoom.room_name,\n                                            busyRoom.room_type\n                                        )}\n\n                                        {busyRoom.schedules.map(\n                                            (schedule, index) => {\n                                                return props.currentSemester.semester_days.includes(\n                                                    schedule.day\n                                                )\n                                                    ? renderRoomDay(\n                                                          schedule,\n                                                          index\n                                                      )\n                                                    : '';\n                                            }\n                                        )}\n                                    </Card>\n                                ))}\n                            </section>\n                        </>\n                    ) : (\n                        <>\n                            <h2 className=\"busy-heading\">\n                                <CircularProgress />\n                            </h2>\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    busyRooms: state.busyRooms.busyRooms,\n    loading: state.loadingIndicator.loading,\n    currentSemester: state.schedule.currentSemester\n});\n\nexport default connect(mapStateToProps, {})(BusyRooms);\n","import TeacherList from '../containers/TeachersList/TeachersList';\nimport GroupList from '../containers/GroupList/GroupList';\nimport RoomList from '../containers/RoomList/RoomList';\nimport SubjectPage from '../containers/SubjectPage/SubjectPage';\nimport SemesterPage from '../containers/SemesterPage/SemesterPage';\nimport MergeRolePage from '../containers/MergeRolePage/MergeRolePage';\nimport Changes from '../components/ChangePasswordForm/ChangePasswordForm';\nimport BusyRooms from '../containers/BusyRooms/BusyRooms';\nimport React from 'react';\nexport const navigation={\n    \"LESSONS\":0,\n    \"USERS\":1,\n    \"CHANGES\":2,\n    \"BUSY_ROOMS\":3,\n    \"PERIOD\":4,\n    \"DEPARTMENTS\":5,\n    \"GROUPS\":6,\n    \"ROOMS\":7,\n    \"SUBJECTS\":8,\n    \"SEMESTERS\":9,\n    \"TEACHERS\":10,\n}\nexport const navigationNames={\n    TEACHER_LIST:'TeacherList',\n    GROUP_LIST:'GroupList',\n    CLASS_SCHEDULE_TITLE:'ClassScheduleTitle',\n    ROOM_LIST:'RoomList',\n    SUBJECT_PAGE:'SubjectPage',\n    SEMESTER_PAGE:'SemesterPage',\n    DEPARTMENTS:'Departments',\n    LESSON_PAGE:'LessonPage',\n    MERGE_ROLE_PAGE:'MergeRolePage',\n    CHANGES:'Changes',\n    BUSY_ROOMS:'BusyRooms',\n    GENERAL:\"General\"\n}\n","import React, { useRef } from \"react\";\nimport ReactSelect from \"react-select\";\nimport { Dialog, DialogTitle } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Select from 'react-select';\nimport i18n from 'i18next';\nimport '../helper/multiselect.scss'\nimport { useTranslation } from 'react-i18next';\nexport const MultiSelect = props => {\n    const { t } = useTranslation('common');\n    const valueRef = useRef(props.value);\n    valueRef.current = props.value;\n    const {open,defaultSemester,semesters}=props;\n\n    const selectAllOption = {\n        value: \"<SELECT_ALL>\",\n        label: t('all_teachers')\n    };\n\n    const isSelectAllSelected = () =>\n        valueRef.current.length === props.options.length;\n\n    const isOptionSelected = option =>\n        valueRef.current.some(({ value }) => value === option.value) ||\n        isSelectAllSelected();\n\n    const getOptions = () => [selectAllOption, ...props.options];\n\n    const getValue = () =>\n        isSelectAllSelected() ? [selectAllOption] : props.value;\n\n    const onChange = (newValue, actionMeta) => {\n        const { action, option, removedValue } = actionMeta;\n\n        if (action === \"select-option\" && option.value === selectAllOption.value) {\n            props.onChange(props.options, actionMeta);\n        }\n        else if (\n            (action === \"deselect-option\" &&\n                option.value === selectAllOption.value) ||\n            (action === \"remove-value\" &&\n                removedValue.value === selectAllOption.value)\n        ) {\n            props.onChange([], actionMeta);\n        } else if (\n            actionMeta.action === \"deselect-option\" &&\n            isSelectAllSelected()\n        ) {\n            props.onChange(\n                props.options.filter(({ value }) => value !== option.value),\n                actionMeta\n            );\n        } else {\n            props.onChange(newValue || [], actionMeta);\n        }\n    };\n   const handleChange = (newValue, actionMeta) => {\n        props.onChangeSemesterValue(newValue);\n    };\n\n    return (\n\n        <Dialog id=\"select-dialog\"\n\n                disableBackdropClick={true}\n                aria-labelledby=\"confirm-dialog-title\"\n                open={open}\n        >\n            <DialogTitle id=\"select-dialog-title\" className=\"confirm-dialog\">\n                <div className=\"teacher-semester\">\n                    <span>{`${t('schedule_for_semester')}:`}</span>\n                    <Select\n                        defaultValue={defaultSemester}\n                        options={semesters}\n                        onChange={handleChange}\n                    />\n\n\n        <ReactSelect\n            classname={\"teacher\"}\n            isOptionSelected={isOptionSelected}\n            options={getOptions()}\n            value={getValue()}\n            onChange={onChange}\n            hideSelectedOptions={false}\n            closeMenuOnSelect={false}\n            isMulti\n            placeholder={t('choose_teachers')}\n        />\n                </div>\n\n\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={props.onCancel}\n                >\n                    {t('cancel_schedule')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={props.onSentTeachers}\n                    disabled={!props.isEnabledSentBtn}\n                >\n                    {t('sent_schedule')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport AddTeacherForm from '../../components/AddTeacherForm/AddTeacherForm';\nimport Card from '../../share/Card/Card';\n\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\n\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport Button from '@material-ui/core/Button';\n\nimport './TeachersList.scss';\n\nimport { connect } from 'react-redux';\nimport {\n    getCurrentSemesterService,\n    getDefaultSemesterService,\n    sendTeachersScheduleService, showAllPublicSemestersService\n} from '../../services/scheduleService';\nimport {\n    getDisabledTeachersService,\n    handleTeacherService,\n    removeTeacherCardService,\n    selectTeacherCardService,\n    setDisabledTeachersService,\n    setEnabledTeachersService,\n    showAllTeachersService\n} from '../../services/teacherService';\n\nimport { useTranslation } from 'react-i18next';\nimport { search } from '../../helper/search';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport NotFound from '../../share/NotFound/NotFound';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { getPublicClassScheduleListService } from '../../services/classService';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport Multiselect, { MultiSelect } from '../../helper/multiselect';\nimport Example from '../../helper/multiselect';\nimport { getFirstLetter, getTeacherFullName } from '../../helper/renderTeacher';\nimport { showAllSemestersService } from '../../services/semesterService';\nimport { clearDepartment, getAllDepartmentsService, getDepartmentByIdService } from '../../services/departmentService';\nimport { clearDepartmentForm, getDepartItemById } from '../../redux/actions/departments';\nimport { getShortTitle } from '../../helper/shortTitle';\nimport i18n from 'i18next';\n\nconst TeacherList = props => {\n    const { t } = useTranslation('common');\n\n    const [open, setOpen] = useState(false);\n    const [teacherCardId, setTeacherId] = useState();\n    const [term, setTerm] = useState('');\n    const [disabled, setDisabled] = useState(false);\n    const [hideDialog, setHideDialog] = useState(null);\n    const [openSelect, setOpenSelect] = useState(false);\n\n\n    useEffect(() => showAllTeachersService(), []);\n    useEffect(() => getDisabledTeachersService(), []);\n    useEffect(() => getPublicClassScheduleListService(), []);\n    useEffect(() => getDefaultSemesterService(), []);\n    useEffect(() => getCurrentSemesterService(), []);\n    useEffect(() => showAllPublicSemestersService(), []);\n    useEffect(() => showAllSemestersService(), []);\n    useEffect(() => getAllDepartmentsService(), []);\n    const { teachers, disabledTeachers, currentSemester, semesters, defaultSemester, departments, department } = props;\n\n    const setOptions = () => {\n        return teachers.map(item => {\n            return {\n                id: item.id,\n                value: item.id,\n                label: `${item.surname} ${getFirstLetter(item.name)} ${getFirstLetter(item.patronymic)}`\n            };\n        });\n    };\n    const setSemesterOptions = () => {\n        return semesters !== undefined ? semesters.map(item => {\n            return { id: item.id, value: item.id, label: `${item.description}` };\n        }) : null;\n\n    };\n    const parseDefaultSemester = () => {\n        return { id: defaultSemester.id, value: defaultSemester.id, label: `${defaultSemester.description}` };\n    };\n    const setDepartmentOptions = () => {\n        return departments.map(item => {\n            return { id: item.id, value: item.id, label: `${item.name}` };\n        });\n    };\n\n    const teacherLength = disabled ? disabledTeachers.length : teachers.length;\n    const [selected, setSelected] = useState([]);\n    const [selectedSemester, setSelectedSemester] = useState('');\n    const options = setOptions();\n    const semesterOptions = setSemesterOptions();\n    const departmentOptions = setDepartmentOptions();\n    const teacherSubmit = values => {\n\n        const sendData = { ...values, department: department };\n\n        handleTeacherService(sendData);\n        clearDepartment();\n\n    };\n\n    const selectTeacherCard = teacherCardId => {\n        selectTeacherCardService(teacherCardId);\n    };\n\n    const removeTeacherCard = id => {\n        removeTeacherCardService(id);\n    };\n\n    const handleClickOpen = teacherCardId => {\n        setTeacherId(teacherCardId);\n        setOpen(true);\n    };\n\n    const handleClose = teacherCardId => {\n        setOpen(false);\n        if (!teacherCardId) {\n            return;\n        }\n        if (hideDialog) {\n            if (disabled) {\n                const teacher = disabledTeachers.find(\n                    teacher => teacher.id === teacherCardId\n                );\n                setEnabledTeachersService(teacher);\n            } else {\n                const teacher = teachers.find(\n                    teacher => teacher.id === teacherCardId\n                );\n                setDisabledTeachersService(teacher);\n            }\n        } else {\n            removeTeacherCard(teacherCardId);\n        }\n        setHideDialog(null);\n    };\n    const handleCloseSending = scheduleId => {\n        setOpenSelect(false);\n    };\n    const [teacher, setTeacher] = useState(0);\n\n\n    const visibleItems = disabled\n        ? search(disabledTeachers, term, ['name', 'surname', 'patronymic'])\n        : search(teachers, term, ['name', 'surname', 'patronymic']);\n\n    const SearchChange = term => {\n        setTerm(term);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    const handleToUpperCase = str => {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    };\n    const cancelSelection = () => {\n        clearSelection();\n        closeSelectionDialog();\n    };\n    const sendTeachers = () => {\n        closeSelectionDialog();\n        const teachersId = selected.map(item => {\n            return item.id;\n        });\n        const semesterId = selectedSemester === '' ? defaultSemester.id : selectedSemester.id;\n        const { language } = i18n;\n        const data = { semesterId, teachersId, language };\n        sendTeachersScheduleService(data);\n        clearSelection();\n    };\n    const closeSelectionDialog = () => {\n        setOpenSelect(false);\n    };\n    const clearSelection = () => {\n        setSelected([]);\n    };\n    const isChosenSelection = () => {\n        return selected.length !== 0;\n    };\n    const getTeacherTitle = (title) => {\n        const MAX_LENGTH = 30;\n        return getShortTitle(title, MAX_LENGTH);\n    };\n    return (\n        <>\n            <NavigationPage name={navigationNames.TEACHER_LIST} val={navigation.TEACHERS} />\n            <div className='cards-container'>\n\n                <ConfirmDialog\n                    cardId={teacherCardId}\n                    whatDelete={cardType.TEACHER}\n                    open={open}\n                    isHide={hideDialog}\n                    onClose={handleClose}\n                />\n\n\n                <aside className='form-with-search-panel'>\n\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    <Button\n                        className='send-button'\n                        variant='contained'\n                        color='primary'\n                        onClick={() => {\n                            setOpenSelect(true);\n                        }}\n                    >\n                        {t('send_schedule_for_teacher')}\n                    </Button>\n                    <>\n                        <MultiSelect open={openSelect}\n                                     options={options}\n                                     value={selected}\n                                     onChange={setSelected}\n                                     onCancel={cancelSelection}\n                                     onSentTeachers={sendTeachers}\n                                     isEnabledSentBtn={isChosenSelection()}\n                                     semesters={semesterOptions}\n                                     defaultSemester={parseDefaultSemester()}\n                                     onChangeSemesterValue={setSelectedSemester}\n\n                        />\n                    </>\n\n                    {disabled ? (\n                        ''\n                    ) : (\n                        <AddTeacherForm\n                            departments={departmentOptions}\n                            teachers={teachers}\n                            onSubmit={teacherSubmit}\n                            onSetSelectedCard={selectTeacherCard}\n                        />\n                    )}\n                </aside>\n\n                <section className='container-flex-wrap'>\n                    {visibleItems.length === 0 && (\n                        <NotFound name={t('formElements:teacher_a_label')} />\n                    )}\n                    {teacherLength > 0 ? (\n                        visibleItems.map((teacher, index) => (\n                            <Card\n                                key={index}\n                                {...teacher}\n                                class='teacher-card done-card'\n                            >\n                                <div className='cards-btns'>\n                                    {!disabled ? (\n                                        <>\n                                            <GiSightDisabled\n                                                className='svg-btn copy-btn'\n                                                title={t('common:set_disabled')}\n                                                onClick={() => {\n                                                    setHideDialog(\n                                                        disabledCard.HIDE\n                                                    );\n                                                    handleClickOpen(teacher.id);\n                                                }}\n                                            />\n                                            <FaEdit\n                                                className='svg-btn edit-btn'\n                                                title={t('common:edit_hover_title')}\n                                                onClick={() =>\n                                                    selectTeacherCard(teacher.id)\n                                                }\n                                            />\n                                        </>\n                                    ) : (\n                                        <IoMdEye\n                                            className='svg-btn copy-btn'\n                                            title={t('common:set_enabled')}\n                                            onClick={() => {\n                                                setHideDialog(disabledCard.SHOW);\n                                                handleClickOpen(teacher.id);\n                                            }}\n                                        />\n                                    )}\n                                    <MdDelete\n                                        className='svg-btn delete-btn'\n                                        title={t('common:delete_hover_title')}\n                                        onClick={() => handleClickOpen(teacher.id)}\n                                    />\n                                </div>\n                                <h2 className='teacher-card-name'>\n                                    {getTeacherTitle(getTeacherFullName(teacher))}\n                                </h2>\n                                <p className='teacher-card-title'>\n                                    {`${ teacher.position } ${teacher.department!==null? t('teacher_department') + \" \" + teacher.department.name:\"\"}`}\n                                </p>\n\n                            </Card>\n                        ))\n                    ) : (\n                        <h2>{t('teacher_card_no_cards')}</h2>\n                    )}\n                </section>\n            </div>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    teachers: state.teachers.teachers,\n    disabledTeachers: state.teachers.disabledTeachers,\n    classScheduler: state.classActions.classScheduler,\n    currentSemester: state.schedule.currentSemester,\n    defaultSemester: state.schedule.defaultSemester,\n    semesters: state.schedule.semesters,\n    departments: state.departments.departments,\n    department: state.departments.department\n});\n\nexport default connect(mapStateToProps, {})(TeacherList);\n","\nimport { getTeacherForSite } from './renderTeacher';\n\nexport const setValueToTeacherForSiteHandler = (teachers, id, setValue) => {\n    const teacher = teachers.find(teacher => teacher.id === +id);\n    if (!teacher) setValue('teacherForSite', '');\n    else setValue('teacherForSite', getTeacherForSite(teacher));\n};\n\nexport const setValueToSubjectForSiteHandler = (subjects, subjectId, setValue) => {\n    const subject = subjects.find(subject => subject.id === +subjectId);\n    if (!subject) return setValue('subjectForSite', '');\n    else setValue('subjectForSite', subject.name);\n};\n","import Multiselect from 'multiselect-react-dropdown';\nimport React, { useEffect } from 'react';\n\nexport let RenderMultiselect = ({\n                                    input, options, hidePlaceholder, placeholder,\n                                    displayValue, selectedValues, alwaysDisplayedItem,\n                                    meta: { touched, invalid, error }\n                                }) => {\n\n    useEffect(() => {\n        input.onChange([alwaysDisplayedItem]);\n    }, [alwaysDisplayedItem.id]);\n    return (<>\n\n        <Multiselect {...input}\n                     onBlur={() => input.onBlur()}\n                     onSelect={(e) => input.onChange([...e])}\n                     onRemove={(e) => input.onChange([...e])}\n                     options={options}\n                     displayValue={displayValue}\n                     placeholder={placeholder}\n                     hidePlaceholder={hidePlaceholder}\n                     selectedValues={selectedValues}\n                     preSelectedValues={selectedValues}\n                     disablePreSelectedValues={true}\n\n        />\n\n    </>);\n};","import React, { useEffect, useState } from 'react';\n\nimport Card from '../../share/Card/Card';\n\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport renderSelectField from '../../share/renderedFields/select';\nimport renderCheckboxField from '../../share/renderedFields/checkbox';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { LESSON_FORM } from '../../constants/reduxForms';\nimport './LessonForm.scss';\nimport {\n    lessThanZero,\n    maxLengthValue,\n    required\n} from '../../validation/validateFields';\nimport { useTranslation } from 'react-i18next';\nimport { getLessonsByGroupService, setUniqueErrorService } from '../../services/lessonService';\nimport { handleTeacherInfo } from '../../helper/renderTeacher';\nimport {\n    setValueToSubjectForSiteHandler\n} from '../../helper/reduxFormHelper';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\nimport { clearGroupService, selectGroupService } from '../../services/groupService';\nimport { RenderMultiselect } from '../../share/renderedFields/renderMultiselect';\nimport { Accordion, AccordionDetails, AccordionSummary } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(() => ({\n    notSelected: {\n        '&': {\n            textAlign: 'center',\n            margin: 'auto'\n        }\n    }\n}));\n\nlet LessonForm = props => {\n    const { t } = useTranslation('formElements');\n\n    const { handleSubmit, pristine, reset, submitting, groups, group } = props;\n\n    const classes = useStyles();\n\n    const lesson = props.lesson;\n    const lessonId = lesson.id;\n\n    const isUniqueError = props.isUniqueError;\n\n    const teachers = props.teachers;\n\n    const subjects = props.subjects;\n\n    const groupId = props.groupId;\n\n    const [checked, setChecked] = React.useState(false);\n    const handleChange = event => setChecked(event.target.checked);\n    useEffect(() => {\n        selectGroupService(groupId);\n    }, groupId);\n    useEffect(() => {\n        setChecked(false);\n        if (lessonId) {\n            initializeFormHandler(lesson);\n        } else {\n            props.initialize();\n        }\n    }, [lessonId]);\n\n    const initializeFormHandler = lesson => {\n        props.initialize({\n            lessonCardId: lesson.id,\n            teacher: lesson.teacher.id,\n            subject: lesson.subject.id,\n            type: lesson.lessonType,\n            hours: lesson.hours,\n            linkToMeeting: lesson.linkToMeeting,\n            subjectForSite: lesson.subjectForSite,\n            grouped: lesson.grouped,\n            groups: [group]\n        });\n        setChecked(lesson.grouped);\n    };\n\n    return (\n        <Card class='form-card'>\n            {groupId ? (\n                <h2 className='form-title under-line'>\n                    {lessonId ? t('edit_title') : t('create_title')}\n                    {t('lesson_label')}\n                </h2>\n            ) : (\n                ''\n            )}\n            {groupId ? (\n                <form onSubmit={handleSubmit}>\n                    <Field\n                        id='teacher'\n                        name='teacher'\n                        className='form-field'\n                        component={renderSelectField}\n                        label={t('teacher_label')}\n                        {...(!isUniqueError\n                            ? { validate: [required] }\n                            : { error: isUniqueError })}\n                        onChange={() =>\n                            setUniqueErrorService(false)\n                        }\n                    >\n                        <option />\n                        {teachers.map(teacher => (\n                            <option key={teacher.id} value={teacher.id}>\n                                {handleTeacherInfo(teacher)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        id='subject'\n                        name='subject'\n                        className='form-field'\n                        component={renderSelectField}\n                        label={t('subject_label')}\n                        {...(!isUniqueError\n                            ? { validate: [required] }\n                            : { error: isUniqueError })}\n                        onChange={event => {\n                            setValueToSubjectForSiteHandler(\n                                subjects,\n                                event.target.value,\n                                props.change\n                            );\n                            setUniqueErrorService(false);\n                        }}\n                    >\n                        <option value={''} />\n                        {subjects.map(subject => (\n                            <option key={subject.id} value={subject.id}>\n                                {subject.name}\n                            </option>\n                        ))}\n                    </Field>\n                    <div className='form-fields-container'>\n                        <Field\n                            id='type'\n                            name='type'\n                            className='form-field'\n                            component={renderSelectField}\n                            label={t('type_label')}\n                            {...(!isUniqueError\n                                ? { validate: [required] }\n                                : { error: isUniqueError })}\n                            onChange={() => {\n                                setUniqueErrorService(false);\n                            }}\n                        >\n                            <option value={''} />\n                            {props.lessonTypes.map((lessonType, index) => (\n                                <option value={lessonType} key={index}>\n                                    {t(\n                                        `formElements:lesson_type_${lessonType.toLowerCase()}_label`\n                                    )}\n                                </option>\n                            ))}\n                        </Field>\n                        <Field\n                            id='hours'\n                            name='hours'\n                            className='form-field'\n                            type='number'\n                            component={renderTextField}\n                            label={t('hours_label')}\n                            validate={[required, lessThanZero]}\n                        />\n                        <Field\n                            id='grouped'\n                            name='grouped'\n                            className='form-field'\n                            label={t('formElements:grouped_label')}\n                            labelPlacement='end'\n                            defaultValue={checked}\n                            component={renderCheckboxField}\n                            checked={checked}\n                            onChange={handleChange}\n                            color='primary'\n                        />\n\n\n                    </div>\n                    <Field\n                        id='linkToMeeting'\n                        name='linkToMeeting'\n                        className='form-field'\n                        rowsMax='1'\n                        margin='normal'\n                        component={renderTextField}\n                        label={t('link_to_meeting_label')}\n                        validate={[required, maxLengthValue]}\n                        type='url'\n                        placeholder={'Input URL'}\n                    />\n                    <Field\n                        id='subjectForSite'\n                        name='subjectForSite'\n                        className='form-field'\n                        multiline\n                        rowsMax='1'\n                        margin='normal'\n                        component={renderTextField}\n                        label={t('subject_label') + t('for_site_label')}\n                        validate={[required, maxLengthValue]}\n                    />\n                    {!lessonId ?\n                        <Accordion>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-controls='panel1a-content'\n                                id='panel1a-header'\n                            >\n                                <Typography>{t('copy_for_button_label')}</Typography>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <Typography>\n                                    <>\n                                        <p className='group-label'>\n                                            <label htmlFor={'groups'}>{t('copy_groups_label')}</label>\n                                        </p>\n                                        <Field\n                                            id='groups'\n                                            name='groups'\n                                            component={RenderMultiselect}\n                                            options={groups}\n                                            displayValue={'title'}\n                                            className='form-control mt-2'\n                                            placeholder={t('groups_label')}\n                                            hidePlaceholder={true}\n                                            selectedValues={[group]}\n                                            alwaysDisplayedItem={group}\n                                        />\n                                    </>\n                                </Typography>\n                            </AccordionDetails>\n                        </Accordion>\n                        : null}\n                    <div className='form-buttons-container'>\n                        <Button\n                            className='buttons-style'\n                            type='submit'\n                            variant='contained'\n                            color='primary'\n                            disabled={pristine || submitting}\n                            onClick={() => {\n                                setChecked(false);\n                            }}\n                        >\n                            {t('save_button_label')}\n                        </Button>\n                        <Button\n                            className='buttons-style'\n                            type='button'\n                            variant='contained'\n                            disabled={setDisableButton(pristine, submitting, lesson.id)}\n                            onClick={() => {\n                                reset();\n                                setUniqueErrorService(null);\n                                props.onSetSelectedCard(null);\n                            }}\n                        >\n                            {getClearOrCancelTitle(lesson.id, t)}\n                        </Button>\n                    </div>\n                </form>\n            ) : (\n                <div className={classes.notSelected}>\n                    <h2>{t('group_label') + ' ' + t('not_selected_label')}</h2>\n                </div>\n            )}\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => (\n    {\n        lesson: state.lesson.lesson,\n        groups: state.groups.groups,\n        group: state.groups.group,\n        groupId: state.lesson.groupId\n    });\n\nLessonForm = reduxForm({\n    form: LESSON_FORM\n})(LessonForm);\n\nexport default connect(mapStateToProps)(LessonForm);\n","import React from 'react';\nimport MomentUtils from '@date-io/moment';\nimport * as moment from 'moment';\nimport { TimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\n\nconst renderTimePicker = ({\n    label,\n    input: { value, ...inputProps },\n    meta: { touched, invalid, error },\n    ...custom\n}) => {\n    return (\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n            <TimePicker\n                clearable\n                ampm={false}\n                value={value ? moment(value, 'HH:mm').toDate() : null}\n                error={touched && invalid}\n                helperText={touched && error ? touched && error : label}\n                format=\"HH:mm\"\n                {...inputProps}\n                {...custom}\n            />\n        </MuiPickersUtilsProvider>\n    );\n};\n\nexport default renderTimePicker;\n","import React, { useEffect } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport '../LessonForm/LessonForm';\nimport './ClassForm.scss';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport renderTimePicker from '../../share/renderedFields/time';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport {\n    required,\n    greaterThanTime,\n    lessThanTime,\n    uniqueClassName,\n    timeIntersect\n} from '../../validation/validateFields';\n\nimport { CLASS_FORM } from '../../constants/reduxForms';\nimport * as moment from 'moment';\nimport { CLASS_DURATION } from '../../constants/common';\nimport { useTranslation } from 'react-i18next';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nconst useStyles = makeStyles(theme => ({\n    rootInput: {\n        width: '20em'\n    }\n}));\n\nlet ClassFormFunc = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting,classScheduleOne } = props;\n    const classes = useStyles();\n\n    useEffect(() => {\n        let initialValues = {};\n        if (props.classScheduleOne) {\n            initialValues = props.classScheduleOne;\n        }\n        props.initialize(initialValues);\n    }, [props.classScheduleOne]);\n\n    const setEndTime = startTime =>\n        props.change(\n            'endTime',\n            moment(startTime, 'HH:mm').add(CLASS_DURATION, 'h').format('HH:mm')\n        );\n\n    return (\n        <Card class=\"form-card\">\n            <h2 className=\"form-title\">\n                {props.classScheduleOne.id\n                    ? t('edit_title')\n                    : t('create_title')}{' '}\n                {t('class_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    component={renderTextField}\n                    className=\"form-field\"\n                    name=\"class_name\"\n                    id=\"class_name\"\n                    label={t('class_label')}\n                    type=\"text\"\n                    validate={[required, uniqueClassName]}\n                />\n                <div className=\"form-time-block\">\n                    <Field\n                        component={renderTimePicker}\n                        className=\"time-input\"\n                        name=\"startTime\"\n                        label={t('class_from_label')}\n                        type=\"time\"\n                        validate={[required, lessThanTime, timeIntersect]}\n                        onChange={(event, value) => {\n                            if (value) {\n                                setEndTime(value);\n                            }\n                        }}\n                    />\n                    <Field\n                        component={renderTimePicker}\n                        className=\"time-input\"\n                        name=\"endTime\"\n                        label={t('class_to_label')}\n                        type=\"time\"\n                        validate={[required, greaterThanTime, timeIntersect]}\n                    />\n                </div>\n\n                <div className=\"form-buttons-container\">\n                    <Button\n                        className=\"buttons-style\"\n                        type=\"submit\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        className=\"buttons-style\"\n                        type=\"button\"\n                        variant=\"contained\"\n                        disabled={setDisableButton(pristine,submitting,classScheduleOne.id)}\n                        onClick={onReset}\n                    >\n                        {getClearOrCancelTitle(classScheduleOne.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: CLASS_FORM\n    })(ClassFormFunc)\n);\n","export const CLASS_DURATION = \"1.3333333333333333333333333333\";\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\n\nimport ClassForm from '../../components/ClassForm/ClassForm';\nimport Card from '../../share/Card/Card';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\n\nimport {\n    getClassScheduleListService,\n    addClassScheduleOneService,\n    getClassScheduleOneService,\n    deleteClassScheduleOneService,\n    clearClassScheduleOneService\n} from '../../services/classService';\nimport { useTranslation } from 'react-i18next';\n\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst ClassSchedule =(props) => {\n    const { t } = useTranslation('formElements');\n    const [open, setOpen] = useState(false);\n    const [classId, setClassId] = React.useState(-1);\n    useEffect(() => getClassScheduleListService(), []);\n\n    const submit = values => {\n        if (!values.id && props.classScheduler.length >= 7)\n            return handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                t('max_count_classes_reached')\n            );\n        addClassScheduleOneService(values);\n    };\n\n    const handleEdit = classId => {\n        getClassScheduleOneService(classId);\n    };\n\n    const handleFormReset = () => {\n        clearClassScheduleOneService();\n    };\n\n    const handleClickOpen = classId => {\n        setClassId(classId);\n        setOpen(true);\n    };\n\n    const handleClose = classId => {\n        setOpen(false);\n        if (!classId) {\n            return;\n        }\n        deleteClassScheduleOneService(classId);\n    };\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.CLASS_SCHEDULE_TITLE} val={navigation.PERIOD}/>\n        <div className=\"cards-container\">\n            <ConfirmDialog\n                selectedValue={''}\n                cardId={classId}\n                whatDelete={cardType.CLASS.toLowerCase()}\n                open={open}\n                onClose={handleClose}\n            />\n            <ClassForm onSubmit={submit} onReset={handleFormReset} />\n            <section className=\"container-flex-wrap\">\n                {props.classScheduler.map(schedule => (\n                    <Card class=\"class-card-width\" key={schedule.id}>\n                        <div className=\"cards-btns\">\n                            <FaEdit\n                                className=\"svg-btn\"\n                                title={t('common:edit_hover_title')}\n                                onClick={() => handleEdit(schedule.id)}\n                            />\n                            <MdDelete\n                                className=\"svg-btn\"\n                                title={t('common:delete_hover_title')}\n                                onClick={() => handleClickOpen(schedule.id)}\n                            />\n                        </div>\n                        <p>\n                            {t('class_label')}: {schedule.class_name}\n                        </p>\n                        <p>\n                            {t('class_from_label')} - {t('class_to_label')}\n                        </p>\n                        <p>\n                            {schedule.startTime} - {schedule.endTime}\n                        </p>\n                    </Card>\n                ))}\n            </section>\n        </div>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    ClassScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps, {})(ClassSchedule);\n","import { connect } from 'react-redux'\nimport React, { useEffect } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport Button from '@material-ui/core/Button'\nimport { useTranslation}  from 'react-i18next'\n\n\nimport Card from '../../share/Card/Card'\nimport { DEPARTMENT_FORM} from '../../constants/reduxForms';\nimport renderTextField from '../../share/renderedFields/input'\nimport { required, uniqueSubject, maxLengthValue, uniqueDepartment } from '../../validation/validateFields';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nconst AddDepartment = props => {\n    const { t } = useTranslation('formElements');\n    const {handleSubmit,clear,department,pristine,submitting,editDepartment}=props;\n    useEffect(() => {\n        if (department&&editDepartment) {\n            if (department.id) {\n                props.initialize({\n                    name: department.name,\n                    id: department.id\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [department]);\n\n    return (\n        <Card class='form-card subject-form'>\n            <h2 style={{ textAlign: 'center' }}>\n                {department.id ? t('edit_title') : t('create_title')}\n                {t('department_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    className='form-field'\n                    name='name'\n                    component={renderTextField}\n                    label={t('name')+':'}\n                    validate={[required, uniqueDepartment, maxLengthValue]}\n                />\n                <div className='form-buttons-container subject-btns'>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className='buttons-style '\n                        disabled={pristine || submitting}\n                        type='submit'>\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        type='button'\n                        variant='contained'\n                        className='buttons-style'\n                        disabled={setDisableButton(pristine,submitting,department.id)}\n                        onClick={clear}\n                        >\n                        {getClearOrCancelTitle(department.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    )\n}\n\nconst mapStateToProps = state => ({\n    department:state.departments.department\n})\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: DEPARTMENT_FORM\n    })(AddDepartment)\n)\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { getTeacherFullName } from './renderTeacher';\nimport { useTranslation } from 'react-i18next';\nimport { FaEnvelope } from 'react-icons/fa';\nimport TableHead from '@material-ui/core/TableHead';\nimport { withStyles } from '@material-ui/core';\nconst useStyles1 = makeStyles((theme) => ({\n    root: {\n        flexShrink: 0,\n        marginLeft: theme.spacing(2.5),\n    },\n}));\n\nfunction RenderTeacherTableActions(props) {\n    const classes = useStyles1();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onPageChange } = props;\n\n    const handleFirstPageButtonClick = (event) => {\n        onPageChange(event, 0);\n    };\n\n    const handleBackButtonClick = (event) => {\n        onPageChange(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event) => {\n        onPageChange(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event) => {\n        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.root}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nRenderTeacherTableActions.propTypes = {\n    count: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nconst useStyles2 = makeStyles({\n    table: {\n        minWidth: 500,\n    },\n});\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.white,\n        color: theme.palette.common.black,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport default function RenderTeacherTable(props) {\n    const classes = useStyles2();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const {teachers}=props;\n    const { t } = useTranslation('formElements');\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, teachers.length - page * rowsPerPage);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n    const sendMail = (email) => {\n        const mailto =\n            // \"mailto:mail@gmail.com?subject=Test subject&body=Body content\";\n            `mailto:${email}`;\n        window.location.href = mailto;\n    }\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"custom pagination table\">\n\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell>{t('teacher_label')}</StyledTableCell>\n                        <StyledTableCell>{t('teacher_position')}</StyledTableCell>\n                        <StyledTableCell>{t('send_letter_title')}</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n\n                <TableBody>\n                    {(rowsPerPage > 0\n                            ? teachers.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            : teachers\n                    ).map((teacher) => (\n                        <StyledTableRow key={teacher.position}>\n                            <StyledTableCell align=\"center\" style={{ width: 160 }}>\n                                {getTeacherFullName(teacher)}\n                            </StyledTableCell>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                {teacher.position}\n                            </StyledTableCell>\n                            <StyledTableCell style={{ width: 160 }} align=\"center\">\n                                <span>\n                                    <p>{teacher.email}</p>\n                                    <FaEnvelope\n                                        className=\"svg-btn send-message\"\n                                        title={`${t('send_letter_title')} ${teacher.email}`}\n                                        onClick={()=>sendMail(teacher.email)}\n                                    />\n                                </span>\n\n                            </StyledTableCell>\n                        </StyledTableRow>\n                    ))}\n\n                    {emptyRows > 0 && (\n                        <StyledTableRow style={{ height: 53 * emptyRows }}>\n                            <TableCell colSpan={6} />\n                        </StyledTableRow>\n                    )}\n                </TableBody>\n                <TableFooter>\n                    <StyledTableRow>\n                        <TablePagination\n                            labelRowsPerPage={`${t('rows_per_page')}`}\n                            rowsPerPageOptions={[5, 10, 25, { label: `${t('all_page')}`, value: -1 }]}\n                            colSpan={3}\n                            count={teachers.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            SelectProps={{\n                                inputProps: { 'aria-label': 'rows per page' },\n                                native: true,\n                            }}\n                            onPageChange={handleChangePage}\n                            onRowsPerPageChange={handleChangeRowsPerPage}\n                            ActionsComponent={RenderTeacherTableActions}\n                        />\n                    </StyledTableRow>\n                </TableFooter>\n            </Table>\n        </TableContainer>\n    );\n}\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport '../dialog.scss';\nimport './showDataDialog.scss'\n\nimport i18n from '../../../helper/i18n';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport RenderTeacherTable from '../../../helper/renderTeacherTable';\n\nexport const ShowDataDialog = props => {\n    const { onClose,  cardId, open,teachers,department } = props;\n    const { t } = useTranslation('formElements');\n    const handleClose = () => {\n        onClose(cardId);\n    };\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">\n                <>\n\n                    <>\n                        {teachers.length===0?\n                            <>\n                                <h2 className=\"title-align\">{`${t('department_teachers_label')} - `}<span>{`${department.name}`}</span></h2>\n                                {t('no_exist_teachers_at_department')}\n                            </>\n\n                            :\n                            <>\n                                <h3 className=\"title-align\"><span>{teachers.length!==1?`${t('teachers_label')} `:`${t('teacher_label')} `}</span>{`${t('department_teachers')} `}<span>{`${department.name}`}</span></h3>\n                                <RenderTeacherTable teachers={teachers}/>\n                            </>\n                        }\n                    </>\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                    color=\"primary\"\n                >\n                    {i18n.t('common:close_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nShowDataDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\nconst mapStateToProps = state => ({\n    department: state.departments.department\n});\n\nexport default connect(mapStateToProps, {})(ShowDataDialog);","import React, { useEffect, useState } from 'react';\nimport AddDepartment from '../../components/AddDepartmentForm/AddDepartmentForm';\nimport {\n    clearDepartment,\n    createDepartmentService,\n    deleteDepartmentsService,\n    getAllDepartmentsService,\n    getDepartmentByIdService,\n    getDisabledDepartmentsService,\n    setDisabledDepartmentService, setEnabledDepartmentService,\n    updateDepartmentService\n} from '../../services/departmentService';\nimport { connect } from 'react-redux';\nimport Card from '../../share/Card/Card';\nimport { GiSightDisabled, IoMdEye, MdFace } from 'react-icons/all';\nimport { FaChalkboardTeacher, FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport { setDisabledDepartment, setEnabledDepartment } from '../../redux/actions/departments';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport Button from '@material-ui/core/Button';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport { getAllTeachersByDepartmentId } from '../../redux/actions/teachers';\nimport { showAllPublicTeachersByDepartmentService } from '../../services/scheduleService';\nimport ShowDataDialog from '../../share/modals/modal/showDataDialog';\n\nfunction DepartmentPage(props) {\n    const { t } = useTranslation('formElements');\n    const { departments, disabledDepartments } = props;\n    const [isDisabled, setIsDisabled] = useState(false);\n    const [term, setTerm] = useState('');\n    const [deleteDialog, setDeleteDialog] = useState(false);\n    const [departmentId, setDepartmentId] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n    const [department, setDepartment] = useState({});\n    const [teacherDialog, setTeacherDialog] = useState(false);\n    const [editDepartment, setEditDepartment] = useState(false);\n    const { isSnackbarOpen, snackbarType, snackbarMessage, teachers } = props;\n    useEffect(() => clearDepartmentForm(), []);\n    const visibleDepartments = isDisabled\n        ? search(disabledDepartments, term, ['name'])\n        : search(departments, term, ['name']);\n    const SearchChange = setTerm;\n    const changeDisable = () => {\n        setIsDisabled(prev => !prev);\n    };\n    const submit = (data) => {\n        data.id === undefined ?\n            createDepartmentService(data) :\n            updateDepartmentService(data);\n    };\n    const clearDepartmentForm = () => {\n        clearDepartment();\n    };\n    const deleteDepartment = (id) => {\n        setDepartmentId(id);\n        setDeleteDialog(true);\n    };\n    const setDisabled = (department) => {\n\n        const disabledDepartment = { ...department, disabled: true };\n        setDisabledDepartmentService(disabledDepartment);\n    };\n    const setEnabled = (department) => {\n        setDepartmentId(department.id);\n        setDeleteDialog(true);\n        const enabledDepartment = { ...department, disabled: false };\n        setEnabledDepartment(enabledDepartment);\n    };\n    const setDepartmentIntoForm = (id) => {\n        getDepartmentByIdService(id);\n    };\n    const closeTeacherDialog = () => {\n        setTeacherDialog(false);\n    };\n    const handleClose = (id) => {\n        if (id !== '') {\n            if (department.id !== undefined) {\n                if (hideDialog === disabledCard.SHOW) {\n                    const { id, name } = department;\n                    const enabledDepartment = { id, name, disable: false };\n                    setEnabledDepartmentService(enabledDepartment);\n                } else if (hideDialog === disabledCard.HIDE) {\n\n                    const { id, name } = department;\n                    const enabledDepartment = { id, name, disable: true };\n                    setDisabledDepartmentService(enabledDepartment);\n                }\n\n            } else {\n                deleteDepartmentsService(departmentId);\n            }\n        }\n        setDeleteDialog(false);\n    };\n    useEffect(() => getAllDepartmentsService(), [isDisabled]);\n    useEffect(() => {\n        if (isDisabled)\n            getDisabledDepartmentsService();\n    }, []);\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n    return (\n        <>\n            <NavigationPage name={navigationNames.DEPARTMENTS} val={navigation.DEPARTMENTS} />\n            <ConfirmDialog\n                isHide={hideDialog}\n                cardId={departmentId}\n                whatDelete={'department'}\n                open={deleteDialog}\n                onClose={handleClose}\n            />\n            <ShowDataDialog\n                isHide={hideDialog}\n                cardId={departmentId}\n                open={teacherDialog}\n                onClose={closeTeacherDialog}\n                teachers={teachers}\n            />\n            <div className='cards-container'>\n                <aside className='search-list__panel'>\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={changeDisable}\n                    />\n                    {\n                        isDisabled ? '' :\n                            <AddDepartment\n                                onSubmit={submit} clear={clearDepartmentForm} editDepartment={editDepartment}\n                            />\n                    }\n                </aside>\n                <section className='container-flex-wrap wrapper'>\n                    {visibleDepartments.length === 0 && (\n                        <NotFound name={t('department_y_label')} />\n                    )}\n                    {visibleDepartments.map(department => (\n                        <Card key={department.id} class='subject-card department-card'>\n                            <h2 className='subject-card__name'>\n                                {department.name}\n                            </h2>\n                            <div className='cards-btns'>\n                                {isDisabled ?\n                                    <IoMdEye\n                                        className='svg-btn copy-btn'\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            deleteDepartment(department.id);\n                                            setDepartment(department);\n                                        }}\n                                    /> :\n\n                                    (\n                                        <>\n                                            <GiSightDisabled\n                                                className='svg-btn copy-btn'\n                                                title={t('common:set_disabled')}\n                                                onClick={() => {\n                                                    //setDisabled(department)\n                                                    setHideDialog(\n                                                        disabledCard.HIDE\n                                                    );\n                                                    deleteDepartment(department.id);\n                                                    setDepartment(department);\n                                                }}\n                                            />\n\n                                            <FaEdit\n                                                className='svg-btn edit-btn'\n                                                title={t('edit_title')}\n                                                onClick={() => {\n                                                    setEditDepartment(true);\n                                                    setDepartmentIntoForm(department.id);\n                                                }\n                                                }\n                                            />\n                                        </>\n\n                                    )\n                                }\n\n\n                                <MdDelete\n                                    className='svg-btn delete-btn'\n                                    title={t('delete_title')}\n                                    onClick={() => {\n                                        setDepartment({});\n                                        deleteDepartment(department.id);\n                                    }}\n                                />\n                                <FaChalkboardTeacher\n                                    className='svg-btn delete-btn'\n                                    title={t('show_teacher_title')}\n                                    onClick={() => {\n                                        showAllPublicTeachersByDepartmentService(department.id);\n                                        getDepartmentByIdService(department.id);\n                                        setDepartmentIntoForm(department.id);\n                                        setTeacherDialog(true);\n                                    }}\n                                />\n\n                            </div>\n                        </Card>\n                    ))}\n\n\n                </section>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n        </>\n    );\n}\n\nconst mapStateToProps = state => ({\n    departments: state.departments.departments,\n    disabledDepartments: state.departments.disabledDepartments,\n    department: state.departments.department,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message,\n    teachers: state.teachers.teachers\n\n});\n\nexport default connect(mapStateToProps, {})(DepartmentPage);","// import AdminPage from '../containers/AdminPage/AdminPage';\n// import TeacherList from '../containers/TeachersList/TeachersList';\n// import GroupList from '../containers/GroupList/GroupList';\n// import ClassSchedule from '../containers/ClassSchedule/ClassSchedule';\n// import RoomList from '../containers/RoomList/RoomList';\n// import SubjectPage from '../containers/SubjectPage/SubjectPage';\n// import BusyRooms from '../containers/BusyRooms/BusyRooms';\n// import React from 'react';\n// import SemesterPage from '../containers/SemesterPage/SemesterPage';\n// import MergeRolePage from '../containers/MergeRolePage/MergeRolePage';\n// import Changes from '../components/ChangePasswordForm/ChangePasswordForm';\n// import DepartmentPage from '../containers/DepartmentPage/DepartmentPage';\n// export const general=[\n//     { name: 'SemesterPage', component: <SemesterPage /> },\n//     { name: 'MergeRolePage', component: <MergeRolePage /> },\n//     { name: 'Changes', component: <Changes /> },\n//     { name: 'Departments', component: <DepartmentPage /> }];\n// export const tabs_components = [\n//     { name: 'LessonPage', component: <AdminPage /> },\n//     { name: 'TeacherList', component: <TeacherList /> },\n//     { name: 'GroupList', component: <GroupList /> },\n//     { name: 'ClassScheduleTitle', component: <ClassSchedule /> },\n//     { name: 'RoomList', component: <RoomList /> },\n//     { name: 'SubjectPage', component: <SubjectPage /> },\n//     { name: 'BusyRooms', component: <BusyRooms /> },\n//     // { name: 'SemesterPage', component: <SemesterPage /> },\n//     // { name: 'MergeRolePage', component: <MergeRolePage /> },\n//     // { name: 'Changes', component: <Changes /> },\n//     // { name: 'Departments', component: <DepartmentPage /> },\n//     general,\n// ];\nimport AdminPage from '../containers/AdminPage/AdminPage';\nimport TeacherList from '../containers/TeachersList/TeachersList';\nimport GroupList from '../containers/GroupList/GroupList';\nimport ClassSchedule from '../containers/ClassSchedule/ClassSchedule';\nimport RoomList from '../containers/RoomList/RoomList';\nimport SubjectPage from '../containers/SubjectPage/SubjectPage';\nimport BusyRooms from '../containers/BusyRooms/BusyRooms';\nimport React from 'react';\nimport SemesterPage from '../containers/SemesterPage/SemesterPage';\nimport MergeRolePage from '../containers/MergeRolePage/MergeRolePage';\nimport Changes from '../components/ChangePasswordForm/ChangePasswordForm';\nimport DepartmentPage from '../containers/DepartmentPage/DepartmentPage';\nimport { navigationNames } from './navigation';\nexport const general=[\n     {name: navigationNames.GENERAL},\n    { name: navigationNames.CLASS_SCHEDULE_TITLE, component: <ClassSchedule /> },\n    { name: navigationNames.DEPARTMENTS, component: <DepartmentPage /> },\n    { name: navigationNames.GROUP_LIST, component: <GroupList /> },\n    { name: navigationNames.ROOM_LIST, component: <RoomList /> },\n    { name: navigationNames.SUBJECT_PAGE, component: <SubjectPage /> },\n    { name: navigationNames.SEMESTER_PAGE, component: <SemesterPage /> },\n    { name: navigationNames.TEACHER_LIST, component: <TeacherList /> },\n\n];\nexport const tabs_components = [\n    { name: navigationNames.LESSON_PAGE, component: <AdminPage /> },\n    { name: navigationNames.MERGE_ROLE_PAGE, component: <MergeRolePage /> },\n    { name: navigationNames.CHANGES, component: <Changes /> },\n    { name: navigationNames.BUSY_ROOMS, component: <BusyRooms /> },\n    general,\n];\n\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { setCurrentSemester } from '../../redux/actions';\nimport { Link } from 'react-router-dom';\nimport { links } from '../../constants/links';\nimport './NavigationPage.scss';\nimport { MenuItem, Select } from '@material-ui/core';\nimport { general, tabs_components } from '../../constants/navigationComponents';\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n\n    return (\n        <Typography\n            component='div'\n            role='tabpanel'\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper\n    },\n    header: {\n        backgroundColor: theme.palette.info.dark\n    },\n    nav: {\n        textDecoration: 'none',\n        color: '#fff',\n        ':hover': {\n            color: 'purple'\n        }\n    },\n    select: {\n        backgroundColor: 'primary'\n    },\n\n    btn: {\n        margin: 0,\n        width: '10px'\n    }\n}));\n\nconst NavigationPage = (props) => {\n    const { val } = props;\n    const { t } = useTranslation('common');\n    const classes = useStyles();\n    const [value, setValue] = useState(val ? val : 0);\n    const [gen, setGen] = useState(props.name || general[0].name);\n    useEffect(() => {\n        setCurrentSemester();\n    }, []);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    let document_title = title => {\n        document.title = t(`${title}_management_title`);\n    };\n    return (\n        <div className={classes.root}>\n            <AppBar position='static'>\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    aria-label='simple tabs example'\n                    indicatorColor='primary'\n                    variant='scrollable'\n                    scrollButtons='on'\n                    className={classes.header}\n                >\n                    {tabs_components.map((tab_one, index) => (\n\n                        <>\n                            {tab_one.length === undefined ?\n                                <Link className={classes.nav}\n\n                                      to={links[tab_one.name]}>\n                                    <Tab className={classes.btn}\n                                         key={index + tab_one}\n                                         onClick={() => document_title(tab_one.name)}\n                                         label={t(`${tab_one.name}_management_title`)}\n                                         {...a11yProps(index)}\n                                    />\n                                </Link> :\n                                <Select className='general MuiTab-root'\n                                        labelId='demo-controlled-open-select-label'\n                                        id='demo-controlled-open-select'\n                                        value={gen}\n                                        onChange={event => {\n                                            const val = event.target.value;\n                                            setGen(val);\n                                            document_title(val);\n                                        }}\n                                >\n\n                                    {\n                                        Object.entries(tab_one).map(function(data, index) {\n                                            return (\n                                                <MenuItem className={'menu-dictionary MuiTab-root'} value={data[1].name}\n                                                          key={data[0]} {...a11yProps(index)}>\n                                                    <Link className={classes.nav}\n\n                                                          to={links[data[1].name]}>\n                                                        {t(`${data[1].name}_management_title`)}\n                                                    </Link>\n                                                </MenuItem>);\n                                        }, this)\n                                    }\n\n                                </Select>\n\n                            }\n                        </>\n                    ))}\n                </Tabs>\n\n            </AppBar>\n\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    ClassScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps, {})(NavigationPage);\n","import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n    groupField: {\n        '&': {\n            margin: '0 auto',\n            width: '90%'\n        }\n    }\n}));\n\nexport const CopyLessonDialog = props => {\n    const { onClose, lesson, translation, groups, groupId, open } = props;\n    const [group, setGroup] = useState('');\n    const [error, setError] = useState('');\n\n    const classes = useStyles();\n\n    const handleClose = () => {\n        onClose();\n    };\n\n    const chooseClickHandle = () => {\n        if (!group) {\n            return;\n        }\n        if (group.id === groupId) {\n            setError(translation('copy_to_same_group_error'));\n            return;\n        }\n        onClose({ lesson, group });\n    };\n\n    const defaultProps = {\n        options: groups,\n        getOptionLabel: option => (option ? option.title : '')\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"simple-dialog-title\">\n                {translation('choose_group')}\n            </DialogTitle>\n            <Autocomplete\n                {...defaultProps}\n                id=\"group\"\n                multiple\n                clearOnEscape\n                openOnFocus\n                className={classes.groupField}\n                onChange={(event, newValue) => {\n                    setGroup(newValue);\n                    setError(null);\n                }}\n                renderInput={params => (\n                    <TextField\n                        {...params}\n                        label={translation('common:choose_group')}\n                        error={!!error}\n                        helperText={error ? error : null}\n                        margin=\"normal\"\n                    />\n                )}\n            />\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => chooseClickHandle()}\n                >\n                    {translation('formElements:choose_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose()}\n                >\n                    {translation('formElements:cancel_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nCopyLessonDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default CopyLessonDialog;\n","import React from 'react';\n\nimport Card from '../../share/Card/Card';\n\nimport { FaEdit, FaUserPlus } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { MdContentCopy } from 'react-icons/all';\nimport { getTeacherName } from '../../helper/renderTeacher';\nimport i18n from 'i18next';\nimport './LessonList.scss'\nconst LessonsList = props => {\n    const lessons = props.lessons;\n\n    const t = props.translation;\n\n    const firstStringLetterCapitalHandle = str => {\n        return str.replace(/^\\w/, c => c.toUpperCase());\n    };\n    const isGrouped = grouped =>\n        grouped ? (\n            <span className={\"grouped-class\"}>{t('formElements:grouped_label')}</span>\n        ) : (\n            ''\n        );\n    const getUkWordHours=(number)=>{\n        if (number===1){\n            return \"година\"\n        }\n        if(number>=2&&number<=4){\n            return \"години\"\n        }\n        if ((number>=5&&number<=20)||number===0){\n            return \"годин\"\n        }\n        return\n    }\n    const getUkHour=(number)=>{\n        if(number>=20&&number<=100){\n            let toText = number.toString(); //convert to string\n            let lastChar = toText.slice(-1); //gets last character\n            let lastDigit = +(lastChar); //convert last character to number\n            return getUkWordHours(lastDigit);\n        }\n        else if(number>100){\n            let toText = number.toString(); //convert to string\n            let lastChar = toText.slice(-2); //gets last character\n            let lastDigit = +(lastChar); //convert last character to number\n            return getUkWordHours(lastDigit);\n        }\n        else {\n            return  getUkWordHours(number)\n        }\n    }\n    const getEnHour=(number)=>{\n        if (number===1){\n            return \"hour\"\n        }\n        return \"hours\"\n    }\n   const getHour=(number)=>{\n        const language=(i18n.language).toUpperCase();\n        const en=\"EN\";\n        const uk=\"UK\";\n        if(language===en){\n            return getEnHour(number)\n        }\n        else if(language===uk){\n            return getUkHour(number)\n        }\n        return\n   }\n    const getLessonShortTitle=(title)=>{\n        const MAX_LENGTH=50;\n        return title.length>MAX_LENGTH? `${ title.slice(0, MAX_LENGTH) }...`:title;\n    }\n    const getTitle=(lesson)=>{\n       return  firstStringLetterCapitalHandle(\n            lesson.subjectForSite)+\n            \" \"+\n           t(`formElements:lesson_type_${lesson.lessonType.toLowerCase()}_label`)\n    }\n    return (\n        <div>\n            <section className=\"container-flex-wrap\">\n                {lessons.map(lesson => (\n                    <Card class=\"done-card\" key={lesson.id}>\n\n                        <div className=\"cards-btns\">\n                            {isGrouped(lesson.grouped)}\n                            <MdContentCopy\n                                title={t('copy_lesson')}\n                                className=\"svg-btn copy-btn\"\n                                onClick={() => props.onCopyLesson(lesson)}\n                            />\n                            <FaEdit\n                                title={t('edit_lesson')}\n                                className=\"svg-btn edit-btn\"\n                                onClick={() => props.onSelectLesson(lesson.id)}\n                            />\n                            <MdDelete\n                                title={t('delete_lesson')}\n                                className=\"svg-btn delete-btn\"\n                                onClick={() => props.onClickOpen(lesson.id)}\n                            />\n                        </div>\n                        <p style={{height:\"2em\"}}>\n                            {getLessonShortTitle(getTitle(lesson))}\n\n                        </p>\n                       <p>{getTeacherName(lesson.teacher)}</p>\n                        <p>\n                            {' '}\n                            <b>{lesson.hours}</b>{' '}\n                            {getHour(lesson.hours)}\n                        </p>\n                        <p>\n                            <input value={lesson.linkToMeeting} disabled=\"disabled\"/>\n                        </p>\n                    </Card>\n                ))}\n            </section>\n        </div>\n    );\n};\n\nexport default LessonsList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { useTranslation } from 'react-i18next';\n\nimport Button from '@material-ui/core/Button';\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport './CopyLessonsFromSemesterForm.scss';\nimport Card from '../../share/Card/Card';\n\nimport { COPY_LESSONS_FROM_SEMESTER_FORM } from '../../constants/reduxForms';\nimport { required } from '../../validation/validateFields';\nconst shortid = require('shortid');\n\nconst CopyLessonsFromSemesterForm = props => {\n    const { t } = useTranslation('common');\n    const { semesters, handleSubmit, pristine, submitting } = props;\n    const renderSemesterList = () => {\n        if (semesters) {\n            if (semesters.length > 1) {\n                return (\n                    <Field\n                        id=\"fromSemesterId\"\n                        name=\"fromSemesterId\"\n                        component={renderSelectField}\n                        label={t('formElements:semester_label')}\n                        type=\"text\"\n                        validate={[required]}\n                    >\n                        <option />\n                        {semesters.map((semester, index) => (\n                            <option\n                                key={shortid.generate()}\n                                value={semester.id}\n                            >\n                                {semester.description}\n                            </option>\n                        ))}\n                    </Field>\n                );\n            } else if (semesters.length === 1) {\n                handleSubmit({ fromSemesterId: semesters[0].id });\n                return <p>{semesters[0].description}</p>;\n            }\n        }\n    };\n\n    return (\n        <Card class=\"form-card\">\n            <form onSubmit={handleSubmit}>\n                <h2 className=\"lesson-page-h\">{t('copy_lesson')}</h2>\n                <p>{t('copy_lessons_from_semester_to_current')}</p>\n                {renderSemesterList()}\n                <div className=\"form-buttons-container\">\n                    <Button\n                        className='semester-copy-btn'\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={pristine || submitting}\n                    >\n                        {t('formElements:copy_label')}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    semesters: state.semesters.semesters,\n    currentSemester: state.schedule.currentSemester\n});\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: COPY_LESSONS_FROM_SEMESTER_FORM\n    })(CopyLessonsFromSemesterForm)\n);\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport Card from '../../share/Card/Card';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport CopyLessonDialog from '../../share/modals/chooseGroupDialog/CopyLessonDialog';\n\nimport LessonForm from '../../components/LessonForm/LessonForm';\nimport LessonsList from '../../components/LessonsList/LessonsList';\nimport CopyLessonsFromSemesterForm from '../../components/CopyLessonsFromSemesterForm/CopyLessonsFromSemesterForm';\n\nimport {\n    copyLessonCardService,\n    getLessonsByGroupService,\n    getLessonTypesService,\n    handleLessonCardService,\n    removeLessonCardService,\n    selectGroupIdService,\n    selectLessonCardService\n} from '../../services/lessonService';\nimport { showAllTeachersService } from '../../services/teacherService';\nimport { selectGroupService, showAllGroupsService } from '../../services/groupService';\nimport { setLoadingService } from '../../services/loadingService';\nimport { showAllSubjectsService } from '../../services/subjectService';\nimport {\n    showAllSemestersService,\n    CopyLessonsFromSemesterService\n} from '../../services/semesterService';\n\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { styled } from '@material-ui/core/styles';\n\nimport { cardType } from '../../constants/cardType';\n\nimport './LessonPage.scss';\n\nconst GroupField = styled(TextField)({\n    display: 'inline-block',\n    width: '150px'\n});\n\nconst LessonPage = props => {\n    const { t } = useTranslation('common');\n\n    const [open, setOpen] = useState(false);\n    const [openCopyLessonDialog, setOpenCopyLessonDialog] = useState(false);\n    const [lessonId, setLessonId] = React.useState(-1);\n    const [copiedLesson, setCopiedLesson] = React.useState(-1);\n\n    const teachers = props.teachers;\n\n    const isUniqueError = props.isUniqueError;\n\n    const lessons = props.lessons;\n    const lessonLength = lessons.length;\n\n    const isLoading = props.loading;\n\n    const { groups, groupId, currentSemester } = props;\n\n    const subjects = props.subjects;\n\n    useEffect(() => {\n        if (groupId) {\n            setLoadingService(true);\n            getLessonsByGroupService(groupId);\n        }\n    }, [groupId]);\n    useEffect(() => showAllTeachersService(), []);\n    useEffect(() => showAllSemestersService(), []);\n    useEffect(() => getLessonTypesService(), []);\n    useEffect(() => showAllGroupsService(), []);\n    useEffect(() => {\n        showAllSubjectsService();\n    }, []);\n\n    const createLessonCardHandler = card => {\n        if (Object.keys(card).length === 0 && card.constructor === Object)\n            return;\n        handleLessonCardService(card, groupId, currentSemester);\n\n    };\n    useEffect(() => {\n        setLoadingService(true);\n        getLessonsByGroupService(groupId);\n    }, [lessons.length]);\n\n    const selectLessonCardHandler = lessonCardId => {\n        selectLessonCardService(lessonCardId);\n    };\n\n    const groupTitleHandle = (groups, groupId) => {\n        return groups.find(group => group.id === +groupId).title;\n    };\n\n    const groupHandle = (groups, groupId) => {\n        return groups.find(group => group.id === +groupId);\n    };\n\n    const handleClickOpen = lessonId => {\n        setLessonId(lessonId);\n        setOpen(true);\n    };\n\n    const handleClose = lessonId => {\n        setOpen(false);\n        if (!lessonId) return;\n\n        removeLessonCardService(lessonId);\n    };\n\n    const openCopyLessonDialogHandle = lesson => {\n        setCopiedLesson(lesson);\n        setOpenCopyLessonDialog(true);\n    };\n\n    const closeCopyLessonDialogHandle = lessonGroupObj => {\n        setOpenCopyLessonDialog(false);\n        if (!lessonGroupObj) return;\n        copyLessonCardService(lessonGroupObj);\n    };\n\n    const defaultProps = {\n        options: groups,\n        getOptionLabel: option => (option ? option.title : '')\n    };\n\n    const handleGroupSelect = group => {\n        if (group) {\n            selectGroupIdService(group.id);\n            selectGroupService(group.id);\n        }\n        ;\n    };\n\n    const groupFinderHandle = groupId => {\n        if (groupId) return groups.find(group => group.id === groupId);\n        else return '';\n    };\n\n    const submitCopy = values => {\n        values.toSemesterId = props.currentSemester.id;\n        values.fromSemesterId = +values.fromSemesterId;\n        CopyLessonsFromSemesterService(values);\n    };\n\n    const renderCopyLessonsForm = () => {\n        if (!groupId) {\n            return <CopyLessonsFromSemesterForm onSubmit={submitCopy} />;\n        }\n    };\n\n    let cardsContainer = (\n        <>\n            {lessonLength > 0 ? (\n                <LessonsList\n                    lessons={lessons}\n                    onClickOpen={handleClickOpen}\n                    onSelectLesson={selectLessonCardHandler}\n                    onCopyLesson={openCopyLessonDialogHandle}\n                    translation={t}\n                />\n            ) : (\n                <section className='centered-container'>\n                    <h2>\n                        {groupHandle(groups, groupId)\n                            ? t('lesson_no_lesson_for_group_label') +\n                            groupTitleHandle(groups, groupId)\n                            : ''}\n                    </h2>\n                </section>\n            )}\n        </>\n    );\n\n    if (isLoading) {\n        cardsContainer = (\n            <section className='centered-container'>\n                <CircularProgress />\n            </section>\n        );\n    }\n\n    return (\n        <>\n            <Card class='card-title lesson-card'>\n                <CopyLessonDialog\n                    open={openCopyLessonDialog}\n                    onClose={closeCopyLessonDialogHandle}\n                    groupId={groupId}\n                    lesson={copiedLesson}\n                    groups={groups}\n                    translation={t}\n                />\n                <ConfirmDialog\n                    cardId={lessonId}\n                    whatDelete={cardType.LESSON.toLowerCase()}\n                    open={open}\n                    onClose={handleClose}\n                />\n                <div className='lesson-page-title'>\n                    <h1 className='lesson-page-h'>\n                        {t('lesson_for_group_title')}\n                    </h1>\n                    <Autocomplete\n                        {...defaultProps}\n                        id='group'\n                        clearOnEscape\n                        openOnFocus\n                        value={groupFinderHandle(groupId)}\n                        onChange={(event, newValue) => {\n                            handleGroupSelect(newValue);\n                        }}\n                        renderInput={params => (\n                            <GroupField\n                                {...params}\n                                label={t('formElements:group_label')}\n                                margin='normal'\n                            />\n                        )}\n                    />\n                </div>\n            </Card>\n            <div className='cards-container'>\n                <section>\n                    <LessonForm\n                        lessonTypes={props.lessonTypes}\n                        isUniqueError={isUniqueError}\n                        subjects={subjects}\n                        teachers={teachers}\n                        onSubmit={createLessonCardHandler}\n                        onSetSelectedCard={selectLessonCardHandler}\n                    />\n                    {renderCopyLessonsForm()}\n                </section>\n                {cardsContainer}\n            </div>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    lessons: state.lesson.lessons,\n    lessonTypes: state.lesson.lessonTypes,\n    groupId: state.lesson.groupId,\n    isUniqueError: state.lesson.uniqueError,\n    teachers: state.teachers.teachers,\n    groups: state.groups.groups,\n    subjects: state.subjects.subjects,\n    loading: state.loadingIndicator.loading,\n    semesters: state.semesters.semesters,\n    currentSemester: state.schedule.currentSemester\n});\n\nexport default connect(mapStateToProps)(LessonPage);\n","import React from 'react';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport LessonPage from '../LessonPage/LessonPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport { connect } from 'react-redux';\n\n\n\nfunction AdminPage(props){\n    return(\n\n        <>\n            <NavigationPage val={navigation.LESSONS} />\n            <LessonPage/>\n        </>\n    )\n}\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    ClassScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps, {})(AdminPage);","import React, { useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { logout } from '../../../redux/actions/index';\nimport { setScheduleSemesterIdService } from '../../../services/scheduleService';\nimport { useHistory } from 'react-router-dom';\nconst Logout = props => {\n    useEffect(() => {\n        props.onLogout();\n    }, []);\n    // useEffect(()=>setScheduleSemesterIdService(0))\n    // const history=useHistory();\n    // useEffect(()=>history.push(\"/\"));\n    return <Redirect to=\"/\" />;\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(logout())\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(Logout);\n","import * as actionTypes from './actionsType';\nimport { TOKEN_BEGIN } from '../../constants/tokenBegin';\n\nexport const authUser = res => {\n    return {\n        type: actionTypes.AUTH_USER,\n        result: res\n    };\n};\n\nexport const registerUser = res => {\n    return {\n        type: actionTypes.REGISTER_USER,\n        result: res\n    };\n};\n\nexport const resetUserPassword = res => {\n    return {\n        type: actionTypes.RESET_USER_PASSWORD,\n        result: res\n    };\n};\n\nexport const activateUser = res => {\n    return {\n        type: actionTypes.ACTIVATE_USER,\n        result: res\n    };\n};\n\nexport const logout = () => {\n    return {\n        type: actionTypes.AUTH_USER_INITIATE_LOGOUT\n    };\n};\n\nexport const authCheckState = () => {\n    const token = localStorage.getItem('token');\n    if (token && !token.includes(TOKEN_BEGIN)) {\n        return {\n            type: actionTypes.AUTH_USER_LOGOUT\n        };\n    }\n    const role = localStorage.getItem('userRole');\n    return {\n        type: actionTypes.AUTH_USER_CHECK_STATE,\n        token,\n        role\n    };\n};\n\nexport const setAuthError = res => {\n    return {\n        type: actionTypes.SET_AUTH_ERROR,\n        result: res\n    };\n};\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { activateUser } from '../../redux/actions';\n\nimport { links } from '../../constants/links';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\n\nimport { CircularProgress } from '@material-ui/core';\n\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\n\nimport './ActivationPage.scss';\n\nconst ActivationPage = props => {\n    const { t } = useTranslation('common');\n\n    const params = new URLSearchParams(props.location.search);\n    const token = params.get('token');\n\n    const error = props.error;\n\n    const response = props.response;\n    let redirect = null;\n\n    if (response && response.data.hasOwnProperty('message')) {\n        redirect = <Redirect to={links.AUTH} />;\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.SUCCESS,\n            response.data.message\n        );\n    }\n\n    let main = (\n        <>\n            <h2>{t('verifying_token')}</h2>\n            <CircularProgress />\n        </>\n    );\n\n    if (error) {\n        main = (\n            <>\n                <h2>{t('token_error')}</h2>\n                <p>{error}</p>\n            </>\n        );\n    }\n\n    useEffect(() => {\n        if (token) {\n            props.onActivate(token);\n        }\n    }, [token]);\n\n    return (\n        <>\n            <section className=\"activation-page-container\">\n                {redirect}\n                <section className=\"card activation-section\">{main}</section>\n            </section>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    response: state.auth.response,\n    error: state.auth.activationError\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onActivate: data => dispatch(activateUser(data))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivationPage);\n","import React, { useEffect } from 'react';\n\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport './ProfilePage.scss';\n\nimport ChangePasswordForm from '../../components/ChangePasswordForm/ChangePasswordForm';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { resetFormHandler } from '../../helper/formHelper';\nimport { useTranslation } from 'react-i18next';\nimport { PROFILE_FORM, TEACHER_FORM } from '../../constants/reduxForms';\n\nimport {\n    getUserProfile,\n    updateUserPassword,\n    updateUserTeacher\n} from '../../services/userService';\nimport AddTeacherForm from '../../components/AddTeacherForm/AddTeacherForm';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\n\nconst useStyles = makeStyles(theme => ({\n    rootInput: {\n        width: '20em'\n    }\n}));\n\nlet ProfilePage = props => {\n    const { t } = useTranslation('formElements');\n    const classes = useStyles();\n\n    const submitPasswordChange = values => {\n        console.log('values', values);\n        if (values.new_password !== values.confirm_password) {\n            props.setError({\n                registration: { passwords: t('different_passwords') }\n            });\n            return;\n        }\n        updateUserPassword(values);\n        handlePasswordFormReset();\n    };\n\n    const submitTeacherChange = values => {\n        updateUserTeacher(values);\n    };\n    const handlePasswordFormReset = () => resetFormHandler(PROFILE_FORM);\n    const handleTeacherFormReset = () => resetFormHandler(TEACHER_FORM);\n    useEffect(() => {\n        getUserProfile();\n    }, [localStorage.getItem('userRole')]);\n\n    const renderTeacherdataForm = () => {\n        if (localStorage.getItem('userRole') === 'ROLE_TEACHER') {\n            return (\n                <AddTeacherForm\n                    onSubmit={submitTeacherChange}\n                    onReset={handleTeacherFormReset}\n                />\n            );\n        }\n    };\n\n    return (\n        <>\n            <NavigationPage />\n            <Card class='form-card'>\n                <h2 className='form-title'>{t('common:my_profile')}</h2>\n                <section>\n                    <span>{t('email_label') + ': '}</span>\n                    <span>{localStorage.getItem('email')}</span>\n                </section>\n                <ChangePasswordForm\n                    onSubmit={submitPasswordChange}\n                    onReset={handlePasswordFormReset}\n                />\n            </Card>\n            {renderTeacherdataForm()}\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    user: state.users.user\n});\n\nexport default connect(mapStateToProps)(ProfilePage);\n","export const authTypes = {\n    LOGIN: 'LOGIN',\n    GOOGLE: 'GOOGLE',\n    REGISTRATION: 'REGISTRATION',\n    RESET_PASSWORD: 'RESET_PASSWORD'\n};\n","import React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Card from '../../share/Card/Card';\nimport renderTextField from '../../share/renderedFields/input';\n\nimport { LOGIN_FORM } from '../../constants/reduxForms';\nimport { authTypes } from '../../constants/auth';\nimport { GOOGLE_LOGIN_URL } from '../../constants/axios';\n\nimport { required } from '../../validation/validateFields';\nimport { FaGoogle } from 'react-icons/fa';\nimport { links } from '../../constants/links';\nimport { Link } from 'react-router-dom';\nimport {\n    setScheduleGroupIdService,\n    setScheduleSemesterIdService,\n    setScheduleTeacherIdService, setScheduleTypeService\n} from '../../services/scheduleService';\nlet LoginForm = props => {\n\n    useEffect(()=>setScheduleSemesterIdService(0))\n    useEffect(()=>setScheduleTeacherIdService(0))\n    useEffect(()=>setScheduleGroupIdService(0))\n    useEffect(()=>setScheduleTypeService(\"\"))\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n\n    const error = props.loginError;\n\n    const translation = props.translation;\n\n    const errorHandling = value => {\n        if (required(value)) props.setError(required(value));\n        else props.setError(null);\n    };\n\n    let form = (\n        <form onSubmit={handleSubmit}>\n            <Field\n                name=\"email\"\n                className=\"form-field\"\n                component={renderTextField}\n                label={t('email_label')}\n                error={!!error}\n                helperText={error ? error.login : null}\n                onChange={e => errorHandling(e.target.value)}\n            />\n            <Field\n                name=\"password\"\n                className=\"form-field\"\n                type=\"password\"\n                component={renderTextField}\n                label={t('password_label')}\n                error={!!error}\n                onChange={() => props.setError(null)}\n            />\n            <Button\n                className=\"buttons-style under-line\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                {translation('login_title')}\n            </Button>\n            <div className=\"group-btns\">\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.REGISTRATION);\n                        props.setError(null);\n                    }}\n                >\n                   <Link  className=\"navLinks\" to={links.Registration}>{translation('no_account')}</Link>\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.RESET_PASSWORD);\n                        props.setError(null);\n                    }}\n                >\n                   <Link  className=\"navLinks\" to={links.RESET_PASSWORD}>{translation('forgot_password')}</Link>\n                </button>\n            </div>\n            {}\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() =>\n                    (window.document.location.href =\n                        process.env.REACT_APP_API_BASE_URL.trim() +\n                        GOOGLE_LOGIN_URL)\n                }\n            >\n                <FaGoogle />\n                {t('login_via_google')}\n            </Button>\n        </form>\n    );\n\n    if (props.isLoading) {\n        form = <CircularProgress />;\n    }\n\n    return (\n        <Card class=\"auth-card\">\n            <h2 className=\"under-line\">{translation('login_page_title')}</h2>\n            {form}\n        </Card>\n    );\n};\n\nLoginForm = reduxForm({\n    form: LOGIN_FORM\n})(LoginForm);\n\nexport default LoginForm;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport Card from '../../share/Card/Card';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { REGISTRATION_FORM } from '../../constants/reduxForms';\nimport { authTypes } from '../../constants/auth';\n\nimport { email, password, required } from '../../validation/validateFields';\nimport { links } from '../../constants/links';\nimport {Link} from 'react-router-dom';\nlet RegistrationForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n\n    const translation = props.translation;\n\n    const error = props.registrationError;\n\n    const emailValidate = { validate: [required, email] };\n    const emailErrorCondition = error && error.registration.reg;\n    const emailAdvancedValidate = {\n        error: !!emailErrorCondition,\n        helperText: emailErrorCondition ? error.registration.reg : ''\n    };\n\n    const passwordValidate = { validate: [required, password] };\n    const passwordsCondition = error && error.registration.passwords;\n    const passwordValidateAdvanced = {\n        error: !!passwordsCondition,\n        helperText: passwordsCondition ? error.registration.passwords : ''\n    };\n\n    const retypePasswordValidate = { validate: [required, password] };\n    const retypePasswordValidateAdvanced = {\n        error: !!passwordsCondition\n    };\n\n    let form = (\n        <form onSubmit={handleSubmit}>\n            <Field\n                name=\"email\"\n                className=\"form-field\"\n                type=\"email\"\n                component={renderTextField}\n                label={t('email_label')}\n                {...(!error ? emailValidate : emailAdvancedValidate)}\n                onChange={e => props.setError(null)}\n            />\n            <Field\n                name=\"password\"\n                className=\"form-field\"\n                type=\"password\"\n                component={renderTextField}\n                label={t('password_label')}\n                {...(!error ? passwordValidate : passwordValidateAdvanced)}\n                onChange={e => props.setError(null)}\n            />\n            <Field\n                name=\"retypePassword\"\n                className=\"form-field\"\n                type=\"password\"\n                component={renderTextField}\n                label={t('retype_password_label')}\n                {...(!error\n                    ? retypePasswordValidate\n                    : retypePasswordValidateAdvanced)}\n            />\n            <Button\n                className=\"buttons-style\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                {translation('create_account')}\n            </Button>\n            <div className=\"group-btns\">\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.LOGIN);\n                        props.setError(null);\n                    }}\n                >\n                   <Link  className=\"navLinks\" to={links.LOGIN}>{translation('account_exist')}</Link>\n                </button>\n            </div>\n        </form>\n    );\n\n    if (props.isLoading) {\n        form = <CircularProgress />;\n    }\n    return (\n        <Card class=\"auth-card\">\n            <h2 className=\"under-line\">\n                {props.translation('registration_page_title')}\n            </h2>\n            {form}\n        </Card>\n    );\n};\n\nRegistrationForm = reduxForm({\n    form: REGISTRATION_FORM\n})(RegistrationForm);\n\nexport default RegistrationForm;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Card from '../../share/Card/Card';\nimport renderTextField from '../../share/renderedFields/input';\n\nimport { RESET_PASSWORD_FORM } from '../../constants/reduxForms';\nimport { authTypes } from '../../constants/auth';\n\nimport { email, required } from '../../validation/validateFields';\nimport { links } from '../../constants/links';\nimport {Link} from 'react-router-dom';\n\nlet ResetPasswordForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n\n    const error = props.resetPasswordError;\n\n    const translation = props.translation;\n\n    const emailValidate = { validate: [required, email] };\n\n    const errorHandling = value => {\n        if (required(value)) {\n            props.setError(required(value));\n        } else {\n            props.setError(null);\n        }\n    };\n\n    let form = (\n        <form onSubmit={handleSubmit}>\n            <Field\n                name=\"email\"\n                className=\"form-field\"\n                component={renderTextField}\n                label={t('email_label')}\n                {...(!error ? emailValidate : error)}\n                onChange={e => {\n                    errorHandling(e.target.value);\n                }}\n            />\n            <Button\n                className=\"buttons-style under-line\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                {translation('reset_password_button')}\n            </Button>\n            <div className=\"group-btns\">\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.LOGIN);\n                        props.setError(null);\n                    }}\n                >\n                  <Link  className=\"navLinks\" to={links.LOGIN} >{translation('login_page_title')}</Link>\n                </button>\n            </div>\n        </form>\n    );\n\n    if (props.isLoading) {\n        form = <CircularProgress />;\n    }\n\n    return (\n        <Card class=\"auth-card\">\n            <h2 className=\"under-line\">\n                {translation('reset_password_page_title')}\n            </h2>\n            {form}\n        </Card>\n    );\n};\n\nResetPasswordForm = reduxForm({\n    form: RESET_PASSWORD_FORM\n})(ResetPasswordForm);\n\nexport default ResetPasswordForm;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { resetFormHandler } from '../../helper/formHelper';\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\n\nimport {\n    LOGIN_FORM,\n    REGISTRATION_FORM,\n    RESET_PASSWORD_FORM\n} from '../../constants/reduxForms';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\nimport { links } from '../../constants/links';\nimport { authTypes } from '../../constants/auth';\nimport { userRoles } from '../../constants/userRoles';\nimport { validation } from '../../constants/validation';\n\nimport LoginForm from '../../components/LoginForm/LoginForm';\nimport RegistrationForm from '../../components/RegistrationForm/RegistrationForm';\nimport ResetPasswordForm from '../../components/ResetPasswordForm/ResetPasswordForm';\n\nimport {\n    authUser,\n    registerUser,\n    resetUserPassword,\n    setAuthError,\n    setLoading\n} from '../../redux/actions/index';\n\nimport './Auth.scss';\n\nconst Auth = props => {\n    const { t } = useTranslation('common');\n    const [authType, setAuthType] = useState(authTypes.LOGIN);\n\n    const error = props.error;\n    var url = window.document.location;\n    var parser = new URL(url);\n\n    const socialLoginHandler = data => {\n        props.setLoading(true);\n        if (!data.token || data.token.length < 20) {\n            props.setError({ login: t('broken_token') });\n            return;\n        }\n        setAuthType(authTypes.GOOGLE);\n        props.onAuth(data);\n        resetFormHandler(LOGIN_FORM);\n        window.history.replaceState({}, document.title, '/');\n        props.setLoading(false);\n    };\n\n    let social = false;\n    let isToken = false;\n    let token = '';\n\n    if (parser.search.length > 0) {\n        const params = parser.search.split('&');\n        if (params) {\n            params.map(param => {\n                const splitedParam = param.split('=');\n                if (splitedParam) {\n                    if (\n                        splitedParam[0] === '?social' &&\n                        splitedParam[1] === 'true'\n                    ) {\n                        social = true;\n                    }\n                    if (\n                        splitedParam[0] === 'token' &&\n                        splitedParam[1].length > 0\n                    ) {\n                        isToken = true;\n                        token = splitedParam[1];\n                    }\n                }\n            });\n        }\n        if (social && isToken)\n            socialLoginHandler({ authType: 'google', token });\n    }\n\n    useEffect(() => {\n        if (\n            authType === authTypes.REGISTRATION &&\n            props.response &&\n            props.response.data.hasOwnProperty('message')\n        ) {\n            setAuthType(authTypes.LOGIN);\n            message = t('successful_registered_message');\n            handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n        }\n    }, [props.response]);\n\n    useEffect(() => {\n        if (\n            props.resetPasswordResponse &&\n            props.resetPasswordResponse.data.hasOwnProperty('message')\n        ) {\n            setAuthType(authTypes.LOGIN);\n            message = t('successful_reset_password_message');\n            handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n        }\n    }, [props.resetPasswordResponse]);\n\n    const loginHandler = loginData => {\n        if (!loginData.email || !loginData.password) {\n            props.setError({ login: t('empty_fields') });\n            return;\n        }\n        if (!validation.EMAIL.test(loginData.email)) {\n            props.setError({ login: t('validationMessages:email') });\n            return;\n        }\n        props.onAuth(loginData);\n        props.setLoading(true);\n        resetFormHandler(LOGIN_FORM);\n    };\n\n    const registrationHandler = registrationData => {\n        if (registrationData.password !== registrationData.retypePassword) {\n            props.setError({\n                registration: { passwords: t('different_passwords') }\n            });\n            return;\n        }\n        props.onRegister({\n            email: registrationData.email,\n            password: registrationData.password\n        });\n        props.setLoading(true);\n        resetFormHandler(REGISTRATION_FORM);\n    };\n\n    const resetPasswordHandler = resetPasswordData => {\n        props.onResetPassword({\n            email: resetPasswordData.email\n        });\n        props.setLoading(true);\n        resetFormHandler(RESET_PASSWORD_FORM);\n    };\n\n    let isSuccess, message;\n    const isLoading = props.loading;\n\n    if (!error && props.userRole) {\n        const token = props.token;\n        isSuccess = !!token;\n        message = t('successful_login_message');\n        handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n    }\n\n    const commonCondition = !error && isSuccess && !isLoading;\n\n    let authRedirect = null;\n    if (commonCondition && props.userRole === userRoles.MANAGER) {\n        authRedirect = <Redirect to={links.ADMIN_PAGE} />;\n    } else if (commonCondition && props.userRole) {\n        authRedirect = <Redirect to={links.HOME_PAGE} />;\n    } else if (commonCondition && props.userRole === userRoles.TEACHER) {\n        authRedirect = <Redirect to={links.HOME_PAGE} />;\n    }\n\n    const switchAuthModeHandler = authType => {\n        setAuthType(authType);\n    };\n\n    let authPage;\n\n    switch (authType) {\n        case authTypes.LOGIN:\n            document.title = t('login_page_title');\n            authPage = (\n                <LoginForm\n                    isLoading={isLoading}\n                    loginError={error}\n                    onSubmit={loginHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n            break;\n        case authTypes.REGISTRATION:\n            document.title = t('registration_page_title');\n            authPage = (\n                <RegistrationForm\n                    isLoading={isLoading}\n                    registrationError={error}\n                    onSubmit={registrationHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n            break;\n        case authTypes.RESET_PASSWORD:\n            document.title = t('reset_password_page_title');\n            authPage = (\n                <ResetPasswordForm\n                    isLoading={isLoading}\n                    resetPasswordError={error}\n                    onSubmit={resetPasswordHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n            break;\n        default:\n            document.title = t('login_page_title');\n            authPage = (\n                <LoginForm\n                    isLoading={isLoading}\n                    loginError={error}\n                    onSubmit={loginHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n    }\n\n    return (\n        <div className=\"auth-form\">\n            {authRedirect}\n            {authPage}\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    response: state.auth.response,\n    resetPasswordResponse: state.auth.resetPasswordResponse,\n    error: state.auth.error,\n    token: state.auth.token,\n    userRole: state.auth.role,\n    loading: state.loadingIndicator.loading\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: data => dispatch(authUser(data)),\n        onRegister: data => dispatch(registerUser(data)),\n        onResetPassword: data => dispatch(resetUserPassword(data)),\n        setLoading: isLoading => dispatch(setLoading(isLoading)),\n        setError: error => dispatch(setAuthError(error))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n","import React, { useEffect, useState } from 'react';\nimport { authTypes } from '../../constants/auth';\nimport '../../containers/Auth/Auth.scss';\nimport Auth from '../../containers/Auth/Auth';\n\nconst Register = () => {\n    return <Auth authType={authTypes.REGISTRATION}/>\n};\nexport {Register}\n","import React, { useEffect, useState } from 'react';\nimport { authTypes } from '../../constants/auth';\nimport '../../containers/Auth/Auth.scss';\nimport Auth from '../../containers/Auth/Auth';\n\nconst ResetPassword = () => {\n    return <Auth authType={authTypes.RESET_PASSWORD}/>\n};\nexport {ResetPassword}","import React, { useEffect, useState } from 'react';\nimport { authTypes } from '../../constants/auth';\nimport '../../containers/Auth/Auth.scss';\nimport Auth from '../../containers/Auth/Auth';\n\nconst Login = () => {\n    return <Auth authType={authTypes.LOGIN}/>\n};\nexport {Login}","import axios from '../helper/axios';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport i18n from '../helper/i18n';\n\nimport { store } from '../index';\n\nimport {\n    TEACHER_TEMPORARY_SCHEDULE,\n    TEMPORARY_SCHEDULE_RANGE_URL,\n    TEMPORARY_SCHEDULE_URL\n} from '../constants/axios';\nimport { actionType } from '../constants/actionTypes';\n\nimport { setLoadingService } from './loadingService';\n\nimport {\n    logout,\n    selectChangedScheduleId,\n    selectTeacherId,\n    selectTemporarySchedule,\n    selectVacation,\n    setSchedulesAndTemporarySchedules,\n    setTemporarySchedules\n} from '../redux/actions/index';\nimport { resetFormHandler } from '../helper/formHelper';\nimport {\n    TEMPORARY_SCHEDULE_FORM,\n    TEMPORARY_SCHEDULE_VACATION_FORM\n} from '../constants/reduxForms';\n\nexport const getTemporarySchedulesService = (from, to) => {\n    axios\n        .get(TEMPORARY_SCHEDULE_URL, { params: { from, to } })\n        .then(response => {\n            store.dispatch(setSchedulesAndTemporarySchedules([]));\n            store.dispatch(setTemporarySchedules(response.data));\n            setLoadingService(false);\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const getTeacherTemporarySchedulesService = (teacherId, from, to) => {\n    axios\n        .get(TEACHER_TEMPORARY_SCHEDULE, { params: { teacherId, from, to } })\n        .then(response => {\n            store.dispatch(setTemporarySchedules([]));\n            store.dispatch(setSchedulesAndTemporarySchedules(response.data));\n            setLoadingService(false);\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const deleteTemporaryScheduleService = (\n    temporaryScheduleId,\n    date,\n    teacherId\n) => {\n    axios\n        .delete(TEMPORARY_SCHEDULE_URL + `/${temporaryScheduleId}`)\n        .then(() => {\n            if (teacherId)\n                getTeacherTemporarySchedulesService(teacherId, date, date);\n            else getTemporarySchedulesService(null, null);\n            successHandler(handleSuccessMessage(actionType.DELETED));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nconst formatObj = (formValues, teacherId) => {\n    let obj = {};\n    if (teacherId) obj = { teacher: { id: teacherId } };\n    else if (formValues.teacher) obj = { teacher: { id: formValues.teacher } };\n    if (!formValues.vacation || (formValues.vacation && formValues.scheduleId))\n        obj = {\n            ...obj,\n            id: formValues.id ? formValues.id : null,\n            class: { id: formValues.period },\n            date: formValues.date,\n            group: { id: formValues.group },\n            lessonType: formValues.lessonType,\n            room: { id: formValues.room },\n            schedule: { id: formValues.scheduleId },\n            semester: { id: formValues.semester },\n            subject: { id: formValues.subject },\n            subjectForSite: formValues.subjectForSite,\n            // teacherForSite: formValues.teacherForSite\n            linkToMeeting:formValues.linkToMeeting\n        };\n    return obj;\n};\n\nconst handleSuccess = (isVacation, teacherId, formValues) => {\n    store.dispatch(selectTemporarySchedule({}));\n    store.dispatch(selectVacation({}));\n    if (!isVacation || (isVacation && formValues.scheduleId)) {\n        resetFormHandler(TEMPORARY_SCHEDULE_FORM);\n        getTeacherTemporarySchedulesService(\n            teacherId,\n            formValues.date,\n            formValues.date\n        );\n    } else {\n        resetFormHandler(TEMPORARY_SCHEDULE_VACATION_FORM);\n        store.dispatch(selectTeacherId(null));\n        getTemporarySchedulesService(null, null);\n    }\n};\n\nexport const addTemporaryScheduleService = (\n    teacherId,\n    formValues,\n    isVacation\n) => {\n    formValues.date = formValues.date.replace(/\\//g, '-');\n    const obj = formatObj(formValues, teacherId);\n    axios\n        .post(TEMPORARY_SCHEDULE_URL, {\n            ...formValues,\n            ...obj\n        })\n        .then(() => {\n            handleSuccess(isVacation, teacherId, formValues);\n            successHandler(handleSuccessMessage(actionType.CREATED));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const addTemporaryScheduleForRangeService = (\n    teacherId,\n    formValues,\n    isVacation\n) => {\n    formValues.from = formValues.from.replace(/\\//g, '-');\n    formValues.to = formValues.to.replace(/\\//g, '-');\n    const obj = formatObj(formValues, teacherId);\n    axios\n        .post(TEMPORARY_SCHEDULE_RANGE_URL, {\n            from: formValues.from,\n            to: formValues.to,\n            temporary_schedule: {\n                ...formValues,\n                ...obj\n            }\n        })\n        .then(() => {\n            handleSuccess(isVacation, teacherId, formValues);\n            successHandler(handleSuccessMessage(actionType.CREATED));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const editTemporaryScheduleService = (\n    teacherId,\n    formValues,\n    isVacation\n) => {\n    formValues.date = formValues.date.replace(/\\//g, '-');\n    const obj = formatObj(formValues, teacherId);\n    axios\n        .put(TEMPORARY_SCHEDULE_URL, {\n            ...formValues,\n            ...obj\n        })\n        .then(() => {\n            const tId = teacherId || formValues.teacher;\n            handleSuccess(isVacation, tId, formValues);\n            successHandler(handleSuccessMessage(actionType.UPDATED));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const selectTemporaryScheduleService = temporarySchedule => {\n    store.dispatch(selectVacation({}));\n    store.dispatch(selectTemporarySchedule(temporarySchedule));\n};\n\nexport const selectVacationService = vacation => {\n    store.dispatch(selectTemporarySchedule({}));\n    store.dispatch(selectVacation(vacation));\n};\n\nexport const selectTeacherIdService = teacherId => {\n    store.dispatch(selectTeacherId(teacherId));\n};\n\nconst handleSuccessMessage = action => {\n    return i18n.t('serviceMessages:back_end_success_operation', {\n        cardType: i18n.t('formElements:temporary_schedule_label'),\n        actionType: i18n.t(`serviceMessages:${action}_label`)\n    });\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { TEMPORARY_SCHEDULE_FORM } from '../../../constants/reduxForms';\n\nimport Button from '@material-ui/core/Button';\nimport Hidden from '@material-ui/core/Hidden';\n\nimport Card from '../../../share/Card/Card';\nimport renderCheckboxField from '../../../share/renderedFields/checkbox';\nimport renderSelectField from '../../../share/renderedFields/select';\nimport renderTextField from '../../../share/renderedFields/input';\n\nimport { handleTeacherInfo } from '../../../helper/renderTeacher';\nimport {\n    setValueToSubjectForSiteHandler,\n    setValueToTeacherForSiteHandler\n} from '../../../helper/reduxFormHelper';\n\nimport { maxLengthValue, required } from '../../../validation/validateFields';\n\nimport { selectTemporaryScheduleService } from '../../../services/temporaryScheduleService';\n\nlet TemporaryScheduleForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, invalid, reset, submitting } = props;\n    const [isVacation, setIsVacation] = useState(false);\n    const [notify, setNotify] = useState(false);\n\n    const temporarySchedule = props.temporarySchedule;\n    const scheduleId = temporarySchedule?.scheduleId;\n    const temporaryScheduleId = temporarySchedule?.id;\n\n    const { teachers, periods, rooms, subjects, lessonTypes, groups } = props;\n\n    useEffect(() => {\n        if (temporaryScheduleId || scheduleId) {\n            initializeFormHandler(temporarySchedule);\n        } else {\n            props.initialize({ vacation: isVacation });\n        }\n    }, [temporaryScheduleId]);\n\n    const initializeFormHandler = temporarySchedule => {\n        setIsVacation(temporarySchedule.vacation);\n        props.initialize({\n            vacation: isVacation,\n            teacher: temporarySchedule.teacher.id,\n            semester: temporarySchedule.semester.id,\n            subject: temporarySchedule.subject.id,\n            group: temporarySchedule.group.id,\n            room: temporarySchedule.room.id,\n            period: temporarySchedule.class.id,\n            lessonType: temporarySchedule.lessonType,\n            teacherForSite: temporarySchedule.teacherForSite,\n            subjectForSite: temporarySchedule.subjectForSite,\n            date: temporarySchedule.date,\n            id: temporarySchedule.id,\n            scheduleId: temporarySchedule.scheduleId\n        });\n    };\n\n    const handleVacationChange = event => setIsVacation(event.target.checked);\n    const handleNotifyChange = event => setNotify(event.target.checked);\n\n    return (\n        <Card class=\"form-card\">\n            <>\n                <h2 className=\"form-title under-line\">\n                    {!temporarySchedule.scheduleId\n                        ? t('edit_temporary_schedule_form')\n                        : t('create_temporary_schedule_form')}\n                </h2>\n                <form onSubmit={handleSubmit}>\n                    <Field\n                        name=\"vacation\"\n                        label={t('common:holiday_label')}\n                        component={renderCheckboxField}\n                        checked={isVacation}\n                        onChange={handleVacationChange}\n                        color=\"primary\"\n                    />\n                    <Field\n                        name=\"teacher\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('teacher_label')}\n                        validate={[required]}\n                        disabled={isVacation}\n                        onChange={event => {\n                            if (event.target.value)\n                                setValueToTeacherForSiteHandler(\n                                    teachers,\n                                    event.target.value,\n                                    props.change\n                                );\n                            else props.change('teacherForSite', '');\n                        }}\n                    >\n                        <option value={''} />\n                        {teachers.map(teacher => (\n                            <option value={teacher.id} key={teacher.id}>\n                                {handleTeacherInfo(teacher)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"subject\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('subject_label')}\n                        validate={[required]}\n                        disabled={isVacation}\n                        onChange={event => {\n                            setValueToSubjectForSiteHandler(\n                                subjects,\n                                event.target.value,\n                                props.change\n                            );\n                        }}\n                    >\n                        <option value={''} />\n                        {subjects.map(subject => (\n                            <option key={subject.id} value={subject.id}>\n                                {subject.name}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"group\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('group_label')}\n                        validate={[required]}\n                        disabled={isVacation}\n                    >\n                        <option value={''} />\n                        {groups.map(group => (\n                            <option key={group.id} value={group.id}>\n                                {group.title}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"lessonType\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('type_label')}\n                        validate={[required]}\n                        disabled={isVacation}\n                    >\n                        <option value={''} />\n                        {lessonTypes.map((lessonType, index) => (\n                            <option value={lessonType} key={index}>\n                                {t(\n                                    `formElements:lesson_type_${lessonType.toLowerCase()}_label`\n                                )}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"room\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('room_label')}\n                        validate={[required]}\n                        disabled={isVacation}\n                    >\n                        <option value={''} />\n                        {rooms.map(room => (\n                            <option value={room.id} key={room.id}>\n                                {room.name}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"period\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('class_label')}\n                        validate={[required]}\n                        disabled={isVacation}\n                    >\n                        <option value={''} />\n                        {periods.map(period => (\n                            <option value={period.id} key={period.id}>\n                                {period.startTime} - {period.endTime}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"teacherForSite\"\n                        className=\"form-field\"\n                        multiline\n                        rowsMax=\"1\"\n                        margin=\"normal\"\n                        component={renderTextField}\n                        label={t('teacher_label') + t('for_site_label')}\n                        validate={[required, maxLengthValue]}\n                        disabled={isVacation}\n                    />\n                    <Field\n                        name=\"subjectForSite\"\n                        className=\"form-field\"\n                        multiline\n                        rowsMax=\"1\"\n                        margin=\"normal\"\n                        component={renderTextField}\n                        label={t('subject_label') + t('for_site_label')}\n                        validate={[required, maxLengthValue]}\n                        disabled={isVacation}\n                    />\n                    <Field\n                        name=\"notify\"\n                        label={t('common:notify_label')}\n                        component={renderCheckboxField}\n                        checked={notify}\n                        onChange={handleNotifyChange}\n                        color=\"primary\"\n                    />\n                    <Hidden smUp smDown xsDown xsUp>\n                        <Field name=\"date\" component={renderTextField} />\n                        <Field name=\"id\" component={renderTextField} />\n                        <Field name=\"scheduleId\" component={renderTextField} />\n                        <Field name=\"semester\" component={renderTextField} />\n                    </Hidden>\n                    <div className=\"form-buttons-container\">\n                        <Button\n                            className=\"buttons-style\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            disabled={invalid || submitting}\n                        >\n                            {t('save_button_label')}\n                        </Button>\n                        <Button\n                            className=\"buttons-style\"\n                            type=\"button\"\n                            variant=\"contained\"\n                            disabled={invalid || submitting}\n                            onClick={() => {\n                                reset();\n                                selectTemporaryScheduleService({});\n                            }}\n                        >\n                            {t('clear_button_label')}\n                        </Button>\n                    </div>\n                </form>\n            </>\n        </Card>\n    );\n};\n\nTemporaryScheduleForm = reduxForm({\n    form: TEMPORARY_SCHEDULE_FORM\n})(TemporaryScheduleForm);\n\nexport default TemporaryScheduleForm;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst TemporaryScheduleCard = props => {\n    const { t } = useTranslation('formElements');\n    const { schedule } = props;\n\n    return (\n        <>\n            <p>\n                {t('subject_label')}:{' '}\n                <b>\n                    {schedule.lesson\n                        ? schedule.lesson.subjectForSite\n                        : schedule.subjectForSite}\n                    (\n                    {schedule.lesson\n                        ? schedule.lesson.lessonType\n                        : schedule.lessonType}\n                    )\n                </b>\n            </p>\n            <p>\n                {t('room_label')}: <b>{schedule.room.name}</b>\n            </p>\n            <p>\n                {t('teacher_label')}:{' '}\n                <b>\n                    {schedule.lesson\n                        ? schedule.lesson.teacherForSite\n                        : schedule.teacherForSite}\n                </b>\n            </p>\n            <p>\n                {t('common:class_schedule')}:{' '}\n                <b>\n                    {schedule.class.startTime} - {schedule.class.endTime}\n                </b>\n            </p>\n            <p>\n                {t('group_label')}:{' '}\n                <b>\n                    {schedule.lesson\n                        ? schedule.lesson.group.title\n                        : schedule.group.title}\n                </b>\n            </p>\n            <p>\n                {t('semester_label')}:{' '}\n                <b>\n                    {schedule.lesson\n                        ? schedule.lesson.semester.description\n                        : schedule.semester.description}\n                </b>\n            </p>\n        </>\n    );\n};\n\nexport default TemporaryScheduleCard;\n","import React from 'react';\nimport { FaEdit, MdDelete } from 'react-icons/all';\nimport { useTranslation } from 'react-i18next';\nimport { selectTemporaryScheduleService } from '../../../services/temporaryScheduleService';\n\nconst TemporaryScheduleCardButtons = props => {\n    const { t } = useTranslation('common');\n\n    const { schedule, date, isTemporary, scheduleId } = props;\n    const { onOpenDialog, setDate, setTeacherId } = props;\n\n    const selectTemporarySchedule = schedule => {\n        selectTemporaryScheduleService({\n            ...schedule.lesson,\n            room: schedule.room,\n            class: schedule.class,\n            id: schedule.id,\n            vacation: schedule.vacation,\n            scheduleId: schedule.scheduleId ? schedule.scheduleId : scheduleId,\n            date: schedule.date\n        });\n    };\n\n    const handleScheduleSelect = schedule => {\n        schedule.scheduleId = schedule.id;\n        schedule.id = null;\n        schedule.lesson.id = null;\n        selectTemporarySchedule(schedule);\n    };\n\n    return (\n        <div className=\"cards-btns\">\n            <FaEdit\n                title={t('common:edit_hover_title')}\n                className=\"svg-btn edit-btn\"\n                onClick={() => {\n                    isTemporary\n                        ? selectTemporarySchedule({ ...schedule, date: date })\n                        : handleScheduleSelect({\n                              ...schedule,\n                              date: date\n                          });\n                }}\n            />\n            {isTemporary && (\n                <MdDelete\n                    title={t('common:delete_hover_title')}\n                    className=\"svg-btn delete-btn\"\n                    onClick={() => {\n                        onOpenDialog(schedule.id);\n                        setDate(date);\n                        setTeacherId(schedule.lesson.teacher.id);\n                    }}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default TemporaryScheduleCardButtons;\n","import React, { useState } from 'react';\nimport { MdExpandMore } from 'react-icons/all';\n\nimport Card from '../../../share/Card/Card';\nimport ConfirmDialog from '../../../share/modals/dialog';\n\nimport TemporaryScheduleCard from '../TemporaryScheduleCard/TemporaryScheduleCard';\nimport TemporaryScheduleCardButtons from '../TemporaryScheduleCardButtons/TemporaryScheduleCardButtons';\n\nimport Divider from '@material-ui/core/Divider';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\n\nimport { cardType } from '../../../constants/cardType';\n\nimport { deleteTemporaryScheduleService } from '../../../services/temporaryScheduleService';\n\nconst ScheduleAndTemporaryScheduleList = props => {\n    const shortId = require('shortid');\n\n    const schedulesAndTemporarySchedules =\n        props.schedulesAndTemporarySchedules || [];\n\n    const [open, setOpen] = useState(false);\n    const [temporaryScheduleId, setTemporaryScheduleId] = useState(-1);\n    const [date, setDate] = useState(null);\n    const [teacherId, setTeacherId] = useState(null);\n\n    let expandedProp;\n\n    if (schedulesAndTemporarySchedules.length === 1) {\n        expandedProp = {\n            expanded: true\n        };\n    }\n\n    const handleClickOpen = temporaryScheduleId => {\n        setTemporaryScheduleId(temporaryScheduleId);\n        setOpen(true);\n    };\n\n    const handleClose = temporaryScheduleId => {\n        setOpen(false);\n        if (!temporaryScheduleId) {\n            return;\n        }\n        deleteTemporaryScheduleService(temporaryScheduleId, date, teacherId);\n    };\n\n    return (\n        <main className=\"temporary-schedule-section\">\n            <ConfirmDialog\n                cardId={temporaryScheduleId}\n                whatDelete={cardType.TEMPORARY_SCHEDULE.toLowerCase()}\n                open={open}\n                onClose={handleClose}\n            />\n            {schedulesAndTemporarySchedules.map(\n                scheduleAndTemporarySchedule => (\n                    <ExpansionPanel key={shortId.generate()} {...expandedProp}>\n                        <ExpansionPanelSummary\n                            expandIcon={<MdExpandMore />}\n                            id={'panel1a-header' + shortId.generate()}\n                        >\n                            <h2>{scheduleAndTemporarySchedule.date}</h2>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                            <Divider />\n                            <section className=\"temporary-schedule-list\">\n                                {scheduleAndTemporarySchedule.schedules.map(\n                                    schedule => (\n                                        <section\n                                            className=\"temporary-schedule-row\"\n                                            key={shortId.generate()}\n                                        >\n                                            <Card\n                                                class={\n                                                    'done-card text-center ' +\n                                                    (schedule.schedule\n                                                        .vacation &&\n                                                        'vacation-card ')\n                                                }\n                                            >\n                                                {!schedule.temporary_schedule && (\n                                                    <TemporaryScheduleCardButtons\n                                                        schedule={\n                                                            schedule.schedule\n                                                        }\n                                                        date={\n                                                            scheduleAndTemporarySchedule.date\n                                                        }\n                                                        isTemporary={false}\n                                                        scheduleId={\n                                                            schedule.schedule.id\n                                                        }\n                                                    />\n                                                )}\n                                                <TemporaryScheduleCard\n                                                    schedule={schedule.schedule}\n                                                />\n                                            </Card>\n                                            <Divider\n                                                orientation=\"vertical\"\n                                                flexItem\n                                                className=\"divider\"\n                                            />\n                                            {schedule.temporary_schedule ? (\n                                                <Card\n                                                    class={\n                                                        'done-card text-center ' +\n                                                        (schedule.temporary_schedule_vacation &&\n                                                            'vacation-card ')\n                                                    }\n                                                >\n                                                    <TemporaryScheduleCardButtons\n                                                        schedule={\n                                                            schedule.temporary_schedule\n                                                        }\n                                                        date={\n                                                            scheduleAndTemporarySchedule.date\n                                                        }\n                                                        scheduleId={\n                                                            schedule.schedule.id\n                                                        }\n                                                        isTemporary={true}\n                                                        onOpenDialog={\n                                                            handleClickOpen\n                                                        }\n                                                        setDate={setDate}\n                                                        setTeacherId={\n                                                            setTeacherId\n                                                        }\n                                                    />\n                                                    <TemporaryScheduleCard\n                                                        schedule={\n                                                            schedule.temporary_schedule\n                                                        }\n                                                    />\n                                                </Card>\n                                            ) : (\n                                                <Card class=\"done-card hidden-card\">\n                                                    Hidden\n                                                </Card>\n                                            )}\n                                        </section>\n                                    )\n                                )}\n                            </section>\n                        </ExpansionPanelDetails>\n                    </ExpansionPanel>\n                )\n            )}\n        </main>\n    );\n};\n\nexport default ScheduleAndTemporaryScheduleList;\n","export const temporaryScheduleRadioTypes = {\n    SEMESTER: 'semester',\n    FEW_DAYS: 'days',\n    ONE_DAY: 'day'\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport MomentUtils from '@date-io/moment';\nimport * as moment from 'moment';\n\nimport { temporaryScheduleRadioTypes } from '../../../constants/temporaryScheduleRadioTypes';\n\nimport {\n    getTeacherTemporarySchedulesService,\n    getTemporarySchedulesService,\n    selectTeacherIdService\n} from '../../../services/temporaryScheduleService';\nimport { handleTeacherInfo } from '../../../helper/renderTeacher';\nimport Divider from '@material-ui/core/Divider';\n\nconst useStyles = makeStyles({\n    teacherField: {\n        width: '250px'\n    },\n    dateGroup: {\n        display: 'flex',\n        margin: '0 auto',\n        width: '250px',\n        justifyContent: 'space-between'\n    },\n    dateField: {\n        width: '120px',\n        margin: '0'\n    },\n    day: {\n        width: '250px',\n        margin: '0'\n    },\n    button: {\n        width: '250px',\n        margin: '0 auto'\n    },\n    panel: {\n        width: '300px',\n        margin: '0 auto'\n    },\n    block: {\n        display: 'block'\n    },\n    legendBlock: {\n        textAlign: 'left',\n        margin: '10px 0'\n    },\n    legend: {\n        display: 'inline-block',\n        width: '10px',\n        height: '10px',\n        backgroundColor: '#F5DEB3'\n    }\n});\n\nconst TemporaryScheduleTitle = props => {\n    const { t } = useTranslation('common');\n    const classes = useStyles();\n    const [day, setDay] = useState(null);\n\n    const [radio, setRadio] = useState(temporaryScheduleRadioTypes.SEMESTER);\n\n    const { teachers, teacherId } = props;\n    const { toDate, setToDate } = props;\n    const { fromDate, setFromDate } = props;\n\n    useEffect(() => {\n        if (radio === temporaryScheduleRadioTypes.SEMESTER)\n            getTemporarySchedulesService(null, null);\n    }, []);\n\n    const handleChange = event => {\n        if (event.target.value === temporaryScheduleRadioTypes.SEMESTER)\n            selectTeacherIdService(null);\n        setToDate(false);\n        setFromDate(false);\n        setDay(false);\n        setRadio(event.target.value);\n    };\n\n    const handleDayChange = date => {\n        setFromDate(null);\n        setToDate(null);\n        setDay(moment(date, 'DD-MM-YYYY').format('DD-MM-YYYY'));\n    };\n\n    const handleFromDateChange = date => {\n        setDay(null);\n        setFromDate(moment(date, 'DD-MM-YYYY').format('DD-MM-YYYY'));\n    };\n\n    const handleToDateChange = date => {\n        setDay(null);\n        setToDate(moment(date, 'DD-MM-YYYY').format('DD-MM-YYYY'));\n    };\n\n    const handleClick = () => {\n        let fDate;\n        let tDate;\n        switch (radio) {\n            case temporaryScheduleRadioTypes.SEMESTER:\n                fDate = null;\n                tDate = null;\n                break;\n            case temporaryScheduleRadioTypes.FEW_DAYS:\n                fDate = fromDate;\n                tDate = toDate;\n                break;\n            case temporaryScheduleRadioTypes.ONE_DAY:\n                fDate = day;\n                tDate = day;\n                break;\n            default:\n                tDate = null;\n                fDate = null;\n        }\n        if (teacherId) {\n            getTeacherTemporarySchedulesService(teacherId, fDate, tDate);\n        } else {\n            getTemporarySchedulesService(fDate, tDate);\n        }\n    };\n\n    const defaultProps = {\n        options: teachers,\n        getOptionLabel: option => (option ? handleTeacherInfo(option) : '')\n    };\n\n    const handleFindTeacher = teacherId => {\n        if (teacherId)\n            return teachers.find(teacher => teacher.id === teacherId);\n        else return '';\n    };\n\n    const handleTeacherSelect = teacher => {\n        if (teacher) selectTeacherIdService(teacher.id);\n    };\n\n    return (\n        <section className={classes.panel}>\n            <ExpansionPanel>\n                <ExpansionPanelSummary aria-controls=\"panel1a-content\">\n                    <Typography className={classes.heading}>\n                        {t('temporary_schedule_for_teacher_title')}\n                    </Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.block}>\n                    <Divider />\n                    <div className={classes.legendBlock}>\n                        <div className={classes.legend} /> -{' '}\n                        {t('holiday_label')}\n                    </div>\n                    <Divider />\n                    <RadioGroup\n                        className={classes.dateGroup}\n                        value={radio}\n                        onChange={handleChange}\n                    >\n                        <FormControlLabel\n                            value={temporaryScheduleRadioTypes.SEMESTER}\n                            control={<Radio color=\"primary\" />}\n                            label={t('formElements:semester_label')}\n                        />\n                        <FormControlLabel\n                            value={temporaryScheduleRadioTypes.FEW_DAYS}\n                            control={<Radio color=\"primary\" />}\n                            label={t('few_days_label')}\n                        />\n                        <FormControlLabel\n                            value={temporaryScheduleRadioTypes.ONE_DAY}\n                            control={<Radio color=\"primary\" />}\n                            label={t('one_day')}\n                        />\n                    </RadioGroup>\n                    {radio !== temporaryScheduleRadioTypes.SEMESTER && (\n                        <MuiPickersUtilsProvider utils={MomentUtils}>\n                            {radio === temporaryScheduleRadioTypes.FEW_DAYS ? (\n                                <div className={classes.dateGroup}>\n                                    <DatePicker\n                                        margin=\"normal\"\n                                        label={t(\n                                            'formElements:class_from_label'\n                                        )}\n                                        format=\"DD/MM/YYYY\"\n                                        className={classes.dateField}\n                                        value={\n                                            fromDate\n                                                ? moment(\n                                                      fromDate,\n                                                      'DD/MM/YYYY'\n                                                  ).toDate()\n                                                : null\n                                        }\n                                        onChange={handleFromDateChange}\n                                    />\n                                    <DatePicker\n                                        margin=\"normal\"\n                                        className={classes.dateField}\n                                        label={t('formElements:class_to_label')}\n                                        format=\"DD/MM/YYYY\"\n                                        value={\n                                            toDate\n                                                ? moment(\n                                                      toDate,\n                                                      'DD/MM/YYYY'\n                                                  ).toDate()\n                                                : null\n                                        }\n                                        onChange={handleToDateChange}\n                                    />\n                                </div>\n                            ) : (\n                                <DatePicker\n                                    margin=\"normal\"\n                                    className={classes.day}\n                                    label={t('date')}\n                                    format=\"DD/MM/YYYY\"\n                                    value={\n                                        day\n                                            ? moment(day, 'DD/MM/YYYY').toDate()\n                                            : null\n                                    }\n                                    onChange={handleDayChange}\n                                />\n                            )}\n                        </MuiPickersUtilsProvider>\n                    )}\n                    {radio !== temporaryScheduleRadioTypes.SEMESTER && (\n                        <Autocomplete\n                            {...defaultProps}\n                            clearOnEscape\n                            openOnFocus\n                            value={handleFindTeacher(teacherId)}\n                            onChange={(event, newValue) => {\n                                if (!newValue) handleTeacherSelect({});\n                                else handleTeacherSelect(newValue);\n                            }}\n                            renderInput={params => (\n                                <TextField\n                                    {...params}\n                                    className={classes.teacherField}\n                                    label={t('formElements:teacher_label')}\n                                    margin=\"normal\"\n                                />\n                            )}\n                        />\n                    )}\n\n                    <Button\n                        variant=\"contained\"\n                        className={classes.button}\n                        color=\"primary\"\n                        onClick={handleClick}\n                        disabled={\n                            (((!toDate || !fromDate) && !day) || !teacherId) &&\n                            !temporaryScheduleRadioTypes.SEMESTER\n                        }\n                    >\n                        Search\n                    </Button>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </section>\n    );\n};\n\nexport default TemporaryScheduleTitle;\n","import React, { useState } from 'react';\nimport { FaEdit, MdDelete } from 'react-icons/all';\nimport { useTranslation } from 'react-i18next';\n\nimport Card from '../../../share/Card/Card';\nimport ConfirmDialog from '../../../share/modals/dialog';\n\nimport {\n    deleteTemporaryScheduleService,\n    selectTemporaryScheduleService,\n    selectVacationService\n} from '../../../services/temporaryScheduleService';\n\nimport Divider from '@material-ui/core/Divider';\n\nimport { cardType } from '../../../constants/cardType';\nimport TemporaryScheduleCard from '../TemporaryScheduleCard/TemporaryScheduleCard';\nimport { getTeacherForSite } from '../../../helper/renderTeacher';\n\nconst TemporaryScheduleList = props => {\n    const { t } = useTranslation('common');\n\n    const shortId = require('shortid');\n\n    const temporarySchedules = props.temporarySchedules || [];\n\n    const [open, setOpen] = useState(false);\n    const [temporaryScheduleId, setTemporaryScheduleId] = useState(-1);\n\n    const handleClickOpen = temporaryScheduleId => {\n        setTemporaryScheduleId(temporaryScheduleId);\n        setOpen(true);\n    };\n\n    const handleClose = temporaryScheduleId => {\n        setOpen(false);\n        if (!temporaryScheduleId) {\n            return;\n        }\n        deleteTemporaryScheduleService(temporaryScheduleId, null, null);\n    };\n\n    return (\n        <main className=\"container-flex-wrap\">\n            <ConfirmDialog\n                cardId={temporaryScheduleId}\n                whatDelete={cardType.TEMPORARY_SCHEDULE}\n                open={open}\n                onClose={handleClose}\n            />\n            {temporarySchedules.map(temporarySchedule => (\n                <Card\n                    class={\n                        'done-card' +\n                        (temporarySchedule.vacation ? ' vacation-card' : '')\n                    }\n                    key={shortId.generate()}\n                >\n                    <div className=\"cards-btns\">\n                        <FaEdit\n                            title={t('edit_hover_title')}\n                            className=\"svg-btn edit-btn\"\n                            onClick={() =>\n                                temporarySchedule.vacation\n                                    ? selectVacationService(temporarySchedule)\n                                    : selectTemporaryScheduleService(\n                                          temporarySchedule\n                                      )\n                            }\n                        />\n                        <MdDelete\n                            title={t('delete_hover_title')}\n                            className=\"svg-btn delete-btn\"\n                            onClick={() => {\n                                handleClickOpen(temporarySchedule.id);\n                            }}\n                        />\n                    </div>\n                    {!temporarySchedule.vacation ? (\n                        <>\n                            <TemporaryScheduleCard\n                                schedule={temporarySchedule}\n                            />\n                        </>\n                    ) : (\n                        <>\n                            <h2>{t('holiday_label')}</h2>\n                            <p>\n                                (\n                                {temporarySchedule.teacher?.name\n                                    ? getTeacherForSite(\n                                          temporarySchedule.teacher\n                                      )\n                                    : t('for_all')}\n                                )\n                            </p>\n                            <Divider />\n                        </>\n                    )}\n                    <p>\n                        {!temporarySchedule.vacation && <>{t('date')}{' '}:</>}\n                        <b>{temporarySchedule.date}</b>\n                    </p>\n                </Card>\n            ))}\n        </main>\n    );\n};\n\nexport default TemporaryScheduleList;\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport Card from '../../../share/Card/Card';\nimport renderMonthPicker from '../../../share/renderedFields/timeSemester';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport { TEMPORARY_SCHEDULE_VACATION_FORM } from '../../../constants/reduxForms';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Button from '@material-ui/core/Button';\nimport Switch from '@material-ui/core/Switch';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport {\n    greaterThanDate,\n    lessThanDate,\n    required\n} from '../../../validation/validateFields';\n\nimport { handleTeacherInfo } from '../../../helper/renderTeacher';\n\nimport {\n    selectTeacherIdService,\n    selectVacationService\n} from '../../../services/temporaryScheduleService';\nimport renderCheckboxField from '../../../share/renderedFields/checkbox';\n\nlet TemporaryScheduleVacationForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, invalid, reset, submitting } = props;\n\n    const [isFewDays, setIsFewDays] = useState(false);\n    const [forAll, setForAll] = useState(true);\n    const [notify, setNotify] = useState(false);\n\n    const { teachers, teacherId } = props;\n\n    const { vacation } = props;\n    const vacationId = vacation.id;\n\n    useEffect(() => {\n        if (vacationId) {\n            initializeFormHandler(vacation);\n        } else {\n            props.initialize();\n        }\n    }, [vacationId]);\n\n    const initializeFormHandler = vacation => {\n        if (vacation.teacher?.id) {\n            selectTeacherIdService(vacation.teacher.id);\n            setForAll(false);\n        } else {\n            setForAll(true);\n        }\n        props.initialize({\n            id: vacation.id,\n            date: vacation.date\n        });\n    };\n\n    const handleForAllChange = event => {\n        setForAll(event.target.checked);\n    };\n\n    const handleChange = event => {\n        setIsFewDays(event.target.checked);\n    };\n\n    const handleNotifyChange = event => setNotify(event.target.checked);\n\n    const defaultProps = {\n        options: teachers,\n        getOptionLabel: option => (option ? handleTeacherInfo(option) : '')\n    };\n\n    const handleFindTeacher = teacherId => {\n        if (teacherId)\n            return teachers.find(teacher => teacher.id === teacherId);\n        else return '';\n    };\n\n    const handleTeacherSelect = teacher => {\n        if (teacher) selectTeacherIdService(teacher.id);\n    };\n\n    useEffect(() => {\n        if (teacherId) setForAll(false);\n    }, [teacherId]);\n\n    useEffect(() => {\n        if (forAll) selectTeacherIdService(null);\n    }, [forAll]);\n\n    return (\n        <Card class=\"form-card\">\n            <h2 className=\"form-title under-line\">\n                {vacationId ? t('edit_vacation_form') : t('create_vacation_form')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={isFewDays}\n                            onChange={handleChange}\n                            color=\"primary\"\n                        />\n                    }\n                    label={t('common:few_days_label')}\n                />\n                {isFewDays ? (\n                    <>\n                        <Field\n                            className=\"time-input\"\n                            name=\"from\"\n                            component={renderMonthPicker}\n                            label={t('class_from_label') + ':'}\n                            validate={[required, lessThanDate]}\n                        />\n                        <Field\n                            className=\"time-input\"\n                            name=\"to\"\n                            component={renderMonthPicker}\n                            label={t('class_to_label') + ':'}\n                            validate={[required, greaterThanDate]}\n                        />\n                    </>\n                ) : (\n                    <Field\n                        className=\"time-input\"\n                        name=\"date\"\n                        component={renderMonthPicker}\n                        label={t('common:date') + ':'}\n                        validate={[required]}\n                    />\n                )}\n                <div>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                color=\"primary\"\n                                checked={forAll}\n                                onChange={handleForAllChange}\n                            />\n                        }\n                        label={forAll ? t('for_all') : t('for_teacher')}\n                    />\n                </div>\n                {!forAll && (\n                    <Autocomplete\n                        {...defaultProps}\n                        clearOnEscape\n                        openOnFocus\n                        value={handleFindTeacher(teacherId)}\n                        onChange={(event, newValue) => {\n                            if (!newValue) handleTeacherSelect({});\n                            else handleTeacherSelect(newValue);\n                        }}\n                        renderInput={params => (\n                            <TextField\n                                {...params}\n                                label={t('formElements:teacher_label')}\n                                margin=\"normal\"\n                            />\n                        )}\n                    />\n                )}\n                <Field\n                    name=\"notify\"\n                    label={t('common:notify_label')}\n                    component={renderCheckboxField}\n                    checked={notify}\n                    onChange={handleNotifyChange}\n                    color=\"primary\"\n                />\n\n                <div className=\"form-buttons-container\">\n                    <Button\n                        className=\"buttons-style\"\n                        type=\"submit\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={submitting || invalid}\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        className=\"buttons-style\"\n                        type=\"button\"\n                        variant=\"contained\"\n                        disabled={submitting || invalid}\n                        onClick={() => {\n                            reset();\n                            selectVacationService({});\n                        }}\n                    >\n                        {t('clear_button_label')}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nTemporaryScheduleVacationForm = reduxForm({\n    form: TEMPORARY_SCHEDULE_VACATION_FORM\n})(TemporaryScheduleVacationForm);\n\nexport default TemporaryScheduleVacationForm;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport TemporaryScheduleForm from '../../components/TemporarySchedule/TemporaryScheduleForm/TemporaryScheduleForm';\nimport ScheduleAndTemporaryScheduleList\n    from '../../components/TemporarySchedule/ScheduleAndTemporaryScheduleList/ScheduleAndTemporaryScheduleList';\nimport TemporaryScheduleTitle from '../../components/TemporarySchedule/TemporaryScheduleTitle/TemporaryScheduleTitle';\nimport TemporaryScheduleList from '../../components/TemporarySchedule/TemporaryScheduleList/TemporaryScheduleList';\nimport TemporaryScheduleVacationForm\n    from '../../components/TemporarySchedule/TemporaryScheduleVacationForm/TemporaryScheduleVacationForm';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Card from '../../share/Card/Card';\n\nimport { setLoadingService } from '../../services/loadingService';\nimport { showAllTeachersService } from '../../services/teacherService';\nimport {\n    addTemporaryScheduleForRangeService,\n    addTemporaryScheduleService,\n    editTemporaryScheduleService\n} from '../../services/temporaryScheduleService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { showListOfRoomsService } from '../../services/roomService';\nimport { showAllSubjectsService } from '../../services/subjectService';\nimport { getLessonTypesService } from '../../services/lessonService';\nimport { showAllGroupsService } from '../../services/groupService';\n\nimport './TemporarySchedule.scss';\nimport { navigation } from '../../constants/navigation';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\n\nconst TemporarySchedule = props => {\n    const { t } = useTranslation('common');\n\n    const [fromDate, setFromDate] = useState(null);\n    const [toDate, setToDate] = useState(null);\n\n    const isLoading = props.loading;\n\n    const { teachers, teacherId } = props;\n    useEffect(() => {\n        setLoadingService(true);\n        showAllTeachersService();\n        showListOfRoomsService();\n        showAllSubjectsService();\n        getClassScheduleListService(null);\n        getLessonTypesService();\n        showAllGroupsService();\n    }, []);\n\n    const handleTemporaryScheduleSubmit = values => {\n        if (values.id) editTemporaryScheduleService(teacherId, values);\n        else addTemporaryScheduleService(teacherId, values, false);\n    };\n\n    const handleTemporaryScheduleVacationSubmit = values => {\n        if (!values.from && !values.to) {\n            if (values.id)\n                editTemporaryScheduleService(\n                    teacherId,\n                    {\n                        ...values,\n                        vacation: true\n                    },\n                    true\n                );\n            else\n                addTemporaryScheduleService(\n                    teacherId,\n                    {\n                        ...values,\n                        vacation: true\n                    },\n                    true\n                );\n        } else {\n            addTemporaryScheduleForRangeService(\n                teacherId,\n                {\n                    ...values,\n                    vacation: true\n                },\n                true\n            );\n        }\n    };\n\n    return (\n        <>\n            <NavigationPage val={navigation.CHANGES} />'\n            <Card class='card-title lesson-card'>\n                <TemporaryScheduleTitle\n                    teacherId={teacherId}\n                    teachers={teachers}\n                    fromDate={fromDate}\n                    setFromDate={setFromDate}\n                    toDate={toDate}\n                    setToDate={setToDate}\n                />\n            </Card>\n            <div className='cards-container'>\n                <aside>\n                    {props.temporarySchedule.id ||\n                    props.temporarySchedule.scheduleId ? (\n                        <TemporaryScheduleForm\n                            temporarySchedule={props.temporarySchedule}\n                            teacherRangeSchedule={props.teacherRangeSchedule}\n                            teacherId={teacherId}\n                            onSubmit={handleTemporaryScheduleSubmit}\n                            lessonTypes={props.lessonTypes}\n                            teachers={teachers}\n                            rooms={props.rooms}\n                            periods={props.periods}\n                            subjects={props.subjects}\n                            groups={props.groups}\n                        />\n                    ) : (\n                        <TemporaryScheduleVacationForm\n                            teachers={teachers}\n                            vacation={props.vacation}\n                            onSubmit={handleTemporaryScheduleVacationSubmit}\n                            teacherId={teacherId}\n                        />\n                    )}\n                </aside>\n                {isLoading ? (\n                    <section className='centered-container'>\n                        <CircularProgress />\n                    </section>\n                ) : (\n                    <>\n                        {props.schedulesAndTemporarySchedules.length > 0 && (\n                            <ScheduleAndTemporaryScheduleList\n                                schedulesAndTemporarySchedules={\n                                    props.schedulesAndTemporarySchedules\n                                }\n                            />\n                        )}\n                        {props.temporarySchedules.length > 0 && (\n                            <TemporaryScheduleList\n                                temporarySchedules={props.temporarySchedules}\n                            />\n                        )}\n                        {props.schedulesAndTemporarySchedules.length === 0 &&\n                        props.temporarySchedules.length === 0 && (\n                            <section className='centered-container'>\n                                <h2>{t('empty')}</h2>\n                            </section>\n                        )}\n                    </>\n                )}\n            </div>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    schedulesAndTemporarySchedules:\n    state.temporarySchedule.schedulesAndTemporarySchedules,\n    temporarySchedules: state.temporarySchedule.temporarySchedules,\n    temporarySchedule: state.temporarySchedule.temporarySchedule,\n    vacation: state.temporarySchedule.vacation,\n    lessonTypes: state.lesson.lessonTypes,\n    subjects: state.subjects.subjects,\n    rooms: state.rooms.rooms,\n    periods: state.classActions.classScheduler,\n    groups: state.groups.groups,\n    loading: state.loadingIndicator.loading,\n    teachers: state.teachers.teachers,\n    teacherId: state.temporarySchedule.teacherId\n});\n\nexport default connect(mapStateToProps)(TemporarySchedule);\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Redirect,\n    Route,\n    Switch\n} from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Header from '../components/Header/Header';\n\nimport HomePage from '../containers/Home/Home';\nimport TeacherSchedule from '../components/TeacherSchedule/TeacherSchedule';\nimport SchedulePage from '../containers/SchedulePage/SchedulePage';\nimport AdminPage from '../containers/AdminPage/AdminPage';\nimport Logout from '../containers/Auth/Logout/Logout';\nimport ActivationPage from '../containers/ActivationPage/ActivationPage';\nimport ProfilePage from '../containers/ProfilePage/ProfilePage';\nimport { links } from '../constants/links';\nimport { userRoles } from '../constants/userRoles';\nimport TeacherList from '../containers/TeachersList/TeachersList';\nimport BusyRooms from '../containers/BusyRooms/BusyRooms';\nimport GroupList from '../containers/GroupList/GroupList';\nimport ClassSchedule  from '../containers/ClassSchedule/ClassSchedule';\nimport RoomList from '../containers/RoomList/RoomList';\nimport SubjectPage from '../containers/SubjectPage/SubjectPage';\nimport SemesterPage from '../containers/SemesterPage/SemesterPage';\nimport MergeRolePage from '../containers/MergeRolePage/MergeRolePage';\nimport ChangePasswordForm from '../components/ChangePasswordForm/ChangePasswordForm';\nimport GroupSchedulePage from '../components/GroupSchedulePage/GroupSchedulePage';\nimport { Register } from '../components/Register/Register';\nimport { ResetPassword } from '../components/ResetPassword/ResetPassword';\nimport { Login } from '../components/Login/Login';\nimport DepartmentPage from '../containers/DepartmentPage/DepartmentPage';\nimport TemporarySchedule from '../containers/TemporarySchedule/TemporarySchedule';\nconst Routers = props => {\n    const userRole = props.userRole;\n\n    let routes = (\n        <Switch>\n            <Route path={links.Registration} component={Register}/>\n            <Route path={links.HOME_PAGE} exact component={HomePage} />\n            <Route path={links.ScheduleFor} component={GroupSchedulePage}/>\n            <Route path={links.ADMIN_PAGE}>\n                <Redirect to={links.LOGIN} />\n            </Route>\n            <Route path={links.LOGIN} component={Login} />\n            <Route path={links.ACTIVATION_PAGE} component={ActivationPage} />\n            <Route path={links.MY_PROFILE} component={ProfilePage} />\n\n        </Switch>\n    );\n\n    if (userRole === userRoles.MANAGER) {\n        routes = (\n            <Switch>\n                <Route path={links.SCHEDULE_PAGE} component={SchedulePage} />\n                <Route path={links.Departments} component={DepartmentPage}/>\n                <Route path={links.Registration} component={Register}/>\n                <Route path={links.RESET_PASSWORD} component={ResetPassword}/>\n                <Route path={links.HOME_PAGE} exact component={HomePage} />\n\n                <Route path={links.LessonPage}  component={AdminPage} />\n                <Route path={links.TeacherList}  component={TeacherList} />\n                <Route exact path={links.GroupList} component={GroupList} />\n\n                <Route path={`${links.GroupList}${links.Group}${links.Edit}${links.IdParam}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.Delete}${links.IdParam}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.AddStudent}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.SetDisable}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.ShowStudents}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.Student}${links.IdStudentParam}${links.Edit}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.Student}${links.IdStudentParam}${links.Delete}`}  component={GroupList} />\n\n                <Route path={links.ClassScheduleTitle}  component={ClassSchedule} />\n                <Route path={links.RoomList}  component={RoomList} />\n                <Route path={links.SubjectPage}  component={SubjectPage} />\n                <Route path={links.BusyRooms}  component={BusyRooms} />\n                <Route path={links.SemesterPage}  component={SemesterPage} />\n                <Route path={links.MergeRolePage}  component={MergeRolePage} />\n                <Route path={links.Changes}  component={TemporarySchedule} />\n\n\n                <Route path={links.ACTIVATION_PAGE}>\n                    <Redirect to={links.ADMIN_PAGE} />\n                </Route>\n                <Route path={links.LOGIN} component={Login} />\n\n                <Route path={links.ADMIN_PAGE} component={AdminPage} />\n                <Route path={links.LOGOUT} component={Logout} />\n                <Route path={links.MY_PROFILE} component={ProfilePage} />\n                <Route path={links.ScheduleFor} component={GroupSchedulePage}/>\n\n\n            </Switch>\n        );\n    } else if (userRole) {\n        routes = (\n            <Switch>\n                <Route path={links.Registration} component={Register}/>\n                <Route path={links.RESET_PASSWORD} component={ResetPassword}/>\n                <Route path={links.HOME_PAGE} exact component={HomePage} />\n\n\n                <Route\n                    path={links.TEACHER_SCHEDULE}\n                    component={TeacherSchedule}\n                />\n                <Route path={links.SCHEDULE_PAGE}>\n                    <Redirect to={links.LOGIN} />\n                </Route>\n                <Route path={links.ADMIN_PAGE}>\n                    <Redirect to={links.LOGIN} />\n                </Route>\n                <Route path={links.LOGIN} component={Login} />\n                <Route path={links.ACTIVATION_PAGE}>\n                    <Redirect to={links.HOME_PAGE} />\n                </Route>\n                <Route path={links.MY_PROFILE} component={ProfilePage} />\n                <Route path={links.LOGOUT} component={Logout} />\n                <Route path={links.ScheduleFor} component={GroupSchedulePage}/>\n            </Switch>\n        );\n    }\n    return (\n        <Router>\n            <Header userRole={userRole} roles={userRoles} />\n            {routes}\n        </Router>\n    );\n};\n\nconst mapStateToProps = state => ({ userRole: state.auth.role });\n\nexport default connect(mapStateToProps)(Routers);\n","import { useDispatch, useSelector } from \"react-redux\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Icon } from \"@material-ui/core\";\nimport React from 'react'\nimport { clearSnackbar } from '../../redux/actions/snackBarReducer';\n\nexport default function SuccessSnackbar() {\n    const dispatch = useDispatch();\n\n    const { successSnackbarMessage, successSnackbarOpen } = useSelector(\n        state => state\n    );\n\n    function handleClose() {\n        dispatch(clearSnackbar());\n    }\n\n    return (\n        <Snackbar\n            anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\"\n            }}\n            open={successSnackbarOpen}\n            autoHideDuration={4000}\n            onClose={handleClose}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\">\n          <Icon>check_circle</Icon>\n                    {successSnackbarMessage}\n        </span>\n            }\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    onClick={handleClose}\n                >\n                    <Icon>close</Icon>\n                </IconButton>\n            ]}\n        />\n    );\n}","export const showSuccessSnackbar = message => {\n    return dispatch => {\n        dispatch({ type: \"SNACKBAR_SUCCESS\", message });\n    };\n};\n\nexport const clearSnackbar = () => {\n    return dispatch => {\n        dispatch({ type: \"SNACKBAR_CLEAR\" });\n    };\n};","import React, { Suspense, useEffect } from 'react';\nimport './App.scss';\nimport Routers from './router/Routers';\nimport './helper/i18n';\nimport { connect } from 'react-redux';\n\nimport { authCheckState } from './redux/actions/index';\nimport { handleSnackbarCloseService } from './services/snackbarService';\nimport SnackbarComponent from './share/Snackbar/SnackbarComponent';\nimport SuccessSnackbar from './components/SuccessSnackbar/SuccessSnackbar';\n\nconst App = props => {\n    const { isSnackbarOpen, snackbarType, snackbarMessage } = props;\n    const handleSnackbarClose = (event, reason) => {\n        if (!reason === 'clickaway') {\n            return;\n        }\n\n        handleSnackbarCloseService();\n    };\n\n    useEffect(() => {\n        props.onTryAutoLogin();\n    }, []);\n\n    return (\n        <Suspense fallback={null}>\n            <div className=\"container\">\n                <Routers />\n                <SuccessSnackbar />\n                <SnackbarComponent\n                    message={snackbarMessage}\n                    type={snackbarType}\n                    isOpen={isSnackbarOpen}\n                    handleSnackbarClose={handleSnackbarClose}\n                />\n            </div>\n        </Suspense>\n    );\n};\n\nconst mapStateToProps = state => ({\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onTryAutoLogin: () => dispatch(authCheckState())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './redux/reducers/index';\nimport rootSaga from './sagas';\n\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers =\n    (process.env.NODE_ENV === 'development'\n        ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n        : null) || compose;\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}