{"version":3,"sources":["redux/reducers/teachers.js","redux/actions/actionsType.js","redux/utility.js","redux/reducers/lesson.js","redux/reducers/snackbar.js","helper/axios.js","constants/tokenBegin.js","redux/reducers/auth.js","redux/reducers/loadingIndicator.js","redux/reducers/schedule.js","redux/reducers/class.js","redux/reducers/subjects.js","redux/reducers/groups.js","redux/reducers/rooms.js","constants/actionTypes.js","redux/reducers/roomTypes.js","redux/reducers/teachersWish.js","redux/reducers/busyRooms.js","redux/reducers/semesters.js","redux/reducers/users.js","redux/reducers/freeRooms.js","redux/reducers/index.js","services/authService.js","constants/axios.js","helper/i18n.js","sagas/authSaga.js","sagas/logoutSaga.js","sagas/checkAuthTimeoutSaga.js","sagas/checkAuthStateSaga.js","sagas/registrationSaga.js","sagas/activateUserSaga.js","sagas/resetUserPasswordSaga.js","sagas/watchers.js","sagas/index.js","validation/validateFields.js","constants/links.js","components/LanguageSelector/LanguageSelector.js","constants/schedule/colors.js","redux/actions/snackbar.js","redux/actions/loadingIndicator.js","redux/actions/schedule.js","redux/actions/teachers.js","redux/actions/teachersWish.js","redux/actions/class.js","redux/actions/groups.js","redux/actions/semesters.js","services/snackbarService.js","constants/snackbarTypes.js","helper/handlerAxios.js","services/teacherWishService.js","constants/reduxForms.js","services/loadingService.js","services/scheduleService.js","services/busyRooms.js","redux/actions/busyRooms.js","constants/schedule/cssClasses.js","share/Card/Card.js","validation/storeValidation.js","constants/validation.js","share/renderedFields/select.js","share/renderedFields/error.js","components/AddTeacherWishForm/WishForm.js","helper/formHelper.js","services/classService.js","constants/userRoles.js","containers/WishModal/WishModal.js","services/semesterService.js","constants/schedule/days.js","components/FreeRoomForm/freeRoomForm.js","services/freeRoomsService.js","redux/actions/freeRooms.js","containers/FreeRooms/freeRooms.js","components/Header/Header.js","helper/renderScheduleTable.js","components/GroupSchedulePageTop/GroupSchedulePageTop.js","components/GroupSchedulePage/GroupSchedulePage.js","helper/prepareSchedule.js","containers/Home/Home.js","services/lessonService.js","redux/actions/lesson.js","constants/auth.js","share/renderedFields/input.js","components/LoginForm/LoginForm.js","components/RegistrationForm/RegistrationForm.js","components/ResetPasswordForm/ResetPasswordForm.js","containers/Auth/Auth.js","redux/actions/auth.js","constants/cardType.js","constants/snackbarMessages.js","services/groupService.js","services/roomService.js","redux/actions/rooms.js","components/Board/Board.js","components/ScheduleItem/ScheduleItem.js","helper/strings.js","components/ScheduleLessonsList/ScheduleLessonsList.js","components/ScheduleDialog/ScheduleDialog.js","components/Schedule/Schedule.js","containers/SchedulePage/SchedulePage.js","constants/disabledCard.js","share/modals/dialog.js","share/modals/chooseGroupDialog/CopyLessonDialog.js","components/LessonForm/LessonForm.js","components/LessonsList/LessonsList.js","services/teacherService.js","services/subjectService.js","redux/actions/subjects.js","containers/LessonPage/LessonPage.js","components/AddTeacherForm/AddTeacherForm.js","helper/search.js","share/SearchPanel/SearchPanel.js","share/NotFound/NotFound.js","containers/TeachersList/TeachersList.js","share/renderedFields/time.js","components/ClassForm/ClassForm.js","constants/common.js","containers/ClassSchedule/ClassSchedule.js","components/AddGroupForm/AddGroupForm.js","share/Snackbar/SnackbarComponent.js","containers/GroupList/GroupList.js","components/AddRoomForm/AddRoomForm.js","services/roomTypesService.js","redux/actions/roomTypes.js","components/AddNewRoomType/AddNewRoomType.js","containers/RoomList/RoomList.js","components/AddSubjectForm/AddSubjectForm.js","containers/SubjectPage/SubjectPage.js","containers/BusyRooms/BusyRooms.js","share/renderedFields/checkbox.js","share/renderedFields/timeSemester.js","components/SemesterForm/SemesterForm.js","containers/SemesterPage/SemesterPage.js","services/userService.js","redux/actions/users.js","containers/MergeRolePage/MergeRolePage.js","containers/AdminPage/AdminPage.js","containers/Auth/Logout/Logout.js","containers/ActivationPage/ActivationPage.js","router/Routers.js","App.js","serviceWorker.js","index.js"],"names":["teachers","state","teacher","disabledTeachers","action","type","result","filter","id","updatedTeacher","forEach","push","updateObject","oldObject","updatedValues","initialState","lessons","lessonTypes","lesson","groupId","uniqueError","reducer","concat","updatedLessons","isSnackbarOpen","snackbarType","message","isOpen","instance","axios","create","baseURL","token","localStorage","getItem","includes","defaults","headers","common","Authorization","role","error","activationError","response","login","removeItem","registration","reg","resetPasswordResponse","loading","scheduleLoading","items","availability","itemsIds","fullSchedule","groupSchedule","scheduleType","scheduleGroupId","currentSemester","itemArr","index","findIndex","item","splice","newType","itemGroupId","scheduleTeacherId","newArr","teacherId","teacherSchedule","semesters","scheduleSemesterId","semesterId","classActions","classScheduler","classScheduleOne","classSchedulOne","one","classScheduleItem","classSchedulerstate","classItem","subjects","subject","disabledSubjects","updatedSubjects","groups","group","disabledGroups","updatedGroups","rooms","oneRoom","disabledRooms","roomItem","roomState","actionType","roomTypes","oneType","updateTypeState","typeItem","roomTypeItem","teachersWish","wishes","wish","myWishes","find","day_of_week","busyRooms","semester","disabledSemesters","updatedSemesters","users","freeRooms","freeRoom","rootReducer","combineReducers","auth","snackbar","schedule","loadingIndicator","form","formReducer","authUserService","request","post","then","registerUserService","resetUserPasswordService","put","email","activateUserService","logoutUserService","userLang","navigator","language","userLanguage","slice","lang","i","i18n","use","LanguageDetector","initReactI18next","Backend","init","lng","backend","loadPath","fallbackLng","debug","ns","defaultNS","keySeparator","useDataAttrOptions","interpolation","escapeValue","formatSeparator","react","wait","authSaga","payload","call","jwtDecode","require","data","decodedJWT","expirationDate","Date","exp","setItem","roles","expirationTime","getTime","t","logoutSaga","checkAuthTimeoutSaga","delay","checkAuthStateSaga","registrationSaga","activateUserSaga","resetUserPasswordSaga","watchUserAuthentication","takeLatest","takeEvery","startForman","fork","min","max","links","LanguageSelector","props","useTranslation","changeLanguage","event","target","value","RadioGroup","row","aria-label","name","FormControlLabel","control","Radio","color","onChange","className","src","alt","label","colors","setOpenSnackbar","res","setLoading","setCurrentSemester","deleteTeacher","showAllTeachers","showAllWishes","setClassScheduleList","showAllGroups","updateSemester","handleSnackbarOpenService","store","dispatch","handleSnackbarCloseService","snackbarStore","getState","snackbarTypes","errorHandler","successHandler","teacherWithWish","updateTeacherWishService","teacherWishList","updatedWish","updatatTeacherWishes","teacherWishesList","reset","cardType","catch","getMyTeacherWishesService","get","setLoadingService","isLoading","setScheduleLoadingService","getScheduleItemsService","getScheduleItemsServiceBySemester","err","deleteItemFromScheduleService","itemId","delete","setScheduleTypeService","setScheduleSemesterIdService","setScheduleSemesterId","cssClasses","Card","class","card","children","dragItemNode","useRef","dragItem","draggable","handleDragEnd","e","JSON","parse","childNodes","groupTitleEl","document","getElementById","allBoards","getElementsByClassName","groupTitles","boards","style","backgroundColor","board","background","display","current","removeEventListener","onDragStart","groupTitle","setTimeout","classList","contains","setItemGroupIdService","addEventListener","dataTransfer","setData","checkUniqSemester","storeSemester","year","description","toUpperCase","trim","validation","EMAIL","PASSWORD","required","undefined","lessThanZero","minLengthValue","length","maxLengthValue","lessThanTime","previousValue","allValues","values","moment","toDate","field","greaterThanTime","uniqueClassName","classId","some","_arr","class_name","checkUniqClassName","uniqueGroup","title","checkUniqueGroup","uniqueSubject","subjectTitle","checkUniqueSubject","timeIntersect","startTime","endTime","extendMoment","Moment","incomeRange","range","intersect","timeIntersectService","uniqueRoomName","roomName","roomdId","checkUniqueRoomName","test","password","minYearValue","minYear","getFullYear","lessThanDate","greaterThanDate","renderSelectField","input","meta","touched","custom","FormControl","InputLabel","htmlFor","Select","native","FormHelperText","renderFromHelper","WishForm","handleSubmit","pristine","submitting","class_on_day","map","classSchedulerOne","wishOne","wishDays","useEffect","initializeFormWish","initialize","evenOdd","classStats","class_status","classStatus","change","status","onSubmit","Field","component","validate","disabled","key","class_number","Button","variant","onClick","reduxForm","connect","resetFormHandler","formName","getClassScheduleListService","bufferArray","results","getPublicClassScheduleListService","putAddClassScheduleOneService","postAddClassScheduleOneService","userRoles","USER","MANAGER","TEACHER","WishModal","onCloseWish","teacherWishes","openWish","useState","showForm","setShowForm","class_names","selectWishCard","day","wishDay","Dialog","onClose","open","maxWidth","teacherName","surname","teacherWishId","someWish","new_class_status","teacherWish","selectSemesterService","showAllSemestersService","sort","a","b","reverse","switchSaveActions","putSemester","postSemester","handleSemesterService","isUniqueError","semester_days","semester_classes","prop","Object","prototype","hasOwnProperty","indexOf","substring","startDay","endDay","cardSemester","checkSemesterYears","currentScheduleOld","findCurrentSemester","dateEndYear","dateStartYear","conf","window","confirm","getDisabledSemestersService","semesterItem","setDisabledSemesters","daysUppercase","FreeRoomForm","onReset","week","toLowerCase","classNum","clearFreeRoomsService","setOpen","aria-labelledby","elem","FREE_ROOMS_URL","dayOfWeek","StyledMenu","withStyles","paper","border","Menu","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuItem","theme","root","palette","primary","main","white","MenuItem","React","anchorEl","setAnchorEl","handleClick","currentTarget","handleClose","setOpenWish","setTeacher","userRole","handleClickOpenWish","leftLinks","rightLinks","menu","to","aria-controls","aria-haspopup","keepMounted","Boolean","textDecoration","ListItemIcon","fontSize","shortid","currentDay","now","getDay","matchDayNumberSysytemToDayName","printWeekNumber","startScheduleDate","date","parsed","Array","from","numberOfDays","Math","floor","ceil","getWeekNumber","isOddFunction","num","currentWeekType","renderClassCell","prepareLessonCardCell","inner","teacherForSite","subjectForSite","prepareLessonSubCardCell","i18next","lessonType","room","renderScheduleGroupHeader","TableHead","TableRow","TableCell","generate","renderGroupTable","classes","isOdd","TableContainer","Table","TableBody","classDay","classIndex","isOddWeek","entries","cards","renderGroupDayClass","renderGroupCells","isCurrentDay","groupIndex","colspan","rowspan","classname","skip_render","weekly_render","colSpan","rowSpan","renderDay","dayName","dayItem","semesterClassesCount","odd","cardIndex","even","prepareForRender","day_name","classesCount","dayClassName","oddWeekClass","evenWeekClass","Fragment","renderFirstDayFirstClassFirstCardLine","renderFirstDayOtherClassFirstCardLine","renderFullSchedule","fullResultSchedule","groupList","scheduleTitle","resultArray","renderScheduleDays","renderTeacherClassCell","cellText","subCellText","groupCellText","prepareTeacherCardCell","renderWeekTable","days","scheduleRow","clas","renderClassRow","useStyles","makeStyles","margin","spacing","GroupField","styled","TextField","width","loadingContainer","CircularProgress","defaultProps","options","getOptionLabel","option","defaultTeacherProps","patronymic","defaultSemesterProps","Autocomplete","clearOnEscape","openOnFocus","newValue","renderInput","params","renderSemesterList","setScheduleGroupId","alert","setScheduleTeacherId","matchFunction","getGroupSchedule","getTeacherSchedule","emptySchedule","resultArrays","evenArray","oddArray","evenDaysPrepArray","oddDaysPrepArray","evenDayPrep","weeks","oddDayPrep","oddDay","oddClas","clasIndex","dayArr","evenDay","evenClas","done","makeGroupSchedule","oddDays","evenDays","oddClasses","evenClasses","dayTeacher","oddClass","evenClass","makeTeacherSchedule","position","groupsCount","groupListId","Map","daysPrepArrayFull","set","prep_schedule_array","groupItem","classFull","groupFullIterate","dayFullIterate","dayFullIterable","makeFullSchedule","getLessonsByGroupService","resetFormService","createLessonHandler","isCopy","handleLessonCardService","cardObj","lessonCardId","hours","cardObjectHandler","storeLesson","checkUniqLesson","setUniqueErrorService","selectLessonCardService","selectGroupIdService","authTypes","renderTextField","invalid","placeholder","helperText","LoginForm","loginError","translation","setError","switchAuthMode","RegistrationForm","registrationError","emailValidate","emailErrorCondition","emailAdvancedValidate","passwordValidate","passwordsCondition","passwords","passwordValidateAdvanced","retypePasswordValidate","retypePasswordValidateAdvanced","ResetPasswordForm","resetPasswordError","onAuth","onRegister","onResetPassword","authType","setAuthType","isSuccess","loginHandler","loginData","commonCondition","authRedirect","authPage","switchAuthModeHandler","registrationData","retypePassword","resetPasswordData","LESSON","CLASS","GROUP","ROOM","TYPE","SUBJECT","WISH","SEMESTER","snackbarMessage","resetForm","selectGroupService","showAllGroupsService","createGroupService","updateGroupService","getDisabledGroupsService","setDisabledGroups","showListOfRoomsService","getDisabledRoomsService","createRoomService","typeDescription","Board","onDrop","preventDefault","card_id","getData","arr","split","obj","lessonId","periodId","SCHEDULE_CHECK_AVAILABILITY_URL","checkAvailabilityScheduleService","setModalData","openDialog","onDragOver","onDragLeave","parent","parentNode","ScheduleItem","fStrLetterCapital","addition","itemNodeId","deleteNodeId","stringify","inBoard","deleteItem","firstStringLetterCapital","str","replace","c","ScheduleLessonsList","firstStringLetterCapitalHandle","groupFinderHandle","lessonItem","els","hoursInSchedule","lessonItems","roomField","ScheduleDialog","itemData","setRoom","sure","setSure","x","y","available","disableBackdropClick","DialogTitle","classSuitsToTeacher","teacherAvailable","Schedule","setItemData","setNewItemHandle","addItemToScheduleService","roomId","handleClickOpen","elClasses","top","deleteItemFromScheduleHandler","conditionFunc","period","classNumber","addDeleteBtnToItem","itemNode","deleteNode","allLessons","el","scrollIntoView","itemInBoard","scheduleItems","disabledCard","ConfirmDialog","whatDelete","cardId","isHide","groupField","CopyLessonDialog","setGroup","notSelected","textAlign","LessonForm","initializeFormHandler","concatTeacherNameHandler","isFullName","setValueToTeacherForSiteHandler","subjectId","subjectName","setValueToSubjectForSiteHandler","multiline","rowsMax","onSetSelectedCard","LessonsList","onCopyLesson","onSelectLesson","onClickOpen","showAllTeachersService","getTeachersWithoutAccount","updateTeacherService","disable","getDisabledTeachersService","selectTeacherCardService","handleTeacherService","cardTeacher","createTeacherService","teacherCardId","selectSubjectService","showAllSubjectsService","createSubjectService","updateSubjectService","getDisabledSubjectsService","setDisabledSubjects","openCopyLessonDialog","setOpenCopyLessonDialog","setLessonId","copiedLesson","setCopiedLesson","lessonLength","selectLessonCardHandler","cardsContainer","groupHandle","groupTitleHandle","lessonGroupObj","copyLessonCardService","deleteLessonCard","keys","constructor","CreateBtn","marginTop","AddTeacher","search","term","String","SearchPanel","SearchChange","showDisabled","setTerm","checkedB","setState","Switch","checked","NotFound","setTeacherId","setDisabled","hideDialog","setHideDialog","teacherLength","selectTeacherCard","removeTeacherCard","removeTeacherCardService","wishId","teacherWishOne","visibleItems","handleToUpperCase","charAt","setEnabledTeachersService","setDisabledTeachersService","renderTimePicker","inputProps","utils","MomentUtils","TimePicker","clearable","ampm","format","rootInput","initialValues","add","ClassScheduleOne","setClassId","handleEdit","getClassScheduleOneService","selectedValue","deleteClassScheduleOneService","addClassScheduleOneService","Alert","SnackbarComponent","handleSnackbarClose","Snackbar","autoHideDuration","severity","setGroupId","visibleGroups","setEnabledGroupService","setDisabledGroupService","removeGroupCardService","handleGroupService","reason","AddRoom","roomType","putNewType","postNewType","NewRoomType","typeId","setTypeId","defaultValue","getOneNewTypeService","roomTypeId","setRoomId","editHandler","selectOneRoomService","setEnabledRoomsService","setDisabledRoomsService","deleteRoom","addNewTypeService","setSubjectId","visibleSubjects","setDisabledSubjectsService","removeSubjectCardService","handleSubjectService","busyRoomsLength","busyRoom","room_id","room_name","room_type","schedules","scheduleClass","in_arrayIndex","evenItem","class_id","evenOne","evenItemMap","group_name","join","oddItem","oddOne","oddItemMap","renderCheckboxField","labelPlacement","Checkbox","renderMounthPicker","DatePicker","clearCheckboxes","setChecked","setCheckedDates","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY","prepSetCheckedClasses","setCheckedClasses","checkedDates","checkedClasses","setCheckedDaysHandler","useCallback","changedDay","setCheckedClassesHandler","classid","changedClass","newDays","reduce","classFullItem","newClasses","renderMonthPicker","semesterDay","scheduleItem","setSemesterId","searchArr","setEnabledSemestersService","setDisabledSemestersService","removeSemesterCardService","sem_days","getUsersService","autoCompleteField","user","setUser","defaultPropsTeachers","defaultPropsUsers","mergeUserAndTeacherHandle","mergeObj","userId","TabPanel","other","Typography","hidden","Box","p","flexGrow","header","info","dark","setValue","tabs_components","AppBar","Tabs","indicatorColor","scrollButtons","tab_one","Tab","tabLink","a11yProps","onLogout","onActivate","URLSearchParams","location","redirect","routes","path","exact","HomePage","Auth","ActivationPage","SchedulePage","AdminPage","Logout","onTryAutoLogin","authCheckState","fallback","hostname","match","sagaMiddleware","createSagaMiddleware","composeEnhancers","compose","createStore","applyMiddleware","run","rootSaga","ReactDOM","render","serviceWorker","ready","unregister","console"],"mappings":"w4BAqEeA,EAnEE,WAOX,IANFC,EAMC,uDANO,CACJD,SAAU,GACVE,QAAS,GACTC,iBAAkB,IAEtBC,EACC,uCACD,OAAQA,EAAOC,MACX,ICoCmB,cDnCf,OAAO,eACAJ,EADP,CAEID,SAAS,GAAD,mBAAMC,EAAMD,UAAZ,CAAsBI,EAAOE,WAG7C,ICiCsB,iBDhClB,OAAO,eACAL,EADP,CAEID,SAAS,YACFC,EAAMD,SAASO,QACd,SAAAP,GAAQ,OAAIA,EAASQ,KAAOJ,EAAOE,aAKnD,ICqBsB,iBDpBlB,IAAIJ,EAAUD,EAAMD,SAASO,QACzB,SAAAL,GAAO,OAAIA,EAAQM,KAAOJ,EAAOE,UACnC,GAIF,OAHKJ,IACDA,EAAU,CAAEM,GAAI,OAEb,eACAP,EADP,CAEIC,QAASA,IAGjB,ICUsB,iBDTlB,IAAMO,EAAiB,GAOvB,OANAR,EAAMD,SAASU,SAAQ,SAAAR,GACfA,EAAQM,KAAOJ,EAAOE,OAAOE,KAC7BN,EAAO,eAAQA,EAAR,GAAoBE,EAAOE,SAEtCG,EAAeE,KAAKT,MAEjB,eACAD,EADP,CAEIC,QAAS,GACTF,SAAUS,IAGlB,ICFgB,WDGZ,OAAO,eACAR,EADP,CAEID,SAAS,YAAKI,EAAOE,UAE7B,ICmD6B,wBDlDzB,OAAO,eACAL,EADP,CAEIE,iBAAiB,YAAKC,EAAOE,UAGrC,QACI,OAAOL,IEjENW,EAAe,SAACC,EAAWC,GACtC,OAAO,eACFD,EADL,GAEKC,ICADC,EAAe,CACjBC,QAAS,GACTC,YAAa,GACbC,OAAQ,GACRC,QAAS,KACTC,aAAa,GA4DFC,EAzDC,WAAmC,IAAlCpB,EAAiC,uDAAzBc,EAAcX,EAAW,uCAC9C,OAAQA,EAAOC,MACX,IFbuB,kBEcnB,OAAOO,EAAaX,EAAO,CACvBe,QAASf,EAAMe,QAAQM,OAAOlB,EAAOE,UAE7C,IFhByB,oBEiBrB,OAAOM,EAAaX,EAAO,CACvBe,QAASZ,EAAOE,SAExB,IFnBwB,mBEoBpB,OAAOM,EAAaX,EAAO,CACvBgB,YAAab,EAAOE,SAE5B,IFtB0B,qBE0BtB,OAHAL,EAAMe,QAAUf,EAAMe,QAAQT,QAC1B,SAAAW,GAAM,OAAIA,EAAOV,KAAOJ,EAAOE,UAE5BM,EAAaX,EAAO,CACvBe,QAASf,EAAMe,UAEvB,IF5B0B,qBE6BtB,IAAIE,EAASjB,EAAMe,QAAQT,QACvB,SAAAW,GAAM,OAAIA,EAAOV,KAAOJ,EAAOE,UACjC,GAIF,OAHKY,IACDA,EAAS,CAAEV,GAAI,OAEZI,EAAaX,EAAO,CACvBiB,OAAQA,IAEhB,IFrC0B,qBEsCtB,IAAMK,EAAiB,GAOvB,OANAtB,EAAMe,QAAQN,SAAQ,SAAAQ,GACdA,EAAOV,KAAOJ,EAAOE,OAAOE,KAC5BU,EAAM,eAAQA,EAAR,GAAmBd,EAAOE,SAEpCiB,EAAeZ,KAAKO,MAEjBN,EAAaX,EAAO,CACvBe,QAASO,EACTL,OAAQ,KAEhB,IFhDuB,kBEiDnB,OAAON,EAAaX,EAAO,CACvBiB,OAAQ,GACRC,QAASf,EAAOE,SAExB,IFpDwB,mBEqDpB,OAAOM,EAAaX,EAAO,CACvBmB,YAAahB,EAAOE,SAE5B,QACI,OAAOL,IC7Dbc,EAAe,CACjBS,gBAAgB,EAChBC,aAAc,KACdC,QAAS,MAkBEL,EAfC,WAAmC,IAAlCpB,EAAiC,uDAAzBc,EAAcX,EAAW,uCAC9C,OAAQA,EAAOC,MACX,IHFyB,oBGGrB,IAAIA,EAAOD,EAAOE,OAAOD,KACrBqB,EAAUtB,EAAOE,OAAOoB,QAC5B,OAAOd,EAAaX,EAAO,CACvBuB,eAAgBpB,EAAOE,OAAOqB,OAC9BF,aAAcpB,EACdqB,QAASA,IAEjB,QACI,OAAOzB,I,SCjBb2B,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAQ,MAGNC,EAAQC,aAAaC,QAAQ,SAC/BF,GAASA,EAAMG,SCRO,aDStBP,EAASQ,SAASC,QAAQC,OAAOC,cAAgBP,GAGtCJ,QERTb,EAAe,CACjBiB,MAAO,KACPQ,KAAM,KACNC,MAAO,KACPC,gBAAiB,MA+DNrB,EA5DC,WAAmC,IAAlCpB,EAAiC,uDAAzBc,EAAcX,EAAW,uCACxCuC,EAAWvC,EAAOuC,SAExB,OAAQvC,EAAOC,MACX,INDyB,oBMErB,OAAOO,EAAaX,EAAO,CACvB+B,MAAOW,EAASX,MAChBQ,KAAMG,EAASH,KACfC,MAAO,OAEf,INNuB,kBMOnB,OAAO7B,EAAaX,EAAO,CACvB0C,WACAF,MAAO,CAAEG,MAAOxC,EAAOqC,SAE/B,INTwB,mBMepB,cALOZ,EAAMO,SAASC,QAAQC,OAAOC,cAErCN,aAAaY,WAAW,SACxBZ,aAAaY,WAAW,kBACxBZ,aAAaY,WAAW,YACjBjC,EAAaX,EAAO,CACvB0C,SAAU,KACVX,MAAO,KACPS,MAAO,KACPD,KAAM,OAEd,INf6B,wBMgBzB,OAAO5B,EAAaX,EAAO,CACvB0C,aAER,INlB2B,sBMmBvB,OAAO/B,EAAaX,EAAO,CACvBwC,MAAO,CAAEK,aAAc,CAAEC,IAAK3C,EAAOqC,UAE7C,INnBmC,8BMoB/B,OAAO7B,EAAaX,EAAO,CACvB+C,sBAAuBL,IAE/B,INtBiC,4BMuB7B,OAAO/B,EAAaX,EAAO,CACvBwC,MAAOrC,EAAOqC,QAEtB,INvB6B,wBMwBzB,OAAO7B,EAAaX,EAAO,CACvB0C,aAER,IN1B2B,sBM2BvB,OAAO/B,EAAaX,EAAO,CACvByC,gBAAiBtC,EAAOqC,QAEhC,IN1CsB,iBM2ClB,OAAO7B,EAAaX,EAAO,CACvBwC,MAAOrC,EAAOE,SAEtB,QACI,OAAOL,IChEbc,EAAe,CACjBkC,SAAS,EACTC,iBAAiB,GAkBN7B,EAfC,WAAmC,IAAlCpB,EAAiC,uDAAzBc,EAAcX,EAAW,uCAC9C,OAAQA,EAAOC,MACX,IPwB6B,wBOvBzB,OAAOO,EAAaX,EAAO,CACvBgD,QAAS7C,EAAOE,SAEpB,IPqBkC,iCOpBlC,OAAOM,EAAaX,EAAO,CACvBiD,gBAAiB9C,EAAOE,SAEhC,QACI,OAAOL,IChBbc,EAAe,CACjBoC,MAAO,GACPC,aAAc,GACdC,SAAU,GACVC,aAAc,GACdC,cAAe,GACfC,aAAc,GACdC,gBAAiB,EACjBC,gBAAiB,IAiHNrC,EA9GC,WAAmC,IAAlCpB,EAAiC,uDAAzBc,EAAcX,EAAW,uCAC9C,OAAQA,EAAOC,MACX,IRqB0B,qBQpBtB,OAAOO,EAAaX,EAAO,CACvBkD,MAAO/C,EAAOE,SAEtB,IRkB4B,uBQjBxB,OAAOM,EAAaX,EAAO,CACvByD,gBAAiBtD,EAAOE,SAEhC,IRgBmC,8BQf/B,OAAOM,EAAaX,EAAO,CACvBmD,aAAchD,EAAOE,SAE7B,IRW4B,uBQVxB,IACIqD,EADEnD,EAAKJ,EAAOE,OAAOE,GAEzB,GAAIA,EAAI,CACJ,IAAMoD,EAAQ3D,EAAMkD,MAAMU,WAAU,SAAAC,GAChC,OAAOA,EAAKtD,KAAOA,KAEnBoD,EAAQ,EACRD,EAAU1D,EAAMkD,MAAM7B,OAAOlB,EAAOE,SAEpCL,EAAMkD,MAAMY,OAAOH,EAAO,EAAGxD,EAAOE,QACpCqD,EAAU1D,EAAMkD,YAGpBQ,EAAU1D,EAAMkD,MAAM7B,OAAOlB,EAAOE,QAExC,OAAOM,EAAaX,EAAO,CACvBkD,MAAOQ,IAEf,IRJyB,oBQKrB,OAAO/C,EAAaX,EAAO,CACvBsD,cAAe,GACfD,aAAc,GACdE,aAAcpD,EAAO4D,UAE7B,IRZyB,oBQiBrB,OAJApD,EAAaX,EAAO,CAChBqD,aAAc,GACdC,cAAe,KAEZ3C,EAAaX,EAAO,CACvBqD,aAAclD,EAAOE,SAE7B,IRnB0B,qBQoBtB,OAAOM,EAAaX,EAAO,CACvBsD,cAAenD,EAAOE,OACtBgD,aAAc,KAEtB,IRrByB,oBQsBrB,OAAO1C,EAAaX,EAAO,CACvBgE,YAAa7D,EAAOE,SAE5B,IR4B6B,wBQ3BzB,OAAOM,EAAaX,EAAO,CACvBwD,gBAAiBrD,EAAOe,QACxB+C,kBAAmB,KACnBZ,aAAc,GACdC,cAAe,KAEvB,IRjCiC,4BQkC7B,IAAMK,EAAQ3D,EAAMkD,MAAMU,WACtB,SAAAC,GAAI,OAAIA,EAAKtD,KAAOJ,EAAOE,UAE/BL,EAAMkD,MAAMY,OAAOH,EAAO,GAC1B,IAAMO,EAASlE,EAAMkD,MACrB,OAAOvC,EAAaX,EAAO,CACvBkD,MAAOgB,IAGf,IR2B+B,0BQ1B3B,OAAOvD,EAAaX,EAAO,CACvBwD,gBAAiB,KACjBS,kBAAmB9D,EAAOgE,UAC1Bd,aAAc,GACdC,cAAe,KAEvB,IRqB4B,uBQpBxB,OAAO3C,EAAaX,EAAO,CACvBwD,gBAAiB,KACjBS,kBAAmB,KACnBG,gBAAiBjE,EAAOE,OACxBiD,cAAe,GACfD,aAAc,KAEtB,IRcyB,oBQbrB,OAAO1C,EAAaX,EAAO,CACvBwD,gBAAiB,KACjBS,kBAAmB,KACnBG,gBAAiB,GACjBd,cAAe,GACfD,aAAc,GACdgB,UAAWlE,EAAOE,SAE1B,IRMgC,2BQL5B,OAAOM,EAAaX,EAAO,CACvBwD,gBAAiB,KACjBS,kBAAmB,KACnBK,mBAAoBnE,EAAOoE,WAC3BlB,aAAc,GACdC,cAAe,KAEvB,QACI,OAAOtD,IC9DJwE,EAzDM,WAMf,IALJxE,EAKG,uDALK,CACNyE,eAAgB,GAChBC,iBAAkB,IAEpBvE,EACG,uCACH,OAAQA,EAAOC,MACb,ITmDmC,0BSlDjC,OAAO,eACFJ,EADL,CAEEyE,eAAe,YAAKtE,EAAOsE,kBAE/B,IT+CkC,yBS9ChC,OAAO,eACFzE,EADL,CAEE0E,iBAAkB,GAClBD,eAAe,GAAD,mBAAMzE,EAAMyE,gBAAZ,CAA4BtE,EAAOwE,oBAErD,IT0CmC,0BSzCjC,OAAO3E,EACT,ITyCkC,yBSxChC,IAAM4E,EAAM5E,EAAMyE,eAAenE,QAC/B,SAAAuE,GAAiB,OAAIA,EAAkBtE,KAAOJ,EAAOwE,mBAEvD,OAAO,eACF3E,EADL,CAEE0E,iBAAkBE,EAAI,KAE1B,ITkCqC,4BSjCnC,OAAO,eACF5E,EADL,CAEEyE,eAAgBzE,EAAMyE,eAAenE,QACnC,SAAAuE,GAAiB,OAAIA,EAAkBtE,KAAOJ,EAAOwE,qBAG3D,IT4BqC,4BS3BnC,IAAIG,EAAmB,YAAO9E,EAAMyE,gBAMpC,OALAK,EACEA,EAAoBlB,WAClB,SAAAmB,GAAS,OAAIA,EAAUxE,KAAOJ,EAAOwE,gBAAgBpE,OAErDJ,EAAOwE,gBACJ,eACF3E,EADL,CAEE0E,iBAAkB,GAClBD,eAAe,YAAKK,KAExB,ITiBoC,2BShBlC,OAAO,eACF9E,EADL,CAEE0E,iBAAkB,KAEtB,QACE,OAAO1E,ICpDPc,EAAe,CACjBkE,SAAU,GACVC,QAAS,GACTC,iBAAkB,IAmEPF,EAhEE,WAAmC,IAAlChF,EAAiC,uDAAzBc,EAAcX,EAAW,uCAC/C,OAAQA,EAAOC,MACX,IVgFmB,cU/Ef,OAAOO,EAAaX,EAAO,CACvBgF,SAAUhF,EAAMgF,SAAS3D,OAAOlB,EAAOE,QACvC4E,QAASjF,EAAMiF,UAGvB,IV2EsB,iBUvElB,OAHAjF,EAAMgF,SAAWhF,EAAMgF,SAAS1E,QAC5B,SAAA2E,GAAO,OAAIA,EAAQ1E,KAAOJ,EAAOE,UAE9BM,EAAaX,EAAO,CACvBgF,SAAUhF,EAAMgF,SAChBC,QAASjF,EAAMiF,UAGvB,IVmEyB,mBUlErB,OAAOtE,EAAaX,EAAO,CACvBgF,SAAU7E,EAAOE,OACjB4E,QAASjF,EAAMiF,UAGvB,IVgF6B,wBU/EzB,OAAOtE,EAAaX,EAAO,CACvBkF,iBAAkB/E,EAAOE,SAGjC,IVyDsB,iBUxDlB,IAAI4E,EAAUjF,EAAMgF,SAAS1E,QACzB,SAAA2E,GAAO,OAAIA,EAAQ1E,KAAOJ,EAAOE,UACnC,GAIF,OAHK4E,IACDA,EAAU,CAAE1E,GAAI,OAEbI,EAAaX,EAAO,CACvBgF,SAAUhF,EAAMgF,SAChBC,QAASA,IAGjB,IV8CsB,iBU7ClB,IAAME,EAAkB,GAOxB,OANAnF,EAAMgF,SAASvE,SAAQ,SAAAwE,GACfA,EAAQ1E,KAAOJ,EAAOE,OAAOE,KAC7B0E,EAAO,eAAQA,EAAR,GAAoB9E,EAAOE,SAEtC8E,EAAgBzE,KAAKuE,MAElBtE,EAAaX,EAAO,CACvBgF,SAAUG,EACVF,QAAS,KAGjB,IVkCqB,gBUjCjB,OAAO,eACAjF,EADP,CAEIiF,QAAS,KAGjB,QACI,OAAOjF,IClEbc,EAAe,CACjBsE,OAAQ,GACRC,MAAO,GACPC,eAAgB,IAmELF,EAhEA,WAAmC,IAAlCpF,EAAiC,uDAAzBc,EAAcX,EAAW,uCAC7C,OAAQA,EAAOC,MACX,IXyDiB,YWxDb,OAAOO,EAAaX,EAAO,CACvBoF,OAAQpF,EAAMoF,OAAO/D,OAAOlB,EAAOE,QACnCgF,MAAOrF,EAAMqF,QAGrB,IXoDoB,eWhDhB,OAHArF,EAAMoF,OAASpF,EAAMoF,OAAO9E,QACxB,SAAA+E,GAAK,OAAIA,EAAM9E,KAAOJ,EAAOE,UAE1BM,EAAaX,EAAO,CACvBoF,OAAQpF,EAAMoF,OACdC,MAAOrF,EAAMqF,QAGrB,IX4CuB,kBW3CnB,OAAO1E,EAAaX,EAAD,eACZA,EADY,CAEfoF,OAAQjF,EAAOE,UAEvB,IX+E2B,sBW9EvB,OAAOM,EAAaX,EAAD,eACZA,EADY,CAEfsF,eAAgBnF,EAAOE,UAG/B,IXkCoB,eWjChB,IAAIgF,EAAQrF,EAAMoF,OAAO9E,QACrB,SAAA+E,GAAK,OAAIA,EAAM9E,KAAOJ,EAAOE,UAC/B,GAIF,OAHKgF,IACDA,EAAQ,CAAE9E,GAAI,OAEXI,EAAaX,EAAO,CACvBoF,OAAQpF,EAAMoF,OACdC,MAAOA,IAGf,IXuBoB,eWtBhB,IAAME,EAAgB,GAOtB,OANAvF,EAAMoF,OAAO3E,SAAQ,SAAA4E,GACbA,EAAM9E,KAAOJ,EAAOE,OAAOE,KAC3B8E,EAAK,eAAQA,EAAR,GAAkBlF,EAAOE,SAElCkF,EAAc7E,KAAK2E,MAEhB1E,EAAaX,EAAO,CACvBoF,OAAQG,EACRF,MAAO,KAGf,IXWmB,cWVf,OAAO,eACArF,EADP,CAEIqF,MAAO,KAGf,QACI,OAAOrF,ICFJwF,EAjED,WAOR,IANFxF,EAMC,uDANO,CACJwF,MAAO,GACPC,QAAS,GACTC,cAAe,IAEnBvF,EACC,uCACD,OAAQA,EAAOC,MACX,IZgEgB,WY/DZ,OAAO,eACAJ,EADP,CAEIyF,QAAS,GACTD,MAAM,GAAD,mBAAMxF,EAAMwF,OAAZ,CAAmBrF,EAAOE,WAEvC,IZ2DmB,cY1Df,OAAO,eACAL,EADP,CAEIyF,QAAS,GACTD,MAAM,YACCxF,EAAMwF,MAAMlF,QAAO,SAAAkF,GAAK,OAAIA,EAAMjF,KAAOJ,EAAOE,aAI/D,IZmD0B,qBYlDtB,OAAO,eACAL,EADP,CAEIwF,MAAM,YAAKrF,EAAOE,UAE1B,IZ6E0B,qBY5EtB,OAAO,eACAL,EADP,CAEI0F,cAAc,YAAKvF,EAAOE,UAElC,IZ0CuB,kBYzCnB,IAAMuE,EAAM5E,EAAMwF,MAAMlF,QACpB,SAAAqF,GAAQ,OAAIA,EAASpF,KAAOJ,EAAOE,UAEvC,OAAO,eACAL,EADP,CAEIyF,QAASb,EAAI,KAErB,IZmCuB,kBYlCnB,IAAIgB,EAAS,YAAO5F,EAAMwF,OAM1B,OALAI,EACIA,EAAUhC,WACN,SAAA+B,GAAQ,OAAIA,EAASpF,KAAOJ,EAAOE,OAAOE,OAE9CJ,EAAOE,OACJ,eACAL,EADP,CAEIyF,QAAS,GACTD,MAAM,YAAKI,KAEnB,IZwBsB,iBYvBlB,OAAO,eACA5F,EADP,CAEIyF,QAAS,KAGjB,QACI,OAAOzF,IC/DN6F,EACF,UADEA,EAEF,UAFEA,EAGF,UCuDIC,EAtDG,WAMZ,IALF9F,EAKC,uDALO,CACJ8F,UAAW,GACXC,QAAS,IAEb5F,EACC,uCACD,OAAQA,EAAOC,MACX,IdsEqB,gBcrEjB,OAAO,eACAJ,EADP,CAEI8F,UAAU,GAAD,mBAAM9F,EAAM8F,WAAZ,CAAuB3F,EAAOE,WAG/C,Id+D0B,qBc9DtB,OAAO,eACAL,EADP,CAEI8F,UAAU,YAAK3F,EAAOE,UAE9B,Id4DmB,cc3Df,OAAO,eACAL,EADP,CAEI8F,UAAU,YACH9F,EAAM8F,UAAUxF,QACf,SAAAwF,GAAS,OAAIA,EAAUvF,KAAOJ,EAAOE,aAKjD,IdoDmB,kBcnDf,IAAI2F,EAAe,YAAOhG,EAAM8F,WAMhC,OALAE,EACIA,EAAgBpC,WACZ,SAAAqC,GAAQ,OAAIA,EAAS1F,KAAOJ,EAAOE,OAAOE,OAE9CJ,EAAOE,OACJ,eACAL,EADP,CAEI+F,QAAS,GACTD,UAAU,YAAKE,KAEnB,IduCgB,mBctCZ,IAAMpB,EAAM5E,EAAM8F,UAAUxF,QACxB,SAAA4F,GAAY,OAAIA,EAAa3F,KAAOJ,EAAOE,UAE/C,OAAO,eACAL,EADP,CAEI+F,QAASnB,EAAI,KAE7B,QACI,OAAO5E,ICXJmG,EAzCM,WAOf,IANFnG,EAMC,uDANO,CACJoG,OAAQ,GACRC,KAAM,GACNC,SAAU,IAEdnG,EACC,uCACD,OAAQA,EAAOC,MACX,If2CmB,ce1Cf,IAAIiG,EAAOrG,EAAMoG,OAAO,GAAGG,MACvB,SAAAF,GAAI,OAAIA,EAAKG,cAAgBrG,EAAOE,UAMxC,OAHKgG,IACDA,EAAO,CAAEG,YAAa,OAEnB,eACAxG,EADP,CAEIoG,OAAQpG,EAAMoG,OACdC,KAAMA,IAGd,If8BqB,gBe7BjB,OAAO,eACArG,EADP,CAEIoG,OAAQ,CAACjG,EAAOE,QAChBgG,KAAM,KAEd,IfyB6B,wBexBzB,OAAO,eACArG,EADP,CAEIqG,KAAM,GACNC,SAAUnG,EAAOE,SAGzB,QACI,OAAOL,ICnBJyG,EAlBG,WAKZ,IAJFzG,EAIC,uDAJO,CACJyG,UAAW,IAEftG,EACC,uCACD,OAAQA,EAAOC,MACX,IhBiD2B,sBgBhDvB,OAAO,eACAJ,EADP,CAEIyG,UAAW,CAACtG,EAAOE,UAG3B,QACI,OAAOL,ICbbc,EAAe,CACjBuD,UAAW,GACXqC,SAAU,GACVC,kBAAmB,IAsERtC,EAnEG,WAAmC,IAAlCrE,EAAiC,uDAAzBc,EAAcX,EAAW,uCAChD,OAAQA,EAAOC,MACX,IjByFoB,eiBxFhB,OAAOO,EAAaX,EAAO,CACvBqE,UAAWrE,EAAMqE,UAAUhD,OAAOlB,EAAOE,QACzCqG,SAAU1G,EAAM0G,WAGxB,IjBoFuB,kBiBhFnB,OAHA1G,EAAMqE,UAAYrE,EAAMqE,UAAU/D,QAC9B,SAAAoG,GAAQ,OAAIA,EAASnG,KAAOJ,EAAOE,UAEhCM,EAAaX,EAAO,CACvBqE,UAAWrE,EAAMqE,UACjBqC,SAAU1G,EAAM0G,WAGxB,IjB4E0B,oBiB3EtB,OAAO/F,EAAaX,EAAO,CACvBqE,UAAWlE,EAAOE,OAClBqG,SAAU1G,EAAM0G,WAExB,IjBgF8B,yBiB/E1B,OAAO/F,EAAaX,EAAO,CACvB2G,kBAAmBxG,EAAOE,SAGlC,IjBmEuB,kBiBlEnB,IAAIqG,EAAW1G,EAAMqE,UAAU/D,QAC3B,SAAAoG,GAAQ,OAAIA,EAASnG,KAAOJ,EAAOE,UACrC,GAIF,OAHKqG,IACDA,EAAW,CAAEnG,GAAI,OAEdI,EAAaX,EAAO,CACvBqE,UAAWrE,EAAMqE,UACjBqC,SAAUA,IAGlB,IjBwDuB,kBiBvDnB,IAAME,EAAmB,GAOzB,OANA5G,EAAMqE,UAAU5D,SAAQ,SAAAiG,GAChBA,EAASnG,KAAOJ,EAAOE,OAAOE,KAC9BmG,EAAQ,eAAQA,EAAR,GAAqBvG,EAAOE,SAExCuG,EAAiBlG,KAAKgG,MAEnB/F,EAAaX,EAAO,CACvBqE,UAAWuC,EACXF,SAAU,KAGlB,IjB4CsB,iBiB3ClB,OAAO,eACA1G,EADP,CAEI0G,SAAU,KAElB,IjBwCiB,YiBvCb,OAAO/F,EAAaX,EAAO,CACvBmB,YAAahB,EAAOE,SAG5B,QACI,OAAOL,ICrEbc,EAAe,CACjB+F,MAAO,IAcIzF,EAXC,WAAmC,IAAlCpB,EAAiC,uDAAzBc,EAAcX,EAAW,uCAC9C,OAAQA,EAAOC,MACX,IlBEiB,YkBDb,OAAOO,EAAaX,EAAO,CACvB6G,MAAO1G,EAAOE,SAEtB,QACI,OAAOL,ICYJ8G,EAvBG,WAMZ,IALF9G,EAKC,uDALO,CACJ8G,UAAY,GACZC,SAAW,IAEf5G,EACC,uCACD,OAAOA,EAAOC,MACV,InB4EuB,kBmB3EnB,OAAO,eACAJ,EADP,CAEI8G,UAAW3G,EAAOE,SAE1B,InBwEuB,kBmBvEnB,OAAO,eACAL,EADP,CAEI+G,SAAU,KAElB,QACI,OAAO/G,ICoBJgH,EArBKC,YAAgB,CAChChG,SACAiG,OACAC,WACAC,WACAP,QACAQ,mBACA7C,eACAzE,WACAiF,WACAI,SACAI,QACAM,YACAK,eACAM,YACApC,YACAyC,YAEAQ,KAAMC,M,yBC7BGC,EAAkB,SAAAC,GAC3B,OAAO7F,EAAM8F,KCPQ,eDOQD,EAAQpH,QAAQsH,MAAK,SAAAjF,GAC9C,OAAOA,MAIFkF,EAAsB,SAAAH,GAC/B,OAAO7F,EAAM8F,KCXe,eDWQD,EAAQpH,QAAQsH,MAAK,SAAAjF,GACrD,OAAOA,MAIFmF,EAA2B,SAAAJ,GACpC,OAAO7F,EACFkG,IADE,UChBuB,sBDgBvB,kBAEgCL,EAAQpH,OAAO0H,OAC9CN,EAAQpH,QAEXsH,MAAK,SAAAjF,GACF,OAAOA,MAINsF,EAAsB,SAAAP,GAC/B,OAAO7F,EACFkG,IADE,UC1ByB,0BD0BzB,kBACmCL,EAAQpH,SAC7CsH,MAAK,SAAAjF,GAAQ,OAAIA,MAGbuF,EAAoB,WAC7B,OAAOrG,EAAM8F,KCnCS,iBDmCQC,MAAK,SAAAjF,GAAQ,OAAIA,M,uCElC/CwF,IAAYC,UAAUC,UAAYD,UAAUE,cAAcC,MAAM,EAAG,GAC1DC,GAFQ,CAAC,KAAM,MAEOhC,MAAK,SAAAiC,GAAC,OAAIA,IAAMN,OAAa,KAEhEO,KAAKC,IAAIC,MACJD,IAAIE,MACJF,IAAIG,MACJC,KAAK,CACFC,IAAKR,GACLS,QAAS,CACLC,SAAU,iDAEdC,YAAa,KACbC,OAAO,EACPC,GAAI,CAAC,eAAgB,qBAAsB,SAAU,mBACrDC,UAAW,SACXC,cAAc,EACdC,oBAAoB,EACpBC,cAAe,CACXC,aAAa,EACbC,gBAAiB,KAErBC,MAAO,CACHC,MAAM,KAIHnB,UAAf,E,YCtBiBoB,IAAV,SAAUA,GAASC,GAAnB,+EAEkB,OAFlB,kBAEwBC,YAAKvC,EAAiBsC,GAF9C,OAUC,OARMpH,EAFP,OAGOsH,EAAYC,EAAQ,KACpBlI,EAAQW,EAASwH,KAAKnI,MACtBoI,EAAaH,EAAUjI,GACvBqI,EAAiB,IAAIC,KAAsB,IAAjBF,EAAWG,KAE3C1I,EAAMO,SAASC,QAAQC,OAAOC,cnBlBZ,UmBkB0CP,EAR7D,UAUOC,aAAauI,QAAQ,QnBpBT,UmBoBgCxI,GAVnD,QAWC,OAXD,UAWOC,aAAauI,QAAQ,iBAAkBH,GAX9C,QAYC,OAZD,UAYOpI,aAAauI,QAAQ,WAAYJ,EAAWK,OAZnD,QAcC,OAdD,UAcO1C,YAAI,CACN1H,KxBXqB,oBwBYrBsC,SAAU,CAAEX,QAAOQ,KAAM4H,EAAWK,SAhBzC,QAmBC,OAnBD,UAmBO1C,YAAI,CAAE1H,KxBKiB,wBwBLwBC,QAAQ,IAnB9D,QAqBC,OArBD,UAqBOyH,YAAI,CACN1H,KxBdyB,wBwBezBqK,eAAiC,IAAjBN,EAAWG,KAAa,IAAID,MAAOK,YAvBxD,gCA0BC,OA1BD,oCA0BO5C,YAAI,CACN1H,KxBtBmB,kBwBuBnBoC,MAAO,KAAME,SACP,KAAMA,SAASwH,KAAKzI,QACpBgH,GAAKkC,EAAE,0BA9BlB,QAgCC,OAhCD,UAgCO7C,YAAI,CAAE1H,KxBRiB,wBwBQwBC,QAAQ,IAhC9D,uD,gBCHUuK,IAAV,SAAUA,GAAWd,GAArB,iEAEC,OAFD,kBAEOC,YAAK9B,EAAmB6B,GAF/B,OAGC,OAHD,SAGOhC,YAAI,CACN1H,KzBMoB,qByBVzB,8BAOC,OAPD,mCAOO0H,YAAI,CACN1H,KzBAmB,kByBCnBoC,MAAO,KAAME,SACP,KAAMA,SAASwH,KAAKzI,QACpBgH,GAAKkC,EAAE,0BAXlB,sD,gBCHUE,IAAV,SAAUA,GAAqB1K,GAA/B,iEACH,OADG,SACG2K,YAAM3K,EAAOsK,gBADhB,OAEH,OAFG,SAEGV,YAAKa,IAFR,wC,gBCAUG,IAAV,SAAUA,GAAmBjB,GAA7B,oEACEA,EAAQ/H,MADV,gBAEC,OAFD,SAEO+F,YAAI,CAAE1H,K3BWY,qB2BbzB,mCAIwB,IAAIiK,KAAKrI,aAAaC,QAAQ,oBAC/B,IAAIoI,MAL3B,iBAMK,OANL,SAMWvC,YAAI,CAAE1H,K3BOQ,qB2BbzB,+BAQK,OARL,UAQW0H,YAAI,CACN1H,K3BCiB,oB2BAjBsC,SAAU,CACNX,MAAO+H,EAAQ/H,MACfQ,KAAMuH,EAAQvH,QAZ3B,yC,gBCGUyI,IAAV,SAAUA,GAAiBlB,GAA3B,uEAEkB,OAFlB,kBAEwBC,YAAKnC,EAAqBkC,GAFlD,OAGC,OADMpH,EAFP,gBAGOoF,YAAI,CAAE1H,K5BaiB,wB4BbwBsC,aAHtD,OAIC,OAJD,SAIOoF,YAAI,CAAE1H,K5BuBiB,wB4BvBwBC,QAAQ,IAJ9D,+BAMC,OAND,oCAMOyH,YAAI,CACN1H,K5BUuB,sB4BTvBoC,MAAO,KAAME,SACP,KAAMA,SAASwH,KAAKzI,QACpBgH,GAAKkC,EAAE,0BAVlB,QAYC,OAZD,UAYO7C,YAAI,CAAE1H,K5BeiB,wB4BfwBC,QAAQ,IAZ9D,uD,gBCAU4K,IAAV,SAAUA,GAAiBnB,GAA3B,uEAEkB,OAFlB,kBAEwBC,YAAK/B,EAAqB8B,GAFlD,OAGC,OADMpH,EAFP,gBAGOoF,YAAI,CAAE1H,K7BqBiB,wB6BrBwBsC,aAHtD,OAIC,OAJD,SAIOoF,YAAI,CAAE1H,K7BuBiB,wB6BvBwBC,QAAQ,IAJ9D,+BAMC,OAND,oCAMOyH,YAAI,CACN1H,K7BkBuB,sB6BjBvBoC,MAAO,KAAME,SACP,KAAMA,SAASwH,KAAKzI,QACpBgH,GAAKkC,EAAE,0BAVlB,QAYC,OAZD,UAYO7C,YAAI,CAAE1H,K7BeiB,wB6BfwBC,QAAQ,IAZ9D,uD,gBCAU6K,IAAV,SAAUA,GAAsBpB,GAAhC,uEAEkB,OAFlB,kBAEwBC,YAAKlC,EAA0BiC,GAFvD,OAGC,OADMpH,EAFP,gBAGOoF,YAAI,CAAE1H,K9BiBuB,8B8BjBwBsC,aAH5D,OAIC,OAJD,SAIOoF,YAAI,CAAE1H,K9BuBiB,wB8BvBwBC,QAAQ,IAJ9D,+BAMC,OAND,oCAMOyH,YAAI,CACN1H,K9Bc6B,4B8Bb7BoC,MAAO,KAAME,SACP,KAAMA,SAASwH,KAAKzI,QACpBgH,GAAKkC,EAAE,0BAVlB,QAYC,OAZD,UAYO7C,YAAI,CAAE1H,K9BeiB,wB8BfwBC,QAAQ,IAZ9D,uD,gBCKkB8K,IAAV,SAAUA,KAAV,iEACX,OADW,SACLC,Y/BSmB,gB+BTmBJ,IADjC,OAEX,OAFW,SAELI,Y/BgBmB,gB+BhBmBH,IAFjC,OAGX,OAHW,SAGLG,Y/BWyB,sB+BXmBF,IAHvC,OAIX,OAJW,SAILE,Y/BHe,Y+BGmBvB,IAJ7B,OAKX,OALW,UAKLwB,Y/BE2B,wB+BFkBN,IALxC,QAMX,OANW,UAMLM,Y/BA2B,wB+BAkBR,IANxC,QAOX,OAPW,UAOLO,Y/BH+B,4B+BGmBR,IAP7C,yC,gBCTUU,IAAV,SAAUA,KAAV,iEACb,OADa,SACPC,YAAKJ,IADE,wC,ICkBGK,GAOAC,G,4GC5BLC,I,OACE,KADFA,GAEG,SAFHA,GAGM,YAHNA,GAIH,SAJGA,GAKQ,mBALRA,GAMD,U,8BC+CGC,GA/CU,SAAAC,GAAU,IAAD,EACVC,eAATpD,GADmB,EACtBkC,EADsB,EACnBlC,MAELqD,EAAiB,SAAAC,GACnBtD,EAAKqD,eAAeC,EAAMC,OAAOC,QAGrC,OACI,kBAACC,GAAA,EAAD,CAAYC,KAAG,EAACC,aAAW,OAAOC,KAAK,OAAOJ,MAAOxD,EAAKL,UACtD,kBAACkE,GAAA,EAAD,CACIC,QACI,oCACI,kBAACC,GAAA,EAAD,CACIC,MAAM,UACNR,MAAM,KACNS,SAAUZ,IAEd,yBACIa,UAAU,gBACVC,IAAI,sDACJC,IAAI,QAIhBC,MAAM,KAEV,kBAACR,GAAA,EAAD,CACIC,QACI,oCACI,kBAACC,GAAA,EAAD,CACIC,MAAM,UACNR,MAAM,KACNS,SAAUZ,IAEd,yBACIa,UAAU,gBACVC,IAAI,sDACJC,IAAI,QAIhBC,MAAM,OC/CTC,GACI,UADJA,GAED,UAFCA,GAGF,UAHEA,GAIA,OAJAA,GAKD,U,SCHCC,GAAkB,SAAAC,GAC7B,MAAO,CACL7M,KrCK6B,oBqCJ7BC,OAAQ4M,ICHCC,GAAa,SAAAD,GACtB,MAAO,CACH7M,KtC8B6B,wBsC7B7BC,OAAQ4M,ICIHE,GAAqB,SAAAF,GAC9B,MAAO,CACH7M,KvC2B4B,uBuC1B5BC,OAAQ4M,ICFHG,GAAgB,SAAA7M,GAC5B,MAAO,CACNH,KxCsC4B,iBwCrC5BC,OAAQE,IAkBG8M,GAAkB,SAAAtN,GAC9B,MAAO,CACNK,KxCkBsB,WwCjBtBC,OAAQN,IClBGuN,GAAgB,SAAApD,GACzB,MAAO,CACH9J,KzCqCqB,gByCpCrBC,OAAQ6J,ICjBHqD,GAAuB,SAAA9I,GAAc,MAAK,CACrDrE,K1CyDqC,0B0CxDrCqE,mBCFW+I,GAAgB,SAAAP,GACzB,MAAO,CACH7M,K3CkEuB,kB2CjEvBC,OAAQ4M,ICgCHQ,GAAiB,SAAAR,GAC1B,MAAO,CACH7M,K5CiEuB,kB4ChEvBC,OAAQ4M,ICpCHS,GAA4B,SAAChM,EAAQtB,EAAMqB,GACpDkM,GAAMC,SACFZ,GAAgB,CACZtL,OAAQA,EACRtB,KAAMA,EACNqB,QAASA,MAKRoM,GAA6B,WACtC,IAAMC,EAAgBH,GAAMI,WAAW5G,SACvCwG,GAAMC,SACFZ,GAAgB,CACZtL,QAAQ,EACRtB,KAAM0N,EAActM,aACpBC,QAAS,SCpBRuM,GACF,QADEA,GAIA,UCAAC,GAAe,SAAAzL,GACxBkL,IACI,EACAM,GACAxL,EAAME,SACA+F,GAAKkC,EAAEnI,EAAME,SAASwH,KAAKzI,QAASe,EAAME,SAASwH,KAAKzI,SACxDe,IAID0L,GAAiB,SAAAzM,GAC1BiM,IAA0B,EAAMM,GAAuBvM,ICSvD0M,GAAkB,GAmBTC,GAA2B,SAAClE,EAAMmE,GAC3C,IAAIC,EAAc,GAElBD,EAAgB,GAAG5N,SAAQ,SAAA4F,GACnBA,EAAKG,cAAgB0D,EAAK1D,cAC1BH,EAAI,eAAQA,EAAR,GAAiB6D,IAEzBoE,EAAY5N,KAAK2F,MAGrB,IAAMkI,EAAuB,CACzBhO,GAAI4N,GAAgB5N,GACpBiO,kBAAmBF,GAGvB,OAAO1M,EACFkG,I1B3CqB,iB0B2CDyG,GACpB5G,MAAK,SAAAjF,GAxCI,IAAA4E,EAyCNqG,GAAMC,SAASN,GAAc5K,EAASwH,KAAKsE,oBAzCrClH,ECTe,cDU7BqG,GAAMC,SAASa,aAAMnH,IA0CboG,IACI,EACAM,GACAvF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,2BACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAnM,GACHyL,GAAazL,OAQZoM,GAA4B,WACrChN,EACKiN,I1B/C4B,4B0BgD5BlH,MAAK,SAAAjF,GACFiL,GAAMC,SP3EP,CACHxN,KzC6C6B,wByC5C7BC,OOyEsCqC,EAASwH,OAC3CyD,GAAMC,SAASN,GAAc5K,EAASwH,KAAK,GAAGsE,oBAC9CL,GAAkB,CAAE5N,GAAImC,EAASwH,KAAK,GAAGjK,QAAQM,OAEpDoO,OAAM,SAAAnM,GACHyL,GAAazL,O,UEtFZsM,I,OAAoB,SAAAC,GAC7BpB,GAAMC,SAASV,GAAW6B,MAGjBC,GAA4B,SAAAD,GACrCpB,GAAMC,SZCC,CACHxN,KtCwBsC,iCsCvBtCC,OYH8B0O,KCmCzBE,GAA0B,WACnCrN,EACKiN,I7B3B2B,qB6B4B3BlH,MAAK,SAAAjF,GCpCe,IAAA6B,EDqCjBoJ,GAAMC,SAAST,GAAmBzK,EAASwH,OAC3CgF,GAAkCxM,EAASwH,KAAK3J,ICtC/BgE,EDuCH7B,EAASwH,KAAK3J,GCtCpCqB,EACKiN,IADL,U9BUsB,uB8BVtB,uBACqCtK,IAChCoD,MAAK,SAAAjF,GACFiL,GAAMC,SCZP,CACHxN,KrDsD2B,sBqDrD3BC,ODUoCqC,EAASwH,UAE5CyE,OAAM,SAAAnM,GACHkL,IACI,EACAM,GACAxL,EAAME,SACA+F,GAAKkC,EACDnI,EAAME,SAASwH,KAAKzI,QACpBe,EAAME,SAASwH,KAAKzI,SAExBe,SD0BbmM,OAAM,SAAAQ,GACHzB,IACI,EACAM,GACAvF,GAAKkC,EAAE,qCAEXmE,IAAkB,OAIxBI,GAAoC,SAAA3K,GACtC3C,EACKiN,IADL,U7B9CuC,qB6B8CvC,uBACsDtK,IACjDoD,MAAK,SAAAjF,GACFiL,GAAMC,SZ/DP,CACHxN,KvCiC0B,qBuChC1BC,OY6DoCqC,EAASwH,OACzC8E,IAA0B,MAE7BL,OAAM,SAAAQ,GACHlB,GAAakB,GACbL,IAAkB,OAuCjBM,GAAgC,SAAAC,GACzCzN,EACK0N,OADL,U7B7F8B,Y6B6F9B,YACqCD,IAChC1H,MAAK,SAAAjF,GACFiL,GAAMC,SZhEP,CACHxN,KvCPiC,4BuCQjCC,OY8D0CgP,IACtCJ,QAEHN,OAAM,SAAAQ,GACHlB,GAAakB,GACbL,IAAkB,OAYjBS,GAAyB,SAAA1L,GAClC8J,GAAMC,SZ3EC,CACHxN,KvCfyB,oBuCgBzB2D,QYyE2BF,KAoDtB2L,GAA+B,SAAAjL,GACxCoJ,GAAMC,SZhG2B,SAAArJ,GACjC,MAAO,CACHnE,KvC0BgC,2BuCzBhCmE,WAAYA,GY6FDkL,CAAsBlL,KGzL5BmL,GACO,iBADPA,GAES,mBAFTA,GAGM,gBAHNA,GAIE,YC2GAC,GAvGF,SAAA/D,GACT,IAAIe,EAAY,OACZf,EAAMgE,QACNjD,EAAYA,EAAUtL,OAAO,IAAMuK,EAAMgE,QAG7C,IAAIC,EAAO,yBAAKlD,UAAWA,GAAYf,EAAMkE,UAEvCC,EAAeC,mBACfC,EAAWD,mBAEjB,GAAIpE,EAAMsE,UAAW,CACjB,IA4CMC,EAAgB,SAAhBA,EAAgBC,GAClB,IAAMlP,GAAWmP,KAAKC,MAAMF,EAAEpE,OAAOuE,WAAW,GAAGtE,OAAOhL,OACrDoE,MAAM9E,GACLiQ,EAAeC,SAASC,eAAT,gBAAiCxP,IAEhDyP,EAAYF,SAASG,uBAAuB,kBAC5CC,EAAcJ,SAASG,uBAAuB,eAE9CE,EAASL,SAASG,uBAAT,gBAAyC1P,IAEpDsP,IACAA,EAAaO,MAAMC,gBAAkBjE,IAXlB,2BAavB,YAAoB+D,EAApB,+CAA4B,CAAC,IAAlBG,EAAiB,QACpBA,IACAA,EAAMF,MAAMG,WAAanE,KAfV,6GAmBvB,YAAkB4D,EAAlB,+CAA6B,SACnBI,MAAMI,QAAU,QApBH,6GAuBvB,YAAyBN,EAAzB,+CAAsC,SACvBE,MAAMI,QAAU,QAxBR,kFA2BvBlB,EAASmB,QAAU,KACnBrB,EAAaqB,QAAQC,oBAAoB,UAAWlB,GACpDJ,EAAaqB,QAAU,MAG3BvB,EACI,yBACItP,GAAIqL,EAAMrL,GACVoM,UAAWA,EACX2E,YAhFU,SAAAlB,GACd,IACMlP,EADOmP,KAAKC,MAAMF,EAAEpE,OAAOuE,WAAW,GAAGtE,OAC1BhL,OAAOoE,MAAM9E,GAC5BgR,EAAad,SAASC,eAAT,gBAAiCxP,IACpDqQ,EAAWR,MAAMC,gBAAkBjE,GACnC,IAAM+D,EAASL,SAASG,uBAAT,gBAAyC1P,IAElDyP,EAAYF,SAASG,uBAAuB,kBAC5CC,EAAcJ,SAASG,uBAAuB,eAEpDY,YAAW,WAAO,IAAD,uBACb,YAAoBb,EAApB,+CAA+B,SACrBI,MAAMI,QAAU,QAFb,6GAKb,YAAyBN,EAAzB,+CAAsC,SACvBE,MAAMI,QAAU,QANlB,kFAUbI,EAAWR,MAAMI,QAAU,OAVd,2BAYb,YAAoBL,EAApB,+CAA4B,CAAC,IAAlBG,EAAiB,QACxBA,EAAMF,MAAMI,QAAU,OAElBF,EAAMV,WAAW,GAAGkB,UAAUC,SAC1BhC,MAEHuB,EAAMV,WAAW,KAElBU,EAAMF,MAAMG,WAAanE,KApBpB,qFAuBd,IJsEsB,SAAA7L,GACjCyM,GAAMC,SZvFC,CACHxN,KvCOyB,oBuCNzBC,OYqF0Ba,IIpEtByQ,CAAsBzQ,GAEtB6O,EAAaqB,QAAUhB,EAAEpE,OACzB+D,EAAaqB,QAAQQ,iBAAiB,UAAWzB,GAEjDC,EAAEyB,aAAaC,QAAQ,UAAW/B,EAAaqB,QAAQ7Q,KAwCnD2P,UAAWtE,EAAMsE,WAEhBtE,EAAMkE,UAKnB,OAAO,oCAAGD,I,kDC8CDkC,GAAoB,SAAArL,GAC7B,IAAMrC,EAAYsJ,GAAMI,WAAW1J,UAAUA,UAiB7C,QAfKqC,EAASnG,KAOM8D,EAAUkC,MACtB,SAAAyL,GAAa,OACbA,EAAcC,QAASvL,EAASuL,MAChCD,EAAcE,YAAYC,cAAcC,SAAW1L,EAASwL,YAAYC,cAAcC,QACtFJ,EAAczR,MAAQmG,EAASnG,QAVnB8D,EAAUkC,MACtB,SAAAyL,GAAa,OACTA,EAAcC,QAAUvL,EAASuL,MACjCD,EAAcE,YAAYC,cAAcC,SAAW1L,EAASwL,YAAYC,cAAcC,YCjKzFC,GAAa,CACtBC,MAAO,4CACPC,SAAU,2ExBWDC,GAAW,SAAAvG,GAAK,OACzBA,OAAQwG,EAAYhK,GAAKkC,EAAE,wCAElB+H,GAAe,SAAAzG,GAAK,OAC7BA,EAAQ,OACFwG,EACAhK,GAAKkC,EAAE,gDAOJgI,IALKnH,GAKsB,EALf,SAAAS,GAAK,OAC1BA,GAASA,EAAM2G,OAASpH,GAClB/C,GAAKkC,EAAE,8CAA+C,CAAEa,IAAKA,UAC7DiH,IAWGI,IAPKpH,GAOsB,GAPf,SAAAQ,GAAK,OAC1BA,GAASA,EAAM2G,OAASnH,GAClBhD,GAAKkC,EAAE,4CAA6C,CAChDc,IAAKA,UAETgH,IAIGK,GAAe,SAAC7G,EAAO8G,EAAeC,GAE/C,QAAqCP,IAAjCO,EAAUC,OAAV,QACJ,OAAOC,GAAOjH,EAAO,SAASkH,UAC1BD,GAAOF,EAAUC,OAAV,QAA8B,SAASE,eACbV,IAAjCO,EAAUC,OAAV,aACER,EACAhK,GAAKkC,EAAE,6CAA8C,CACjDyI,MAAO3K,GAAKkC,EAAE,kCAIf0I,GAAkB,SAACpH,EAAO8G,EAAeC,GAElD,QAAqCP,IAAjCO,EAAUC,OAAV,UACJ,OAAOC,GAAOjH,EAAO,SAASkH,UAC1BD,GAAOF,EAAUC,OAAV,UAA8B,SAASE,cAC5CV,EACAhK,GAAKkC,EAAE,+CAAgD,CACnDyI,MAAO3K,GAAKkC,EAAE,oCAIf2I,GAAkB,SAAArH,GAC3B,OuBvD8B,SAAAU,GAC9B,IAAM4G,EAAU5F,GAAMI,WAAWvJ,aAAaE,iBAAiBnE,GAe/D,OAbIgT,EACO5F,GACFI,WACAvJ,aAAaC,eAAe+O,MAAK,SAAUvH,EAAOtI,EAAO8P,GACtD,OAAOxH,EAAMyH,aAAe/G,GAAaV,EAAM1L,KAAOgT,KAGvD5F,GACFI,WACAvJ,aAAaC,eAAe+O,MAAK,SAAUvH,EAAOtI,EAAO8P,GACtD,OAAOxH,EAAMyH,aAAe/G,MAG1BlE,GAAKkC,EAAE,gDAA6C8H,EvBuC3DkB,CAAmB1H,IAGjB2H,GAAc,SAAA3H,GACvB,OuBmD4B,SAAAsF,GAC5B,GAAKA,EAQL,OALa5D,GAAMI,WAAW3I,OAAOA,OAAOoO,MAAK,SAAUvH,GACvD,OACIA,EAAM4H,MAAM1B,cAAcC,SAAWb,EAAWY,cAAcC,UAGxD3J,GAAKkC,EAAE,gDAA6C8H,EvB5D3DqB,CAAiB7H,IAGf8H,GAAgB,SAAA9H,GACzB,OuB2D8B,SAAA+H,GAC9B,GAAKA,EASL,OANarG,GAAMI,WAAW/I,SAASA,SAASwO,MAAK,SAAUvH,GAC3D,OACIA,EAAMI,KAAK8F,cAAcC,SACzB4B,EAAa7B,cAAcC,UAGrB3J,GAAKkC,EAAE,gDAA6C8H,EvBrE3DwB,CAAmBhI,IAGjBiI,GAAgB,SAACjI,EAAO8G,EAAeC,GAChD,OuBhDgC,SAACmB,EAAWC,GAC5C,IAAMb,EAAU5F,GAAMI,WAAWvJ,aAAaE,iBAAiBnE,GACzD2S,EAASmB,wBAAaC,MACxB/N,GAAO,EACX,GAAI4N,GAAaC,EAAS,CACtB,IAAMG,EAAcrB,EAAOsB,MACvBtB,EAAOiB,EAAW,SAAShB,SAC3BD,EAAOkB,EAAS,SAASjB,UAGzB5M,EADAgN,EACO5F,GACFI,WACAvJ,aAAaC,eAAe+O,MAAK,SAC9BvH,EACAtI,EACA8P,GAEA,OAMU,OALNc,EAAYE,UACRvB,EAAOsB,MACHtB,EAAOjH,EAAMkI,UAAW,SAAShB,SACjCD,EAAOjH,EAAMmI,QAAS,SAASjB,YAEzBlH,EAAM1L,KAAOgT,KAIhC5F,GACFI,WACAvJ,aAAaC,eAAe+O,MAAK,SAC9BvH,EACAtI,EACA8P,GAEA,OAMU,OALNc,EAAYE,UACRvB,EAAOsB,MACHtB,EAAOjH,EAAMkI,UAAW,SAAShB,SACjCD,EAAOjH,EAAMmI,QAAS,SAASjB,cAO3D,OAAO5M,EACDkC,GAAKkC,EAAE,wDACP8H,EvBCCiC,CACH1B,EAAUC,OAAV,UACAD,EAAUC,OAAV,UAIK0B,GAAiB,SAAA1I,GAC1B,OuBiB+B,SAAA2I,GAC/B,IAAMC,EAAUlH,GAAMI,WAAWvI,MAAMC,QAAQlF,GAe/C,OAbIsU,EACOlH,GACNI,WACAvI,MAAMA,MAAMgO,MAAK,SAAUvH,EAAOtI,EAAO8P,GACtC,OAAOxH,EAAMI,KAAK8F,gBAAkByC,EAASzC,eAAiBlG,EAAM1L,KAAOsU,KAG3ElH,GACHI,WACAvI,MAAMA,MAAMgO,MAAK,SAAUvH,EAAOtI,EAAO8P,GACtC,OAAOxH,EAAMI,KAAK8F,gBAAkByC,EAASzC,kBAGvC1J,GAAKkC,EAAE,gDAA6C8H,EvBjC3DqC,CAAoB7I,IAOlBlE,GAAQ,SAAAkE,GAAK,OACtBA,IAAUoG,GAAWC,MAAMyC,KAAK9I,GAC1BxD,GAAKkC,EAAE,iCACP8H,GAEGuC,GAAW,SAAA/I,GAAK,OACzBA,IAAUoG,GAAWE,SAASwC,KAAK9I,GAC7BxD,GAAKkC,EAAE,oCACP8H,GAQOwC,GANO,SAAAzJ,GAAG,OAAI,SAAAS,GAAK,OAC5BA,EAAQT,EACF/C,GAAKkC,EAAE,mDAAoD,CAAEa,IAAKA,SAClEiH,GAGkByC,EAFR,IAAI7K,MACC8K,eAGZC,GAAe,SAACnJ,EAAO8G,EAAeC,GAE/C,QAAqCP,IAAjCO,EAAUC,OAAV,OACJ,OAAOC,GAAOjH,EAAO,cAAckH,UAC/BD,GAAOF,EAAUC,OAAV,OAA8B,cAAcE,eAClBV,IAAjCO,EAAUC,OAAV,YACER,EACAhK,GAAKkC,EAAE,6CAA8C,CACjDyI,MAAO3K,GAAKkC,EAAE,kCAIf0K,GAAkB,SAACpJ,EAAO8G,EAAeC,GAElD,QAAqCP,IAAjCO,EAAUC,OAAV,SACJ,OAAOC,GAAOjH,EAAO,cAAckH,UAC/BD,GAAOF,EAAUC,OAAV,SAA8B,cAAcE,cACjDV,EACAhK,GAAKkC,EAAE,+CAAgD,CACnDyI,MAAO3K,GAAKkC,EAAE,oC,iDyB5FjB2K,GAxBW,SAAC,GAAD,IACxBC,EADwB,EACxBA,MACAzI,EAFwB,EAExBA,MACAT,EAHwB,EAGxBA,KACA9L,EAJwB,EAIxBA,GAJwB,IAKxBiV,KAAQC,EALgB,EAKhBA,QAASjT,EALO,EAKPA,MACjBsN,EANwB,EAMxBA,SACG4F,EAPqB,uEASxB,kBAACC,GAAA,EAAD,CAAanT,MAAOiT,KAAajT,GAC/B,kBAACoT,GAAA,EAAD,CAAYC,QAAStV,GAAKuM,GAC1B,kBAACgJ,GAAA,EAAD,eACEC,QAAM,GACFR,EACAG,EAHN,CAIErJ,KAAMA,EACN9L,GAAIA,IAEHuP,GCtByB,SAAC,GAAwB,IAAtB2F,EAAqB,EAArBA,QAASjT,EAAY,EAAZA,MAC1C,OAAMiT,GAAWjT,EAGR,kBAACwT,GAAA,EAAD,KAAiBP,GAAWjT,QAFnC,EDsBCyT,CAAiB,CAAER,UAASjT,YEnB7B0T,GAAW,SAAAtK,GAAU,IACbjB,EAAMkB,aAAe,gBAArBlB,EAEAwL,EAA8DvK,EAA9DuK,aAAc1R,EAAgDmH,EAAhDnH,eAAgB2R,EAAgCxK,EAAhCwK,SAAUC,EAAsBzK,EAAtByK,WAAY5H,EAAU7C,EAAV6C,MAEtD6H,EAAe,GAEjB7R,EAAemO,OAAS,GACxBnO,EAAe8R,KAAI,SAAAC,GACfF,EAAa5V,KAAK8V,EAAkB9C,eAI5C,IAUM+C,EAAU7K,EAAMvF,KAChBqQ,EAAWD,EAAQjQ,YAEzBmQ,qBAAU,WACFD,EACAE,EAAmBH,GAEnB7K,EAAMiL,eAEX,CAACH,IAEJ,IAAME,EAAqB,SAAAH,GACvB7K,EAAMiL,WAAW,CACbrQ,YAAaiQ,EAAQjQ,YACrBsQ,QAASL,EAAQK,UAGrB,IAAMC,EAAa,GACnBN,EAAQO,aAAaT,KAAI,SAAAU,GACrBF,EAAWrW,KAAKuW,MAGpB,IAAK,IAAIzO,EAAI,EAAGA,EAAIuO,EAAWnE,OAAQpK,IACnCoD,EAAMsL,OAAN,sBACmBH,EAAWvO,GAAGkL,YADjC,UAEOqD,EAAWvO,GAAG2O,UAK7B,OACI,0BAAMxK,UAAU,YAAYyK,SAAUjB,GAClC,kBAACkB,GAAA,EAAD,CACIhL,KAAK,cACLM,UAAU,YACV2K,UAAWhC,GACXxI,MAAOnC,EAAE,oBACTvK,KAAK,OACLmX,SAAU,CAAC/E,IACXgF,UAAQ,GAER,iCAnDS,CACjB,SACA,UACA,YACA,WACA,SACA,WACA,UA6CsBjB,KAAI,SAAC/P,EAAa7C,GAAd,OACd,4BAAQ8T,IAAK9T,EAAOsI,MAAK,UAAKzF,IACzBmE,EAAE,sBAAD,OAAuBnE,SAIpC8P,EAAaC,KAAI,SAAAmB,GAAY,OAC1B,kBAACL,GAAA,EAAD,CACII,IAAKC,EACLrL,KAAI,sBAAiBqL,GACrBJ,UAAWhC,GACXiC,SAAU,CAAC/E,IACX1F,MAAK,UAAKnC,EACN,6BADC,aAEC+M,IAEN,iCACA,4BAAQzL,MAAO,MACVtB,EAAE,wCAEP,4BAAQsB,MAAO,QACVtB,EAAE,0CAEP,4BAAQsB,MAAO,OACVtB,EAAE,6CAIf,yBAAKgC,UAAU,0CACX,kBAACgL,GAAA,EAAD,CACIhL,UAAU,gBACViL,QAAQ,YACRnL,MAAM,UACNrM,KAAK,SACLoX,SAAUpB,GAAYC,GAErB1L,EAAE,sBAEP,kBAACgN,GAAA,EAAD,CACIhL,UAAU,gBACViL,QAAQ,YACRxX,KAAK,SACLoX,SAAUpB,GAAYC,EACtBwB,QAAS,WACLpJ,MAGH9D,EAAE,0BAQvBuL,GAAW4B,aAAU,CACjBxQ,KXvH6B,eWsHtBwQ,CAER5B,IAEY6B,qBANS,SAAA/X,GAAK,MAAK,CAAEqG,KAAMrG,EAAMmG,aAAaE,QAM9C0R,CAAyB7B,IClI3B8B,GAAmB,SAAAC,GAC5BtK,GAAMC,SAASa,aAAMwJ,KCkBZC,GAA8B,SAAAtK,GACvChM,EACKiN,IxCxBgB,WwCyBhBlH,MAAK,SAAAjF,GACF,IAAIyV,EAAc,GACZC,EAAU1V,EAASwH,KACzB,IAAK,IAAMuN,KAAOW,EACdD,EAAYzX,KAAZ,aACIH,GAAIkX,GACDW,EAAQX,KAGnB9J,GAAMC,SAASL,GAAqB4K,IACpCrJ,IAAkB,MAErBH,OAAM,SAAAnM,GAAK,OAAIyL,GAAazL,OAGxB6V,GAAoC,SAAAzK,GAC7ChM,EACKiN,IxCJyB,kBwCKzBlH,MAAK,SAAAjF,GACF,IAAIyV,EAAc,GACZC,EAAU1V,EAASwH,KACzB,IAAK,IAAMuN,KAAOW,EACdD,EAAYzX,KAAZ,aACIH,GAAIkX,GACDW,EAAQX,KAGnB9J,GAAMC,SAASL,GAAqB4K,OAEvCxJ,OAAM,SAAAnM,GACHyL,GAAazL,GACbsM,IAAkB,OAYjBwJ,GAAgC,SAAArF,GACzCrR,EACKkG,IxCtEgB,UwCsEDmL,GACftL,MAAK,SAAAjF,GACFiL,GAAMC,SpB9CwC,CACxDxN,K1CsCuC,4B0CrCvCuE,gBoB4CgDjC,EAASwH,OAC/C8N,GbnEc,aaqEd9J,GACIzF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,4BACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAnM,GAAK,OAAIyL,GAAazL,OAGxB+V,GAAiC,SAAAtF,GAC1CrR,EACK8F,KxCvFgB,UwCuFAuL,GAChBtL,MAAK,SAAAjF,GACFiL,GAAMC,SpBlFqC,CACrDxN,K1CqDoC,yB0CpDpCuE,gBoBgF6CjC,EAASwH,OAC5C8N,GbpFc,aaqFd9J,GACIzF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,4BACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAnM,GAAK,OAAIyL,GAAazL,OClGxBgW,I,OAAY,CACrBC,KAAM,YACNC,QAAS,eACTC,QAAS,iBCoKEC,GAlJG,SAAAhN,GAAU,IAChBjB,EAAMkB,aAAe,UAArBlB,EAEJkO,EAKAjN,EALAiN,YACA5Y,EAIA2L,EAJA3L,QACAwE,EAGAmH,EAHAnH,eACAqU,EAEAlN,EAFAkN,cACAC,EACAnN,EADAmN,SAPmB,EAUSC,oBAAS,GAVlB,oBAUhBC,EAVgB,KAUNC,EAVM,KAYvBvC,qBAAU,kBAAM0B,KAAmC,IAEnD,IAAMc,EAAc,GAEhB1U,EAAemO,OAAS,EAAI,GAC5BnO,EAAe8R,KAAI,SAAAC,GACf2C,EAAYzY,KAAK8V,EAAkB9C,eAI3C,IAAIrF,EAAkB,QAEGoE,IAArBqG,EAAc,GACdA,EAAcvC,KAAI,SAAAnQ,GACd,IAAK,IAAIoC,EAAI,EAAGA,EAAIpC,EAAOwM,OAAQpK,IAC/B6F,EAAgB3N,KAAK0F,EAAOoC,OAIpC6F,OAAkBoE,EAGtB,IAAM2G,EAAiB,SAAAC,GhBsBa,IAAAC,IgBrBPD,EhBsB7B1L,GAAMC,SP3EC,CACHxN,KzCkDmB,cyCjDnBC,OOyE0BiZ,KgBK9B,OACI,kBAACC,GAAA,EAAD,CAAQC,QANQ,WAChBX,IACAK,GAAaD,IAIiBQ,KAAMV,EAAUW,SAAS,MACnD,wBAAI/M,UAAU,uBACThC,EAAE,uBAAwB,CACvBgP,YAAa1Z,EAAQoM,KAAO,IAAMpM,EAAQ2Z,WAIlD,yBAAKjN,UAAU,mBACX,kBAAC,GAAD,CAAMiD,MAAM,cACPqJ,EACG,kBAAC,GAAD,CACIY,cAAe5Z,EAAQM,GACvBkE,eAAgBA,EAChB2S,SAtCE,SAAAnE,GAOtB,IANA,IAAM6G,EAAW,CACbtT,YAAayM,EAAOzM,YACpBsQ,QAAS7D,EAAO6D,QAChBE,aAAc,IAGTxO,EAAI,EAAGA,GAAK/D,EAAemO,OAAS,EAAGpK,IAAK,CACjD,IAAIuR,EAAmB,CACnBrG,WAAYyF,EAAY3Q,GACxB2O,OAAQlE,EAAO,eAAD,OAAgBkG,EAAY3Q,MAG9CsR,EAAS9C,aAAatW,KAAKqZ,GAG/B3L,GAAyB0L,EAAUlO,EAAMkN,gBAuBrBzK,gBAAiBA,EACjB+K,eAAgBA,IAGpB,oCAAGzO,EAAE,4BAIb,6BAASgC,UAAU,4BACM8F,IAApBpE,EACG,yBAAK1B,UAAU,aACV0B,EAAgBkI,KAAI,SAACyD,EAAarW,GAAd,OACjB,kBAAC,GAAD,CAAMiM,MAAM,kBAAkB6H,IAAK9T,GAC/B,yBAAKgJ,UAAU,cACX,kBAAC,KAAD,CACIA,UAAU,mBACVkH,MAAOlJ,EAAE,oBACTkN,QAAS,WACLuB,EACIY,EAAYxT,aAEhB0S,GAAY,OAIxB,wBAAIvM,UAAU,kBACThC,EAAE,eAAD,OACiBqP,EAAYxT,eAGlCwT,EAAYhD,aAAaT,KACtB,SAACS,EAAcrT,GAAf,OACI,yBACIgJ,UAAU,qBACV8K,IAAK9T,GAEL,8BACKgH,EAAE,sBAAuB,IACzBqM,EAAatD,YAElB,0BACI/G,UAAS,WAAMqK,EAAaG,SAE3BxM,EAAE,6BAAD,OAC+BqM,EAAaG,mBAU1E,kBAAC,GAAD,CAAMvH,MAAM,0BACR,2BAAIjF,EAAE,8BCpIrBsP,GAAwB,SAAA1V,GAAU,OAC3CoJ,GAAMC,SrBSC,CACHxN,K5CuEuB,kB4CtEvBC,OqBX0BkE,KAUrB2V,GAA0B,WACnCtY,EACKiN,I3CXoB,a2CYpBlH,MAAK,SAAAjF,GACFiL,GAAMC,SrBjCP,CACHxN,K5CkG0B,oB4CjG1BC,OqBiCYqC,EAASwH,KACJiQ,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEnI,KAAOoI,EAAEpI,KAAO,GAAK,KACvCqI,eAIhB3L,OAAM,SAAAnM,GAAK,OAAIyL,GAAazL,OAqE/B+X,GAAoB,SAAA7T,GAClBA,EAASnG,GACTia,GAAY9T,GAEZ+T,GAAa/T,IAIRgU,GAAwB,SAAAzH,GACjC,IAlGiC0H,EAkG7BjU,EA3Ea,SAAAA,GACjB,IAAMkU,EAAgB,GAChBC,EAAmB,GAFI,WAGpBC,GACDC,OAAOC,UAAUC,eAAelR,KAAKrD,EAAUoU,IAE3CA,EAAKI,QAAQ,0BAA4B,IACtB,IAAnBxU,EAASoU,IAETF,EAAcla,KAAKoa,EAAKK,UAAU,KAGtCJ,OAAOC,UAAUC,eAAelR,KAAKrD,EAAUoU,IAE3CA,EAAKI,QAAQ,6BAA+B,IACzB,IAAnBxU,EAASoU,IAETD,EAAiBna,KACbiN,GACKI,WACAvJ,aAAaC,eAAe8B,MACzB,SAAAa,GAAQ,OAAIA,EAAS7G,MAAQua,EAAKK,UAAU,SAlBpE,IAAK,IAAIL,KAAQpU,EAAW,EAAnBoU,GAyBT,MAAO,CACHva,GAAImG,EAASnG,GACb0R,MAAOvL,EAASuL,KAChBC,YAAaxL,EAASwL,YACtBkJ,SAAU1U,EAAS0U,SACnBC,OAAQ3U,EAAS2U,OACjB5X,gBAAiBiD,EAASjD,gBAC1BmX,cAAeA,EACfC,iBAAkBA,GAuCPS,CAAarI,GAC5B,IAAKlB,GAAkBrL,GAOnB,OANAgH,IACI,EACAM,GACAvF,GAAKkC,EAAE,0CAvGkBgQ,GAyGP,OAxG1BhN,GAAMC,SrBwBC,CACHxN,K5CwDiB,Y4CvDjBC,OqB1BoBsa,IA2GxB,GAAKY,GAAmB7U,EAAS2U,OAAQ3U,EAAS0U,SAAU1U,EAASuL,MAGrE,GAAIvL,EAASjD,gBAAiB,CAC1B,IAAM+X,EAAqBC,GAAoB/U,EAASnG,IACpDib,GACAA,EAAmB/X,iBAAkB,EACrC7B,EACKkG,I3CrHY,Y2CqHO0T,GACnB7T,MAAK,SAAAjF,GACFiL,GAAMC,SAASH,GAAe/K,EAASwH,OACvCqQ,GAAkB7T,MAErBiI,OAAM,SAAAnM,GAAK,OAAIyL,GAAazL,OAEjC+X,GAAkB7T,QAGtB6T,GAAkB7T,IAIpB6U,GAAqB,SAACF,EAAQD,EAAUnJ,GAC1C,IAAMyJ,GAAeL,EAAOF,UAAUE,EAAOzI,OAAS,GAChD+I,GAAiBP,EAASD,UAAUC,EAASxI,OAAS,GACxDgJ,GAAO,EAMX,OALI3J,IAASyJ,GAAezJ,IAAS0J,IACjCC,EAAOC,OAAOC,QACVrT,GAAKkC,EAAE,0DAGRiR,GAGLpB,GAAc,SAAAtQ,GAChBtI,EACKkG,I3CjJoB,Y2CiJDoC,GACnBvC,MAAK,SAAAjF,GACFiL,GAAMC,SAASH,GAAe/K,EAASwH,OACvC+P,GAAsB,MACtB8B,KACA7B,KACAlC,GhBlKiB,egBmKjB9J,GACIzF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,+BACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAnM,GAAK,OAAIyL,GAAazL,OAE/BiY,GAAe,SAAAvQ,GACjBtI,EACK8F,K3CnKoB,Y2CmKAwC,GACpBvC,MAAK,SAAAjF,GACFiL,GAAMC,SrB3KP,CACHxN,K5CkFoB,e4CjFpBC,OqByK+BqC,EAASwH,OACpC8N,GhBjLiB,egBkLjB9J,GACIzF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,+BACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAnM,GAAK,OAAIyL,GAAazL,OAE/BiZ,GAAsB,SAAAlX,GACxB,OAAOoJ,GACFI,WACA1J,UAAUA,UAAUkC,MACjB,SAAAyV,GAAY,OACyB,IAAjCA,EAAavY,iBACbuY,EAAazb,KAAOgE,MAIvBwX,GAA8B,WACvCna,EACKiN,I3CtL6B,sB2CuL7BlH,MAAK,SAAAsF,GACFU,GAAMC,SrB5MkB,SAAAX,GAChC,MAAO,CACH7M,K5CoG8B,yB4CnG9BC,OAAQ4M,GqByMWgP,CAAqBhP,EAAI/C,UAE3CyE,OAAM,SAAAQ,GACHlB,GAAakB,OC9MZ+M,I,OAAgB,IAVT,CAChB,SACA,UACA,YACA,WACA,SACA,WACA,UAIC3F,KAAI,SAAA8C,GAAG,OAAI6C,GAAcxb,KAAK2Y,EAAIlH,kBCCvC,IAAIgK,GAAe,SAAAvQ,GAAU,IAEjBjB,EAAMkB,aAAe,gBAArBlB,EAIRgM,qBAAU,kBAAMuD,OAA2B,IANnB,IASpB/D,EAKAvK,EALAuK,aACA1R,EAIAmH,EAJAnH,eACA2R,EAGAxK,EAHAwK,SACAC,EAEAzK,EAFAyK,WACA+F,EACAxQ,EADAwQ,QAGEjD,EAAc,GAQpB,OANI1U,EAAemO,OAAS,EAAI,GAC5BnO,EAAe8R,KAAI,SAAAC,GACf2C,EAAYzY,KAAK8V,EAAkB9C,eAKvC,oCACI,0BAAM/G,UAAU,iBAAiByK,SAAUjB,GACvC,yBAAKxJ,UAAU,cACX,kBAAC0K,GAAA,EAAD,CACIhL,KAAK,aACLiL,UAAWhC,GACXxI,MAAOnC,EAAE,oCACTvK,KAAK,OACLuM,UAAU,gBACV4K,SAAU,CAAC/E,KAEX,4BAAQvG,MAAO,KACdL,EAAMvH,UAAUkS,KAAI,SAAClS,EAAWV,GAAZ,OACjB,4BAAQ8T,IAAK9T,EAAOsI,MAAO5H,EAAU9D,IAChC8D,EAAU6N,iBAIvB,kBAACmF,GAAA,EAAD,CACIhL,KAAK,UACLiL,UAAWhC,GACXxI,MAAOnC,EAAE,gCACTvK,KAAK,OACLuM,UAAU,gBACV4K,SAAU,CAAC/E,KAEX,4BAAQvG,MAAO,KA/CrB,CAAC,MAAO,OAAQ,UAgDHsK,KAAI,SAAC8F,EAAM1Y,GAAP,OACP,4BAAQ8T,IAAK9T,EAAOsI,MAAK,UAAKoQ,IACzB1R,EAAE,UAAD,OAAW0R,EAAKC,cAAhB,eAId,kBAACjF,GAAA,EAAD,CACIhL,KAAK,YACLiL,UAAWhC,GACXxI,MAAOnC,EAAE,+BACTvK,KAAK,OACLuM,UAAU,gBACV4K,SAAU,CAAC/E,KAEX,4BAAQvG,MAAO,KACdiQ,GAAc3F,KAAI,SAAC8C,EAAK1V,GAAN,OACf,4BAAQ8T,IAAK9T,EAAOsI,MAAK,UAAKoN,IACzB1O,EAAE,sBAAD,OAAuB0O,SAIrC,kBAAChC,GAAA,EAAD,CACIhL,KAAK,QACLiL,UAAWhC,GACXxI,MAAOnC,EAAE,iCACTvK,KAAK,OACLuM,UAAU,gBACV4K,SAAU,CAAC/E,KAEX,4BAAQvG,MAAO,KACdkN,EAAY5C,KAAI,SAACgG,EAAU5Y,GAAX,OACb,4BAAQ8T,IAAK9T,EAAOsI,MAAK,UAAKsQ,IACzBA,QAKjB,yBAAK5P,UAAU,2CACX,kBAACgL,GAAA,EAAD,CACIC,QAAQ,YACRnL,MAAM,UACN+K,SAAUpB,GAAYC,EACtB1J,UAAU,gBACVvM,KAAK,UAEJuK,EAAE,qCAEP,kBAACgN,GAAA,EAAD,CACIC,QAAQ,YACRJ,SAAUpB,GAAYC,EACtB1J,UAAU,gBACVkL,QAASuE,GAERzR,EAAE,wCAa3BwR,GAAerE,aAAU,CACrBxQ,KlB/HsB,ckB8HXwQ,CAEZqE,IAEYpE,qBATS,SAAA/X,GAAK,MAAK,CAC9B8G,UAAW9G,EAAM8G,UAAUA,UAC3BzC,UAAWrE,EAAMqE,UAAUA,aAOhB0T,CAAyBoE,ICrF3BK,GAAwB,WArCZ,IAAAvE,EAsCrBtK,GAAMC,SCzC2B,CACjCxN,KrE8E2B,oBoE5EN6X,EnBRC,amBStBtK,GAAMC,SAASa,aAAMwJ,KEiFVF,I,OAAAA,cAJS,SAAA/X,GAAK,MAAK,CAC9B8G,UAAW9G,EAAM8G,UAAUA,aAGhBiR,EA/EG,SAAAnM,GAAU,IAChBjB,EAAMkB,aAAe,gBAArBlB,EADe,EAGCqO,oBAAS,GAHV,oBAGhBS,EAHgB,KAGVgD,EAHU,KAKfhY,EAAmBmH,EAAnBnH,eAERkS,qBAAU,kBAAMuB,OAA+B,IAkB/C,OAEM,oCACM,uBAAGvL,UAAU,WAAWkL,QAnBZ,WACpB4E,GAAQ,KAmBK9R,EAAE,mBAGX,kBAAC4O,GAAA,EAAD,CACIE,KAAMA,EACND,QArBQ,WAChBiD,GAAQ,IAqBA/C,SAAS,KACTgD,kBAAgB,qBAEhB,yBAAK/P,UAAU,oBACX,2BAAOA,UAAU,qBACb,kBAAC,GAAD,CAAMA,UAAU,mCACZ,yBAAKA,UAAU,iBACX,wBAAIpM,GAAG,qBACFoK,EAAE,mBAEP,kBAAC,GAAD,CACIlG,eAAgBA,EAChB2X,QA9BR,WACpBI,MA8B4BpF,SA3BjB,SAAAnE,GFpBiB,IAAA0J,IEqBP1J,EFpBzBrR,EACKiN,IACG+N,wBAEID,EAAKE,UACL,YACAF,EAAK7F,QACL,YACA6F,EAAK/M,MACL,eACA+M,EAAKpY,YAEZoD,MAAK,SAAAjF,GACF,IAAIyV,EAAc,GACZC,EAAU1V,EAASwH,KACzB,IAAK,IAAMuN,KAAOW,EACdD,EAAYzX,KAAZ,aACIH,GAAIkX,GACDW,EAAQX,KAGnB9J,GAAMC,SCnCP,CACHxN,KrEmFuB,kBqElFvBC,ODiCiC8X,OAEhCxJ,OAAM,SAAAnM,GACHkL,IACI,EACAM,GACAvF,GAAKkC,EAAEnI,EAAME,SAASwH,KAAKzI,QAASe,EAAME,SAASwH,KAAKzI,mBEwBpD,6BAASkL,UAAU,+BACdf,EAAM9E,UAAUyP,KAAI,SAACxP,GAAD,OACjB,kBAAC,GAAD,CAAM0Q,IAAK1Q,EAASxG,GAAIoM,UAAU,aAC9B,yBAAKA,UAAU,gBACX,kCAAQhC,EAAE,cAAgB,IAA1B,KACA,wBAAIgC,UAAU,qBACT5F,EAASsF,MAEd,8BAAO1B,EAAE,cAAgB,KACzB,wBAAIgC,UAAU,qBACT5F,EAAS3G,KAAK8R,0BC9CjD4K,GAAaC,aAAW,CAC1BC,MAAO,CACHC,OAAO,aAAD,OAAelQ,MAFVgQ,EAIhB,SAAAnR,GAAK,OACJ,kBAACsR,GAAA,EAAD,eACIC,UAAW,EACXC,mBAAoB,KACpBC,aAAc,CACVC,SAAU,SACVC,WAAY,UAEhBC,gBAAiB,CACbF,SAAU,SACVC,WAAY,WAEZ3R,OAIN6R,GAAiBV,cAAW,SAAAW,GAAK,MAAK,CACxCC,KAAM,CACF,UAAW,CACP3M,gBAAiB0M,EAAME,QAAQC,QAAQC,KACvCrR,MAAOiR,EAAME,QAAQvb,OAAO0b,WAJjBhB,CAOnBiB,MAkUWjG,iBAPS,SAAA/X,GAAK,MAAK,CAC9BsG,SAAUtG,EAAMmG,aAAaG,SAC7B7B,eAAgBzE,EAAMwE,aAAaC,eACnChB,gBAAiBzD,EAAMoH,SAAS3D,gBAChCqV,cAAe9Y,EAAMmG,aAAaC,UAGE,GAAzB2R,EAhUA,SAAAnM,GAAU,IAAD,EACYqS,IAAMjF,SAAS,MAD3B,oBACbkF,EADa,KACHC,EADG,KAGdC,EAAc,SAAArS,GAAK,OAAIoS,EAAYpS,EAAMsS,gBAEzCC,EAAc,kBAAMH,EAAY,OAE9BxT,EAAMkB,aAAe,UAArBlB,EAPY,EASYqO,oBAAS,GATrB,oBASbD,EATa,KASHwF,EATG,OAUUvF,mBAAS,GAVnB,oBAUb/Y,EAVa,KAUJue,EAVI,KAYpB7H,qBAAU,WACF/K,EAAM6S,WAAajU,EAAMkO,SAASzJ,OACvC,IAEH,IAAMyP,EAAsB,SAAAze,GACxBue,EAAWve,GACXse,GAAY,IAOV/T,EAAQoB,EAAMpB,MAEhBmU,EAAY,KACZC,EAAa,KACbC,EAAO,KAyPX,OAxPIjT,EAAM6S,WAAajU,EAAMkO,SACzBiG,EACI,oCACI,kBAAC,KAAD,CAAMG,GAAIpT,GAAqBiB,UAAU,YACpChC,EAAE,mBAEP,0BAAMgC,UAAU,yBACXhC,EAAE,+BADP,IACwC,IACnCiB,EAAMnI,gBAAgByO,cAInC0M,EACI,oCACI,kBAAC,GAAD,CAAWna,eAAgBmH,EAAMnH,iBACjC,kBAAC,KAAD,CAAMqa,GAAIpT,GAAkBiB,UAAU,YACjChC,EAAE,gBAEP,kBAAC,KAAD,CAAMmU,GAAIpT,GAAciB,UAAU,YAC7BhC,EAAE,kBAIfkU,EACI,yBAAKlS,UAAU,QACX,kBAACgL,GAAA,EAAD,CACIoH,gBAAc,kBACdC,gBAAc,OACdpH,QAAQ,YACRnL,MAAM,UACNoL,QAASuG,GAERzT,EAAE,gBAGP,kBAACmS,GAAD,CACIvc,GAAG,kBACH2d,SAAUA,EACVe,aAAW,EACXxF,KAAMyF,QAAQhB,GACd1E,QAAS8E,GAEb,0BAAM3R,UAAU,0BACXf,EAAMnI,gBAAgByO,aAEvB,kBAAC,KAAD,CACI4M,GAAIpT,GACJiB,UAAU,WACVoE,MAAO,CAAEoO,eAAgB,SAEzB,kBAAC1B,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAQC,SAAS,aAEpB1U,EAAE,gBAIX,kBAAC,KAAD,CACImU,GAAIpT,GACJiB,UAAU,WACVoE,MAAO,CAAEoO,eAAgB,SAEzB,kBAAC1B,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAASC,SAAS,aAErB1U,EAAE,oBAIX,kBAAC,KAAD,CACImU,GAAIpT,GACJiB,UAAU,WACVoE,MAAO,CAAEoO,eAAgB,SAEzB,kBAAC1B,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAQC,SAAS,aAEpB1U,EAAE,iBAIX,kBAAC,KAAD,CACIgC,UAAU,WACVoE,MAAO,CAAEoO,eAAgB,SAEzB,kBAAC1B,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAYC,SAAS,aAEzB,kBAAC,GAAD,CAAW5a,eAAgBmH,EAAMnH,mBAIzC,kBAAC,KAAD,CACIqa,GAAIpT,GACJiB,UAAU,WACVoE,MAAO,CAAEoO,eAAgB,SAEzB,kBAAC1B,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAeC,SAAS,aAE3B1U,EAAE,qBAMhBiB,EAAM6S,WAAajU,EAAMmO,SAChCgG,EACI,oCACI,uBACIhS,UAAU,WACVkL,QAAS,WACL6G,EAAoB9S,EAAMtF,SAAS,GAAGrG,SACtC2O,OAGHjE,EAAE,kBAIfiU,EACI,kBAAC,KAAD,CAAME,GAAIpT,GAAciB,UAAU,YAC7BhC,EAAE,iBAGXkU,EACI,yBAAKlS,UAAU,QACX,kBAACgL,GAAA,EAAD,CACIoH,gBAAc,kBACdC,gBAAc,OACdpH,QAAQ,YACRnL,MAAM,UACNoL,QAASuG,GAERzT,EAAE,gBAGP,kBAACmS,GAAD,CACIvc,GAAG,kBACH2d,SAAUA,EACVe,aAAW,EACXxF,KAAMyF,QAAQhB,GACd1E,QAAS8E,GAGL,kBAACb,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAiBC,SAAS,aAG9B,uBACR1S,UAAU,WACVkL,QAAS,WACL6G,EAAoB9S,EAAMtF,SAAS,GAAGrG,SACtC2O,OAGHjE,EAAE,kBAMH,kBAAC,KAAD,CACImU,GAAIpT,GACJiB,UAAU,WACVoE,MAAO,CAAEoO,eAAgB,SAEzB,kBAAC1B,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAeC,SAAS,aAE3B1U,EAAE,qBAMhBiB,EAAM6S,SACbG,EACI,oCACI,kBAAC,KAAD,CAAME,GAAIpT,GAAciB,UAAU,YAC7BhC,EAAE,mBAKfiU,EACI,oCACI,kBAAC,KAAD,CAAME,GAAIpT,GAAYiB,UAAU,YAC3BhC,EAAE,iBAIfkU,EACI,yBAAKlS,UAAU,QACX,kBAACgL,GAAA,EAAD,CACIoH,gBAAc,kBACdC,gBAAc,OACdpH,QAAQ,YACRnL,MAAM,UACNoL,QAASuG,GAERzT,EAAE,gBAGP,kBAACmS,GAAD,CACIvc,GAAG,kBACH2d,SAAUA,EACVe,aAAW,EACXxF,KAAMyF,QAAQhB,GACd1E,QAAS8E,GAET,kBAAC,KAAD,CACIQ,GAAIpT,GACJiB,UAAU,WACVoE,MAAO,CAAEoO,eAAgB,SAEzB,kBAAC1B,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAQC,SAAS,aAEpB1U,EAAE,gBAIX,kBAAC,KAAD,CACImU,GAAIpT,GACJiB,UAAU,WACVoE,MAAO,CAAEoO,eAAgB,SAEzB,kBAAC1B,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAWC,SAAS,aAEvB1U,EAAE,oBASvB,oCACKiB,EAAM6S,WAAajU,EAAMmO,QACtB,oCACI,kBAAC,GAAD,CACII,SAAUA,EACVF,YAvQI,SAAA5M,GACpBsS,GAAY,IAuQIte,QAASA,EACT6Y,cAAelN,EAAMkN,cACrBrU,eAAgBmH,EAAMnH,kBAI9B,GAEJ,4BAAQkI,UAAU,UACbkS,EACD,yBAAKlS,UAAU,mCACX,kBAAC,KAAD,CAAMmS,GAAIpT,GAAiBiB,UAAU,YAChChC,EAAE,eAENgU,GAEL,yBAAKhS,UAAU,mCACViS,GAGL,yBAAKjS,UAAU,qCACX,kBAAC,GAAD,Y,qECnWd2S,GAAUrV,EAAQ,KAMlBsV,GAJiC,WACnC,IAAIC,EAAM,IAAInV,KACd,OAAO6R,GAAcsD,EAAIC,SAAW,GAErBC,GAqBbC,GAAkB,SAAAC,GAGpB,OAtBkB,SAACA,EAAmBC,GACtC,IAAMC,EAASC,MAAMC,KAAKJ,GAEpBxE,EAAW,IAAI/Q,KACjByV,EAAO,GACHA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,IAGTG,EAAeC,KAAKC,OAAON,EAAOzE,GAAR,OAChC,OAAO8E,KAAKE,MAAMP,EAAKJ,SAAW,EAAIQ,GAAgB,GAIzCI,CAAcT,EADhB,IAAIvV,OAInB,SAASiW,GAAcC,GACnB,OAAOA,EAAM,EAEjB,IAAIC,GAAkB,EAEhBC,GAAkB,SAAA1b,GAAS,OAC7BA,EAAU2O,WACV,WACA3O,EAAUoP,UACV,MACApP,EAAUqP,SAEDsM,GAAwB,SAAA7Q,GACjC,IAAI8Q,EAAQ,GAIZ,YAHalO,IAAT5C,GAA+B,OAATA,IACtB8Q,EAAQ9Q,EAAK+Q,eAAiB,OAAS/Q,EAAKgR,gBAEzCF,GAEEG,GAA2B,SAAAjR,GACpC,IAAI8Q,EAAQ,GAWZ,YAValO,IAAT5C,GAA+B,OAATA,IACtB8Q,EACI,KACAI,GAAQpW,EAAR,mCACgCkF,EAAKmR,WAAW1E,cADhD,WAGAzM,EAAKoR,OACLN,GAAS,KAAO9Q,EAAKoR,KAAK5U,KAAO,OAGlCsU,GA8BEO,GAA4B,SAAAhF,GAAa,OAClD,kBAACiF,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAW1U,UAAU,mBACpBuP,EAAc3F,KAAI,SAAA8C,GAAG,OAClB,kBAACgI,GAAA,EAAD,CAAW5J,IAAK6H,GAAQgC,YACnBP,GAAQpW,EAAR,sBAAyB0O,WAOjCkI,GAAmB,SAACC,EAASC,EAAO/a,GAI7C,OAHIA,IACA8Z,GAAkBF,GAAcX,GAAgBjZ,EAAS0U,YAGzD,kBAACsG,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAOvV,aAAW,gBACb8U,GAA0BhF,IAC3B,kBAAC0F,GAAA,EAAD,KACKJ,EAAQjL,KAAI,SAACsL,EAAUC,GACpB,GAAID,EACA,OAnDO,SAACA,EAAUE,GAE1C,IADA,IAAI9U,EAAM,GACV,MAAyB8N,OAAOiH,QAAQH,EAASI,OAAjD,eAAyD,CAAC,IAAD,uBAA/CxK,EAA+C,KAA1CxL,EAA0C,KACrDA,EAAMoN,IAAM5B,EACZxK,EAAIvM,KAAKuL,GAEb,OACI,kBAACmV,GAAA,EAAD,CAAU3J,IAAK6H,GAAQgC,YACnB,kBAACD,GAAA,EAAD,CAAW1U,UAAU,0BAChB8T,GAAgBoB,EAASjS,QAE7B3C,EAAIsJ,KAAI,SAAA8C,GACL,IAAI1M,EAAY,UAIhB,OAHI4S,KAAelG,EAAIA,KAAOmH,KAAoBuB,IAC9CpV,GAAa,eAGb,kBAAC0U,GAAA,EAAD,CAAW5J,IAAK6H,GAAQgC,WAAY3U,UAAWA,GAC3C,2BAAI+T,GAAsBrH,EAAIxJ,OAC9B,2BAAIiR,GAAyBzH,EAAIxJ,YAgCtBqS,CAAoBL,EAAUJ,UASpDU,GAAmB,SAC5B/c,GAIE,IAHFqc,EAGC,uDAHO,EACRjB,EAEC,uDAFiB,EAClB4B,EACC,uDADc,EAEf,OAAOhd,EAAOmR,KAAI,SAAClR,EAAOgd,GACtB,IAAIC,EAAU,EACVC,EAAU,EACVC,EAAY,SAKhB,GAHIhC,IAAoBiB,GAASW,IAC7BI,GAAa,eAEE,OAAfnd,EAAMwK,MAA4C,IAA3BxK,EAAMwK,KAAK4S,YAAtC,CAGmB,OAAfpd,EAAMwK,MAA8C,IAA7BxK,EAAMwK,KAAK6S,gBAClCH,EAAU,EACVC,GAAa,WAGjB,IAAK,IAAIha,EAAI6Z,EAAY7Z,EAAIpD,EAAOwN,OAAQpK,IAEpCnD,GACAD,EAAOoD,EAAI,IACI,OAAfnD,EAAMwK,MACiB,OAAvBzK,EAAOoD,EAAI,GAAGqH,MAGVxK,EAAMwK,KAAK+Q,gBACXvb,EAAMwK,KAAK+Q,iBACPxb,EAAOoD,EAAI,GAAGqH,KAAK+Q,gBACvBvb,EAAMwK,KAAKgR,iBACPzb,EAAOoD,EAAI,GAAGqH,KAAKgR,gBACvBxb,EAAMwK,KAAKoR,KAAK1gB,KAAO6E,EAAOoD,EAAI,GAAGqH,KAAKoR,KAAK1gB,IAC/C8E,EAAMwK,KAAK6S,gBACPtd,EAAOoD,EAAI,GAAGqH,KAAK6S,gBAEvBtd,EAAOoD,EAAI,GAAGqH,KAAK4S,YAAc,EACjCH,IACAE,GAAa,YAIzB,OACI,kBAACnB,GAAA,EAAD,CACI5J,IAAK6H,GAAQgC,WACbqB,QAASL,EACTM,QAASL,EACT5V,UAAW6V,GAEX,2BAAI9B,GAAsBrb,EAAMwK,OAChC,2BAAIiR,GAAyBzb,EAAMwK,aAkJtCgT,GAAY,SAACC,EAASC,EAASC,GACxC,OAAOD,EAAQxM,KAAI,SAACxR,EAAW+c,GAE3B,OAjCiB,SAAA/c,GACjBA,EAAUkd,OACVld,EAAUkd,MAAMgB,IAAIxiB,SAAQ,SAACoP,EAAMqT,EAAW3M,GAEtCxR,EAAUkd,MAAMkB,KAAKD,IACrBrT,EAAKxK,MAAM9E,KAAOwE,EAAUkd,MAAMkB,KAAKD,GAAW7d,MAAM9E,IAGtC,OAAdsP,EAAKA,MACoC,OAAzC9K,EAAUkd,MAAMkB,KAAKD,GAAWrT,MAG5BA,EAAKA,KAAK+Q,iBACN7b,EAAUkd,MAAMkB,KAAKD,GAAWrT,KAC3B+Q,gBACT/Q,EAAKA,KAAKgR,iBACN9b,EAAUkd,MAAMkB,KAAKD,GAAWrT,KAC3BgR,gBACThR,EAAKA,KAAKoR,KAAK1gB,KACXwE,EAAUkd,MAAMkB,KAAKD,GAAWrT,KAAKoR,KAAK1gB,KAE9CwE,EAAUkd,MAAMgB,IAAIC,GAAWrT,KAAK6S,cAAgB,EACpD3d,EAAUkd,MAAMkB,KAAKD,GAAWrT,KAAK4S,YAAc,MAUnEW,CAAiBre,GACE,IAAf+c,EAlIyC,SACjDuB,EACAte,EACAK,EACAke,GAEA,IAAIC,EAAe,eAGfC,EAAe,GACfC,EAAgB,GAepB,OAdIlE,KAAe8D,IACfE,GAAgB,cAEQ,IAApB/C,GACAgD,EAAe,cAEfC,EAAgB,gBAIpBre,EAAO+d,KAAKvQ,QAAU,GAAKxN,EAAO6d,IAAIrQ,QAAU,KAChD2Q,GAAgB,oBAIhB,kBAAC,IAAMG,SAAP,CAAgBjM,IAAK6H,GAAQgC,YACzB,kBAACF,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAWuB,QAAwB,EAAfU,EAAkB3W,UAAW4W,GAC7C,0BAAM5W,UAAU,WACZ,2BAAIoU,GAAQpW,EAAR,6BAAgC0Y,OAG5C,kBAAChC,GAAA,EAAD,CAAW1U,UA1BF,iBA0B6BiW,QAAS,GAC1CnC,GAAgB1b,IAErB,kBAACsc,GAAA,EAAD,CACI1U,UA9BK,iBA8BuB6W,EAAe,iBAD/C,KAKCrB,GAAiB/c,EAAO6d,MAE7B,kBAAC7B,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACI1U,UAtCK,iBAsCuB8W,EAAgB,iBADhD,KAKCtB,GAAiB/c,EAAO+d,QAkFtBQ,CACHb,EACA/d,EAAU6K,MACV7K,EAAUkd,MACVe,GAhFqC,SACjDK,EACAte,EACAK,GAEA,IACIoe,EAAe,GACfC,EAAgB,GAUpB,OARIlE,KAAe8D,IACS,IAApB7C,GACAgD,EAAe,cAEfC,EAAgB,eAKpB,kBAAC,IAAMC,SAAP,CAAgBjM,IAAK6H,GAAQgC,YACzB,kBAACF,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAW1U,UAfF,iBAe6BiW,QAAS,GAC1CnC,GAAgB1b,IAErB,kBAACsc,GAAA,EAAD,CACI1U,UAnBK,iBAmBuB6W,EAAe,iBAD/C,KAKCrB,GAAiB/c,EAAO6d,IAAK,IAElC,kBAAC7B,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACI1U,UA3BK,iBA2BuB8W,EAAgB,iBADhD,KAKCtB,GAAiB/c,EAAO+d,KAAM,KA+C5BS,CACHd,EACA/d,EAAU6K,MACV7K,EAAUkd,WA8Bb4B,GAAqB,SAAAC,GAC9BtD,GAAkBF,GACdX,GAAgBmE,EAAmBpd,SAAS0U,WAEhD,IA5BoC2I,EA4BhCC,EAAgB,GASpB,OARIF,EAAmBpd,WACnBsd,EACIF,EAAmBpd,SAASwL,YAC5B,KACA4R,EAAmBpd,SAASuL,KAC5B,KAIJ,oCACI,4BAAK+R,GACL,kBAACtC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAOvV,aAAW,iBAzCM2X,EA0CMD,EAAmBC,UAzC7D,kBAAC5C,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAWsB,QAAS,GACf5B,GAAQpW,EAAE,6BAEdoZ,EAAUxN,KAAI,SAAAlR,GAAK,OAChB,kBAACgc,GAAA,EAAD,CAAW5J,IAAK6H,GAAQgC,WAAY3U,UAAU,kBACzCtH,EAAMwO,aAmCP,kBAAC+N,GAAA,EAAD,KA5BO,SAAAkC,GAAkB,OACzCA,EAAmBG,YAAY1N,KAAI,SAACwM,EAASD,GACzC,OAAOD,GACHE,EAAQ1J,IACR0J,EAAQvB,QACRsC,EAAmBjJ,iBAAiBjI,WAwBvBsR,CAAmBJ,QA8BtCK,GAAyB,SAAAlC,GAC3B,IAAImC,EAAW,GACXC,EAAc,GACdC,EAAgB,GAmBpB,YAlBc7R,IAAVwP,GACAA,EAAMA,MAAM1L,KAAI,SAAC1G,EAAMqT,GACD,IAAdA,IACAkB,GA7BsB,SAAAvU,GAClC,IAAI8Q,EAAQ,GAIZ,YAHalO,IAAT5C,GAA+B,OAATA,IACtB8Q,EAAQ9Q,EAAKgR,gBAEVF,EAwBiB4D,CAAuB1U,GACnCwU,GACI,KACAtD,GAAQpW,EAAR,mCACgCkF,EAAKmR,WAAW1E,cADhD,WAGA,KACAzM,EAAKoR,KACL,IACJqD,GACIvD,GAAQpW,EAAE,qCAAuC,MAEzD2Z,GAAiBzU,EAAKxK,MAAMwO,MAAQ,OAIxC,kBAACwN,GAAA,EAAD,CAAW5J,IAAK6H,GAAQgC,WAAY3U,UAAU,UAC1C,2BAAIyX,GACJ,2BAAIC,GACJ,2BAAIC,KAIHE,GAAkB,SAACpd,EAAUqa,GACtC,GAAIra,EACA,OACI,kBAACsa,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAOvV,aAAW,gBACb8U,GAA0B9Z,EAASqd,MACpC,kBAAC7C,GAAA,EAAD,KACKxa,EAASoa,QAAQjL,KAAI,SAAAxR,GAClB,OApDL,SAACA,EAAW0f,EAAMC,GAAlB,OACnB,kBAACtD,GAAA,EAAD,CAAU3J,IAAK6H,GAAQgC,YACnB,kBAACD,GAAA,EAAD,CAAW1U,UAAU,yBAChB8T,GAAgB1b,IAEpB0f,EAAKlO,KAAI,SAAAuM,GACN,GAAI4B,EACA,OAAOP,GACHO,EAAYne,MAAK,SAAAoe,GAAI,OAAIA,EAAKtL,MAAQyJ,UA4CvB8B,CACH7f,EACAqC,EAASqd,KACTrd,EAAS6a,MAAMld,EAAUxE,Y,mEC9bnDskB,GAAYC,cAAW,SAAApH,GAAK,MAAK,CACnCC,KAAM,CACF,QAAS,CACLoH,OAAQrH,EAAMsH,QAAQ,SAK5BC,GAAaC,aAAOC,KAAPD,CAAkB,CACjC/T,QAAS,eACTiU,MAAO,UAGPlkB,GAAU,EACViD,GAAY,EACZI,GAAa,EA+LFwT,iBANS,SAAA/X,GAAK,MAAK,CAC9BoF,OAAQpF,EAAMoF,OAAOA,OACrBrF,SAAUC,EAAMD,SAASA,SACzBsE,UAAWrE,EAAMoH,SAAS/C,UAC1BrB,QAAShD,EAAMqH,iBAAiBrE,WAErB+U,EA7Lc,SAAAnM,GACzB,IAAM4V,EAAUqD,KACRla,EAAMkB,aAAe,UAArBlB,EACAvF,EAAgCwG,EAAhCxG,OAAQrF,EAAwB6L,EAAxB7L,SAAUsE,EAAcuH,EAAdvH,UAGtBghB,EAAmB,GAFLzZ,EAAM5I,UAIpBqiB,EACI,6BAAS1Y,UAAU,sBACf,kBAAC2Y,GAAA,EAAD,QAKZ3O,qBAAU,WtBmIV/U,EACKiN,I7BvJuB,iB6BwJvBlH,MAAK,SAAAjF,GACFiL,GAAMC,SAASJ,GAAc9K,EAASwH,KAAKiQ,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,UAEjE1L,OAAM,SAAAQ,GACHlB,GAAakB,QsBzIyB,IAC9CwH,qBAAU,WtB6IV/U,EACKiN,I7BjKyB,mB6BkKzBlH,MAAK,SAAAjF,GACFiL,GAAMC,SAASP,GAAgB3K,EAASwH,UAE3CyE,OAAM,SAAAQ,GACHlB,GAAakB,QsBnJ2B,IAChDwH,qBAAU,WtBmHV/U,EACKiN,I7BvI2B,oB6BwI3BlH,MAAK,SAAAjF,GACFiL,GAAMC,SZ9FP,CACHxN,KvC+ByB,oBuC9BzBC,OY4FmCqC,EAASwH,UAE3CyE,OAAM,SAAAQ,GACHlB,GAAakB,QsBzH4B,IAEjD,IAAMoW,EAAe,CACjBC,QAASpgB,EACTqgB,eAAgB,SAAAC,GAAM,OAAKA,EAASA,EAAO7R,MAAQ,KAGjD8R,EAAsB,CACxBH,QAASzlB,EACT0lB,eAAgB,SAAAC,GAAM,OAClBA,EACMA,EAAO9L,QAAU,IAAM8L,EAAOrZ,KAAO,IAAMqZ,EAAOE,WAClD,KAGRC,EAAuB,CACzBL,QAASnhB,EACTohB,eAAgB,SAAAC,GAAM,OAAKA,EAASA,EAAOxT,YAAc,KA8C7D,OACI,6BAASvF,UAAW6U,EAAQ7D,MACxB,2BAAIhT,EAAE,+BACN,2BAAIA,EAAE,oCACN,6BAASgC,UAAU,0BACf,yBAAKA,UAAU,0BAjCA,WACvB,GAAItI,EACA,OAAIA,EAAUuO,OAAS,EAEf,kBAACkT,GAAA,EAAD,iBACQD,EADR,CAEItlB,GAAG,WACH8L,KAAK,WACL0Z,eAAa,EACbC,aAAW,EACXtZ,SAAU,SAACX,EAAOka,GAhBT,IAAAvf,KAiBgBuf,KAfrC1hB,GAAamC,EAASnG,KAiBV2lB,YAAa,SAAAC,GAAM,OACf,kBAAClB,GAAD,iBACQkB,EADR,CAEIrZ,MAAOnC,EAAE,+BACToa,OAAO,iBAMvBxgB,GAAaF,EAAU,GAAG9D,GACnB,2BAAI8D,EAAU,GAAG6N,cAUnBkU,GACD,kBAACzO,GAAA,EAAD,CACIC,QAAQ,YACRnL,MAAM,UACNoL,QAAS,WACL/I,GAAkB,QAClBS,GAAuB,QACvBC,GAA6BjL,MAGjC,kBAAC,KAAD,CACIsP,MAAOlJ,EAAE,uBACTgC,UAAU,cAItB,yBAAKA,UAAU,0BACX,kBAACmZ,GAAA,EAAD,iBACQP,EADR,CAEIhlB,GAAG,QACH8L,KAAK,QACL0Z,eAAa,EACbC,aAAW,EACXtZ,SAAU,SAACX,EAAOka,GAzEZ,IAAA5gB,KA0EgB4gB,KAxElC/kB,GAAUmE,EAAM9E,KA0EJ2lB,YAAa,SAAAC,GAAM,OACf,kBAAClB,GAAD,iBACQkB,EADR,CAEIrZ,MAAOnC,EAAE,4BACToa,OAAO,gBAInB,kBAACpN,GAAA,EAAD,CACIC,QAAQ,YACRnL,MAAM,UACNoL,QAAS,WtBvCQ,IAAA3W,EsBwCRqD,IAILuK,GAAkB,QAClBS,GAAuB,SACvBC,GAA6BjL,ItB9ChBrD,EsB+CaA,GtB9ClDyM,GAAMC,SZjEwB,SAAA1M,GAC9B,MAAO,CACHd,KvCiC6B,wBuChC7Bc,QAASA,GY8DEmlB,CAAmBnlB,KsBwCNolB,MAAM3b,EAAE,wBAShB,kBAAC,KAAD,CACIkJ,MAAOlJ,EAAE,wBACTgC,UAAU,cAItB,yBAAKA,UAAU,0BACX,kBAACmZ,GAAA,EAAD,iBACQH,EADR,CAEIplB,GAAG,UACHwlB,eAAa,EACbC,aAAW,EACXtZ,SAAU,SAACX,EAAOka,GAzGV,IAAAhmB,KA0GgBgmB,KAxGpC9hB,GAAYlE,EAAQM,KA0GR2lB,YAAa,SAAAC,GAAM,OACf,kBAAClB,GAAD,iBACQkB,EADR,CAEIrZ,MAAOnC,EAAE,8BACToa,OAAO,gBAInB,kBAACpN,GAAA,EAAD,CACIC,QAAQ,YACRnL,MAAM,UACNoL,QAAS,WtBjCU,IAAA1T,EsBkCVI,IAILuK,GAAkB,QAClBS,GAAuB,WACvBC,GAA6BjL,ItBxCdJ,EsByCaA,GtBxCpDwJ,GAAMC,SZrG0B,SAAAzJ,GAChC,MAAO,CACH/D,KvC0C+B,0BuCzC/B+D,UAAWA,GYkGAoiB,CAAqBpiB,KsBkCRmiB,MAAM3b,EAAE,wBAShB,kBAAC,KAAD,CACIkJ,MAAOlJ,EAAE,0BACTgC,UAAU,eAKzB0Y,MCtDEtN,iBAVS,SAAA/X,GAAK,MAAK,CAC9BuD,aAAcvD,EAAMoH,SAAS7D,aAC7BD,cAAetD,EAAMoH,SAAS9D,cAC9BD,aAAcrD,EAAMoH,SAAS/D,aAC7Be,gBAAiBpE,EAAMoH,SAAShD,gBAChClD,QAASlB,EAAMoH,SAAS5D,gBACxBW,UAAWnE,EAAMoH,SAASnD,kBAC1BM,WAAYvE,EAAMoH,SAAS9C,mBAC3BtB,QAAShD,EAAMqH,iBAAiBrE,WAErB+U,EA9IW,SAAAnM,GAAU,IAC1BtI,EAAiDsI,EAAjDtI,cAAeD,EAAkCuI,EAAlCvI,aAAce,EAAoBwH,EAApBxH,gBAC7BoiB,EAAgB,SAAAjjB,GAClB,OAAQA,GACJ,IAAK,OvB0GcgB,EuBzGCqH,EAAMrH,WvB0GlC3C,EACKiN,I7B3HwB,sC6B2HAtK,GACxBoD,MAAK,SAAAjF,GACFiL,GAAMC,SZ5GP,CACHxN,KvCSyB,oBuCRzBC,OY0GmCqC,EAASwH,UAE3CyE,OAAM,SAAAQ,GACHlB,GAAakB,MuB/GT,MACJ,IAAK,SvBkHe,SAACjO,EAASqD,GAClCrD,EAAU,GACVU,EACKiN,I7BtIqB,oC6BsIItK,EAAa,YAAcrD,GACpDyG,MAAK,SAAAjF,GACFiL,GAAMC,SZ3GX,CACHxN,KvCH0B,qBuCI1BC,OYyGwCqC,EAASwH,UAE5CyE,OAAM,SAAAQ,GACHlB,GAAakB,MuBzHbsX,CAAiB7a,EAAM1K,QAAS0K,EAAMrH,YACtC,MACJ,IAAK,WvB2HiB,SAACJ,EAAWI,GACtCJ,EAAY,GACZvC,EACKiN,I7BzIuB,sC6ByIItK,EAAa,cAAgBJ,GACxDwD,MAAK,SAAAjF,GACFiL,GAAMC,SZtFX,CACHxN,KvCqC4B,uBuCpC5BC,OYoF0CqC,EAASwH,UAE9CyE,OAAM,SAAAQ,GACHlB,GAAakB,MuBlIbuX,CAAmB9a,EAAMzH,UAAWyH,EAAMrH,YvBmG3B,IAAAA,EuB9FvB,OAAO,GAEXoS,qBAAU,WACN6P,EAAc5a,EAAMrI,gBACrB,CAACqI,EAAMrI,aAAcqI,EAAM1K,QAAS0K,EAAMzH,UAAWyH,EAAMrH,aAE9D,IAAMoiB,EAAgB,kBAClB,oCACI,kBAAC,GAAD,MACA,uBAAGha,UAAU,kBAAkBhC,EAAE,4BAGjCA,EAAMkB,aAAe,UAArBlB,EAER,OAAQiB,EAAMrI,cACV,IAAK,QACD,KACMD,GACGA,EAAc8D,UACuB,IAAlC9D,EAAc8D,SAASwL,UAC9BhH,EAAM5I,QAEP,OAAO2jB,IAEX,IAAMC,EC/De,SAAAtjB,GAC7B,IAAIujB,EAAY,GACZC,EAAW,GACXzhB,EAAQ,GAGN0hB,EAAoB,CACtB,CAAE1N,IAAK,SAAUzJ,MAAO,IACxB,CAAEyJ,IAAK,UAAWzJ,MAAO,IACzB,CAAEyJ,IAAK,YAAazJ,MAAO,IAC3B,CAAEyJ,IAAK,WAAYzJ,MAAO,IAC1B,CAAEyJ,IAAK,SAAUzJ,MAAO,IACxB,CAAEyJ,IAAK,WAAYzJ,MAAO,IAC1B,CAAEyJ,IAAK,SAAUzJ,MAAO,KAEtBoX,EAAmB,CACrB,CAAE3N,IAAK,SAAUzJ,MAAO,IACxB,CAAEyJ,IAAK,UAAWzJ,MAAO,IACzB,CAAEyJ,IAAK,YAAazJ,MAAO,IAC3B,CAAEyJ,IAAK,WAAYzJ,MAAO,IAC1B,CAAEyJ,IAAK,SAAUzJ,MAAO,IACxB,CAAEyJ,IAAK,WAAYzJ,MAAO,IAC1B,CAAEyJ,IAAK,SAAUzJ,MAAO,KAuE5B,OApEItM,EAAc8D,UAAY9D,EAAc8D,SAASwL,OAAS,IAC1DvN,EAAQ/B,EAAc8D,SAAS,GAAG/B,MAClC/B,EAAc8D,SAAS,GAAGqd,KAAKlO,KAAI,SAAA8C,GAC/BA,EAAImI,QAAQjL,KAAI,SAAAxR,GACZgiB,EAAkBxQ,KAAI,SAAA0Q,GACdA,EAAY5N,MAAQA,EAAIA,MACxB4N,EAAYrX,MAAM7K,EAAU6K,MAAMrP,IAAM,CACpCqP,MAAO7K,EAAU6K,MACjBC,KAAM9K,EAAUmiB,MAAM/D,UAKlC6D,EAAiBzQ,KAAI,SAAA4Q,GACbA,EAAW9N,MAAQA,EAAIA,MACvB8N,EAAWvX,MAAM7K,EAAU6K,MAAMrP,IAAM,CACnCqP,MAAO7K,EAAU6K,MACjBC,KAAM9K,EAAUmiB,MAAMjE,gBAQ9C+D,EAAiBzQ,KAAI,SAAA6Q,GACjBA,EAAOxX,MAAM2G,KAAI,SAAC8Q,EAASC,GAClBR,EAAS7L,eAAeqM,KACzBR,EAASQ,GAAa,CAAE1X,MAAOyX,EAAQzX,MAAOqS,MAAO,KAGzD/F,GAAc3F,KAAI,SAAAgR,GACTT,EAASQ,GAAWrF,MAAMhH,eAAesM,KAC1CT,EAASQ,GAAWrF,MAAMsF,GAAU,OAGvB,OAAjBF,EAAQxX,WAAkC4C,IAAjB4U,EAAQxX,MAC7BwX,EAAQxX,KAAKoL,eAAe,oBAC5B6L,EAASQ,GAAWrF,MAAMmF,EAAO/N,KAAO,CACpCxJ,KAAMwX,EAAQxX,aAOlCkX,EAAkBxQ,KAAI,SAAAiR,GAClBA,EAAQ5X,MAAM2G,KAAI,SAACkR,EAAUH,GACpBT,EAAU5L,eAAeqM,KAC1BT,EAAUS,GAAa,CAAE1X,MAAO6X,EAAS7X,MAAOqS,MAAO,KAG3D/F,GAAc3F,KAAI,SAAAgR,GACTV,EAAUS,GAAWrF,MAAMhH,eAAesM,KAC3CV,EAAUS,GAAWrF,MAAMsF,GAAU,OAGvB,OAAlBE,EAAS5X,WAAmC4C,IAAlBgV,EAAS5X,MAC/B4X,EAAS5X,KAAKoL,eAAe,oBAC7B4L,EAAUS,GAAWrF,MAAMuF,EAAQnO,KAAO,CACtCxJ,KAAM4X,EAAS5X,cAM5B,EAEA,CACHnJ,SAAUpD,EAAcoD,SACxBogB,WACAD,YACAxhB,QACAqiB,MAPG,GD5BsBC,CAAkBrkB,GACvC,OAAIsjB,EAAac,MACb5Y,IAAkB,GAEd,oCACI,kBAAC,GAAD,MACA,4BAAK8X,EAAavhB,MAAMwO,OACxB,4BAAKlJ,EAAE,oBACN4W,GACGqF,EAAaE,SACb,EACAF,EAAalgB,UAEjB,4BAAKiE,EAAE,qBACN4W,GACGqF,EAAaC,UACb,EACAD,EAAalgB,YAMzB,oCACI,kBAAC,GAAD,OAIZ,IAAK,UACD,KACMtC,IACGA,EAAgBqgB,MACe,IAAhCrgB,EAAgBqgB,KAAK7R,UACxBhH,EAAM5I,QAEP,OAAO2jB,IAEX,IAAM1mB,ECwEiB,SAAAmE,GAC/B,IAAInE,EAAU,GACV4mB,EAAY,GACZC,EAAW,GACXc,EAAU,GACVC,EAAW,GACXC,EAAa,GACbC,EAAc,GACdL,GAAO,EAkDX,OAhDItjB,GAAmBA,EAAgBqgB,OACnCxkB,EAAUmE,EAAgBnE,QAE1BmE,EAAgBqgB,KAAKlO,KAAI,SAAAyR,GACrBA,EAAW/E,IAAIzB,QAAQjL,KAAI,SAAAoO,GAEnBmD,EAAWlkB,WACP,SAAAqkB,GAAQ,OAAIA,EAAS1nB,KAAOokB,EAAK/U,MAAMrP,MACvC,GAEJunB,EAAWpnB,KAAKikB,EAAK/U,OAErBgY,EAAQ1M,QAAQ8M,EAAW3O,KAAO,GAClCuO,EAAQlnB,KAAKsnB,EAAW3O,KAEtBsL,EAAK/U,MAAMrP,MAAMumB,IACnBA,EAASnC,EAAK/U,MAAMrP,IAAM,IAG9BumB,EAASnC,EAAK/U,MAAMrP,IAAIG,KAAK,CACzB2Y,IAAK2O,EAAW3O,IAChB4I,MAAO0C,EAAK5jB,aAIpBinB,EAAW7E,KAAK3B,QAAQjL,KAAI,SAAAoO,GAEpBoD,EAAYnkB,WACR,SAAAskB,GAAS,OAAIA,EAAU3nB,KAAOokB,EAAK/U,MAAMrP,MACzC,GAEJwnB,EAAYrnB,KAAKikB,EAAK/U,OAEtBiY,EAAS3M,QAAQ8M,EAAW3O,KAAO,GACnCwO,EAASnnB,KAAKsnB,EAAW3O,KAEvBsL,EAAK/U,MAAMrP,MAAMsmB,IACnBA,EAAUlC,EAAK/U,MAAMrP,IAAM,IAG/BsmB,EAAUlC,EAAK/U,MAAMrP,IAAIG,KAAK,CAC1B2Y,IAAK2O,EAAW3O,IAChB4I,MAAO0C,EAAK5jB,gBAIxB2mB,GAAO,GAEJ,CACHA,OACAznB,UACAgjB,IAAK,CACDwB,KAAMmD,EACNpG,QAASsG,EAAW3N,MAAK,SAACC,EAAGC,GAAJ,OACrBD,EAAEjG,UAAYkG,EAAElG,UACV,EACAkG,EAAElG,UAAYiG,EAAEjG,WACf,EACD,KAEV8N,MAAO6E,GAEX3D,KAAM,CACFsB,KAAMoD,EACNrG,QAASuG,EAAY5N,MAAK,SAACC,EAAGC,GAAJ,OACtBD,EAAEjG,UAAYkG,EAAElG,UACV,EACAkG,EAAElG,UAAYiG,EAAEjG,WACf,EACD,KAEV8N,MAAO4E,IDzJSsB,CAAoB/jB,GACpC,OAAInE,EAAQynB,MACR5Y,IAAkB,GAEd,oCACI,kBAAC,GAAD,MACA,4BACK7O,EAAQA,QAAQmoB,SACb,IACAnoB,EAAQA,QAAQ2Z,QAChB,IACA3Z,EAAQA,QAAQoM,KAChB,IACApM,EAAQA,QAAQ2lB,YAExB,4BAAKjb,EAAE,oBACN6Z,GAAgBvkB,EAAQgjB,KACzB,4BAAKtY,EAAE,qBACN6Z,GAAgBvkB,EAAQkjB,QAKjC,oCACI,kBAAC,GAAD,OAIZ,IAAK,OACD,KACM9f,EAAa+D,UACsB,IAAjC/D,EAAa+D,SAASwL,UACzBhH,EAAM5I,QAEP,OAAO2jB,IAEX,IAAMtmB,EClCc,SAAAgD,GAC5B,IAAIglB,EAAc,EACdtE,EAAY,GACZuE,EAAc,IAAIC,IAAI,IACtBC,EAAoB,GACpBd,GAAO,EACP9M,EAAgB,GAChBC,EAAmB,GAmDvB,OAjDIxX,EAAa+D,WACbihB,EAAchlB,EAAa+D,SAASwL,OACpCgI,EAAgBvX,EAAaqD,SAASkU,cACtCC,EAAmBxX,EAAaqD,SAASmU,iBAEzCxX,EAAa+D,SAASmP,KAAI,SAAAlR,GACtB0e,EAAUrjB,KAAK2E,EAAMA,OACrBijB,EAAYG,IAAIpjB,EAAMA,MAAM9E,GAAI,OAEpCwjB,EAAYA,EAAU5J,MAAK,SAACC,EAAGC,GAAJ,OACvBD,EAAEvG,MAAQwG,EAAExG,MAAQ,EAAIwG,EAAExG,MAAQuG,EAAEvG,OAAS,EAAI,KAGrDxQ,EAAaqD,SAASkU,cAAcrE,KAAI,SAAA8C,GACpC,IAAIqP,EAAsB,GAC1BrlB,EAAaqD,SAASmU,iBAAiBtE,KAAI,SAAAxR,GACvC,IAAM+hB,EAAW,GACXD,EAAY,GAClB9C,EAAUtjB,SAAQ,SAACkoB,EAAWtG,GAC1B,IAOMuG,EAPYvlB,EAAa+D,SAASb,MACpC,SAAAsiB,GAAgB,OACZA,EAAiBxjB,MAAM9E,KAAOooB,EAAUpoB,MAEtBkkB,KAAKle,MAC3B,SAAAuiB,GAAc,OAAIA,EAAezP,MAAQA,KAEnBmI,QAAQjb,MAC9B,SAAAwiB,GAAe,OACXA,EAAgBnZ,MAAMrP,KAAOwE,EAAUxE,MAE/CumB,EAASpmB,KAAK,CACV2E,MAAOsjB,EACP9Y,KAAM+Y,EAAU1B,MAAMjE,MAE1B4D,EAAUnmB,KAAK,CACX2E,MAAOsjB,EACP9Y,KAAM+Y,EAAU1B,MAAM/D,UAG9BuF,EAAoBhoB,KAAK,CACrBkP,MAAO7K,EACPkd,MAAO,CAAEgB,IAAK6D,EAAU3D,KAAM0D,QAGtC2B,EAAkB9nB,KAAK,CAAE2Y,MAAKmI,QAASkH,OAE3ChB,GAAO,GAGJ,CACHhhB,SAAUrD,EAAaqD,SACvBU,SAAU/D,EAAa+D,SACvByT,mBACAD,gBACAyN,YAAaA,EACbtE,UAAWA,EACXE,YAAauE,EACbd,QDhCmBsB,CAAiB3lB,GAChC,OAAIhD,EAAOgoB,aAAehoB,EAAOqnB,MAC7B5Y,IAAkB,GAEd,oCACI,kBAAC,GAAD,MACC+U,GAAmBxjB,KAK5B,oCACI,kBAAC,GAAD,OAGZ,QACI,OAAO,kBAAC,GAAD,UE3HJ0X,iBAFS,SAAA/X,GAAK,MAAK,CAAEye,SAAUze,EAAMkH,KAAK3E,QAE1CwV,EApBE,SAAAnM,GAAU,IACfjB,EAAMkB,aAAe,UAArBlB,EASR,OAPAgM,qBAAU,kBAAM0B,OAAqC,IACrD1B,qBAAU,WACF/K,EAAM6S,WAAajG,GAAUG,SAC7B/J,OAEL,IAGC,kBAAC,WAAD,KACI,4BAAKjE,EAAE,eACP,kBAAC,GAAD,CAAmBpH,aAAa,gBCG/B0lB,GAA2B,SAAA/nB,GACpCU,EACKiN,IvD3BiB,UuD2BH,mBAAe3N,IAC7ByG,MAAK,SAAAjF,GACFiL,GAAMC,SCrBP,CACHxN,K9EVyB,oB8EWzBC,ODmBmCqC,EAASwH,OACxC4E,IAAkB,MAErBH,OAAM,SAAAQ,GACHlB,GAAakB,GACbL,IAAkB,OAejBoa,GAAmB,SAAAjR,GAC5BtK,GAAMC,SAASa,aAAMwJ,KAyCnBkR,GAAsB,SAACjf,EAAMkf,GAC/B,OAAOxnB,EACF8F,KvD7FiB,UuD6FAwC,GACjBvC,MAAK,SAAAjF,GACG0mB,GACDzb,GAAMC,SC/FX,CACHxN,K9EJuB,kB8EKvBC,OD6FuCqC,EAASwH,OAE5Cgf,G5BpGe,c4BqGfxb,IACI,EACAM,GACAvF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,6BACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAQ,GACHlB,GAAakB,OAIZka,GAA0B,SAACxZ,EAAM3O,GAC1C,IA5CwBgJ,EA4CpBof,EA7DkB,SAACzZ,EAAM3O,GAC7B,MAAO,CACHX,GAAIsP,EAAK0Z,aACTlkB,MAAO,CACH9E,GAAIW,GAERsoB,MAAO3Z,EAAK2Z,MACZvkB,QAAS,CACL1E,GAAIsP,EAAK5K,SAEb+b,WAAYnR,EAAKzP,KACjBygB,eAAgBhR,EAAKgR,eACrB5gB,QAAS,CAAEM,GAAIsP,EAAK5P,SACpB2gB,eAAgB/Q,EAAK+Q,gBAgDX6I,CAAkB5Z,EAAM3O,GACtC,IrB1C2B,SAAAD,GAC3B,IAAMF,EAAU4M,GAAMI,WAAW9M,OAAOF,QAkBxC,QAhBKE,EAAOV,KAQQQ,EAAQwF,MACpB,SAAAmjB,GAAW,OACPA,EAAYzkB,QAAQ1E,MAAQU,EAAOgE,QAAQ1E,IAC3CmpB,EAAYzpB,QAAQM,MAAQU,EAAOhB,QAAQM,IAC3CmpB,EAAY1I,aAAe/f,EAAO+f,YAClC0I,EAAYnpB,MAAQU,EAAOV,QAZnBQ,EAAQwF,MACpB,SAAAmjB,GAAW,OACPA,EAAYzkB,QAAQ1E,MAAQU,EAAOgE,QAAQ1E,IAC3CmpB,EAAYzpB,QAAQM,MAAQU,EAAOhB,QAAQM,IAC3CmpB,EAAY1I,aAAe/f,EAAO+f,eqBkCzC2I,CAAgBL,GAOjB,OANA5b,IACI,EACAM,GACAvF,GAAKkC,EAAE,6CAEXif,IAAsB,GAGtBN,EAAQ/oB,IAtDY2J,EAuDAof,EAtDjB1nB,EACFkG,IvDxEiB,UuDwEDoC,GAChBvC,MAAK,SAAAjF,GACFiL,GAAMC,SCtCP,CACHxN,K9ElC0B,qB8EmC1BC,ODoCoCqC,EAASwH,OACzC2f,GAAwB,MACxBX,G5B9Ee,c4B+Efxb,IACI,EACAM,GACAvF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,6BACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAQ,GACHlB,GAAakB,OAwCjBga,GAAoBG,GAAS,IAsBxBO,GAA0B,SAAAN,GACnC5b,GAAMC,SCzHC,CACHxN,K9E5B0B,qB8E6B1BC,ODuH4BkpB,KAUvBO,GAAuB,SAAA5oB,GAChCyM,GAAMC,SCtHC,CACHxN,K9ExCuB,kB8EyCvBC,ODoHyBa,KAGpB0oB,GAAwB,SAAAjP,GACjChN,GAAMC,SCnHC,CACHxN,K9E9CwB,mB8E+CxBC,ODiH0Bsa,KEvKrBoP,GACF,QADEA,GAEK,eAFLA,GAGO,iBCmBLC,GAlBS,SAAC,GAKlB,IAJLld,EAII,EAJJA,MACAyI,EAGI,EAHJA,MAGI,IAFJC,KAAQC,EAEJ,EAFIA,QAASwU,EAEb,EAFaA,QAASznB,EAEtB,EAFsBA,MACvBkT,EACC,yCACJ,OACE,kBAACyP,GAAA,EAAD,eACErY,MAAOA,EACPod,YAAapd,EACbtK,MAAOiT,GAAWwU,EAClBE,WAAY1U,GAAWjT,GACnB+S,EACAG,KCAN0U,GAAY,SAAAxe,GAAU,IACdjB,EAAMkB,aAAe,gBAArBlB,EACAwL,EAAiBvK,EAAjBuK,aAEF3T,EAAQoJ,EAAMye,WAEdC,EAAc1e,EAAM0e,YAOtBhjB,EACA,0BAAM8P,SAAUjB,GACZ,kBAACkB,GAAA,EAAD,CACIhL,KAAK,QACLM,UAAU,aACV2K,UAAW0S,GACXld,MAAOnC,EAAE,eACTnI,QAASA,EACT2nB,WAAY3nB,EAAQA,EAAMG,MAAQ,KAClC+J,SAAU,SAAA0D,GAAC,OAdDnE,EAcmBmE,EAAEpE,OAAOC,WAb1CuG,GAASvG,GAAQL,EAAM2e,SAAS/X,GAASvG,IACxCL,EAAM2e,SAAS,OAFF,IAAAte,KAgBd,kBAACoL,GAAA,EAAD,CACIhL,KAAK,WACLM,UAAU,aACVvM,KAAK,WACLkX,UAAW0S,GACXld,MAAOnC,EAAE,kBACTnI,QAASA,EACTkK,SAAU,kBAAMd,EAAM2e,SAAS,SAEnC,kBAAC5S,GAAA,EAAD,CACIhL,UAAU,2BACVvM,KAAK,SACLwX,QAAQ,YACRnL,MAAM,WAEL6d,EAAY,gBAEjB,yBAAK3d,UAAU,cACX,4BACIvM,KAAK,SACLuM,UAAU,YACVkL,QAAS,WACLjM,EAAM4e,eAAeT,IACrBne,EAAM2e,SAAS,QAGlBD,EAAY,eAEjB,4BACIlqB,KAAK,SACLuM,UAAU,YACVkL,QAAS,WACLjM,EAAM4e,eAAeT,IACrBne,EAAM2e,SAAS,QAGlBD,EAAY,sBAU7B,OAJI1e,EAAMmD,YACNzH,EAAO,kBAACge,GAAA,EAAD,OAIP,kBAAC,GAAD,CAAM1V,MAAM,aACR,wBAAIjD,UAAU,cAAc2d,EAAY,qBACvChjB,IASE8iB,GAJfA,GAAYtS,aAAU,CAClBxQ,KhCzFsB,agCwFdwQ,CAETsS,ICjFCK,GAAmB,SAAA7e,GAAU,IACrBjB,EAAMkB,aAAe,gBAArBlB,EACAwL,EAAiBvK,EAAjBuK,aAEFmU,EAAc1e,EAAM0e,YAEpB9nB,EAAQoJ,EAAM8e,kBAEdC,EAAgB,CAAEpT,SAAU,CAAC/E,GAAUzK,KACvC6iB,EAAsBpoB,GAASA,EAAMK,aAAaC,IAClD+nB,EAAwB,CAC1BroB,QAASooB,EACTT,WAAYS,EAAsBpoB,EAAMK,aAAaC,IAAM,IAGzDgoB,EAAmB,CAAEvT,SAAU,CAAC/E,GAAUwC,KAC1C+V,EAAqBvoB,GAASA,EAAMK,aAAamoB,UACjDC,EAA2B,CAC7BzoB,QAASuoB,EACTZ,WAAYY,EAAqBvoB,EAAMK,aAAamoB,UAAY,IAG9DE,EAAyB,CAAE3T,SAAU,CAAC/E,GAAUwC,KAChDmW,EAAiC,CACnC3oB,QAASuoB,GAGTzjB,EACA,0BAAM8P,SAAUjB,GACZ,kBAACkB,GAAA,EAAD,eACIhL,KAAK,QACLM,UAAU,aACVvM,KAAK,QACLkX,UAAW0S,GACXld,MAAOnC,EAAE,gBACHnI,EAAwBqoB,EAAhBF,EANlB,CAOIje,SAAU,SAAA0D,GAAC,OAAIxE,EAAM2e,SAAS,UAElC,kBAAClT,GAAA,EAAD,eACIhL,KAAK,WACLM,UAAU,aACVvM,KAAK,WACLkX,UAAW0S,GACXld,MAAOnC,EAAE,mBACHnI,EAA2ByoB,EAAnBH,EANlB,CAOIpe,SAAU,SAAA0D,GAAC,OAAIxE,EAAM2e,SAAS,UAElC,kBAAClT,GAAA,EAAD,eACIhL,KAAK,iBACLM,UAAU,aACVvM,KAAK,WACLkX,UAAW0S,GACXld,MAAOnC,EAAE,0BACHnI,EAEA2oB,EADAD,IAGV,kBAACvT,GAAA,EAAD,CACIhL,UAAU,gBACVvM,KAAK,SACLwX,QAAQ,YACRnL,MAAM,WAEL6d,EAAY,mBAEjB,yBAAK3d,UAAU,cACX,4BACIvM,KAAK,SACLuM,UAAU,YACVkL,QAAS,WACLjM,EAAM4e,eAAeT,IACrBne,EAAM2e,SAAS,QAGlBD,EAAY,oBAS7B,OAHI1e,EAAMmD,YACNzH,EAAO,kBAACge,GAAA,EAAD,OAGP,kBAAC,GAAD,CAAM1V,MAAM,aACR,wBAAIjD,UAAU,cACTf,EAAM0e,YAAY,4BAEtBhjB,IASEmjB,GAJfA,GAAmB3S,aAAU,CACzBxQ,KjCtG6B,oBiCqGdwQ,CAEhB2S,IC9FCW,GAAoB,SAAAxf,GAAU,IACtBjB,EAAMkB,aAAe,gBAArBlB,EACAwL,EAAiBvK,EAAjBuK,aAEF3T,EAAQoJ,EAAMyf,mBAEdf,EAAc1e,EAAM0e,YAEpBK,EAAgB,CAAEpT,SAAU,CAAC/E,GAAUzK,KAUzCT,EACA,0BAAM8P,SAAUjB,GACZ,kBAACkB,GAAA,EAAD,eACIhL,KAAK,QACLM,UAAU,aACV2K,UAAW0S,GACXld,MAAOnC,EAAE,gBACHnI,GAAQmoB,EALlB,CAMIje,SAAU,SAAA0D,GAhBA,IAAAnE,IAiBQmE,EAAEpE,OAAOC,MAhB/BuG,GAASvG,GACTL,EAAM2e,SAAS/X,GAASvG,IAExBL,EAAM2e,SAAS,UAgBf,kBAAC5S,GAAA,EAAD,CACIhL,UAAU,2BACVvM,KAAK,SACLwX,QAAQ,YACRnL,MAAM,WAEL6d,EAAY,0BAEjB,yBAAK3d,UAAU,cACX,4BACIvM,KAAK,SACLuM,UAAU,YACVkL,QAAS,WACLjM,EAAM4e,eAAeT,IACrBne,EAAM2e,SAAS,QAGlBD,EAAY,uBAU7B,OAJI1e,EAAMmD,YACNzH,EAAO,kBAACge,GAAA,EAAD,OAIP,kBAAC,GAAD,CAAM1V,MAAM,aACR,wBAAIjD,UAAU,cACT2d,EAAY,8BAEhBhjB,IASE8jB,GAJfA,GAAoBtT,aAAU,CAC1BxQ,KlC5E+B,qBkC2EfwQ,CAEjBsT,IC2HYrT,I,OAAAA,cAnBS,SAAA/X,GAAK,MAAK,CAC9B0C,SAAU1C,EAAMkH,KAAKxE,SACrBK,sBAAuB/C,EAAMkH,KAAKnE,sBAClCP,MAAOxC,EAAMkH,KAAK1E,MAClBT,MAAO/B,EAAMkH,KAAKnF,MAClB0c,SAAUze,EAAMkH,KAAK3E,KACrBS,QAAShD,EAAMqH,iBAAiBrE,YAGT,SAAA4K,GACvB,MAAO,CACH0d,OAAQ,SAAAphB,GAAI,OAAI0D,ECrMb,CACHxN,KrFQiB,YqFPjBC,ODmMkC6J,KAClCqhB,WAAY,SAAArhB,GAAI,OAAI0D,EC/LjB,CACHxN,KrFUqB,gBqFTrBC,OD6L0C6J,KAC1CshB,gBAAiB,SAAAthB,GAAI,OAAI0D,ECzLtB,CACHxN,KrFO2B,sBqFN3BC,ODuLoD6J,KACpDgD,WAAY,SAAA6B,GAAS,OAAInB,EAASV,GAAW6B,KAC7Cwb,SAAU,SAAA/nB,GAAK,OAAIoL,ECxJhB,CACHxN,KrFlCsB,iBqFmCtBC,ODsJyCmC,QAIlCuV,EA9KF,SAAAnM,GAAU,IACXjB,EAAMkB,aAAe,UAArBlB,EADU,EAEcqO,mBAAS+Q,IAFvB,oBAEX0B,EAFW,KAEDC,EAFC,KAIZlpB,EAAQoJ,EAAMpJ,MAEpBmU,qBAAU,WAEF8U,IAAa1B,IACbne,EAAMlJ,UACNkJ,EAAMlJ,SAASwH,KAAK+Q,eAAe,aAEnCyQ,EAAY3B,IACZtoB,EAAUkJ,EAAE,iCACZ+C,IAA0B,EAAMM,GAAuBvM,MAE5D,CAACmK,EAAMlJ,WAEViU,qBAAU,WAEF/K,EAAM7I,uBACN6I,EAAM7I,sBAAsBmH,KAAK+Q,eAAe,aAEhDyQ,EAAY3B,IACZtoB,EAAUkJ,EAAE,qCACZ+C,IAA0B,EAAMM,GAAuBvM,MAE5D,CAACmK,EAAM7I,wBAEV,IAqCI4oB,EAAWlqB,EArCTmqB,EAAe,SAAAC,GACZA,EAAU9jB,OAAU8jB,EAAU7W,SAI9B3C,GAAWC,MAAMyC,KAAK8W,EAAU9jB,QAIrC6D,EAAM0f,OAAOO,GACbjgB,EAAMsB,YAAW,GACjBgc,GnCpEkB,cmC+Ddtd,EAAM2e,SAAS,CAAE5nB,MAAOgI,EAAE,8BAJ1BiB,EAAM2e,SAAS,CAAE5nB,MAAOgI,EAAE,mBAoC5BoE,EAAYnD,EAAM5I,SAEnBR,GAASoJ,EAAM6S,WAEhBkN,IADc/f,EAAM7J,MAEpBN,EAAUkJ,EAAE,4BACZ+C,IAA0B,EAAMM,GAAuBvM,IAG3D,IAAMqqB,GAAmBtpB,GAASmpB,IAAc5c,EAE5Cgd,EAAe,KACfD,GAAmBlgB,EAAM6S,WAAajG,GAAUE,QAChDqT,EAAe,kBAAC,KAAD,CAAUjN,GAAIpT,MACtBogB,GAAmBlgB,EAAM6S,UAEzBqN,GAAmBlgB,EAAM6S,WAAajG,GAAUG,WADvDoT,EAAe,kBAAC,KAAD,CAAUjN,GAAIpT,MAKjC,IAIIsgB,EAJEC,EAAwB,SAAAR,GAC1BC,EAAYD,IAKhB,OAAQA,GACJ,KAAK1B,GACDtZ,SAASoD,MAAQlJ,EAAE,oBACnBqhB,EACI,kBAAC,GAAD,CACIjd,UAAWA,EACXsb,WAAY7nB,EACZ4U,SAAUwU,EACVpB,eAAgByB,EAChB3B,YAAa3f,EACb4f,SAAU3e,EAAM2e,WAGxB,MACJ,KAAKR,GACDtZ,SAASoD,MAAQlJ,EAAE,2BACnBqhB,EACI,kBAAC,GAAD,CACIjd,UAAWA,EACX2b,kBAAmBloB,EACnB4U,SAtEY,SAAA8U,GACpBA,EAAiBlX,WAAakX,EAAiBC,gBAMnDvgB,EAAM2f,WAAW,CACbxjB,MAAOmkB,EAAiBnkB,MACxBiN,SAAUkX,EAAiBlX,WAE/BpJ,EAAMsB,YAAW,GACjBgc,GnClFyB,qBmCwErBtd,EAAM2e,SAAS,CACX1nB,aAAc,CAAEmoB,UAAWrgB,EAAE,2BAoEzB6f,eAAgByB,EAChB3B,YAAa3f,EACb4f,SAAU3e,EAAM2e,WAGxB,MACJ,KAAKR,GACDtZ,SAASoD,MAAQlJ,EAAE,6BACnBqhB,EACI,kBAAC,GAAD,CACIjd,UAAWA,EACXsc,mBAAoB7oB,EACpB4U,SApEa,SAAAgV,GACzBxgB,EAAM4f,gBAAgB,CAClBzjB,MAAOqkB,EAAkBrkB,QAE7B6D,EAAMsB,YAAW,GACjBgc,GnCzF2B,sBmCyJfsB,eAAgByB,EAChB3B,YAAa3f,EACb4f,SAAU3e,EAAM2e,WAGxB,MACJ,QACI9Z,SAASoD,MAAQlJ,EAAE,oBACnBqhB,EACI,kBAAC,GAAD,CACIjd,UAAWA,EACXsb,WAAY7nB,EACZ4U,SAAUwU,EACVpB,eAAgByB,EAChB3B,YAAa3f,EACb4f,SAAU3e,EAAM2e,WAKhC,OACI,yBAAK5d,UAAU,aACVof,EACAC,OEzLAtd,GAAW,CACpB2d,OAAQ,SACR1T,QAAS,UACT2T,MAAO,QACPC,MAAO,QACPC,KAAM,OACNC,KAAM,OACNC,QAAS,UACTC,KAAM,OACNC,SAAU,YCTDC,GAAkB,SAACne,EAAU7I,GACxC,MAAM,GAAN,OAAU6I,EAAV,gBAA0B7I,EAA1B,kBC0BIinB,GAAY,SAAAxlB,GAAI,OAAIqG,GAAMC,SAASa,aAAMnH,KAElCylB,GAAqB,SAAA7rB,GAAO,OACrCyM,GAAMC,S7CCC,CACHxN,K3CuCoB,e2CtCpBC,O6CHuBa,KAUlB8rB,GAAuB,WAChCprB,EACKiN,IlEzCgB,UkE0ChBlH,MAAK,SAAAjF,GACFiL,GAAMC,SAASJ,GAAc9K,EAASwH,KAAKiQ,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,UAEjE1L,OAAM,SAAAnM,GAAK,OACRkL,IACI,EACAM,GAFqB,UAGlBxL,EAAME,SAASwH,KAAKzI,cA0B1BwrB,GAAqB,SAAA/iB,GAC9BtI,EACK8F,KlE7EgB,SkE6EAwC,GAChBvC,MAAK,SAAAjF,GACFiL,GAAMC,S7C/DP,CACHxN,K3CkDiB,Y2CjDjBC,O6C6D4BqC,EAASwH,OACjC4iB,GvChFc,YuCiFdpf,IACI,EACAM,GACA6e,GAAgBne,GAAS6d,MAAO1mB,OAGvC8I,OAAM,SAAAnM,GAAK,OACRkL,IACI,EACAM,GAFqB,UAGlBxL,EAAME,SAASwH,KAAKzI,cAK1ByrB,GAAqB,SAAAhjB,GAC9B,OAAOtI,EACFkG,IlElGgB,SkEkGDoC,GACfvC,MAAK,SAAAjF,GACFiL,GAAMC,S7C/DP,CACHxN,K3CiCoB,e2ChCpBC,O6C6D+BqC,EAASwH,OACpC6iB,GAAmB,MACnBI,KACAL,GvCvGc,YuCwGdpf,IACI,EACAM,GACA6e,GAAgBne,GAAS6d,MAAO1mB,OAGvC8I,OAAM,SAAAnM,GAAK,OACRkL,IACI,EACAM,GAFqB,UAGlBxL,EAAME,SAASwH,KAAKzI,cAK1B0rB,GAA2B,WACpCvrB,EACKiN,IlE9F0B,mBkE+F1BlH,MAAK,SAAAsF,GACFU,GAAMC,S7CnHe,SAAAX,GAC7B,MAAO,CACH7M,K3CmG2B,sB2ClG3BC,OAAQ4M,G6CgHWmgB,CAAkBngB,EAAI/C,UAExCyE,OAAM,SAAAnM,GACHkL,IACI,EACAM,GACAvF,GAAKkC,EAAEnI,EAAME,SAASwH,KAAKzI,QAASe,EAAME,SAASwH,KAAKzI,cC7GlEuW,GAAmB,SAAA1Q,GACrBqG,GAAMC,SAASa,aAAMnH,KAGZ+lB,GAAyB,WAClCzrB,EACKiN,InEjBe,SmEkBflH,MAAK,SAAAjF,GACF,IAAIyV,EAAc,GACZC,EAAU1V,EAASwH,KACzB,IAAK,IAAMuN,KAAOW,EACdD,EAAYzX,KAAZ,aACIH,GAAIkX,GACDW,EAAQX,KAGnB9J,GAAMC,SCpBP,CACHxN,K1F2D0B,qB0F1D1BC,ODkBmC8X,OAElCxJ,OAAM,SAAAQ,GACHzB,IACI,EACAM,GACAmB,EAAIzM,SACE+F,GAAKkC,EACPwE,EAAIzM,SAASwH,KAAKzI,QAClB0N,EAAIzM,SAASwH,KAAKzI,SAEhB0N,OAkCTme,GAA0B,WACnC1rB,EACKiN,InE1DyB,kBmE2DzBlH,MAAK,SAAAsF,GACFU,GAAMC,SC9DP,CACHxN,K1FmF0B,qB0FlF1BC,OD4DoC4M,EAAI/C,UAEvCyE,OAAM,SAAAQ,GACHzB,IACI,EACAM,GACAmB,EAAIzM,SACE+F,GAAKkC,EACPwE,EAAIzM,SAASwH,KAAKzI,QAClB0N,EAAIzM,SAASwH,KAAKzI,SAEhB0N,OAehBrH,GAAM,SAAAmL,GACRrR,EACKkG,InExGe,QmEwGDmL,GACdtL,MAAK,SAAAtH,GACFsN,GAAMC,SC9EP,CACHxN,K1FwCuB,kB0FvCvBC,OD4EiCA,EAAO6J,OACpC8N,GxCnHa,WwCoHbsV,KACA5f,IACI,EACAM,GACAvF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,2BACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAQ,GACHzB,IACI,EACAM,GACAmB,EAAIzM,SACE+F,GAAKkC,EACPwE,EAAIzM,SAASwH,KAAKzI,QAClB0N,EAAIzM,SAASwH,KAAKzI,SAEhB0N,OAiCToe,GAAoB,SAAAta,GAC7B,GAAIA,EAAO1S,GAAI,CACX,IAAM0lB,EAAW,CACb1lB,GAAI0S,EAAO1S,GACX8L,KAAM4G,EAAO5G,KACbjM,KAAM,CAAEG,IAAK0S,EAAO7S,KAAM8R,YAAae,EAAOua,kBAElD1lB,GAAIme,OACD,EArCE,SAAAhT,GACTrR,EACK8F,KnErIe,QmEqIAuL,GACftL,MAAK,SAAAsF,GACFU,GAAMC,SC9IP,CACHxN,K1FuEgB,W0FtEhBC,OD4I2B4M,EAAI/C,OAC3B8N,GxChJa,WwCiJbtK,IACI,EACAM,GACAvF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,2BACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAQ,GACHzB,IACI,EACAM,GACAmB,EAAIzM,SACE+F,GAAKkC,EACPwE,EAAIzM,SAASwH,KAAKzI,QAClB0N,EAAIzM,SAASwH,KAAKzI,SAEhB0N,MAmBdzH,CALiB,CACb2E,KAAM4G,EAAO5G,KACbjM,KAAM,CAAEG,IAAK0S,EAAO7S,KAAM8R,YAAae,EAAOua,qBE3E3CC,GAnGD,SAAA7hB,GACV,IAAM5H,EAAc4H,EAAM5H,YAqF1B,OACI,yBACIzD,GAAIqL,EAAMrL,GACVmtB,OAtFK,SAAAtd,GACTA,EAAEud,iBACF,IAAMC,EAAUxd,EAAEyB,aAAagc,QAAQ,WAEjChe,EAAOY,SAASC,eAAekd,GACjC/d,IAAMA,EAAKkB,MAAMI,QAAU,SAE/B,IAAM2c,EAAM1d,EAAEpE,OAAOzL,GAAGwtB,MAAM,KACxB1U,EAAMyU,EAAI,GACVva,EAAUua,EAAI,GACdzR,EAAOyR,EAAI,GAEXjqB,EAAOwM,KAAKC,MAAMT,EAAKU,WAAW,GAAGtE,OACvCoD,EAASxL,EAAKtD,GAEdytB,EAAM,CACNC,SAAUpqB,EAAK5C,OAAOV,GACtBsc,UAAWxD,EAAIlH,cACf+b,UAAW3a,EACXuD,QAASuF,EAAKlK,cACd5N,WAAYqH,EAAMnI,gBAAgBlD,KxC6CE,SAAAsD,GAC5CjC,EACKiN,IACGsf,iCAEItqB,EAAKqqB,SACL,cACArqB,EAAKgZ,UACL,YACAhZ,EAAKiT,QACL,aACAjT,EAAKoqB,SACL,eACApqB,EAAKU,YAEZoD,MAAK,SAAAjF,GACFoM,IAAkB,GAClBnB,GAAMC,SZpEP,CACHxN,KvCemC,8BuCdnCC,OYkE6CqC,EAASwH,UAErDyE,OAAM,SAAAQ,GACHlB,GAAakB,GACbL,IAAkB,MwChEtBsf,CAAiCJ,GACjClf,IAAkB,GACdO,IAAQ2e,EAAG,eAAQA,EAAR,CAAaztB,GAAI8O,KAEhCzD,EAAMyiB,aAAa,CAAExqB,KAAMmqB,EAAK9sB,QAAS2C,EAAK5C,OAAOoE,MAAM9E,KAC3DqL,EAAM0iB,cA4DFC,WAzDS,SAAAne,GACb,IAAMpE,EAASoE,EAAEpE,OACX8D,EAAW9D,EAAOuE,YACZvE,EAAOzL,GAAGwtB,MAAM,KACD,KAGL/pB,GAClBgI,EAAOyF,UAAUC,SAAShC,IAE1B1D,EAAO+E,MAAMC,gBAAkBjE,GAE/Bf,EAAOyF,UAAUC,SAAShC,KAC1BI,EAAS,IAETA,EAAS,GAAGiB,MAAMC,gBAAkBjE,GACpCf,EAAO+E,MAAMC,gBAAkBjE,KAE9B+C,EAAS,IACV9D,EAAOyF,UAAUC,SAAShC,MAE1B1D,EAAO+E,MAAMC,gBAAkBjE,GAC/BqD,EAAEud,mBAoCFa,YAhCU,SAAApe,GACd,IAAMpE,EAASoE,EAAEpE,OACX8D,EAAW9D,EAAOuE,WAClBke,EAASziB,EAAO0iB,YAEV1iB,EAAOzL,GAAGwtB,MAAM,KACD,KAEL/pB,GAAgBgI,EAAOuE,WAAW,GAGpDvE,EAAOyF,UAAUC,SAAShC,KAC1BI,EAAS,IAET9D,EAAO+E,MAAMC,gBAAkBjE,GAC/B+C,EAAS,GAAGiB,MAAMC,gBAAkBjE,IAEpC0hB,GACAA,EAAOhd,UAAUC,SAAShC,KAE1B+e,EAAO1d,MAAMC,gBAAkBjE,GAC/B0hB,EAAOC,WAAW3d,MAAMC,gBAAkBjE,IAE1Cf,EAAO+E,MAAMC,gBAAkBjE,GAd/Bf,EAAO+E,MAAMC,gBAAkBjE,IAwB/BJ,UAAWf,EAAMe,WAEhBf,EAAMkE,WCjCJ6e,GA/DM,SAAA/iB,GACjB,IACIyD,EADApO,EAAS2K,EAAM3K,OAGb4C,EAAO+H,EAAM/H,MAAQ,KACrB8G,EAAIiB,EAAM0e,YACRsE,EAAsBhjB,EAAtBgjB,kBAEJ/qB,IACA5C,EAAS4C,EAAK5C,OACdoO,EAASxL,EAAKtD,IAGlB,IAAMsuB,EAAWjjB,EAAMijB,SAEjBC,EAAU,eAAW7tB,EAAOV,GAAlB,kBAA8BU,EAAOoE,MAAM9E,GAA3C,YAAiDsuB,GAC3DE,EAAY,iBAAa9tB,EAAOV,GAApB,YAA0BU,EAAOoE,MAAM9E,GAAvC,YAA6CsuB,GAE/D,OACI,kBAAC,GAAD,CAAMtuB,GAAIuuB,EAAYlf,MAAOhE,EAAMgE,MAAOM,WAAW,GACjD,2BACI9P,KAAK,SACL6L,MAAOoE,KAAK2e,UAAU,CAClB/tB,OAAQA,EACRV,GAAI8O,MAGXzD,EAAMqjB,QACH,oCACI,yBAAKtiB,UAAU,yBAAyBpM,GAAIwuB,GACxC,kBAAC,KAAD,CACIlb,MAAOlJ,EAAE,+BACTgC,UAAU,qBACVkL,QAAS,kBACLjM,EAAMsjB,WAAW7f,EAAQxL,EAAK5C,OAAOoE,MAAM9E,SAM3D,GAEJ,2BACKquB,EAAkB3tB,EAAO4f,gBAD9B,KAEKlW,EAAE,4BAAD,OAC8B1J,EAAO+f,WAAW1E,cADhD,WAFN,KAOA,2BAAIrb,EAAO2f,gBACVhV,EAAMqjB,QACH,2BACKtkB,EAAE,0BADP,IACkC,2BAAI9G,EAAKod,KAAK5U,OAGhD,2BACI,gCADJ,IACc1B,EAAE,+BC7DnBwkB,GAA2B,SAAAC,GACpC,OAAOA,EAAIC,QAAQ,OAAO,SAAAC,GAAC,OAAIA,EAAEnd,kBCY/B8S,GAAaC,aAAOC,KAAPD,CAAkB,CACjCE,MAAO,UA4FImK,GAzFa,SAAA3jB,GAAU,IAC1BxG,EAAoBwG,EAApBxG,OAAQlE,EAAY0K,EAAZ1K,QAEZH,EAAU6K,EAAM7K,QACdmC,EAAQ0I,EAAM1I,MAEdyH,EAAIiB,EAAM0e,YAWV/E,EAAe,CACjBC,QAASpgB,EACTqgB,eAAgB,SAAAC,GAAM,OAAKA,EAASA,EAAO7R,MAAQ,KAGjD2b,EAAiC,SAAAJ,GACnC,OAAOD,GAAyBC,IAiCpC,OACI,oCACKzkB,EAAE,gCACH,kBAACmb,GAAA,EAAD,iBACQP,EADR,CAEIhlB,GAAG,QACHwlB,eAAa,EACbC,aAAW,EACX/Z,MApDc,SAAA/K,GACtB,OAAIA,EAAgBkE,EAAOmB,MAAK,SAAAlB,GAAK,OAAIA,EAAM9E,KAAOW,KAC1C,GAkDGuuB,CAAkBvuB,GACzBwL,SAAU,SAACX,EAAOka,GAzDJ,IAAA5gB,KA0DQ4gB,IAzDnB6D,GAAqBzkB,EAAM9E,KA2D9B2lB,YAAa,SAAAC,GAAM,OACf,kBAAC,GAAD,iBACQA,EADR,CAEIrZ,MAAOnC,EAAE,4BACToa,OAAO,gBAIlBhkB,EAAQ6R,OAAS,EACd,kBAAC,GAAD,CAAOjG,UAAU,sBACZ5L,EAAQwV,KAAI,SAAAtV,GAAM,OApDf,SAAAA,GAChB,IAAIuoB,EAAQvoB,EAAOuoB,MACbkG,EAAa,GACfC,EAAM,GACNC,EAAkB,EAElB1sB,EAAM0P,OAAS,IACf+c,EAAMzsB,EAAM5C,QAAO,SAAAuD,GAAI,OAAIA,EAAK5C,OAAOV,KAAOU,EAAOV,OAGzDovB,EAAIlvB,SAAQ,WACRmvB,GAAmB,KAGvB,IAAK,IAAIpnB,EAAI,EAAGA,EAAIghB,EAAQoG,EAAiBpnB,IACzCknB,EAAWhvB,KACP,6BAAS+W,IAAKxW,EAAOV,GAAKiI,GACtB,kBAAC,GAAD,CACI7E,MAAO6E,EACPvH,OAAQA,EACR2tB,kBAAmBY,EACnBlF,YAAa3f,EACblG,eAAgBmH,EAAMnH,mBAKtC,OAAOirB,EAyB4BG,CAAY5uB,OAEvCC,EACAyJ,EAAE,oCAEF,K,oBCtFVka,I,OAAYC,cAAW,iBAAO,CAChCgL,UAAW,CACP,IAAK,CACD/K,OAAQ,SACRK,MAAO,WAsMJ2K,GAjMQ,SAAAnkB,GAAU,IAkCDkiB,EAhCxBtU,EAOA5N,EAPA4N,QACAwW,EAMApkB,EANAokB,SACAvW,EAKA7N,EALA6N,KACAjU,EAIAoG,EAJApG,MACArC,EAGAyI,EAHAzI,aACAmnB,EAEA1e,EAFA0e,YACAvb,EACAnD,EADAmD,UARwB,EAUJiK,mBAAS,IAVL,oBAUrBiI,EAVqB,KAUfgP,EAVe,OAWJjX,oBAAS,GAXL,oBAWrBkX,EAXqB,KAWfC,EAXe,KAatB3O,EAAUqD,KA4BVU,EAAe,CACjBC,QAASriB,EAAaqC,OAREsoB,EASE3qB,EAAaqC,MARvCsoB,EAAI3T,MAAK,SAACiW,EAAGC,GACT,OAAOD,IAAMC,EAAI,EAAID,EAAI,GAAK,KAE3BtC,GAMDtoB,EACNigB,eAAgB,SAAAC,GAAM,OAClBA,EACMA,EAAO4K,UACH5K,EAAOrZ,KAAP,YAAmBie,EAAY,oBAA/B,KACA5E,EAAOrZ,KAAP,YAAmBie,EAAY,sBAA/B,KACJ,KAGd,OACI,kBAAC/Q,GAAA,EAAD,CACIgX,sBAAsB,EACtB/W,QAzCY,WAChBA,KAyCIkD,kBAAgB,sBAChBjD,KAAMA,GAELyW,EACG,oCACKnhB,EACG,yBAAKpC,UAAU,4BACX,kBAAC2Y,GAAA,EAAD,OAGJ,oCACI,kBAACkL,GAAA,EAAD,CAAajwB,GAAG,uBACX+pB,EAAY,iCAEjB,yBAAK3d,UAAU,qBACTxJ,EAAastB,oBAOX,GANA,uBAAG9jB,UAAU,wBACR2d,EACG,2CAMVnnB,EAAautB,iBAOX,GANA,uBAAG/jB,UAAU,wBACR2d,EACG,iCACD,MAMf,kBAACxE,GAAA,EAAD,iBACQP,EADR,CAEIhlB,GAAG,QACHwlB,eAAa,EACbC,aAAW,EACXrZ,UAAW6U,EAAQsO,UACnBpjB,SAAU,SAACX,EAAOka,GACdgK,EAAQhK,IAEZC,YAAa,SAAAC,GAAM,OACf,kBAAChB,GAAA,EAAD,iBACQgB,EADR,CAEIrZ,MAAOwd,EACH,2BAEJvF,OAAO,gBAInB,yBAAKpY,UAAU,qBACX,kBAACgL,GAAA,EAAD,CACIhL,UAAU,gBACViL,QAAQ,YACRnL,MAAM,UACNoL,QAAS,WA/FhCoJ,IAGAA,EAAKqP,WACLntB,EAAautB,kBACbvtB,EAAastB,qBAKlBjX,EAAQ,CAAEwW,WAAU/O,SACpBgP,EAAQ,OAJJE,GAAQ,MA0FiB7F,EACG,qCAGR,kBAAC3S,GAAA,EAAD,CACIhL,UAAU,gBACViL,QAAQ,YACRC,QAAS,kBAAM2B,MAEd8Q,EACG,wCAQxB,oCACI,kBAACkG,GAAA,EAAD,CAAajwB,GAAG,uBACZ,uBAAGoM,UAAU,wBACPsU,EAAKqP,UAGD,GAFAhG,EAAY,8BACZ,MAGV,uBAAG3d,UAAU,wBACPxJ,EAAautB,iBAGT,GAFApG,EAAY,iCACZ,MAIV,uBAAG3d,UAAU,wBACPxJ,EAAastB,oBAIT,GAHAnG,EACI,0CACA,MAIbA,EAAY,wBAEjB,yBAAK3d,UAAU,qBACX,kBAACgL,GAAA,EAAD,CACIhL,UAAU,gBACViL,QAAQ,YACRnL,MAAM,UACNoL,QAAS,WACL2B,EAAQ,CAAEwW,WAAU/O,SACpBkP,GAAQ,KAGX7F,EAAY,4BAEjB,kBAAC3S,GAAA,EAAD,CACIhL,UAAU,gBACViL,QAAQ,YACRC,QAAS,kBAAMsY,GAAQ,KAEtB7F,EAAY,+BCiD1BqG,GAjOE,SAAA/kB,GAAU,IACfxG,EAAwBwG,EAAxBxG,OAAQpB,EAAgB4H,EAAhB5H,YADM,EAEEgV,oBAAS,GAFX,oBAEfS,EAFe,KAETgD,EAFS,OAGUzD,mBAAS,MAHnB,oBAGfgX,EAHe,KAGLY,EAHK,KAKhBC,EAAmB,SAAChtB,EAAMod,EAAM/f,GAClC+nB,GAAyB/nB,GACzB4oB,GAAqB5oB,GACjB2C,EAAKtD,IAAI6O,GAA8BvL,EAAKtD,I7CmEhB,SAAAsD,GACpCjC,EACK8F,K7BnFyB,Y6BmFA7D,GACzB8D,MAAK,SAAAjF,GACFuM,QAEHN,OAAM,SAAAQ,GACHlB,GAAakB,M6CxEjB2hB,CAAyB,eAAKjtB,EAAN,CAAYktB,OAAQ9P,EAAK1gB,OAG/CywB,EAAkB,WACpBvU,GAAQ,IAiCNvZ,EAAQ0I,EAAM1I,MAEdO,EAAkBmI,EAAMnI,gBACxBghB,EAAOhhB,EAAgBmX,cACvB4G,EAAU/d,EAAgBoX,iBAE1BlQ,EAAIiB,EAAM0e,YASV2G,EALYnM,aAAW,CACzBzL,IAAK,CACD6X,IAJY,GAIO1P,EAAQ5O,SAGjBiS,GAEZ2K,EAAiC,SAAAJ,GACnC,OAAOD,GAAyBC,IAG9B+B,EAAgC,SAAC9hB,EAAQnO,GAC3CkO,GAA8BC,GAC9B4Z,GAAyB/nB,GACzB4oB,GAAqB5oB,IAGnBkwB,EAAgB,SAACvtB,EAAM5C,EAAQoE,GACjC,MACI,gBACIxB,EAAK5C,OAAOoE,MAAM9E,GADtB,gBAEQsD,EAAKgZ,UAAUP,cAFvB,kBAGIzY,EAAKwtB,OAAO9wB,GAHhB,iBAISsD,EAAKiT,QAAQwF,iBAJtB,gBAKSjX,EAAM9E,GALf,gBAKyBU,EAAOoY,IAAIhN,KALpC,kBAKkDpL,EAAOqwB,YAAY/wB,GALrE,iBAKgFU,EAAOob,OAIzFkV,EAAqB,SAAC1tB,EAAMwB,EAAOpE,GACrC,IAAM4tB,EAAQ,iBAAa5tB,EAAOoY,IAAIhN,KAAxB,kBAAsCpL,EAAOqwB,YAAY/wB,GAAzD,iBAAoEU,EAAOob,MACnFyS,EAAU,eAAWjrB,EAAK5C,OAAOV,GAAvB,kBAAmC8E,EAAM9E,GAAzC,YAA+CsuB,GACzDE,EAAY,iBAAalrB,EAAK5C,OAAOV,GAAzB,YAA+B8E,EAAM9E,GAArC,YAA2CsuB,GAC7Drd,YAAW,WACP,IAAMggB,EAAW/gB,SAASC,eAAeoe,GACnC2C,EAAahhB,SAASC,eAAeqe,GACvC0C,GAAcD,IACdA,EAAS5f,iBAAiB,cAAc,WACpC6f,EAAW1gB,MAAMI,QAAU,WAE/BqgB,EAAS5f,iBAAiB,cAAc,WACpC6f,EAAW1gB,MAAMI,QAAU,aAGpC,MA4BDugB,EAAa,GAqBnB,OApBAjN,EAAKhkB,SAAQ,SAAA4Y,GACTmI,EAAQ/gB,SAAQ,SAAA6wB,GACZ,IAAK,IAAI9oB,EAAI,EAAGA,EAAI,EAAGA,KACdA,EAAI,GAAK,IAAM,EAChBkpB,EAAWhxB,KAAK,CACZ2Y,IAAK,CAAEhN,KAAMgN,EAAIiD,eACjBgV,cACAjV,KAAM,SAGVqV,EAAWhxB,KAAK,CACZ2Y,IAAK,CAAEhN,KAAMgN,EAAIiD,eACjBgV,cACAjV,KAAM,cAQtB,6BAAS1P,UAAU,mBACf,kBAAC,GAAD,CACI2d,YAAa3f,EACbqlB,SAAUA,EACVxqB,MAAOoG,EAAMpG,MACbrC,aAAcyI,EAAMzI,aACpBsW,KAAMA,EACN1K,UAAWnD,EAAMmD,UACjByK,QA7IQ,SAAAvN,GAEhB,GADAwQ,GAAQ,GACJxQ,EAAO,CACP6C,IAAkB,GAClB+hB,EACI5kB,EAAM+jB,SAASnsB,KACfoI,EAAMgV,KACNhV,EAAM+jB,SAAS9uB,SAEnB,IAAMywB,EAAKlhB,SAASC,eAChB,SACIzE,EAAM+jB,SAAS9uB,QACf,QACA+K,EAAM+jB,SAASnsB,KAAKgZ,UAAUP,cAC9B,UACArQ,EAAM+jB,SAASnsB,KAAKqqB,SACpB,SACAjiB,EAAM+jB,SAASnsB,KAAKiT,QAAQwF,eAEpCqV,EAAGC,iBACHpgB,YAAW,WACPmgB,EAAG5gB,MAAMC,gBAAkBjE,KAC5B,KAEHyE,YAAW,WACPmgB,EAAG5gB,MAAMC,gBAAkBjE,KAC5B,SAqHH,2BAAOJ,UAAU,qBACb,6BAASA,UAAU,mBAAnB,kCACC8X,EAAKlO,KAAI,SAAA8C,GAAG,OACT,6BACI1M,UAAU,gCACV8K,IAAK4B,GAEL,6BACI1M,UAAWskB,EAAU5X,IAAM,sBAE1B1O,EAAE,eAAD,OAAgB0O,KAEtB,6BAAS1M,UAAU,iBACd6U,EAAQjL,KAAI,SAAA9R,GAAc,OACvB,6BACIkI,UAAU,sBACV8K,IAAKhT,EAAelE,IAEnBkE,EAAeiP,qBAOvCtO,EAAOmR,KAAI,SAAAlR,GAAK,OACb,6BAASoS,IAAK,SAAWpS,EAAM9E,IAC3B,yBAAKoM,UAAU,mBAAmBpM,GAAE,gBAAW8E,EAAM9E,KAChD8E,EAAMwO,OAEV6d,EAAWnb,KAAI,SAACtV,EAAQ0C,GAAT,OACZ,yBAAK8T,IAAKpS,EAAQ,IAAM1B,EAAOgJ,UAAU,aACrC,kBAAC,GAAD,CACIlJ,gBAAiBA,EACjB4qB,aAAcuC,EACdtC,WAAY0C,EACZhtB,YAAaA,EACbzD,GAAE,gBAAW8E,EAAM9E,GAAjB,gBAA2BU,EAAOoY,IAAIhN,KAAtC,kBAAoDpL,EAAOqwB,YAAY/wB,GAAvE,iBAAkFU,EAAOob,MAC3F1P,UAAS,qBAAgB+C,GAAhB,kBAAmDrK,EAAM9E,GAAzD,oBAET,kBAAC,KAAD,CACIoM,UAAU,YACVkH,MACI,UAAGlJ,EAAE,iCAAL,MAGAA,EAAE,eAAD,OACkB1J,EAAOoY,IAAIhN,KAAK8F,gBACjCmK,cALF,YAMK3R,EAAE,qBANP,MAOAA,EAAE,QAAD,OAAS1J,EAAOob,KAAhB,WAPD,YAQK1R,EAAE,kBARP,MASA1J,EAAOqwB,YAAY5d,aA7GnC,SAACrO,EAAOpE,EAAQ0C,GAAW,IAAD,uBAC1C,YAAiBT,EAAjB,+CAAwB,CAAC,IAAhBW,EAAe,QACpB,GAAIutB,EAAcvtB,EAAM5C,EAAQoE,GAAQ,CACpC,IAAMwpB,EAAQ,iBAAa5tB,EAAOoY,IAAIhN,KAAxB,kBAAsCpL,EAAOqwB,YAAY/wB,GAAzD,iBAAoEU,EAAOob,MAEzF,OADAkV,EAAmB1tB,EAAMwB,EAAOpE,GAE5B,6BACIwW,IAAKpS,EAAM9E,GAAKoD,EAAQE,EAAKtD,GAC7BoM,UAAW+C,IAEX,kBAAC,GAAD,CACIuf,SAAS,EACTJ,SAAUA,EACVjf,MAAOF,GACP7L,KAAMA,EACNqrB,WAAYiC,EACZvC,kBAAmBY,EACnBlF,YAAa3f,OAjBS,mFAgHjBknB,CAAYxsB,EAAOpE,EAAQ0C,cCtH7CoU,I,OAAAA,cAbS,SAAA/X,GAAK,MAAK,CAC9BoF,OAAQpF,EAAMoF,OAAOA,OACrBrE,QAASf,EAAMiB,OAAOF,QACtBG,QAASlB,EAAMiB,OAAOC,QACtB8B,QAAShD,EAAMqH,iBAAiBrE,QAChCC,gBAAiBjD,EAAMqH,iBAAiBpE,gBACxC6uB,cAAe9xB,EAAMoH,SAASlE,MAC9Bc,YAAahE,EAAMoH,SAASpD,YAC5Bb,aAAcnD,EAAMoH,SAASjE,aAC7BM,gBAAiBzD,EAAMoH,SAAS3D,gBAChC+B,MAAOxF,EAAMwF,MAAMA,SAGRuS,EApGM,SAAAnM,GAAU,IACnBjB,EAAMkB,aAAe,UAArBlB,EAER8F,SAASoD,MAAQlJ,EAAE,kBAHO,IAKlBvF,EAAoBwG,EAApBxG,OAAQlE,EAAY0K,EAAZ1K,QAEV8C,EAAc4H,EAAM5H,YAEpB8tB,EAAgBlmB,EAAMkmB,cAExB/wB,EAAU6K,EAAM7K,QAEdgO,EAAYnD,EAAM5I,QAuBxB,OArBA2T,qBAAU,WACN7H,IAAkB,GAClBE,IAA0B,GAC1BC,OACD,IAEH0H,qBAAU,WACNqW,OACD,IAEHrW,qBAAU,WACFzV,IACA4N,IAAkB,GAClBma,GAAyB/nB,MAE9B,CAACA,IAEJyV,qBAAU,kBAAMuB,OAA+B,IAE/CvB,qBAAU,kBAAM0W,OAA0B,IAGtC,oCACI,6BAAS1gB,UAAU,iCACf,6BAASA,UAAU,iBACdf,EAAM3I,gBACH,kBAACqiB,GAAA,EAAD,MAEA,oCACM1Z,EAAMnI,gBAAgBlD,GAKpB,kBAAC,GAAD,CACIkD,gBAAiBmI,EAAMnI,gBACvB2B,OAAQA,EACRpB,YAAaA,EACbd,MAAO4uB,EACPxH,YAAa3f,EACbnF,MAAOoG,EAAMpG,MACbrC,aAAcyI,EAAMzI,aACpB4L,UAAWA,IAZf,wBAAIpC,UAAU,uBACThC,EAAE,0BAiBvB,2BAAOgC,UAAU,oBACZoC,EACG,kBAACuW,GAAA,EAAD,MAEA,kBAAC,GAAD,CACIpiB,MAAO4uB,EACP1sB,OAAQA,EACRrE,QAASA,EACTG,QAASA,EACTopB,YAAa3f,EACblG,eACImH,EAAMnI,gBAAgBoX,qBAM1C,6BAASlO,UAAU,+BACf,4BAAKhC,EAAE,iB,kDCtGVonB,GACH,OADGA,GAEH,OC2EKC,GAhEc,SAAApmB,GAAU,IAC3B4N,EAA8C5N,EAA9C4N,QAASyY,EAAqCrmB,EAArCqmB,WAAYC,EAAyBtmB,EAAzBsmB,OAAQC,EAAiBvmB,EAAjBumB,OAAQ1Y,EAAS7N,EAAT6N,KAM7C,OACI,kBAACF,GAAA,EAAD,CACIgX,sBAAsB,EACtB/W,QAPY,WAChBA,EAAQ0Y,IAOJxV,kBAAgB,uBAChBjD,KAAMA,GAEN,kBAAC+W,GAAA,EAAD,CAAajwB,GAAG,wBACZ,oCACK4xB,EACG,oCACKA,IAAWJ,GACR,oCAAGtpB,GAAKkC,EAAE,gCAEV,oCAAGlC,GAAKkC,EAAE,8BAIlB,oCACKlC,GAAKkC,EAAE,uBAAwB,IAChC,0BAAMgC,UAAU,eACXlE,GAAKkC,EAAE,uBACJ,KAIflC,GAAKkC,EAAE,wBAAyB,CAC7B+D,SAAUjG,GAAKkC,EAAL,uBAAuBsnB,EAAvB,iBAItB,yBAAKtlB,UAAU,qBACX,kBAACgL,GAAA,EAAD,CACIhL,UAAU,gBACViL,QAAQ,YACRnL,MAAM,UACNoL,QAAS,kBAAM2B,EAAQ0Y,KAEtBzpB,GAAKkC,EAAE,4BAEZ,kBAACgN,GAAA,EAAD,CACIhL,UAAU,gBACViL,QAAQ,YACRC,QAAS,kBAAM2B,EAAQ,MAEtB/Q,GAAKkC,EAAE,8BCrDtBka,GAAYC,cAAW,iBAAO,CAChCsN,WAAY,CACR,IAAK,CACDrN,OAAQ,SACRK,MAAO,YAwFJiN,GAnFiB,SAAAzmB,GAAU,IAC9B4N,EAAwD5N,EAAxD4N,QAASvY,EAA+C2K,EAA/C3K,OAAQqpB,EAAuC1e,EAAvC0e,YAAallB,EAA0BwG,EAA1BxG,OAAQlE,EAAkB0K,EAAlB1K,QAASuY,EAAS7N,EAAT6N,KADlB,EAEXT,mBAAS,IAFE,oBAE9B3T,EAF8B,KAEvBitB,EAFuB,OAGXtZ,mBAAS,IAHE,oBAG9BxW,EAH8B,KAGvB+nB,EAHuB,KAK/B/I,EAAUqD,KAiBVU,EAAe,CACjBC,QAASpgB,EACTqgB,eAAgB,SAAAC,GAAM,OAAKA,EAASA,EAAO7R,MAAQ,KAGvD,OACI,kBAAC0F,GAAA,EAAD,CACIgX,sBAAsB,EACtB/W,QAvBY,WAChBA,KAuBIkD,kBAAgB,uBAChBjD,KAAMA,GAEN,kBAAC+W,GAAA,EAAD,CAAajwB,GAAG,uBACX+pB,EAAY,iBAEjB,kBAACxE,GAAA,EAAD,iBACQP,EADR,CAEIhlB,GAAG,QACHwlB,eAAa,EACbC,aAAW,EACXrZ,UAAW6U,EAAQ4Q,WACnB1lB,SAAU,SAACX,EAAOka,GACdqM,EAASrM,GACTsE,EAAS,OAEbrE,YAAa,SAAAC,GAAM,OACf,kBAAChB,GAAA,EAAD,iBACQgB,EADR,CAEIrZ,MAAOwd,EAAY,uBACnB9nB,QAASA,EACT2nB,WAAY3nB,GAAgB,KAC5BuiB,OAAO,gBAInB,yBAAKpY,UAAU,qBACX,kBAACgL,GAAA,EAAD,CACIhL,UAAU,gBACViL,QAAQ,YACRnL,MAAM,UACNoL,QAAS,WAlDhBxS,IAGDA,EAAM9E,KAAOW,EAIjBsY,EAAQ,CAAEvY,SAAQoE,UAHdklB,EAASD,EAAY,gCAgDZA,EAAY,qCAEjB,kBAAC3S,GAAA,EAAD,CACIhL,UAAU,gBACViL,QAAQ,YACRC,QAAS,kBAAM2B,MAEd8Q,EAAY,wCCrE3BzF,GAAYC,cAAW,iBAAO,CAChCyN,YAAa,CACT,IAAK,CACDC,UAAW,SACXzN,OAAQ,aAKhB0N,GAAa,SAAA7mB,GAAU,IACfjB,EAAMkB,aAAe,gBAArBlB,EAEAwL,EAA8CvK,EAA9CuK,aAAcC,EAAgCxK,EAAhCwK,SAAU3H,EAAsB7C,EAAtB6C,MAAO4H,EAAezK,EAAfyK,WAEjCmL,EAAUqD,KAEV5jB,EAAS2K,EAAM3K,OACfgtB,EAAWhtB,EAAOV,GAElBoa,EAAgB/O,EAAM+O,cAEtB5a,EAAW6L,EAAM7L,SAEjBiF,EAAW4G,EAAM5G,SAEjB9D,EAAU0K,EAAM1K,QAEtByV,qBAAU,WACFsX,EACAyE,EAAsBzxB,GAEtB2K,EAAMiL,eAEX,CAACoX,IAEJ,IAAMyE,EAAwB,SAAAzxB,GAC1B2K,EAAMiL,WAAW,CACb0S,aAActoB,EAAOV,GACrBN,QAASgB,EAAOhB,QAAQM,GACxB0E,QAAShE,EAAOgE,QAAQ1E,GACxBH,KAAMa,EAAO+f,WACbwI,MAAOvoB,EAAOuoB,MACd5I,eAAgB3f,EAAO2f,eACvBC,eAAgB5f,EAAO4f,kBAqBzB8R,EAA2B,SAAC1yB,EAAS2yB,GACvC,OAAK3yB,EAED2yB,EAEI3yB,EAAQ2Z,QAAU,IAAM3Z,EAAQoM,KAAO,IAAMpM,EAAQ2lB,WAIrD3lB,EAAQmoB,SACR,IACAnoB,EAAQ2Z,QACR,IACA3Z,EAAQoM,KAAK0hB,MAAM,IAAI,GACvB,IACA9tB,EAAQ2lB,WAAWmI,MAAM,IAAI,GAC7B,IAfa,IAoBzB,OACI,kBAAC,GAAD,CAAMne,MAAM,aACP1O,EACG,wBAAIyL,UAAU,yBACEhC,EAAXsjB,EAAa,aAAkB,gBAC/BtjB,EAAE,iBAGP,GAEHzJ,EACG,0BAAMkW,SAAUjB,GACZ,kBAACkB,GAAA,EAAD,eACI9W,GAAG,UACH8L,KAAK,UACLM,UAAU,aACV2K,UAAWhC,GACXxI,MAAOnC,EAAE,kBACHgQ,EAEA,CAAEnY,MAAOmY,GADT,CAAEpD,SAAU,CAAC/E,KAPvB,CASI9F,SAAU,SAAAX,IA3DU,SAAA5H,GACpC,IAAMlE,EAAUF,EAASwG,MAAK,SAAAtG,GAAO,OAAIA,EAAQM,MAAQ4D,KACzDyH,EAAMsL,OACF,iBACAyb,EAAyB1yB,GAAS,IAwDlB4yB,CAAgC9mB,EAAMC,OAAOC,OAC7C2d,IAAsB,MAG1B,4BAAQ3d,MAAO,KACdlM,EAASwW,KAAI,SAAAtW,GAAO,OACjB,4BAAQwX,IAAKxX,EAAQM,GAAI0L,MAAOhM,EAAQM,IACnCoyB,EAAyB1yB,GAAS,QAI/C,kBAACoX,GAAA,EAAD,eACI9W,GAAG,UACH8L,KAAK,UACLM,UAAU,aACV2K,UAAWhC,GACXxI,MAAOnC,EAAE,kBACHgQ,EAEA,CAAEnY,MAAOmY,GADT,CAAEpD,SAAU,CAAC/E,KAPvB,CASI9F,SAAU,SAAAX,IAxEU,SAAA+mB,GACpC,IAAM7tB,EAAUD,EAASuB,MAAK,SAAAtB,GAAO,OAAIA,EAAQ1E,MAAQuyB,KAEzD,IAAK7tB,EAAS,OAAO2G,EAAMsL,OAAO,iBAAkB,IAEpD,IAAM6b,EAAc9tB,EAAQoH,KAC5BT,EAAMsL,OAAO,iBAAkB6b,GAmEXC,CAAgCjnB,EAAMC,OAAOC,OAC7C2d,IAAsB,MAG1B,4BAAQ3d,MAAO,KACdjH,EAASuR,KAAI,SAAAtR,GAAO,OACjB,4BAAQwS,IAAKxS,EAAQ1E,GAAI0L,MAAOhH,EAAQ1E,IACnC0E,EAAQoH,UAIrB,kBAACgL,GAAA,EAAD,eACI9W,GAAG,OACH8L,KAAK,OACLM,UAAU,aACV2K,UAAWhC,GACXxI,MAAOnC,EAAE,eACHgQ,EAEA,CAAEnY,MAAOmY,GADT,CAAEpD,SAAU,CAAC/E,KAPvB,CASI9F,SAAU,WACNkd,IAAsB,MAG1B,4BAAQ3d,MAAO,KACdL,EAAM5K,YAAYuV,KAAI,SAACyK,EAAYrd,GAAb,OACnB,4BAAQsI,MAAO+U,EAAYvJ,IAAK9T,GAC3BgH,EAAE,4BAAD,OAC8BqW,EAAW1E,cADzC,gBAMd,kBAACjF,GAAA,EAAD,CACI9W,GAAG,QACH8L,KAAK,QACLM,UAAU,aACVvM,KAAK,SACLkX,UAAW0S,GACXld,MAAOnC,EAAE,eACT4M,SAAU,CAAC/E,GAAUE,MAEzB,kBAAC2E,GAAA,EAAD,CACI9W,GAAG,iBACH8L,KAAK,iBACLM,UAAU,aACVsmB,WAAS,EACTC,QAAQ,IACRnO,OAAO,SACPzN,UAAW0S,GACXld,MAAOnC,EAAE,iBAAmBA,EAAE,kBAC9B4M,SAAU,CAAC/E,GAAUK,MAEzB,kBAACwE,GAAA,EAAD,CACI9W,GAAG,iBACH8L,KAAK,iBACLM,UAAU,aACVsmB,WAAS,EACTC,QAAQ,IACRnO,OAAO,SACPzN,UAAW0S,GACXld,MAAOnC,EAAE,iBAAmBA,EAAE,kBAC9B4M,SAAU,CAAC/E,GAAUK,MAEzB,yBAAKlG,UAAU,0BACX,kBAACgL,GAAA,EAAD,CACIhL,UAAU,gBACVvM,KAAK,SACLwX,QAAQ,YACRnL,MAAM,UACN+K,SAAUpB,GAAYC,GAErB1L,EAAE,sBAEP,kBAACgN,GAAA,EAAD,CACIhL,UAAU,gBACVvM,KAAK,SACLwX,QAAQ,YACRJ,SAAUpB,GAAYC,EACtBwB,QAAS,WACLpJ,IACAmb,GAAsB,MACtBhe,EAAMunB,kBAAkB,QAG3BxoB,EAAE,yBAKf,yBAAKgC,UAAW6U,EAAQ+Q,aACpB,4BAAK5nB,EAAE,eAAiB,IAAMA,EAAE,0BASpD8nB,GAAa3a,aAAU,CACnBxQ,KpD5PuB,coD2PdwQ,CAEV2a,IAEY1a,qBANS,SAAA/X,GAAK,MAAK,CAAEiB,OAAQjB,EAAMiB,OAAOA,UAM1C8W,CAAyB0a,ICjMzBW,GAtDK,SAAAxnB,GAChB,IAAM7K,EAAU6K,EAAM7K,QAEhB4J,EAAIiB,EAAM0e,YAMhB,OACI,6BACI,6BAAS3d,UAAU,uBACd5L,EAAQwV,KAAI,SAAAtV,GAAM,OACf,kBAAC,GAAD,CAAM2O,MAAM,YAAY6H,IAAKxW,EAAOV,IAChC,yBAAKoM,UAAU,cACX,kBAAC,KAAD,CACIkH,MAAOlJ,EAAE,eACTgC,UAAU,mBACVkL,QAAS,kBAAMjM,EAAMynB,aAAapyB,MAEtC,kBAAC,KAAD,CACI4S,MAAOlJ,EAAE,iBACTgC,UAAU,mBACVkL,QAAS,kBAAMjM,EAAM0nB,eAAeryB,EAAOV,OAE/C,kBAAC,KAAD,CACIsT,MAAOlJ,EAAE,eACTgC,UAAU,qBACVkL,QAAS,kBAAMjM,EAAM2nB,YAAYtyB,EAAOV,QAGhD,2BAEQU,EAAO4f,eA3BpBwO,QAAQ,OAAO,SAAAC,GAAC,OAAIA,EAAEnd,iBA6BZ,IAJL,IAKKxH,EAAE,4BAAD,OAC8B1J,EAAO+f,WAAW1E,cADhD,WALN,KAUA,2BAAIrb,EAAO2f,gBACX,2BACK,IACD,2BAAI3f,EAAOuoB,OAAW,IACrB7e,EAAE,oCC5BzBmiB,GAAY,SAAAxlB,GACdqG,GAAMC,SAASa,aAAMnH,KAGZksB,GAAyB,WAClC5xB,EACKiN,IjFtBkB,YiFuBlBlH,MAAK,SAAAjF,GACFiL,GAAMC,SAASP,GAAgB3K,EAASwH,UAE3CyE,OAAM,SAAAnM,GACHyL,GAAazL,OAIZixB,GAA4B,WACrC7xB,EACKiN,IjFTmC,2BiFUnClH,MAAK,SAAAjF,GACFiL,GAAMC,SAASP,GAAgB3K,EAASwH,UAE3CyE,OAAM,SAAAnM,GACHyL,GAAazL,OAqCZkxB,GAAuB,SAAAxpB,GAChC,OAAOtI,EACFkG,IjF7EkB,WiF6EDoC,EAAKjK,SACtB0H,MAAK,SAAAjF,GACFiL,GAAMC,S/D/DV,CACNxN,KxCuB4B,iBwCtB5BC,O+D6D2CqC,EAASwH,OACtCxH,EAASwH,KAAKypB,SACdhmB,GAAMC,SAASR,GAAc1K,EAASwH,KAAK3J,KAE/CizB,KACAI,KAEAC,GAAyB,MACzB/G,GtD3FgB,csD4FhBpf,IACI,EACAM,GACAvF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,gCACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAnM,GACHyL,GAAazL,OAIZsxB,GAAuB,SAAA7gB,GAChC,IAAMhT,EAxCU,SAAAA,GAChB,MAAO,CACHA,QAAS,CACLM,GAAIN,EAAQM,GACZ8L,KAAMpM,EAAQoM,KACduN,QAAS3Z,EAAQ2Z,QACjBgM,WAAY3lB,EAAQ2lB,WACpBwC,SAAUnoB,EAAQmoB,WAiCV2L,CAAY9gB,GAExBA,EAAO1S,GACPmzB,GAAqBzzB,GAhEO,SAAAgT,GAChCA,EAAO5M,KAAO,GACdzE,EACK8F,KjF7CkB,WiF6CAuL,GAClBtL,MAAK,SAAAjF,GACFiL,GAAMC,S/DpDV,CACNxN,KxC0CyB,cwCzCzBC,O+DkDoCqC,EAASwH,OACnC4iB,GtDpDgB,csDqDhBpf,IACI,EACAM,GACAvF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,gCACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAnM,GACHyL,GAAazL,MAiDjBwxB,CAAqB/gB,IAwBhB4gB,GAA2B,SAAAI,GACpCtmB,GAAMC,S/D5HF,CACNxN,KxC6B4B,iBwC5B5BC,O+D0HmC4zB,KAGxBL,GAA6B,WACtChyB,EACKiN,IjFxH4B,qBiFyH5BlH,MAAK,SAAAsF,GACFU,GAAMC,S/D9GV,CACNxN,KxCqEmC,wBwCpEnCC,O+D4G6C4M,EAAI/C,UAE1CyE,OAAM,SAAAnM,GACHyL,GAAazL,OClInBsqB,GAAY,SAAAxlB,GAAI,OAAIqG,GAAMC,SAASa,aAAMnH,KAElC4sB,GAAuB,SAAApB,GAAS,OACzCnlB,GAAMC,SCMC,CACHxN,KzG8DsB,iByG7DtBC,ODRyByyB,KAUpBqB,GAAyB,WAClCvyB,EACKiN,IlFxBkB,YkFyBlBlH,MAAK,SAAAjF,GACFiL,GAAMC,SCpCP,CACHxN,KzGyFyB,mByGxFzBC,ODkCmCqC,EAASwH,UAE3CyE,OAAM,SAAAnM,GAAK,OACRkL,IACI,EACAM,GAFqB,UAGlBxL,EAAME,SAASwH,KAAKzI,cA0B1B2yB,GAAuB,SAAAlqB,GAChCtI,EACK8F,KlF5DkB,WkF4DAwC,GAClBvC,MAAK,SAAAjF,GACFiL,GAAMC,SC1DP,CACHxN,KzGyEmB,cyGxEnBC,ODwD8BqC,EAASwH,OACnC4iB,GvDlEgB,cuDmEhBpf,IACI,EACAM,GACA6e,GAAgBne,GAASge,QAAS7mB,OAGzC8I,OAAM,SAAAnM,GAAK,OACRkL,IACI,EACAM,GAFqB,UAGlBxL,EAAME,SAASwH,KAAKzI,cAK1B4yB,GAAuB,SAAAnqB,GAChC,OAAOtI,EACFkG,IlFjFkB,WkFiFDoC,GACjBvC,MAAK,SAAAjF,GACFiL,GAAMC,SC1DP,CACHxN,KzGwDsB,iByGvDtBC,ODwDiCqC,EAASwH,OACtCgqB,GAAqB,MACrBC,KACAG,KACAxH,GvD1FgB,cuD2FhBpf,IACI,EACAM,GACA6e,GAAgBne,GAASge,QAAS7mB,OAGzC8I,OAAM,SAAAnM,GAAK,OACRkL,IACI,EACAM,GAFqB,UAGlBxL,EAAME,SAASwH,KAAKzI,cAK1B6yB,GAA6B,WACtC1yB,EACKiN,IlFxF4B,qBkFyF5BlH,MAAK,SAAAsF,GACFU,GAAMC,SC/GiB,SAAAX,GAC/B,MAAO,CACH7M,KzGqG6B,wByGpG7BC,OAAQ4M,GD4GWsnB,CAAoBtnB,EAAI/C,UAE1CyE,OAAM,SAAAnM,GACHkL,IACI,EACAM,GACAvF,GAAKkC,EAAEnI,EAAME,SAASwH,KAAKzI,QAASe,EAAME,SAASwH,KAAKzI,cE3FlEwjB,I,OAAaC,aAAOC,KAAPD,CAAkB,CACjC/T,QAAS,eACTiU,MAAO,WAgMIrN,iBAXS,SAAA/X,GAAK,MAAK,CAC9Be,QAASf,EAAMiB,OAAOF,QACtBC,YAAahB,EAAMiB,OAAOD,YAC1BE,QAASlB,EAAMiB,OAAOC,QACtByZ,cAAe3a,EAAMiB,OAAOE,YAC5BpB,SAAUC,EAAMD,SAASA,SACzBqF,OAAQpF,EAAMoF,OAAOA,OACrBJ,SAAUhF,EAAMgF,SAASA,SACzBhC,QAAShD,EAAMqH,iBAAiBrE,WAGrB+U,EA7LI,SAAAnM,GAAU,IACjBjB,EAAMkB,aAAe,UAArBlB,EADgB,EAGAqO,oBAAS,GAHT,oBAGjBS,EAHiB,KAGXgD,EAHW,OAIgCzD,oBAAS,GAJzC,oBAIjBwb,EAJiB,KAIKC,EAJL,OAKQxW,IAAMjF,UAAU,GALxB,oBAKjBiV,EALiB,KAKPyG,EALO,OAMgBzW,IAAMjF,UAAU,GANhC,oBAMjB2b,EANiB,KAMHC,EANG,KAQlB70B,EAAW6L,EAAM7L,SAEjB4a,EAAgB/O,EAAM+O,cAEtB5Z,EAAU6K,EAAM7K,QAChB8zB,EAAe9zB,EAAQ6R,OAEvB7D,EAAYnD,EAAM5I,QAEhBoC,EAAoBwG,EAApBxG,OAAQlE,EAAY0K,EAAZ1K,QAEV8D,EAAW4G,EAAM5G,SAEvB2R,qBAAU,WACFzV,IACA4N,IAAkB,GAClBma,GAAyB/nB,MAE9B,CAACA,IACJyV,qBAAU,kBAAM6c,OAA0B,IAC1C7c,qBAAU,W7B3BV/U,EACKiN,IvDvCuB,iBuDwCvBlH,MAAK,SAAAjF,GACFiL,GAAMC,SC3BP,CACHxN,K9EhBwB,mB8EiBxBC,ODyBkCqC,EAASwH,UAE1CyE,OAAM,SAAAQ,GACHlB,GAAakB,Q6BqBoB,IACzCwH,qBAAU,kBAAMqW,OAAwB,IACxCrW,qBAAU,WACNwd,OACD,IAEH,IAOMW,EAA0B,SAAAvL,GAC5BM,GAAwBN,IAoCtBhE,EAAe,CACjBC,QAASpgB,EACTqgB,eAAgB,SAAAC,GAAM,OAAKA,EAASA,EAAO7R,MAAQ,KAYnDkhB,EACA,oCACKF,EAAe,EACZ,kBAAC,GAAD,CACI9zB,QAASA,EACTwyB,YA5CQ,SAAAtF,GACpByG,EAAYzG,GACZxR,GAAQ,IA2CI6W,eAAgBwB,EAChBzB,aAlCmB,SAAApyB,GAC/B2zB,EAAgB3zB,GAChBwzB,GAAwB,IAiCZnK,YAAa3f,IAGjB,6BAASgC,UAAU,sBACf,4BAvDI,SAACvH,EAAQlE,GACzB,OAAOkE,EAAOmB,MAAK,SAAAlB,GAAK,OAAIA,EAAM9E,MAAQW,KAuDzB8zB,CAAY5vB,EAAQlE,GACfyJ,EAAE,oCA7DH,SAACvF,EAAQlE,GAC9B,OAAOkE,EAAOmB,MAAK,SAAAlB,GAAK,OAAIA,EAAM9E,MAAQW,KAAS2S,MA6D7BohB,CAAiB7vB,EAAQlE,GACzB,MAe1B,OARI6N,IACAgmB,EACI,6BAASpoB,UAAU,sBACf,kBAAC2Y,GAAA,EAAD,QAMR,oCACI,kBAAC,GAAD,CAAM1V,MAAM,0BACR,kBAAC,GAAD,CACI6J,KAAM+a,EACNhb,QA1DoB,SAAA0b,GAChCT,GAAwB,GAEnBS,G7B0CwB,SAAAA,GACjC,IAAMj0B,EAASi0B,EAAej0B,OAC9BA,EAAOoE,MAAQ6vB,EAAe7vB,MAC9BpE,EAAOV,GAAK,KACZ4oB,GAAoBloB,GAAQ,G6B5CxBk0B,CAAsBD,IAsDVh0B,QAASA,EACTD,OAAQ0zB,EACRvvB,OAAQA,EACRklB,YAAa3f,IAEjB,kBAAC,GAAD,CACIunB,OAAQjE,EACRgE,WAAYvjB,GAAS2d,OAAO/P,cAC5B7C,KAAMA,EACND,QAhFI,SAAAyU,G7BkCe,IAAA1E,G6BjC/B9M,GAAQ,GACHwR,K7BgC0B1E,E6B9BP0E,E7B+B5BrsB,EACK0N,OvDpIiB,UuDoIA,WAAOia,IACxB5hB,MAAK,SAAAsF,GACFU,GAAMC,SCjHc,SAAAX,GAC5B,MAAO,CACH7M,K9EtB0B,qB8EuB1BC,OAAQ4M,GD8GWmoB,CAAiB7L,IAChC7b,IACI,EACAM,GACAvF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,6BACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAQ,GACHlB,GAAakB,U6BiCT,yBAAKxC,UAAU,qBACX,wBAAIA,UAAU,iBACThC,EAAE,2BAEP,kBAACmb,GAAA,EAAD,iBACQP,EADR,CAEIhlB,GAAG,QACHwlB,eAAa,EACbC,aAAW,EACX/Z,MA9DM,SAAA/K,GACtB,OAAIA,EAAgBkE,EAAOmB,MAAK,SAAAlB,GAAK,OAAIA,EAAM9E,KAAOW,KAC1C,GA4DWuuB,CAAkBvuB,GACzBwL,SAAU,SAACX,EAAOka,GAnEZ,IAAA5gB,KAoEgB4gB,IAnE3B6D,GAAqBzkB,EAAM9E,KAqEtB2lB,YAAa,SAAAC,GAAM,OACf,kBAAC,GAAD,iBACQA,EADR,CAEIrZ,MAAOnC,EAAE,4BACToa,OAAO,kBAM3B,yBAAKpY,UAAU,mBACX,kBAAC,GAAD,CACI3L,YAAa4K,EAAM5K,YACnB2Z,cAAeA,EACfzZ,QAASA,EACT8D,SAAUA,EACVjF,SAAUA,EACVqX,SAxIgB,SAAAvH,GACK,IAA7BkL,OAAOsa,KAAKxlB,GAAM+C,QAAgB/C,EAAKylB,cAAgBva,QAG3DsO,GAAwBxZ,EAAM3O,IAqIlBiyB,kBAAmB2B,IAEtBC,OCpMXQ,I,OAAYrQ,aAAOvN,KAAPuN,CAAe,CAC7BsQ,UAAW,UAGXC,GAAa,SAAA7pB,GAAU,IACfjB,EAAMkB,aAAe,gBAArBlB,EACAwL,EAA8CvK,EAA9CuK,aAAcC,EAAgCxK,EAAhCwK,SAAUC,EAAsBzK,EAAtByK,WAAY5H,EAAU7C,EAAV6C,MAEtCxO,EAAU2L,EAAM3L,QAChBkE,EAAYlE,EAAQM,GAE1BoW,qBAAU,WACFxS,EACAuuB,EAAsBzyB,GAEtB2L,EAAMiL,eAEX,CAAC1S,IAEJ,IAAMuuB,EAAwB,SAAAzyB,GAC1B2L,EAAMiL,WAAW,CACbtW,GAAIN,EAAQM,GACZqZ,QAAS3Z,EAAQ2Z,QACjBvN,KAAMpM,EAAQoM,KACduZ,WAAY3lB,EAAQ2lB,WACpBwC,SAAUnoB,EAAQmoB,YAI1B,OACI,kBAAC,GAAD,CAAMxY,MAAM,0BACR,0BAAMjD,UAAU,0BAA0ByK,SAAUjB,GAChD,wBAAIxJ,UAAU,cACGhC,EAAZxG,EAAc,aAAkB,gBAAiB,IACjDwG,EAAE,oBAGP,kBAAC0M,GAAA,EAAD,CACI1K,UAAU,aACVN,KAAK,UACL9L,GAAG,UACH+W,UAAW0S,GACX5pB,KAAK,OACL8pB,YAAavf,EAAE,mBACfmC,MAAOnC,EAAE,mBACT4M,SAAU,CAAC/E,MAGf,kBAAC6E,GAAA,EAAD,CACI1K,UAAU,aACVN,KAAK,OACL9L,GAAG,OACH+W,UAAW0S,GACX5pB,KAAK,OACL8pB,YAAavf,EAAE,sBACfmC,MAAOnC,EAAE,sBACT4M,SAAU,CAAC/E,MAGf,kBAAC6E,GAAA,EAAD,CACI1K,UAAU,aACVN,KAAK,aACL9L,GAAG,aACH+W,UAAW0S,GACX5pB,KAAK,OACL8pB,YAAavf,EAAE,sBACfmC,MAAOnC,EAAE,sBACT4M,SAAU,CAAC/E,MAGf,kBAAC6E,GAAA,EAAD,CACI1K,UAAU,aACVN,KAAK,WACL9L,GAAG,WACH+W,UAAW0S,GACX5pB,KAAK,OACL8pB,YAAavf,EAAE,oBACfmC,MAAOnC,EAAE,oBACT4M,SAAU,CAAC/E,MAGf,yBAAK7F,UAAU,0BACX,kBAAC4oB,GAAD,CACI5oB,UAAU,gBACViL,QAAQ,YACRnL,MAAM,UACN+K,SAAUpB,GAAYC,EACtBjW,KAAK,UAEJuK,EAAE,sBAEP,kBAAC4qB,GAAD,CACI5oB,UAAU,gBACViL,QAAQ,YACRJ,SAAUpB,GAAYC,EACtBwB,QAAS,WACLpJ,IACA7C,EAAMunB,kBAAkB,QAG3BxoB,EAAE,2BAU3B8qB,GAAa3d,aAAU,CACnBxQ,K1D3HwB,c0D0HfwQ,CAEV2d,IAEY1d,qBANS,SAAA/X,GAAK,MAAK,CAAEC,QAASD,EAAMD,SAASE,WAM7C8X,CAAyB0d,ICnI3BC,I,OAAS,SAACxyB,EAAOyyB,EAAM7H,GAEhC,OAAoB,IAAhB6H,EAAK/iB,OAAqB1P,EAEvBA,EAAM5C,QAAQ,SAAAuD,GACjB,IAAK,IAAI2E,EAAI,EAAGA,EAAIslB,EAAIlb,OAAQpK,IAC5B,GAAIotB,OAAO/xB,EAAKiqB,EAAItlB,KAAK8T,cAAcpB,QAAQya,EAAKrZ,gBAAkB,EAAG,OAAO,EAEpF,OAAO,O,4BCiDAuZ,GA/CK,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aACzBprB,EAAMkB,aAAe,gBAArBlB,EAD4C,EAE5BqO,mBAAS,IAFmB,oBAE7C2c,EAF6C,KAEvCK,EAFuC,OAI1B/X,IAAMjF,SAAS,CACrCid,UAAU,IALsC,oBAI7Cj2B,EAJ6C,KAItCk2B,EAJsC,KAmBpD,OACI,kBAAC,GAAD,CAAMtmB,MAAM,gBACR,kBAACtD,GAAA,EAAD,CACIC,QACI,kBAAC4pB,GAAA,EAAD,CACIC,QAASp2B,EAAMi2B,SACfvpB,SAjBC,SAAAX,GACjBmqB,EAAS,eAAKl2B,EAAN,gBAAc+L,EAAMC,OAAOK,KAAON,EAAMC,OAAOoqB,WACvDL,KAgBgB1pB,KAAK,WACLI,MAAM,YAGdK,MACK9M,EAAMi2B,SAEDtrB,EAAE,uBADFA,EAAE,0BAIhB,kBAACwa,GAAA,EAAD,CACIxY,UAAU,aACVG,MAAO,kBAAC,KAAD,MACPod,YAAavf,EAAE,kBACfsB,MAAO0pB,EACPjpB,SA5BW,SAAA0D,GACnB,IAAMulB,EAAOvlB,EAAEpE,OAAOC,MACtB+pB,EAAQL,GACRG,EAAaH,QCPNU,I,OAbE,SAAC,GAAY,IAAXhqB,EAAU,EAAVA,KACR1B,EAAKkB,aAAe,gBAApBlB,EAEP,OACI,yBAAKgC,UAAU,sBACX,6BACI,kBAAC,KAAD,CAAUA,UAAU,qBAExB,uBAAGA,UAAU,mBAAmBhC,EAAE,eAAlC,IAAmD0B,M,UCyOhD0L,iBAPS,SAAA/X,GAAK,MAAK,CAC9BD,SAAUC,EAAMD,SAASA,SACzBG,iBAAkBF,EAAMD,SAASG,iBACjCuE,eAAgBzE,EAAMwE,aAAaC,eACnCqU,cAAe9Y,EAAMmG,aAAaC,UAGE,GAAzB2R,EAnNK,SAAAnM,GAAU,IAClBjB,EAAMkB,aAAe,UAArBlB,EADiB,EAGDqO,oBAAS,GAHR,oBAGlBS,EAHkB,KAGZgD,EAHY,OAIazD,qBAJb,oBAIlBib,EAJkB,KAIHqC,EAJG,OAKDtd,mBAAS,IALR,oBAKlB2c,EALkB,KAKZK,EALY,OAMOhd,oBAAS,GANhB,oBAMlBxB,EANkB,KAMR+e,EANQ,OAOWvd,mBAAS,MAPpB,oBAOlBwd,EAPkB,KAONC,EAPM,KASzB9f,qBAAU,kBAAM6c,OAA0B,IAC1C7c,qBAAU,kBAAMid,OAA8B,IAC9Cjd,qBAAU,kBAAM0B,OAAqC,IAErD,IAAMtY,EAAW6L,EAAM7L,SACjBG,EAAmB0L,EAAM1L,iBACzBw2B,EAAgBlf,EAAWtX,EAAiB0S,OAAS7S,EAAS6S,OAM9D+jB,EAAoB,SAAA1C,GACtBJ,GAAyBI,IAGvB2C,EAAoB,SAAAr2B,IR4DU,SAAAA,GACpCqB,EACK0N,OjFlHkB,WiFkHA,WAAO/O,IACzBoH,MAAK,SAAAjF,GACFiL,GAAMC,SAASR,GAAc7M,IAC7BqzB,KACAlmB,IACI,EACAM,GACAvF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,gCACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAnM,GACHyL,GAAazL,MQ3EjBq0B,CAAyBt2B,IAGvBywB,EAAkB,SAAAiD,GACpBqC,EAAarC,GACbxX,GAAQ,IA/Ba,EAyDOzD,oBAAS,GAzDhB,oBAyDlBD,EAzDkB,KAyDRwF,EAzDQ,OA0DKvF,mBAAS,GA1Dd,oBA0DlB/Y,EA1DkB,KA0DTue,EA1DS,KA4DnBE,EAAsB,SAAAze,G/DtED,IAAA62B,E+DuEvBtY,EAAWve,G/DvEY62B,E+DwEP72B,EAAQM,G/DvE5BqB,EACKiN,I1BZqB,kB0BarBlH,MAAK,SAAAjF,GACF,IACMq0B,EADcr0B,EAASwH,KACM3D,MAAK,SAAAyT,GACpC,OAAO8c,KAAY9c,EAAY/Z,QAAQM,MAG3C4N,GAAkB4oB,EAClBppB,GAAMC,SAASN,GAAcypB,EAAevoB,uBAE/CG,OAAM,SAAAnM,GACHyL,GAAazL,M+D4DjB+b,GAAY,IAOVyY,EACAtB,GADele,EACRtX,EACAH,EADkB41B,EAAM,CAAC,OAAQ,UAAW,eAWnDsB,EAAoB,SAAA7H,GACtB,OAAOA,EAAI8H,OAAO,GAAG/kB,cAAgBid,EAAI9mB,MAAM,IAGnD,OACI,yBAAKqE,UAAU,mBACX,kBAAC,GAAD,CACIulB,OAAQ+B,EACRhC,WAAYvjB,GAASiK,QACrBc,KAAMA,EACN0Y,OAAQqE,EACRhd,QA3DQ,SAAAya,GAEhB,GADAxX,GAAQ,GACHwX,EAAL,CAGA,GAAIuC,EACA,GAAIhf,GRqFyB,SAAAvX,GACrCA,EAAQ0zB,SAAU,EAClBD,GAAqB,CAAEzzB,YQnFXk3B,CAHgBj3B,EAAiBqG,MAC7B,SAAAtG,GAAO,OAAIA,EAAQM,KAAO0zB,WR8EJ,SAAAh0B,GACtCA,EAAQ0zB,SAAU,EAClBD,GAAqB,CAAEzzB,YQzEXm3B,CAHgBr3B,EAASwG,MACrB,SAAAtG,GAAO,OAAIA,EAAQM,KAAO0zB,WAKlC2C,EAAkB3C,GAEtBwC,EAAc,UA0CV,kBAAC,GAAD,CACI1d,SAAUA,EACVF,YAhCY,SAAA5M,GACpBsS,GAAY,IAgCJte,QAASA,EACT6Y,cAAelN,EAAMkN,cACrBrU,eAAgBmH,EAAMnH,iBAG1B,2BAAOkI,UAAU,0BACb,kBAAC,GAAD,CACImpB,aAhCK,SAAAH,GACjBK,EAAQL,IAgCII,aA7BW,WACvBQ,GAAa/e,MA8BJA,EACG,GAEA,kBAAC,GAAD,CACIzX,SAAUA,EACVqX,SAjGE,SAAAnE,GAClB6gB,GAAqB7gB,IAiGLkgB,kBAAmBwD,KAK/B,6BAAShqB,UAAU,uBACU,IAAxBqqB,EAAapkB,QACV,kBAAC,GAAD,CAAUvG,KAAM1B,EAAE,kCAErB+rB,EAAgB,EACbM,EAAazgB,KAAI,SAACtW,EAAS0D,GAAV,OACb,kBAAC,GAAD,eACI8T,IAAK9T,GACD1D,EAFR,CAGI2P,MAAM,2BAEN,yBAAKjD,UAAU,cACT6K,EAqBE,kBAAC,KAAD,CACI7K,UAAU,mBACVkH,MAAOlJ,EAAE,sBACTkN,QAAS,WACL4e,EAAc1E,IACdf,EAAgB/wB,EAAQM,OAzBhC,oCACI,kBAAC,KAAD,CACIoM,UAAU,mBACVkH,MAAOlJ,EAAE,uBACTkN,QAAS,WACL4e,EACI1E,IAEJf,EAAgB/wB,EAAQM,OAGhC,kBAAC,KAAD,CACIoM,UAAU,mBACVkH,MAAOlJ,EAAE,2BACTkN,QAAS,kBACL8e,EAAkB12B,EAAQM,QAc1C,kBAAC,KAAD,CACIoM,UAAU,qBACVkH,MAAOlJ,EAAE,6BACTkN,QAAS,kBAAMmZ,EAAgB/wB,EAAQM,QAI/C,uBAAGoM,UAAU,oBACRhC,EAAE,0BAEP,wBAAIgC,UAAU,qBACTsqB,EAAkBh3B,EAAQ2Z,SAAU,IACpCqd,EAAkBh3B,EAAQoM,MAAO,IACjC4qB,EAAkBh3B,EAAQ2lB,aAE/B,uBAAGjZ,UAAU,oBACRhC,EAAE,0BAEP,uBAAGgC,UAAU,sBACR1M,EAAQmoB,UAEb,yBAAKzb,UAAU,sBACX,kBAACgL,GAAA,EAAD,CACIhL,UAAU,cACViL,QAAQ,YACRnL,MAAM,UACNoL,QAAS,WACL6G,EAAoBze,KAGvB0K,EAAE,2BAMnB,4BAAKA,EAAE,+B,sCC/MZ0sB,GAtBU,SAAC,GAKnB,IAJLvqB,EAII,EAJJA,MAII,IAHJyI,MAAStJ,EAGL,EAHKA,MAAUqrB,EAGf,8BAFJ9hB,KAAQC,EAEJ,EAFIA,QAASwU,EAEb,EAFaA,QAASznB,EAEtB,EAFsBA,MACvBkT,EACC,yCACJ,OACE,kBAAC,KAAD,CAAyB6hB,MAAOC,MAC9B,kBAACC,GAAA,EAAD,eACEC,WAAS,EACTC,MAAM,EACN1rB,MAAOA,EAAQiH,GAAOjH,EAAO,SAASkH,SAAW,KACjD3Q,MAAOiT,GAAWwU,EAClBE,WAAY1U,GAAWjT,EAAQiT,GAAWjT,EAAQsK,EAClD8qB,OAAO,SACHN,EACA5hB,MCONmP,GAAYC,cAAW,SAAApH,GAAK,MAAK,CACnCma,UAAW,CACPzS,MAAO,YA8FArN,iBAJS,SAAA/X,GAAK,MAAK,CAC9B0E,iBAAkB1E,EAAMwE,aAAaE,oBAG1BqT,CACXD,aAAU,CACNxQ,KhExHkB,agEuHtBwQ,EA3FgB,SAAAlM,GAAU,IAClBjB,EAAMkB,aAAe,gBAArBlB,EACAwL,EAAgDvK,EAAhDuK,aAAcC,EAAkCxK,EAAlCwK,SAAUgG,EAAwBxQ,EAAxBwQ,QAAS/F,EAAezK,EAAfyK,WACzBwO,KAEhBlO,qBAAU,WACN,IAAImhB,EAAgB,GAChBlsB,EAAMlH,mBACNozB,EAAgBlsB,EAAMlH,kBAE1BkH,EAAMiL,WAAWihB,KAClB,CAAClsB,EAAMlH,mBAQV,OACI,kBAAC,GAAD,CAAMkL,MAAM,aACR,wBAAIjD,UAAU,cACTf,EAAMlH,iBAAiBnE,GAClBoK,EAAE,cACFA,EAAE,gBAAiB,IACxBA,EAAE,kBAEP,0BAAMyM,SAAUjB,GACZ,kBAACkB,GAAA,EAAD,CACIC,UAAW0S,GACXrd,UAAU,aACVN,KAAK,aACL9L,GAAG,aACHuM,MAAOnC,EAAE,eACTvK,KAAK,OACLmX,SAAU,CAAC/E,GAAUc,MAEzB,yBAAK3G,UAAU,mBACX,kBAAC0K,GAAA,EAAD,CACIC,UAAW+f,GACX1qB,UAAU,aACVN,KAAK,YACLS,MAAOnC,EAAE,oBACTvK,KAAK,OACLmX,SAAU,CAAC/E,GAAUM,GAAcoB,IACnCxH,SAAU,SAACX,EAAOE,GAhCnB,IAAAkI,EAiCSlI,IAjCTkI,EAkCoBlI,EAjCnCL,EAAMsL,OACF,UACAhE,GAAOiB,EAAW,SAAS4jB,IClDT,iCDkD6B,KAAKH,OAAO,cAmCnD,kBAACvgB,GAAA,EAAD,CACIC,UAAW+f,GACX1qB,UAAU,aACVN,KAAK,UACLS,MAAOnC,EAAE,kBACTvK,KAAK,OACLmX,SAAU,CAAC/E,GAAUa,GAAiBa,OAI9C,yBAAKvH,UAAU,0BACX,kBAACgL,GAAA,EAAD,CACIhL,UAAU,gBACVvM,KAAK,SACLwX,QAAQ,YACRnL,MAAM,UACN+K,SAAUpB,GAAYC,GAErB1L,EAAE,sBAEP,kBAACgN,GAAA,EAAD,CACIhL,UAAU,gBACVvM,KAAK,SACLwX,QAAQ,YACRJ,SAAUpB,GAAYC,EACtBwB,QAASuE,GAERzR,EAAE,8BENZoN,iBALS,SAAA/X,GAAK,MAAK,CAC9ByE,eAAgBzE,EAAMwE,aAAaC,eACnCuzB,iBAAkBh4B,EAAMwE,aAAaE,oBAGD,GAAzBqT,EAnFc,SAAAnM,GAAU,IAC3BjB,EAAMkB,aAAe,gBAArBlB,EAD0B,EAEVqO,oBAAS,GAFC,oBAE3BS,EAF2B,KAErBgD,EAFqB,OAGJwB,IAAMjF,UAAU,GAHZ,oBAG3BzF,EAH2B,KAGlB0kB,EAHkB,KAIlCthB,qBAAU,kBAAMuB,OAA+B,IAE/C,IAUMggB,EAAa,SAAA3kB,IrD8DmB,SAAAA,GACtC5F,GAAMC,SpBtF6C,CACrDxN,K1C8CoC,yB0C7CpCuE,gBoBoFqC4O,IqD9D/B4kB,CAA2B5kB,IAoB/B,OACI,yBAAK5G,UAAU,mBACX,kBAAC,GAAD,CACIyrB,cAAe,GACflG,OAAQ3e,EACR0e,WAAYvjB,GAAS4d,MAAMhQ,cAC3B7C,KAAMA,EACND,QAfQ,SAAAjG,GAChBkJ,GAAQ,GACHlJ,GrDmDgC,SAAAA,GACzC3R,EACK0N,OxC3GgB,UwC2GA,WAAOiE,IACvB5L,MAAK,SAAAjF,GACFiL,GAAMC,SpBxFwC,CACxDxN,K1C0CuC,4B0CzCvCuE,gBoBsFgD4O,IACtCrF,GACIzF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,4BACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAnM,GAAK,OAAIyL,GAAazL,MqD5D7B61B,CAA8B9kB,MAY1B,kBAAC,GAAD,CAAW6D,SAxCJ,SAAAnE,GACX,IAAKA,EAAO1S,IAAMqL,EAAMnH,eAAemO,QAAU,EAC7C,OAAOlF,IACH,EACAM,GACArD,EAAE,+BrD0BwB,SAAAsI,GAClCA,EAAO1S,GACP+X,GAA8BrF,GAE9BsF,GAA+BtF,GqD5B/BqlB,CAA2BrlB,IAiCMmJ,QA1Bb,WrD8ExBzO,GAAMC,SpB1FkC,CAC1CxN,K1CkCsC,6B8DwDpC4X,GbpHsB,gBkEgEd,6BAASrL,UAAU,uBACdf,EAAMnH,eAAe8R,KAAI,SAAAnP,GAAQ,OAC9B,kBAAC,GAAD,CAAMwI,MAAM,mBAAmB6H,IAAKrQ,EAAS7G,IACzC,yBAAKoM,UAAU,cACX,kBAAC,KAAD,CACIA,UAAU,UACVkH,MAAOlJ,EAAE,2BACTkN,QAAS,kBAAMqgB,EAAW9wB,EAAS7G,OAEvC,kBAAC,KAAD,CACIoM,UAAU,UACVkH,MAAOlJ,EAAE,6BACTkN,QAAS,kBAnCb,SAAAtE,GACpB0kB,EAAW1kB,GACXkJ,GAAQ,GAiC+BuU,CAAgB5pB,EAAS7G,QAGhD,2BACKoK,EAAE,eADP,KACyBvD,EAASsM,YAElC,2BACK/I,EAAE,oBADP,MAC+BA,EAAE,mBAEjC,2BACKvD,EAAS+M,UADd,MAC4B/M,EAASgN,kBCrB9C2D,I,cAAAA,cAJS,SAAA/X,GAAK,MAAK,CAChCqF,MAAOrF,EAAMoF,OAAOC,SAGP0S,CACXD,aAAU,CACRxQ,KnExEoB,YmEuEtBwQ,EA5DW,SAAAlM,GAAU,IACfjB,EAAMkB,aAAe,gBAArBlB,EACAwL,EAAgDvK,EAAhDuK,aAAcC,EAAkCxK,EAAlCwK,SAAUgG,EAAwBxQ,EAAxBwQ,QAAS/F,EAAezK,EAAfyK,WAezC,OAbAM,qBAAU,WACJ/K,EAAMvG,QACJuG,EAAMvG,MAAM9E,GACdqL,EAAMiL,WAAW,CACftW,GAAIqL,EAAMvG,MAAM9E,GAChBsT,MAAOjI,EAAMvG,MAAMwO,QAGrBjI,EAAMiL,gBAGT,CAACjL,EAAMvG,QAGR,kBAAC,GAAD,CAAMuK,MAAM,wBACV,wBAAIjD,UAAU,qBACXf,EAAMvG,MAAM9E,GAAKoK,EAAE,cAAgBA,EAAE,gBACrCA,EAAE,kBAEL,0BAAMyM,SAAUjB,GACd,kBAACkB,GAAA,EAAD,CACE1K,UAAU,aACVN,KAAK,QACL9L,GAAG,QACHuM,MAAOnC,EAAE,eAAe,IACxB2M,UAAW0S,GACXzS,SAAU,CAAC/E,GAAUG,GAAgBiB,MAEvC,yBAAKjH,UAAU,qCACf,kBAACgL,GAAA,EAAD,CACEC,QAAQ,YACRjL,UAAU,iBACVF,MAAM,UACN+K,SAAUpB,GAAYC,EACtBjW,KAAK,UACJuK,EAAE,sBAEL,kBAACgN,GAAA,EAAD,CACIvX,KAAK,SACLuM,UAAU,gBACViL,QAAQ,YACRJ,SAAUpB,GAAYC,EACtBwB,QAASuE,GACVzR,EAAE,+B,oBCrDP4tB,GAAQ,SAAA3sB,GACZ,OAAO,kBAAC,KAAD,eAAUuR,UAAW,EAAGvF,QAAQ,UAAahM,KAsBvC4sB,GAnBW,SAAA5sB,GACxB,IAAMnK,EAAUmK,EAAMnK,QAChBrB,EAAOwL,EAAMxL,KACbsB,EAASkK,EAAMlK,OACf+2B,EAAsB7sB,EAAM6sB,oBAElC,OACI,kBAACC,GAAA,EAAD,CACIjf,KAAM/X,EACNi3B,iBAAkB,IAClBnf,QAASif,GAEX,kBAAC,GAAD,CAAOjf,QAASif,EAAqBG,SAAUx4B,GAC5CqB,KC6JIsW,iBARS,SAAA/X,GAAK,MAAK,CAC9BoF,OAAQpF,EAAMoF,OAAOA,OACrBE,eAAgBtF,EAAMoF,OAAOE,eAC7B/D,eAAgBvB,EAAMmH,SAAS5F,eAC/BC,aAAcxB,EAAMmH,SAAS3F,aAC7BqrB,gBAAiB7sB,EAAMmH,SAAS1F,WAGI,GAAzBsW,EApJC,SAAAnM,GACZ+K,qBAAU,kBAAMqW,OAAwB,CAACphB,EAAMxG,SAC/CuR,qBAAU,kBAAMwW,OAA4B,IAFvB,IAIb5rB,EAAkDqK,EAAlDrK,eAAgBC,EAAkCoK,EAAlCpK,aAAcqrB,EAAoBjhB,EAApBihB,gBAC9BliB,EAAMkB,aAAe,gBAArBlB,EALa,EAOGqO,oBAAS,GAPZ,oBAOdS,EAPc,KAORgD,EAPQ,OAQSzD,oBAAU,GARnB,oBAQd9X,EARc,KAQL23B,EARK,OASG7f,mBAAS,IATZ,oBASd2c,EATc,KASRK,EATQ,OAUehd,mBAAS,MAVxB,oBAUdwd,EAVc,KAUFC,EAVE,OAYWzd,oBAAS,GAZpB,oBAYdxB,EAZc,KAYJ+e,EAZI,KAcfT,EAAeE,EAIf8C,EACApD,GADgBle,EACT5L,EAAMtG,eACNsG,EAAMxG,OADgBuwB,EAAM,CAAC,UAGpC3E,EAAkB,SAAA9vB,GACpB23B,EAAW33B,GACXub,GAAQ,IA+BZ,OACI,oCACI,kBAAC,GAAD,CACI0V,OAAQqE,EACRtE,OAAQhxB,EACR+wB,WAAY,QACZxY,KAAMA,EACND,QA9BQ,SAAAtY,GAEhB,GADAub,GAAQ,GACHvb,EAAL,CACA,GAAIs1B,EACA,GAAIhf,G9BwEsB,SAAAnS,GAClCA,EAAMsuB,SAAU,EAChBzG,GAAmB7nB,G8BtEP0zB,CAHcntB,EAAMtG,eAAeiB,MAC/B,SAAAlB,GAAK,OAAIA,EAAM9E,KAAOW,W9BiEH,SAAAmE,GACnCA,EAAMsuB,SAAU,EAChBzG,GAAmB7nB,G8B9DP2zB,CADcptB,EAAMxG,OAAOmB,MAAK,SAAAlB,GAAK,OAAIA,EAAM9E,KAAOW,W9BnBhC,SAAAA,GAClCU,EACK0N,OlExDgB,SkEwDA,WAAOpO,IACvByG,MAAK,SAAAjF,GACFiL,GAAMC,S7CnCP,CACHxN,K3C4CoB,e2C3CpBC,O6CiC+Ba,IAC3BisB,KACAzf,IACI,EACAM,GACA6e,GAAgBne,GAAS6d,MAAO1mB,OAGvC8I,OAAM,SAAAnM,GAAK,OACRkL,IACI,EACAM,GAFqB,UAGlBxL,EAAME,SAASwH,KAAKzI,a8BO3Bw3B,CAAuB/3B,GAE3Bu1B,EAAc,UAgBV,yBAAK9pB,UAAU,mBACX,2BAAOA,UAAU,sBACb,kBAAC,GAAD,CACImpB,aAAcA,EACdC,aAjBO,WACvBQ,GAAa/e,MAkBAA,EACG,GAEA,kBAAC,GAAD,CACI7K,UAAU,OACVyK,SA3DT,SAAAnE,GAAM,O9BhBS,SAAAA,GAAM,OACpCA,EAAO1S,GAAK2sB,GAAmBja,GAAUga,GAAmBha,G8BenCimB,CAAmBjmB,IA4DpBmJ,QA7DA,kB9BXxBzO,GAAMC,S7CQuB,CAC7BxN,K3C4BuB,qBwFpCvB0sB,GvCpCsB,gBqE+GV,yBAAKngB,UAAU,4BACe,IAAzBmsB,EAAclmB,QACX,kBAAC,GAAD,CAAUvG,KAAM1B,EAAE,mBAErBmuB,EAAcviB,KAAI,SAAAlR,GAAK,OACpB,6BAASoS,IAAKpS,EAAM9E,GAAIoM,UAAU,cAC9B,yBAAKA,UAAU,0BACT6K,EAmBE,kBAAC,KAAD,CACI7K,UAAU,sBACVkH,MAAOlJ,EAAE,sBACTkN,QAAS,WACL4e,EAAc1E,IACdf,EAAgB3rB,EAAM9E,OAvB9B,oCACI,kBAAC,KAAD,CACIoM,UAAU,sBACVkH,MAAOlJ,EAAE,uBACTkN,QAAS,WACL4e,EACI1E,IAEJf,EAAgB3rB,EAAM9E,OAG9B,kBAAC,KAAD,CACIoM,UAAU,sBACVkH,MAAOlJ,EAAE,cACTkN,QAAS,kBArF9B,SAAA3W,GAAO,OAAI6rB,GAAmB7rB,GAqFMg3B,CAAW7yB,EAAM9E,QAa5C,kBAAC,KAAD,CACIoM,UAAU,wBACVkH,MAAOlJ,EAAE,gBACTkN,QAAS,kBAAMmZ,EAAgB3rB,EAAM9E,QAG7C,uBAAGoM,UAAU,2BACRhC,EAAE,eAAiB,KAExB,wBAAIgC,UAAU,sBACTtH,EAAMwO,aAM3B,kBAAC,GAAD,CACIpS,QAASorB,EACTzsB,KAAMoB,EACNE,OAAQH,EACRk3B,oBA5GgB,SAAC1sB,EAAOotB,GACjB,cAAXA,GACJtrB,YC7CF0nB,I,OAAYrQ,aAAOvN,KAAPuN,CAAe,CAC7BsQ,UAAW,UAGX4D,GAAU,SAAAxtB,GAAU,IACZjB,EAAMkB,aAAe,gBAArBlB,EACAwL,EAAgDvK,EAAhDuK,aAAcC,EAAkCxK,EAAlCwK,SAAUC,EAAwBzK,EAAxByK,WAAY+F,EAAYxQ,EAAZwQ,QAmB5C,OAjBAzF,qBAAU,WACF/K,EAAMnG,UACFmG,EAAMnG,QAAQlF,GACdqL,EAAMiL,WAAW,CACbxK,KAAMT,EAAMnG,QAAQ4G,KACpBjM,KAAMwL,EAAMnG,QAAQrF,KAAKG,GACzBA,GAAIqL,EAAMnG,QAAQlF,KAGtBqL,EAAMiL,gBAGf,CAACjL,EAAMnG,UAMN,kBAAC,GAAD,CAAMmK,MAAM,uBACR,0BAAMjD,UAAU,wBAAwByK,SAAUjB,GAC9C,wBAAIxJ,UAAU,cACTf,EAAMnG,QAAQlF,GACToK,EAAE,cACFA,EAAE,gBACN,IACDA,EAAE,iBAEP,kBAAC0M,GAAA,EAAD,CACIjX,KAAK,OACLiM,KAAK,OACLiL,UAAW0S,GACXE,YAAavf,EAAE,gBACfgC,UAAU,aACVG,MAAOnC,EAAE,cACT4M,SAAU,CAAC/E,GAAUmC,MAEzB,kBAAC0C,GAAA,EAAD,CACI1K,UAAU,aACV2K,UAAWhC,GACXjJ,KAAK,OACLS,MAAOnC,EAAE,cACT4M,SAAU,CAAC/E,KACX,4BAAQvG,MAAO,KACdL,EAAM9F,UAAUyQ,KAAI,SAAA8iB,GAAQ,OACzB,4BAAQ5hB,IAAK4hB,EAAS94B,GAAI0L,MAAOotB,EAAS94B,IACrC84B,EAASnnB,iBAItB,yBAAKvF,UAAU,0BACX,kBAAC,GAAD,CACIA,UAAU,gBACViL,QAAQ,YACRnL,MAAM,UACN+K,SAAUpB,GAAYC,EACtBjW,KAAK,UACJuK,EAAE,sBAEP,kBAAC,GAAD,CACIgC,UAAU,gBACViL,QAAQ,YACRJ,SAAUpB,GAAYC,EACtBwB,QAASuE,GACRzR,EAAE,2BAa3ByuB,GAAUthB,aAAU,CAChBxQ,KtEnGqB,WsEkGfwQ,CAEPshB,IAEYrhB,qBATS,SAAA/X,GAAK,MAAK,CAC9ByF,QAASzF,EAAMwF,MAAMC,QACrBK,UAAW9F,EAAM8F,UAAUA,aAOhBiS,CAAyBqhB,ICvFlCphB,GAAmB,SAAA1Q,GACrBqG,GAAMC,SAASa,aAAMnH,KAsCZgyB,GAAa,SAAArmB,GACtBrR,EACKkG,IlG/CqB,akG+CDmL,GACpBtL,MAAK,SAAAjF,GACFiL,GAAMC,SChCP,CACHxN,KzHwDuB,kByHvDvBC,OD8BiCqC,EAASwH,OACtC8N,GvE1DkB,YuE2DlBtK,IACI,EACAM,GACAvF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,2BACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAnM,GACHyL,GAAazL,OAIZ+2B,GAAc,SAAAtmB,GACvBrR,EACK8F,KlGnEqB,akGmEAuL,GACrBtL,MAAK,SAAAjF,GACFiL,GAAMC,SC3EP,CACHxN,KzH4EqB,gByH3ErBC,ODyE+BqC,EAASwH,OACpC8N,GvE9EkB,YuE+ElBtK,IACI,EACAM,GACAvF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,2BACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAnM,GACHkL,IACI,EACAM,GACAvF,GAAKkC,EAAEnI,EAAME,SAASwH,KAAKzI,QAASe,EAAME,SAASwH,KAAKzI,cE3EpE+3B,I,OAAc,SAAA5tB,GAAU,IAChBuK,EAAkDvK,EAAlDuK,aAAcC,EAAoCxK,EAApCwK,SAAUC,EAA0BzK,EAA1ByK,WAAYvQ,EAAc8F,EAAd9F,UADrB,EAICkT,oBAAS,GAJV,oBAIhBS,EAJgB,KAIVgD,EAJU,OAKKzD,oBAAU,GALf,oBAKhBygB,EALgB,KAKRC,EALQ,KAOvB/iB,qBAAU,WACN,IAAIgjB,EAAe,GACf/tB,EAAM7F,QAAQxF,KACdo5B,EAAa,CAAEznB,YAAatG,EAAM7F,QAAQmM,YACtC3R,GAAIqL,EAAM7F,QAAQxF,KAE1BqL,EAAMiL,WAAW8iB,KAElB,CAAC/tB,EAAM7F,UAfa,IAiBf4E,EAAMkB,aAAe,gBAArBlB,EAeFutB,EAAa,SAAAnH,IFgDa,SAAAA,GAChCpjB,GAAMC,SClEC,CACHxN,KzHgDwB,mByH/CxBC,ODgEyB0wB,IEhDzB6I,CAAqB7I,IAGzB,OACI,oCACI,kBAAC,GAAD,CACIqH,cAAe,GACflG,OAAQuH,EACRxH,WAAYvjB,GAAS+d,KAAKnQ,cAC1B7C,KAAMA,EACND,QAnBQ,SAAAigB,GFZS,IAAAI,GEazBpd,GAAQ,GACHgd,KFdoBI,EEiBPJ,EFhBtB73B,EACK0N,OlGvBqB,akGuBA,WAAOuqB,IAC5BlyB,MAAK,SAAAjF,GACFiL,GAAMC,SCjBP,CACHxN,KzH+DmB,cyH9DnBC,ODe8Bw5B,IAC1BnsB,IACI,EACAM,GACA6e,GAAgBne,GAAS+d,KAAM5mB,OAGtC8I,OAAM,SAAAnM,GACHyL,GAAazL,UEqBb,kBAAC,GAAD,CAAMoN,MAAM,uBACR,0BAAMjD,UAAU,qBAAqByK,SAAUjB,GAC3C,kBAACkB,GAAA,EAAD,CACIjX,KAAK,OACLiM,KAAK,cACLiL,UAAW0S,GACXE,YAAavf,EAAE,kBACfmC,MAAOnC,EAAE,kBACTgC,UAAU,aACViL,QAAQ,aAEZ,yBAAKjL,UAAU,qBACX,kBAACgL,GAAA,EAAD,CACIlL,MAAM,UACNE,UAAU,YACV6K,SAAUpB,GAAYC,EACtBuB,QAAQ,YACRxX,KAAK,UAEJuK,EAAE,wBAKf,wBAAIgC,UAAU,aACT7G,EAAUyQ,KAAI,SAAA8iB,GAAQ,OACnB,wBACI5hB,IAAK4hB,EAAS94B,GACd0L,MAAOotB,EAASnnB,YAChBvF,UAAU,kBAEV,0BAAMA,UAAU,mBACX0sB,EAASnnB,aAEd,0BAAMvF,UAAU,WACZ,kBAAC,KAAD,CACIA,UAAU,WACVkL,QAAS,kBAAMqgB,EAAWmB,EAAS94B,OAEvC,kBAAC,KAAD,CACIoM,UAAU,aACVkL,QAAS,kBAnEjB,SAAA4hB,GACpBC,EAAUD,GACVhd,GAAQ,GAiEmCuU,CAAgBqI,EAAS94B,iBAgB5Ei5B,GAAc1hB,aAAU,CACpBxQ,KzExH0B,YyEuHhBwQ,CAEX0hB,IAEYzhB,qBATS,SAAA/X,GAAK,MAAK,CAC9B+F,QAAS/F,EAAM8F,UAAUC,QACzBD,UAAW9F,EAAM8F,UAAUA,aAOhBiS,CAAyByhB,ICoFzBzhB,I,OAAAA,cATS,SAAA/X,GAAK,MAAK,CAC9ByE,eAAgBzE,EAAMwE,aAAaC,eACnCe,MAAOxF,EAAMwF,MAAMA,MACnBE,cAAe1F,EAAMwF,MAAME,cAC3BD,QAASzF,EAAMwF,MAAMC,QACrBK,UAAW9F,EAAM8F,UAAUA,UAC3BC,QAAS/F,EAAM8F,UAAUC,WAGW,GAAzBgS,EA9KE,SAAAnM,GAAU,IACfpG,EAAUoG,EAAVpG,MAERmR,qBAAU,WACN0W,OACD,IAEH1W,qBAAU,WHrBV/U,EACKiN,IlGZqB,ckGarBlH,MAAK,SAAAsF,GACFU,GAAMC,SCbP,CACHxN,KzHoE0B,qByHnE1BC,ODWmC4M,EAAI/C,UAEtCyE,OAAM,SAAAnM,GACHyL,GAAazL,QGiBlB,IAEHmU,qBAAU,WACN2W,OACD,IAbmB,IAed3iB,EAAMkB,aAAe,gBAArBlB,EAfc,EAgBEqO,oBAAS,GAhBX,oBAgBfS,EAhBe,KAgBTgD,EAhBS,OAiBMzD,oBAAU,GAjBhB,oBAiBf+X,EAjBe,KAiBP+I,EAjBO,OAkBE9gB,mBAAS,IAlBX,oBAkBf2c,EAlBe,KAkBTK,EAlBS,OAmBchd,mBAAS,MAnBvB,oBAmBfwd,EAnBe,KAmBHC,EAnBG,OAqBUzd,oBAAS,GArBnB,oBAqBfxB,EArBe,KAqBL+e,EArBK,KA+BhBwD,EAAc,SAAAhJ,IlCyHY,SAAAA,GAChCpjB,GAAMC,SC9JC,CACHxN,K1F8CuB,kB0F7CvBC,OD4JyB0wB,IkCzHzBiJ,CAAqBjJ,IAOnBC,EAAkB,SAAAD,GACpB+I,EAAU/I,GACVtU,GAAQ,IA4BNua,EACAtB,GADele,EACR5L,EAAMlG,cACNF,EADqBmwB,EAAM,CAAC,SAWzC,OACI,oCACI,kBAAC,GAAD,CACIzD,OAAQnB,EACRkB,WAAYvjB,GAAS8d,KAAKlQ,cAC1B7C,KAAMA,EACN0Y,OAAQqE,EACRhd,QA5CQ,SAAAuX,GAEhB,GADAtU,GAAQ,GACHsU,EAAL,CAKQ,IlClCqBxwB,EkCgC7B,GAAIi2B,EACA,GAAIhf,GlCqBsB,SAAAyJ,GAClCA,EAAK0S,SAAU,EACf7rB,GAAImZ,GkCnBQgZ,CAHaruB,EAAMlG,cAAca,MAC7B,SAAA0a,GAAI,OAAIA,EAAK1gB,KAAOwwB,WlCcD,SAAA9P,GACnCA,EAAK0S,SAAU,EACf7rB,GAAImZ,GkCXQiZ,CADatuB,EAAMpG,MAAMe,MAAK,SAAA0a,GAAI,OAAIA,EAAK1gB,KAAOwwB,WlCvC7BxwB,EkC2CHwwB,ElC1C9BnvB,EACK0N,OnE7Ce,QmE6CA,WAAO/O,IACtBoH,MAAK,SAAAsF,GACFU,GAAMC,SChDQ,SAAArN,GACtB,MAAO,CACHH,K1FiEmB,c0FhEnBC,OAAQE,GD6CW45B,CAAW55B,IAC1B+sB,KACA5f,IACI,EACAM,GACAvF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,2BACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAQ,GACHzB,IACI,EACAM,GACAmB,EAAIzM,SACE+F,GAAKkC,EACPwE,EAAIzM,SAASwH,KAAKzI,QAClB0N,EAAIzM,SAASwH,KAAKzI,SAEhB0N,MkCqBdsnB,EAAc,UA4BV,yBAAK9pB,UAAU,mBACX,2BAAOA,UAAU,sBACb,kBAAC,GAAD,CACImpB,aApBC,SAAAH,GACjBK,EAAQL,IAoBQI,aAjBO,WACvBQ,GAAa/e,MAkBAA,EACG,GAEA,oCACI,kBAAC,GAAD,CACIJ,SA9ET,SAAAnE,GACf,IAAMf,EAActG,EAAM9F,UAAUS,MAChC,SAAAnG,GAAI,OAAIA,EAAKG,IAAM0S,EAAO7S,QAE9B6S,EAAOua,gBAAkBtb,EAAYA,YACrCqb,GAAkBta,IA0EMmJ,QAnEJ,WlC0HxBzO,GAAMC,SCrJyB,CAC/BxN,K1FmC0B,mByFkH1B4X,GxChMqB,c0E0IG,kBAAC,GAAD,CACIrL,UAAU,WACVyK,SAzCT,SAAAnE,IHrDU,SAAAA,GACzBA,EAAO1S,GACP+4B,GAAWrmB,GAEXsmB,GAAYtmB,GGkDZmnB,CAAkBnnB,QA6CV,6BAAStG,UAAU,+BACU,IAAxBqqB,EAAapkB,QACV,kBAAC,GAAD,CAAUvG,KAAM1B,EAAE,kBAErBqsB,EAAazgB,KAAI,SAAC0K,EAAMtd,GAAP,OACd,kBAAC,GAAD,eAAM8T,IAAK9T,GAAWsd,EAAtB,CAA4BrR,MAAM,wBAC9B,yBAAKjD,UAAU,cACT6K,EAkBE,kBAAC,KAAD,CACI7K,UAAU,mBACVkH,MAAOlJ,EAAE,sBACTkN,QAAS,WACL4e,EAAc1E,IACdf,EAAgB/P,EAAK1gB,OAtB7B,oCACI,kBAAC,KAAD,CACIoM,UAAU,mBACVkH,MAAOlJ,EAAE,uBACTkN,QAAS,WACL4e,EACI1E,IAEJf,EAAgB/P,EAAK1gB,OAG7B,kBAAC,KAAD,CACIoM,UAAU,UACVkL,QAAS,kBAAMkiB,EAAY9Y,EAAK1gB,QAc5C,kBAAC,KAAD,CACIoM,UAAU,UACVkL,QAAS,kBAAMmZ,EAAgB/P,EAAK1gB,QAG5C,kCAAQoK,EAAE,cAAgB,IAA1B,KACA,wBAAIgC,UAAU,qBAAqBsU,EAAK5U,MACxC,8BAAO1B,EAAE,cAAgB,KACzB,wBAAIgC,UAAU,qBACTsU,EAAK7gB,KAAK8R,wBCzH5B6F,I,cAAAA,cAJS,SAAA/X,GAAK,MAAK,CAC9BiF,QAASjF,EAAMgF,SAASC,WAGb8S,CACXD,aAAU,CACNxQ,K3E9DoB,c2E6DxBwQ,EA3Da,SAAAlM,GAAU,IACfjB,EAAMkB,aAAe,gBAArBlB,EACAwL,EAAgDvK,EAAhDuK,aAAcC,EAAkCxK,EAAlCwK,SAAUgG,EAAwBxQ,EAAxBwQ,QAAS/F,EAAezK,EAAfyK,WAezC,OAbAM,qBAAU,WACF/K,EAAM3G,UACF2G,EAAM3G,QAAQ1E,GACdqL,EAAMiL,WAAW,CACbtW,GAAIqL,EAAM3G,QAAQ1E,GAClB8L,KAAMT,EAAM3G,QAAQoH,OAGxBT,EAAMiL,gBAGf,CAACjL,EAAM3G,UAGN,kBAAC,GAAD,CAAM2K,MAAM,0BACR,wBAAImB,MAAO,CAAEyhB,UAAW,WACnB5mB,EAAM3G,QAAQ1E,GAAKoK,EAAE,cAAgBA,EAAE,gBACvCA,EAAE,oBAEP,0BAAMyM,SAAUjB,GACZ,kBAACkB,GAAA,EAAD,CACI1K,UAAU,aACVN,KAAK,OACLiL,UAAW0S,GACXld,MAAOnC,EAAE,iBAAiB,IAC1B4M,SAAU,CAAC/E,GAAUuB,GAAelB,MAExC,yBAAKlG,UAAU,uCACf,kBAACgL,GAAA,EAAD,CACIC,QAAQ,YACRnL,MAAM,UACNE,UAAU,iBACV6K,SAAUpB,GAAYC,EACtBjW,KAAK,UACJuK,EAAE,sBAEP,kBAACgN,GAAA,EAAD,CACIvX,KAAK,SACLwX,QAAQ,YACRjL,UAAU,gBACV6K,SAAUpB,GAAYC,EACtBwB,QAASuE,GACRzR,EAAE,+BCgIRoN,iBARS,SAAA/X,GAAK,MAAK,CAC9BgF,SAAUhF,EAAMgF,SAASA,SACzBE,iBAAkBlF,EAAMgF,SAASE,iBACjC3D,eAAgBvB,EAAMmH,SAAS5F,eAC/BC,aAAcxB,EAAMmH,SAAS3F,aAC7BqrB,gBAAiB7sB,EAAMmH,SAAS1F,WAGI,GAAzBsW,EAzJK,SAAAnM,GAAU,IAClBjB,EAAMkB,aAAe,gBAArBlB,EACApJ,EAAkDqK,EAAlDrK,eAAgBC,EAAkCoK,EAAlCpK,aAAcqrB,EAAoBjhB,EAApBihB,gBAFb,EAID7T,oBAAS,GAJR,oBAIlBS,EAJkB,KAIZgD,EAJY,OAKSzD,oBAAU,GALnB,oBAKlB8Z,EALkB,KAKPuH,EALO,OAMDrhB,mBAAS,IANR,oBAMlB2c,EANkB,KAMZK,EANY,OAOWhd,mBAAS,MAPpB,oBAOlBwd,EAPkB,KAONC,EAPM,OASOzd,oBAAS,GAThB,oBASlBxB,EATkB,KASR+e,EATQ,KAWzB5f,qBAAU,kBAAMwd,OAA0B,IAC1Cxd,qBAAU,kBAAM2d,OAA8B,IAE9C,IAGMgG,EACA5E,GADkBle,EACX5L,EAAM1G,iBACN0G,EAAM5G,SADkB2wB,EAAM,CAAC,SAEtCG,EAAeE,EAEfhF,EAAkB,SAAA8B,GACpBuH,EAAavH,GACbrW,GAAQ,IAiCZ,OACI,oCACI,kBAAC,GAAD,CACI0V,OAAQqE,EACRtE,OAAQY,EACRb,WAAY,UACZxY,KAAMA,EACND,QAhCQ,SAAAsZ,GAEhB,GADArW,GAAQ,GACHqW,EAAL,CACA,GAAI0D,EACA,GAAIhf,EAAU,CACV,IAAMnS,EAAQuG,EAAM1G,iBAAiBqB,MACjC,SAAAtB,GAAO,OAAIA,EAAQ1E,KAAOuyB,MrBiEL7tB,EqB/DCI,GrBgE9BsuB,SAAU,EAClBU,GAAqBpvB,OqBhEN,ErByDuB,SAAAA,GACtCA,EAAQ0uB,SAAU,EAClBU,GAAqBpvB,GqBvDTs1B,CAHc3uB,EAAM5G,SAASuB,MACzB,SAAAtB,GAAO,OAAIA,EAAQ1E,KAAOuyB,WrB1BN,SAAAA,GACpClxB,EACK0N,OlFvCkB,WkFuCA,WAAOwjB,IACzBnrB,MAAK,SAAAjF,GACFiL,GAAMC,SC9BP,CACHxN,KzGmEsB,iByGlEtBC,OD4BiCyyB,IAC7BwB,KACA5mB,IACI,EACAM,GACA6e,GAAgBne,GAASge,QAAS7mB,OAGzC8I,OAAM,SAAAnM,GAAK,OACRkL,IACI,EACAM,GAFqB,UAGlBxL,EAAME,SAASwH,KAAKzI,aqBe3B+4B,CAAyB1H,GrBuDI,IAAA7tB,EqBrDjCwxB,EAAc,UAgBV,yBAAK9pB,UAAU,mBACX,2BAAOA,UAAU,sBACb,kBAAC,GAAD,CACImpB,aAAcA,EACdC,aAjBO,WACvBQ,GAAa/e,MAkBAA,EACG,GAEA,kBAAC,GAAD,CACI7K,UAAU,OACVyK,SA/DT,SAAAnE,GAAM,OrBpBW,SAAAA,GAAM,OACtCA,EAAO1S,GAAK8zB,GAAqBphB,GAAUmhB,GAAqBnhB,GqBmBvCwnB,CAAqBxnB,IAgEtBmJ,QA9DA,kBrBlBxBzO,GAAMC,SCayB,CAC/BxN,KzGmDyB,uBwGhEzB0sB,GvDtBwB,kB4EyGZ,6BAASngB,UAAU,+BACa,IAA3B2tB,EAAgB1nB,QACb,kBAAC,GAAD,CAAUvG,KAAM1B,EAAE,qBAErB2vB,EAAgB/jB,KAAI,SAAAtR,GAAO,OACxB,kBAAC,GAAD,CAAMwS,IAAKxS,EAAQ1E,GAAIqP,MAAM,0BACzB,yBAAKjD,UAAU,cACV6K,EACG,kBAAC,KAAD,CACI7K,UAAU,mBACVkH,MAAOlJ,EAAE,sBACTkN,QAAS,WACL4e,EAAc1E,IACdf,EAAgB/rB,EAAQ1E,OAIhC,oCACI,kBAAC,KAAD,CACIoM,UAAU,mBACVkH,MAAOlJ,EAAE,uBACTkN,QAAS,WACL4e,EACI1E,IAEJf,EAAgB/rB,EAAQ1E,OAGhC,kBAAC,KAAD,CACIoM,UAAU,mBACVkH,MAAOlJ,EAAE,cACTkN,QAAS,kBAlG9B,SAAAib,GAAS,OAAIoB,GAAqBpB,GAmGToF,CAAWjzB,EAAQ1E,QAMnC,kBAAC,KAAD,CACIoM,UAAU,qBACVkH,MAAOlJ,EAAE,gBACTkN,QAAS,kBAAMmZ,EAAgB/rB,EAAQ1E,QAG/C,uBAAGoM,UAAU,6BACRhC,EAAE,iBAAmB,IAAK,KAE/B,wBAAIgC,UAAU,sBACT1H,EAAQoH,YAM7B,kBAAC,GAAD,CACI5K,QAASorB,EACTzsB,KAAMoB,EACNE,OAAQH,EACRk3B,oBAjHgB,SAAC1sB,EAAOotB,GACjB,cAAXA,GACJtrB,YCoPOkK,I,OAAAA,cANS,SAAA/X,GAAK,MAAK,CAC9ByG,UAAWzG,EAAMyG,UAAUA,UAC3BzD,QAAShD,EAAMqH,iBAAiBrE,QAChCS,gBAAiBzD,EAAMoH,SAAS3D,mBAGI,GAAzBsU,EAxSG,SAAAnM,GAAU,IAChBjB,EAAMkB,aAAe,UAArBlB,EAERgM,qBAAU,kBAAM1H,OAA2B,IAC3C0H,qBAAU,WACNuB,KACApJ,IAAkB,KACnB,IAEH,IAMI4rB,EANEj0B,EAAYmF,EAAMnF,UAAU,GAE5BsI,EAAYnD,EAAM5I,QAUxB,YAJkByP,IAAdhM,IACAi0B,EAAkBj0B,EAAUmM,QAI5B,yBAAKjG,UAAU,wBACVoC,EACG,wBAAIpC,UAAU,gBACV,kBAAC2Y,GAAA,EAAD,OAGJ,oCACKoV,EAAkB,EACf,oCACI,wBAAI/tB,UAAU,gBACThC,EAAE,uBAEP,6BAASgC,UAAU,cACdlG,EAAU8P,KAAI,SAAAokB,GAAQ,OACnB,kBAAC,GAAD,CACI/qB,MAAM,YACN6H,IAAKkjB,EAASC,SAEd,wBAAIjuB,UAAU,gBACV,0BAAMA,UAAU,aACXguB,EAASE,WAEd,0BAAMluB,UAAU,aACXguB,EAASG,YAIjBH,EAASI,UAAUxkB,KAChB,SAACnP,EAAUzD,GACP,GACIiI,EAAMnI,gBAAgBmX,cAAc1Y,SAChCkF,EAASiS,KAGb,OACI,6BACI1M,UAAU,WACV8K,IACI9T,EACAyD,EAASiS,KAGb,wBAAI1M,UAAU,gBACThC,EAAE,eAAD,OACiBvD,EAASiS,OAIhC,iCACI,kBAAC,WAAD,CACI5B,IAAK9T,GAEL,yBAAKgJ,UAAU,iBACX,0BAAMA,UAAU,oBACXhC,EACG,oBAGPiB,EAAMnI,gBAAgBoX,iBAAiBtE,KACpC,SAAAykB,GACI,IAAMC,EAAgB7zB,EAASoa,QAAQ,GAAG2B,KAAKvf,WAC3C,SAAAs3B,GAAQ,OACJA,EAASC,WACTH,EAAcz6B,MAElB66B,EAAUh0B,EAASoa,QAAQ,GAAG2B,KAAK5c,MACnC,SAAA20B,GAAQ,OACJA,EAASC,WACTH,EAAcz6B,MAGtB,OACI06B,EACA,EAGI,yBACItuB,UAAU,aACV8K,IACI9T,EACAq3B,EAActnB,YAGlB,yBAAK/G,UAAU,mBACV,IAEGquB,EAActnB,YAItB,yBAAK/G,UAAU,mBACX,yBAAKA,UAAU,kBAK3ByuB,EAAQh2B,OAAS,GACjBgC,EAASoa,QAAQ,GAAG2B,KAAK5M,KACrB,SAAA8kB,GAEQD,EAAQD,WACRE,EAAYF,UAEZC,EAAQh2B,OAAO1E,KACX26B,EAAYC,eAOxB,yBACI3uB,UAAU,aACV8K,IACI9T,EACAy3B,EAAQ1nB,WACR0nB,EAAQE,YAGZ,yBAAK3uB,UAAU,mBAEPyuB,EAAQ1nB,YAGf0nB,EACIh2B,OACAwN,OACL,EACI,yBACIjG,UAAS,uCA1I1F,kBA4IkFyuB,EAAQh2B,OAAOm2B,KACZ,OAIR,yBAAK5uB,UAAU,gCACVyuB,EAAQh2B,OAAOm2B,KACZ,aAWpC,yBAAK5uB,UAAU,iBACX,0BAAMA,UAAU,oBACXhC,EACG,mBAGPiB,EAAMnI,gBAAgBoX,iBAAiBtE,KACpC,SAAAykB,GACI,IAAMC,EAAgB7zB,EAASoa,QAAQ,GAAGyB,IAAIrf,WAC1C,SAAA43B,GAAO,OACHA,EAAQL,WACRH,EAAcz6B,MAElBk7B,EAASr0B,EAASoa,QAAQ,GAAGyB,IAAI1c,MACjC,SAAAi1B,GAAO,OACHA,EAAQL,WACRH,EAAcz6B,MAGtB,OACI06B,EACA,EAGI,yBACItuB,UAAU,aACV8K,IACI9T,EACAq3B,EAActnB,YAGlB,yBAAK/G,UAAU,mBACV,IAEGquB,EAActnB,YAItB,yBAAK/G,UAAU,mBACX,yBAAKA,UAAU,kBAK3B8uB,EAAOr2B,OAAS,GAChBgC,EAASoa,QAAQ,GAAGyB,IAAI1M,KACpB,SAAAmlB,GAEQD,EAAON,WACPO,EAAWP,UAEXM,EAAOr2B,OAAO1E,KACVg7B,EAAWJ,eAOvB,yBACI3uB,UAAU,aACV8K,IACI9T,EACA83B,EAAO/nB,WACP+nB,EAAOH,YAGX,yBAAK3uB,UAAU,mBAEP8uB,EAAO/nB,YAGd+nB,EACIr2B,OACAwN,OACL,EACI,yBACIjG,UAAS,uCA3O1F,kBA6OkF8uB,EAAOr2B,OAAOm2B,KACX,OAIR,yBAAK5uB,UAAU,gCACV8uB,EAAOr2B,OAAOm2B,KACX,yBAqBhF,oCACI,wBAAI5uB,UAAU,gBACV,kBAAC2Y,GAAA,EAAD,c,0BC3QjBqW,GAnBa,SAAC,GAOtB,IANHjmB,EAME,EANFA,OACAH,EAKE,EALFA,MACAzI,EAIE,EAJFA,MACAT,EAGE,EAHFA,KACAuvB,EAEE,EAFFA,eACAxF,EACE,EADFA,QAEA,OACI,kBAAC9pB,GAAA,EAAD,CACIsvB,eAAgBA,EAChB9uB,MAAOA,EACPT,KAAMA,EACN+pB,QAASA,EACT7pB,QAAS,kBAACsvB,GAAA,EAAD,eAAUpvB,MAAM,WAAciJ,EAAYH,O,UCWhDumB,GArBgB,SAAC,GAKnB,IAJLhvB,EAII,EAJJA,MAII,IAHJyI,MAAStJ,EAGL,EAHKA,MAAUqrB,EAGf,8BAFJ9hB,KAAQC,EAEJ,EAFIA,QAASwU,EAEb,EAFaA,QAASznB,EAEtB,EAFsBA,MACvBkT,EACC,yCACV,OACE,kBAAC,KAAD,CAAyB6hB,MAAOC,MAC5B,kBAACuE,GAAA,EAAD,eACErE,WAAS,EACTC,MAAM,EACN1rB,MAAOA,EAAQiH,GAAOjH,EAAO,cAAckH,SAAW,KACtDykB,OAAO,aACPp1B,MAAOiT,GAAWwU,EAClBE,WAAY1U,GAAWjT,EAAQiT,GAAWjT,EAAQsK,GAC9CwqB,EACA5hB,MCwSCqC,iBALS,SAAA/X,GAAK,MAAK,CAC9B0G,SAAU1G,EAAMqE,UAAUqC,SAC1BjC,eAAgBzE,EAAMwE,aAAaC,kBAGxBsT,CACXD,aAAU,CACNxQ,KhFtTqB,egFqTzBwQ,EA3SkB,SAAAlM,GAClB,IAAMowB,EAAkB,WACpBC,GAAW,GACXC,EAAgB,CACZC,QAAQ,EACRC,SAAS,EACTC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,UAAU,EACVC,QAAQ,KAGhB9lB,qBAAU,kBAAMuB,OAA+B,IAbpB,IAenBvN,EAAMkB,aAAe,gBAArBlB,EACAwL,EAAgDvK,EAAhDuK,aAAcC,EAAkCxK,EAAlCwK,SAAUgG,EAAwBxQ,EAAxBwQ,QAAS/F,EAAezK,EAAfyK,WAErCqmB,EAAwB,GAC5B/lB,qBAAU,WACN/K,EAAMnH,eAAehE,SAAQ,SAAAsE,GACzB23B,EAAsB,GAAD,OAAI33B,EAAUxE,MAAQ,KAE/Co8B,EAAkB,eAAKD,IACvBV,MACD,CAACpwB,EAAMnH,eAAgBmH,EAAMlF,SAASnG,KAzBd,MA2BG0d,IAAMjF,UAAS,GA3BlB,oBA2BpBod,EA3BoB,KA2BX6F,EA3BW,OA6Bahe,IAAMjF,SAAS,CACnDmjB,QAAQ,EACRC,SAAS,EACTC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,UAAU,EACVC,QAAQ,IApCe,oBA6BpBG,EA7BoB,KA6BNV,EA7BM,OAuCiBje,IAAMjF,SAC9C0jB,GAxCuB,oBAuCpBG,EAvCoB,KAuCJF,EAvCI,KAmDrBG,EAAwB7e,IAAM8e,aAChC,SAAA1jB,GACI,OAAO,SAAUtN,GACb,IAAIixB,EAAU,gBAAM3jB,EAAMtN,EAAMC,OAAOoqB,SACvC8F,EAAgB,eACTU,EADQ,GAERI,OAIf,CAACJ,IAECK,EAA2Bhf,IAAM8e,aACnC,SAAAG,GACI,OAAO,SAAUnxB,GACb,IAAIoxB,EAAY,gBAAMD,EAAUnxB,EAAMC,OAAOoqB,SAC7CuG,EAAkB,eACXE,EADU,GAEVM,OAIf,CAACN,IAoIL,OAlFAlmB,qBAAU,WACN,IAAIqF,EAAe,GAGnB,GAFAggB,IAEIpwB,EAAMlF,UACFkF,EAAMlF,SAASnG,GAAI,CACnByb,EAAe,CACXzb,GAAIqL,EAAMlF,SAASnG,GACnB0R,KAAMrG,EAAMlF,SAASuL,KACrBC,YAAatG,EAAMlF,SAASwL,YAC5BkJ,SAAUxP,EAAMlF,SAAS0U,SACzBC,OAAQzP,EAAMlF,SAAS2U,OACvB5X,gBAAiBmI,EAAMlF,SAASjD,gBAChCmX,cAAehP,EAAMlF,SAASkU,cAC9BC,iBAAkBjP,EAAMlF,SAASmU,kBAGrCqB,GAAczb,SAAQ,SAAAsiB,GACdnX,EAAMlF,SAASkU,cAAc1Y,SAAS6gB,KACtC/G,EAAa,wBAAD,OAAyB+G,KAAa,MAG1D,IAAMqa,EAAUxxB,EAAMlF,SAASkU,cAAcyiB,QACzC,SAACh9B,EAAQgZ,GAEL,OADAhZ,EAAOgZ,IAAO,EACPhZ,IAEX,IAGAuL,EAAMnH,gBACNmH,EAAMnH,eAAehE,SAAQ,SAAA68B,GAErB1xB,EAAMlF,SAASmU,iBAAiBjX,WAC5B,SAAAmB,GACI,OAAOu4B,EAAc/8B,KAAOwE,EAAUxE,OAEzC,IAELyb,EAAa,2BAAD,OACmBshB,EAAc/8B,MACzC,MAKhB,IAAMg9B,EAAa3xB,EAAMlF,SAASmU,iBAAiBwiB,QAC/C,SAACh9B,EAAQ0E,GAEL,OADA1E,EAAO0E,EAAUxE,KAAM,EAChBF,IAEX,IAGJ47B,EAAWrwB,EAAMlF,SAASjD,iBAE1By4B,EAAgB,aACZC,QAAQ,EACRC,SAAS,EACTC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,UAAU,EACVC,QAAQ,GACLW,IAGP,IAAIV,EAAwB,GACxB9wB,EAAMnH,gBACNmH,EAAMnH,eAAehE,SAAQ,SAAAsE,GACzB23B,EAAsB,GAAD,OAAI33B,EAAUxE,MAAQ,KAGnDo8B,EAAkB,eACXD,EADU,GAEVa,IAIf3xB,EAAMiL,WAAWmF,KAClB,CAACpQ,EAAMlF,SAASnG,KAGf,kBAAC,GAAD,CAAMqP,MAAM,2BACR,wBAAImB,MAAO,CAAEyhB,UAAW,WACnB5mB,EAAMlF,SAASnG,GAAKoK,EAAE,cAAgBA,EAAE,gBACxCA,EAAE,mBAGP,0BAAMyM,SAAUjB,GACZ,yBAAKxJ,UAAU,qBACX,kBAAC0K,GAAA,EAAD,CACIhL,KAAK,kBACLS,MAAOnC,EAAE,wBACTixB,eAAe,QACftkB,UAAWqkB,GACXvF,QAASA,EACT1pB,SAjLC,SAAAX,GAAK,OAAIkwB,EAAWlwB,EAAMC,OAAOoqB,UAkLlC3pB,MAAM,aAGd,kBAAC4K,GAAA,EAAD,CACI1K,UAAU,aACVN,KAAK,OACLjM,KAAK,SACLkX,UAAW0S,GACXld,MAAOnC,EAAE,cAAgB,IACzB4M,SAAU,CAAC/E,GAAUyC,MAEzB,kBAACoC,GAAA,EAAD,CACI1K,UAAU,aACVN,KAAK,cACLiL,UAAW0S,GACXld,MAAOnC,EAAE,kBAAoB,IAC7B4M,SAAU,CAAC/E,MAEf,yBAAK7F,UAAU,mBACX,kBAAC0K,GAAA,EAAD,CACI1K,UAAU,aACVN,KAAK,WACLiL,UAAWkmB,GACX1wB,MAAOnC,EAAE,oBAAsB,IAC/B4M,SAAU,CAAC/E,GAAU4C,IACrB1I,SAAU,SAACX,EAAOE,GAzMnB,IAAAkI,EA0MSlI,IA1MTkI,EA2MoBlI,EA1MnCL,EAAMsL,OACF,SACAhE,GAAOiB,EAAW,cAAc4jB,IAAI,EAAG,KAAKH,OAAO,mBA4M3C,kBAACvgB,GAAA,EAAD,CACI1K,UAAU,aACVN,KAAK,SACLiL,UAAWkmB,GACX1wB,MAAOnC,EAAE,kBAAoB,IAC7B4M,SAAU,CAAC/E,GAAU6C,OAG7B,yBAAK1I,UAAU,IACX,2BAAIhC,EAAE,qBAAuB,MA5J5BoQ,OAAOsa,KAAKuH,GACbrmB,KAAI,SAAAknB,GACZ,OACI,kBAACpmB,GAAA,EAAD,CACII,IAAK7L,EAAMlF,SAASnG,GAAKk9B,EACzBpxB,KAAI,+BAA0BoxB,GAC9B3wB,MAAOnC,EAAE,sBAAD,OAAuB8yB,IAC/B7B,eAAe,MACfjC,aAAciD,EAAaa,GAC3BnmB,UAAWqkB,GACXvF,QAASwG,EAAaa,GACtB/wB,SAAUowB,EAAsBW,GAChChxB,MAAM,gBAmJV,yBAAKE,UAAU,IACX,2BAAIhC,EAAE,yCAA2C,MA5L7CoQ,OAAOsa,KAAKwH,GACbtmB,KAAI,SAAAxR,GACf,IAAM24B,EAAe9xB,EAAMnH,eAAe8B,MACtC,SAAAa,GAAQ,OAAIA,EAAS7G,MAAQwE,KAEjC,OACI,kBAACsS,GAAA,EAAD,CACII,IAAK7L,EAAMlF,SAASnG,GAAKwE,EACzBsH,KAAI,kCAA6BtH,GACjC+H,MACI4wB,EAAahqB,WACb,KACAgqB,EAAavpB,UACb,IACAupB,EAAatpB,QACb,IAEJwnB,eAAe,MACftkB,UAAWqkB,GACXhC,aAAckD,EAAe93B,GAC7BqxB,QAASyG,EAAe93B,GACxB2H,SAAUuwB,EAAyBl4B,GACnC0H,MAAM,gBAyKV,yBAAKE,UAAU,wCACX,kBAACgL,GAAA,EAAD,CACIC,QAAQ,YACRnL,MAAM,UACNE,UAAU,iBACV6K,SAAUpB,GAAYC,EACtBjW,KAAK,UAEJuK,EAAE,sBAEP,kBAACgN,GAAA,EAAD,CACIvX,KAAK,SACLwX,QAAQ,YACRjL,UAAU,gBACV6K,SAAUpB,GAAYC,EACtBwB,QAASuE,GAERzR,EAAE,8BCnFZoN,iBARS,SAAA/X,GAAK,MAAK,CAC9BqE,UAAWrE,EAAMqE,UAAUA,UAC3BsC,kBAAmB3G,EAAMqE,UAAUsC,kBACnCpF,eAAgBvB,EAAMmH,SAAS5F,eAC/BC,aAAcxB,EAAMmH,SAAS3F,aAC7BqrB,gBAAiB7sB,EAAMmH,SAAS1F,WAGI,GAAzBsW,EA/LM,SAAAnM,GAAU,IACnBjB,EAAMkB,aAAe,gBAArBlB,EADkB,EAEFqO,oBAAS,GAFP,oBAEnBS,EAFmB,KAEbgD,EAFa,OAGUzD,oBAAU,GAHpB,oBAGnBzU,EAHmB,KAGPo5B,EAHO,OAIF3kB,mBAAS,IAJP,oBAInB2c,EAJmB,KAIbK,EAJa,KAKlBz0B,EAAkDqK,EAAlDrK,eAAgBC,EAAkCoK,EAAlCpK,aAAcqrB,EAAoBjhB,EAApBihB,gBAEtClW,qBAAU,kBAAMuD,OAA2B,IAC3CvD,qBAAU,WACNoF,OACD,IAVuB,MAYU/C,mBAAS,MAZnB,oBAYnBwd,EAZmB,KAYPC,EAZO,OAaMzd,oBAAS,GAbf,oBAanBxB,EAbmB,KAaT+e,EAbS,KAepBT,EAAeE,EAKf4H,EAAY,CAAC,OAAQ,cAAe,WAAY,UAChD5G,EACAtB,GADele,EACR5L,EAAMjF,kBACNiF,EAAMvH,UADmBsxB,EAAMiI,GAGtC5M,EAAkB,SAAAzsB,GACpBo5B,EAAcp5B,GACdkY,GAAQ,IAiCZ,OACI,oCACI,kBAAC,GAAD,CACIyV,OAAQ3tB,EACR0tB,WAAY,WACZE,OAAQqE,EACR/c,KAAMA,EACND,QAhCQ,SAAAjV,GAEhB,GADAkY,GAAQ,GACHlY,EAAL,CACA,GAAIiyB,EACA,GAAIhf,GjEyJ0B,SAAA9Q,GACtCA,EAASitB,SAAU,EACnBnZ,GAAY9T,GiEvJAm3B,CAHiBjyB,EAAMjF,kBAAkBJ,MACrC,SAAAG,GAAQ,OAAIA,EAASnG,KAAOgE,WjEkJL,SAAAmC,GACvCA,EAASitB,SAAU,EACnBnZ,GAAY9T,GiE7IAo3B,CAHiBlyB,EAAMvH,UAAUkC,MAC7B,SAAAG,GAAQ,OAAIA,EAASnG,KAAOgE,WjEQP,SAAAA,IAIJ,IAHhBoJ,GACZI,WACA1J,UAAUA,UAAUkC,MAAK,SAAA1C,GAAI,OAAIA,EAAKtD,KAAOgE,KACrCd,gBAQb7B,EACK0N,O3C7EoB,Y2C6EA,WAAO/K,IAC3BoD,MAAK,SAAAjF,GACFiL,GAAMC,SrB9EP,CACHxN,K5C4EuB,kB4C3EvBC,OqB4EkCkE,IAC9B2J,GACIzF,GAAKkC,EAAE,6CAA8C,CACjD+D,SAAUjG,GAAKkC,EAAE,+BACjB9E,WAAY4C,GAAKkC,EAAE,uCAI9BgE,OAAM,SAAAnM,GAAK,OAAIyL,GAAazL,MAlB7BkL,IACI,EACAM,GACAvF,GAAKkC,EAAE,+CiEXPozB,CAA0Bx5B,GAE9BkyB,EAAc,UAgBV,yBAAK9pB,UAAU,mBACX,2BAAOA,UAAU,sBACb,kBAAC,GAAD,CACImpB,aAAcA,EACdC,aAjBO,WACvBQ,GAAa/e,MAkBAA,EACG,GAEA,kBAAC,GAAD,CACI7K,UAAU,OACVyK,SA/DT,SAAAnE,GAAM,OAAIyH,GAAsBzH,IAgEvBmJ,QAjEA,kBjErBxBzO,GAAMC,SrBgB0B,CAChCxN,K5C4D0B,wBiE5E1B4X,GhBjByB,mBiF0Gb,6BAASrL,UAAU,+BACU,IAAxBqqB,EAAapkB,QACV,kBAAC,GAAD,CAAUvG,KAAM1B,EAAE,oBAErBqsB,EAAazgB,KAAI,SAAC7P,EAAU/C,GACzB,IAAMq6B,EAAW,GAIjB,OAHAt3B,EAASkU,cAAcna,SAAQ,SAAA4Y,GAAG,OAC9B2kB,EAASt9B,KAAKiK,EAAE,sBAAD,OAAuB0O,QAGtC,kBAAC,GAAD,CACI5B,IAAK9T,EACLiM,MAAK,kCACDlJ,EAASjD,gBAAkB,UAAY,KAG3C,yBAAKkJ,UAAU,cACT6K,EAuBE,kBAAC,KAAD,CACI7K,UAAU,mBACVkH,MAAOlJ,EAAE,sBACTkN,QAAS,WACL4e,EACI1E,IAEJf,EAAgBtqB,EAASnG,OA7BjC,oCACI,kBAAC,KAAD,CACIoM,UAAU,mBACVkH,MAAOlJ,EAAE,uBACTkN,QAAS,WACL4e,EACI1E,IAEJf,EACItqB,EAASnG,OAIrB,kBAAC,KAAD,CACIoM,UAAU,mBACVkH,MAAOlJ,EAAE,cACTkN,QAAS,kBArGlC,SAAAtT,GAAU,OAAI0V,GAAsB1V,GAsGP2zB,CAAWxxB,EAASnG,QAgBpC,kBAAC,KAAD,CACIoM,UAAU,qBACVkH,MAAOlJ,EAAE,gBACTkN,QAAS,kBACLmZ,EAAgBtqB,EAASnG,QAKrC,uBAAGoM,UAAU,8BACT,+BAAQhC,EAAE,kBAAoB,KAC9B,2BAAIjE,EAASwL,aACZ,MAAQxL,EAASuL,KAAO,MAE7B,uBAAGtF,UAAU,8BACT,2BACKjG,EAAS0U,SADd,MAC2B1U,EAAS2U,SAGxC,uBAAG1O,UAAU,8BACRhC,EAAE,qBAAuB,KACzBqzB,EAASzC,KAAK,OAEnB,uBAAG5uB,UAAU,8BACRhC,EACG,yCACA,KACHjE,EAASmU,iBACLtE,KAAI,SAAAxR,GACD,OAAOA,EAAU2O,cAEpB6nB,KAAK,aAOlC,kBAAC,GAAD,CACI95B,QAASorB,EACTzsB,KAAMoB,EACNE,OAAQH,EACRk3B,oBApJgB,SAAC1sB,EAAOotB,GACjB,cAAXA,GACJtrB,YCnDKowB,GAAkB,WAC3Br8B,EACKiN,I7GgBgB,wB6GfhBlH,MAAK,SAAAjF,GACFiL,GAAMC,SCfP,CACHxN,KpIOiB,YoINjBC,ODa4BqC,EAASwH,UAEpCyE,OAAM,SAAAQ,GACHzB,IACI,EACAM,GACAmB,EAAIzM,SAASwH,KAAKzI,aEF5BojB,I,OAAYC,cAAW,iBAAO,CAChCoZ,kBAAmB,CACf,IAAK,CACD/sB,QAAS,eACT4T,OAAQ,gBACRK,MAAO,WAgHJrN,iBANS,SAAA/X,GAAK,MAAK,CAC9BD,SAAUC,EAAMD,SAASA,SACzB8G,MAAO7G,EAAM6G,MAAMA,MACnB7D,QAAShD,EAAMqH,iBAAiBrE,WAGrB+U,EA3GO,SAAAnM,GAAU,IACpBjB,EAAMkB,aAAe,UAArBlB,EADmB,EAGGqO,mBAAS,MAHZ,oBAGpB/Y,EAHoB,KAGXue,EAHW,OAIHxF,mBAAS,MAJN,oBAIpBmlB,EAJoB,KAIdC,EAJc,KAMrB5c,EAAUqD,KAEV9kB,EAAW6L,EAAM7L,SACjB8G,EAAQ+E,EAAM/E,MAEpB8P,qBAAU,kBAAM8c,OAA6B,IAC7C9c,qBAAU,kBAAMsnB,OAAmB,IAEnC,IAAMI,EAAuB,CACzB7Y,QAASzlB,EACT0lB,eAAgB,SAAAC,GAAM,OAClBA,EACMA,EAAO0C,SACP,IACA1C,EAAO9L,QACP,IACA8L,EAAOrZ,KACP,IACAqZ,EAAOE,WACP,KAGR0Y,EAAoB,CACtB9Y,QAAS3e,EACT4e,eAAgB,SAAAC,GAAM,OAAKA,EAASA,EAAO3d,MAAQ,KAGjDw2B,EAA4B,WFpCI,IAAAC,EEqC7BL,GAASl+B,IFrCoBu+B,EEsCP,CAAEr6B,UAAWlE,EAAQM,GAAIk+B,OAAQN,EAAK59B,IFrCrEqB,EACKkG,I7GGiC,+B6GHD02B,GAChC72B,MAAK,SAAAjF,GACF+wB,KACAwK,KACAnvB,IAAkB,GAClBpB,IACI,EACAM,GACAvF,GAAKkC,EAAE,2CAGdgE,OAAM,SAAAQ,GACHL,IAAkB,GAClBpB,IACI,EACAM,GACAmB,EAAIzM,SAASwH,KAAKzI,YEqB1B28B,EAAQ,MACR5f,EAAW,MACX1P,IAAkB,KAGtB,OACI,oCACI,yBAAKnC,UAAU,mBACX,kBAAC,GAAD,CAAMiD,MAAM,mBACR,wBAAIjD,UAAU,cAAchC,EAAE,iBAC7BiB,EAAM5I,QACH,kBAACsiB,GAAA,EAAD,MAEA,oCACI,yBAAK3Y,UAAU,sBACX,kBAACmZ,GAAA,EAAD,iBACQuY,EADR,CAEItY,eAAa,EACbC,aAAW,EACXrZ,UAAW6U,EAAQ0c,kBACnBxxB,SAAU,SAACX,EAAOka,GACdzH,EAAWyH,IAEfC,YAAa,SAAAC,GAAM,OACf,kBAAChB,GAAA,EAAD,iBACQgB,EADR,CAEIrZ,MAAOnC,EACH,8BAEJoa,OAAO,gBAInB,kBAACe,GAAA,EAAD,iBACQwY,EADR,CAEIvY,eAAa,EACbC,aAAW,EACXrZ,UAAW6U,EAAQ0c,kBACnBxxB,SAAU,SAACX,EAAOka,GACdmY,EAAQnY,IAEZC,YAAa,SAAAC,GAAM,OACf,kBAAChB,GAAA,EAAD,iBACQgB,EADR,CAEIrZ,MAAOnC,EAAE,2BACToa,OAAO,iBAKvB,kBAACpN,GAAA,EAAD,CACIhL,UAAU,YACViL,QAAQ,YACRnL,MAAM,UACNoL,QAAS,kBAAM0mB,MAEd5zB,EAAE,qCCtGnC,SAAS+zB,GAAS9yB,GAAQ,IACdkE,EAAqClE,EAArCkE,SAAU7D,EAA2BL,EAA3BK,MAAOtI,EAAoBiI,EAApBjI,MAAUg7B,EADd,aACwB/yB,EADxB,8BAGrB,OACI,kBAACgzB,GAAA,EAAD,eACItnB,UAAU,MACV/U,KAAK,WACLs8B,OAAQ5yB,IAAUtI,EAClBpD,GAAE,0BAAqBoD,GACvB+Y,kBAAA,qBAA+B/Y,IAC3Bg7B,GAEH1yB,IAAUtI,GAAS,kBAACm7B,GAAA,EAAD,CAAKC,EAAG,GAAIjvB,IAkB5C,IAAM+U,GAAYC,cAAW,SAAApH,GAAK,MAAK,CACnCC,KAAM,CACFqhB,SAAU,EACVhuB,gBAAiB0M,EAAME,QAAQ1M,WAAW8L,OAE9CiiB,OAAQ,CACJjuB,gBAAiB0M,EAAME,QAAQshB,KAAKC,UAuE7BpnB,iBALS,SAAA/X,GAAK,MAAK,CAC9ByE,eAAgBzE,EAAMwE,aAAaC,eACnCuzB,iBAAkBh4B,EAAMwE,aAAaE,oBAGD,GAAzBqT,EAnEI,SAAAnM,GAAU,IACjBjB,EAAMkB,aAAe,UAArBlB,EACF6W,EAAUqD,KAFQ,EAGE7L,mBAAS,GAHX,oBAGjB/M,EAHiB,KAGVmzB,EAHU,KAKxBzoB,qBAAU,WACNxJ,QAGJ,IAQMkyB,EAAkB,CACpB,CAAEhzB,KAAM,aAAciL,UAAW,kBAAC,GAAD,OACjC,CAAEjL,KAAM,cAAeiL,UAAW,kBAAC,GAAD,OAClC,CAAEjL,KAAM,YAAaiL,UAAW,kBAAC,GAAD,OAChC,CAAEjL,KAAM,gBAAiBiL,UAAW,kBAAC,GAAD,OACpC,CAAEjL,KAAM,WAAYiL,UAAW,kBAAC,GAAD,OAC/B,CAAEjL,KAAM,cAAeiL,UAAW,kBAAC,GAAD,OAClC,CAAEjL,KAAM,YAAaiL,UAAW,kBAAC,GAAD,OAChC,CAAEjL,KAAM,eAAgBiL,UAAW,kBAAC,GAAD,OACnC,CAAEjL,KAAM,gBAAiBiL,UAAW,kBAAC,GAAD,QAGxC,OACI,yBAAK3K,UAAW6U,EAAQ7D,MACpB,kBAAC2hB,GAAA,EAAD,CAAQlX,SAAS,UACb,kBAACmX,GAAA,EAAD,CACItzB,MAAOA,EACPS,SAzBK,SAACX,EAAOka,GACzBmZ,EAASnZ,IAyBG7Z,aAAW,sBACXozB,eAAe,UACf5nB,QAAQ,aACR6nB,cAAc,KACd9yB,UAAW6U,EAAQyd,QAElBI,EAAgB9oB,KAAI,SAACmpB,EAAS/7B,GAAV,OACjB,kBAACg8B,GAAA,EAAD,eACIloB,IAAK9T,EAAQ+7B,EACb/yB,UAAW6U,EAAQoe,QACnB/nB,QAAS,kBAhCZhE,EAgCiC6rB,EAAQrzB,UA/B1DoE,SAASoD,MAAQlJ,EAAE,GAAD,OAAIkJ,EAAJ,uBADD,IAAAA,GAiCG/G,MAAOnC,EAAE,GAAD,OAAI+0B,EAAQrzB,KAAZ,uBA/DpC,SAAmB1I,GACf,MAAO,CACHpD,GAAG,cAAD,OAAgBoD,GAClB,gBAAgB,mBAAhB,OAAoCA,IA6DZk8B,CAAUl8B,UAM7B07B,EAAgB9oB,KAAI,SAACe,EAAW3T,GAAZ,OACjB,kBAAC+6B,GAAD,CAAUjnB,IAAK9T,EAAOsI,MAAOA,EAAOtI,MAAOA,GACtC2T,EAAUA,kBChGhBS,gBAAQ,MANI,SAAAnK,GACvB,MAAO,CACHkyB,SAAU,kBAAMlyB,ElDeb,CACHxN,KrFjBiC,kCuIK1B2X,EAfA,SAAAnM,GAMX,OAJA+K,qBAAU,WACN/K,EAAMk0B,aACP,IAEI,kBAAC,KAAD,CAAUhhB,GAAG,SCmET/G,I,OAAAA,cAXS,SAAA/X,GAAK,MAAK,CAC9B0C,SAAU1C,EAAMkH,KAAKxE,SACrBF,MAAOxC,EAAMkH,KAAKzE,oBAGK,SAAAmL,GACvB,MAAO,CACHmyB,WAAY,SAAA71B,GAAI,OAAI0D,EnDlDjB,CACHxN,KrFIqB,gBqFHrBC,OmDgD0C6J,QAInC6N,EA/DQ,SAAAnM,GAAU,IACrBjB,EAAMkB,aAAe,UAArBlB,EAGF5I,EADS,IAAIi+B,gBAAgBp0B,EAAMq0B,SAASvK,QAC7B7mB,IAAI,SAEnBrM,EAAQoJ,EAAMpJ,MAEdE,EAAWkJ,EAAMlJ,SACnBw9B,EAAW,KAEXx9B,GAAYA,EAASwH,KAAK+Q,eAAe,aACzCilB,EAAW,kBAAC,KAAD,CAAUphB,GAAIpT,KACzBgC,IACI,EACAM,GACAtL,EAASwH,KAAKzI,UAItB,IAAIqc,EACA,oCACI,4BAAKnT,EAAE,oBACP,kBAAC2a,GAAA,EAAD,OAmBR,OAfI9iB,IACAsb,EACI,oCACI,4BAAKnT,EAAE,gBACP,2BAAInI,KAKhBmU,qBAAU,WACF5U,GACA6J,EAAMm0B,WAAWh+B,KAEtB,CAACA,IAGA,oCACI,6BAAS4K,UAAU,6BACduzB,EACD,6BAASvzB,UAAU,2BAA2BmR,SCiB/C/F,iBAFS,SAAA/X,GAAK,MAAK,CAAEye,SAAUze,EAAMkH,KAAK3E,QAE1CwV,EA3DC,SAAAnM,GACZ,IAAM6S,EAAW7S,EAAM6S,SAEnB0hB,EACA,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOC,KAAM10B,GAAiB20B,OAAK,EAAC/oB,UAAWgpB,KAC/C,kBAAC,KAAD,CAAOF,KAAM10B,IACT,kBAAC,KAAD,CAAUoT,GAAIpT,MAElB,kBAAC,KAAD,CAAO00B,KAAM10B,IACT,kBAAC,KAAD,CAAUoT,GAAIpT,MAElB,kBAAC,KAAD,CAAO00B,KAAM10B,GAAY4L,UAAWipB,KACpC,kBAAC,KAAD,CAAOH,KAAM10B,GAAuB4L,UAAWkpB,MAoCvD,OAhCI/hB,IAAajG,GAAUE,QACvBynB,EACI,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOC,KAAM10B,GAAiB20B,OAAK,EAAC/oB,UAAWgpB,KAC/C,kBAAC,KAAD,CAAOF,KAAM10B,GAAqB4L,UAAWmpB,KAC7C,kBAAC,KAAD,CAAOL,KAAM10B,IACT,kBAAC,KAAD,CAAUoT,GAAIpT,MAElB,kBAAC,KAAD,CAAO00B,KAAM10B,GAAY4L,UAAWipB,KAEpC,kBAAC,KAAD,CAAOH,KAAM10B,GAAkB4L,UAAWopB,KAC1C,kBAAC,KAAD,CAAON,KAAM10B,GAAc4L,UAAWqpB,MAGvCliB,IACP0hB,EACI,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOC,KAAM10B,GAAiB20B,OAAK,EAAC/oB,UAAWgpB,KAC/C,kBAAC,KAAD,CAAOF,KAAM10B,IACT,kBAAC,KAAD,CAAUoT,GAAIpT,MAElB,kBAAC,KAAD,CAAO00B,KAAM10B,IACT,kBAAC,KAAD,CAAUoT,GAAIpT,MAElB,kBAAC,KAAD,CAAO00B,KAAM10B,GAAY4L,UAAWipB,KACpC,kBAAC,KAAD,CAAOH,KAAM10B,IACT,kBAAC,KAAD,CAAUoT,GAAIpT,MAElB,kBAAC,KAAD,CAAO00B,KAAM10B,GAAc4L,UAAWqpB,OAK9C,kBAAC,KAAD,KACI,kBAAC,GAAD,CAAQliB,SAAUA,EAAUjU,MAAOgO,KAClC2nB,MCrBEpoB,iBAZS,SAAA/X,GAAK,MAAK,CAC9BuB,eAAgBvB,EAAMmH,SAAS5F,eAC/BC,aAAcxB,EAAMmH,SAAS3F,aAC7BqrB,gBAAiB7sB,EAAMmH,SAAS1F,YAGT,SAAAmM,GACvB,MAAO,CACHgzB,eAAgB,kBAAMhzB,ErDVA,WAC1B,IAAM7L,EAAQC,aAAaC,QAAQ,SACnC,OAAIF,IAAUA,EAAMG,ShFvCE,WgFwCX,CACH9B,KrFxBoB,oBqF4BrB,CACHA,KrF3B6B,wBqF4B7B2B,QACAQ,KAJSP,aAAaC,QAAQ,aqDGC4+B,QAIxB9oB,EAzCH,SAAAnM,GAAU,IACVrK,EAAkDqK,EAAlDrK,eAAgBC,EAAkCoK,EAAlCpK,aAAcqrB,EAAoBjhB,EAApBihB,gBAatC,OAJAlW,qBAAU,WACN/K,EAAMg1B,mBACP,CAACh1B,IAGA,kBAAC,WAAD,CAAUk1B,SAAU,MAChB,yBAAKn0B,UAAU,aACX,kBAAC,GAAD,MACA,kBAAC,GAAD,CACIlL,QAASorB,EACTzsB,KAAMoB,EACNE,OAAQH,EACRk3B,oBApBY,SAAC1sB,EAAOotB,GAChB,eAAXA,GAILtrB,aChBYqR,QACW,cAA7BrD,OAAOokB,SAASc,UACe,UAA7BllB,OAAOokB,SAASc,UAChBllB,OAAOokB,SAASc,SAASC,MACvB,2DCLN,uCAiBA,IAAMC,GAAiBC,cAEjBC,GAGaC,IAENzzB,GAAQ0zB,YACjBr6B,EACAm6B,GAAiBG,YAAgBL,MAGrCA,GAAeM,IAAIC,IAEnBC,IAASC,OACL,kBAAC,KAAD,CAAU/zB,MAAOA,IACb,kBAAC,GAAD,OAEJ8C,SAASC,eAAe,SD+DtB,kBAAmBvI,WACrBA,UAAUw5B,cAAcC,MACrBj6B,MAAK,SAAA9E,GACJA,EAAag/B,gBAEdlzB,OAAM,SAAAnM,GACLs/B,QAAQt/B,MAAMA,EAAMf,c","file":"static/js/main.076571af.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionsType';\n\nconst teachers = (\n    state = {\n        teachers: [],\n        teacher: {},\n        disabledTeachers: []\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.ADD_TEACHER:\n            return {\n                ...state,\n                teachers: [...state.teachers, action.result]\n            };\n\n        case actionTypes.DELETE_TEACHER:\n            return {\n                ...state,\n                teachers: [\n                    ...state.teachers.filter(\n                        teachers => teachers.id !== action.result\n                    )\n                ]\n            };\n\n        case actionTypes.SELECT_TEACHER:\n            let teacher = state.teachers.filter(\n                teacher => teacher.id === action.result\n            )[0];\n            if (!teacher) {\n                teacher = { id: null };\n            }\n            return {\n                ...state,\n                teacher: teacher\n            };\n\n        case actionTypes.UPDATE_TEACHER:\n            const updatedTeacher = [];\n            state.teachers.forEach(teacher => {\n                if (teacher.id === action.result.id) {\n                    teacher = { ...teacher, ...action.result };\n                }\n                updatedTeacher.push(teacher);\n            });\n            return {\n                ...state,\n                teacher: {},\n                teachers: updatedTeacher\n            };\n\n        case actionTypes.SHOW_ALL:\n            return {\n                ...state,\n                teachers: [...action.result]\n            };\n        case actionTypes.SET_DISABLED_TEACHERS:\n            return {\n                ...state,\n                disabledTeachers: [...action.result]\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default teachers;\n","export const ADD_LESSON_CARD = 'ADD_LESSON_CARD';\nexport const SET_LESSONS_CARDS = 'SET_LESSONS_CARDS';\nexport const SET_LESSON_TYPES = 'SET_LESSON_TYPES';\nexport const DELETE_LESSON_CARD = 'DELETE_LESSON_CARD';\nexport const SELECT_LESSON_CARD = 'SELECT_LESSON_CARD';\nexport const UPDATE_LESSON_CARD = 'UPDATE_LESSON_CARD';\nexport const SELECT_GROUP_ID = 'SELECT_GROUP_ID';\nexport const SET_UNIQUE_ERROR = 'SET_UNIQUE_ERROR';\n\nexport const SET_OPEN_SNACKBAR = 'SET_OPEN_SNACKBAR';\n\nexport const SET_USERS = 'SET_USERS';\n\nexport const AUTH_USER = 'AUTH_USER';\nexport const AUTH_USER_SUCCESS = 'AUTH_USER_SUCCESS';\nexport const AUTH_USER_ERROR = 'AUTH_USER_ERROR';\nexport const AUTH_USER_INITIATE_LOGOUT = 'AUTH_USER_INITIATE_LOGOUT';\nexport const AUTH_USER_LOGOUT = 'AUTH_USER_LOGOUT';\nexport const AUTH_USER_AUTO_LOGOUT = 'AUTH_USER_AUTO_LOGOUT';\nexport const AUTH_USER_CHECK_STATE = 'AUTH_USER_CHECK_STATE';\nexport const SET_AUTH_ERROR = 'SET_AUTH_ERROR';\n\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const REGISTER_USER_ERROR = 'REGISTER_USER_ERROR';\n\nexport const RESET_USER_PASSWORD = 'RESET_USER_PASSWORD';\nexport const RESET_USER_PASSWORD_SUCCESS = 'RESET_USER_PASSWORD_SUCCESS';\nexport const RESET_USER_PASSWORD_ERROR = 'RESET_USER_PASSWORD_ERROR';\n\nexport const ACTIVATE_USER = 'ACTIVATE_USER';\nexport const ACTIVATE_USER_SUCCESS = 'ACTIVATE_USER_SUCCESS';\nexport const ACTIVATE_USER_ERROR = 'ACTIVATE_USER_ERROR';\n\nexport const SET_LOADING_INDICATOR = 'SET_LOADING_INDICATOR';\nexport const SET_SCHEDULE_LOADING_INDICATOR = 'SET_SCHEDULE_LOADING_INDICATOR';\n\nexport const SET_SCHEDULE_ITEMS = 'SET_SCHEDULE_ITEMS';\nexport const SET_CURRENT_SEMESTER = 'SET_CURRENT_SEMESTER';\nexport const ADD_ITEM_TO_SCHEDULE = 'ADD_ITEM_TO_SCHEDULE';\nexport const CHECK_AVAILABILITY_SCHEDULE = 'CHECK_AVAILABILITY_SCHEDULE';\nexport const SET_FULL_SCHEDULE = 'SET_FULL_SCHEDULE';\nexport const SET_GROUP_SCHEDULE = 'SET_GROUP_SCHEDULE';\nexport const SET_SCHEDULE_TYPE = 'SET_SCHEDULE_TYPE';\nexport const DELETE_ITEM_FROM_SCHEDULE = 'DELETE_ITEM_FROM_SCHEDULE';\nexport const SET_ITEM_GROUP_ID = 'SET_ITEM_GROUP_ID';\n\nexport const ADD_TEACHER = 'ADD_TEACHER';\nexport const SELECT_TEACHER = 'SELECT_TEACHER';\nexport const UPDATE_TEACHER = 'UPDATE_TEACHER';\nexport const DELETE_TEACHER = 'DELETE_TEACHER';\nexport const SHOW_ALL = 'SHOW_ALL';\n\nexport const UPDATE_WISH = 'UPDATE_WISH';\nexport const SELECT_WISH = 'SELECT_WISH';\nexport const SHOW_ALL_WISH = 'SHOW_ALL_WISH';\nexport const SET_MY_TEACHER_WISHES = 'SET_MY_TEACHER_WISHES';\n\nexport const SHOW_ALL_BUSY_ROOMS = 'SHOW_ALL_BUSY_ROOMS';\n\nexport const SET_CLASS_SCHEDULE_LIST = 'SET_CLASS_SCHEDULE_LIST';\nexport const ADD_CLASS_SCHEDULE_ONE = 'ADD_CLASS_SCHEDULE_ONE';\nexport const GET_CLASS_SCHEDULE_LIST = 'GET_CLASS_SCHEDULE_LIST';\nexport const GET_CLASS_SCHEDULE_ONE = 'GET_CLASS_SCHEDULE_ONE';\nexport const DELETE_CLASS_SCHEDULE_ONE = 'DELETE_CLASS_SCHEDULE_ONE';\nexport const UPDATE_CLASS_SCHEDULE_ONE = 'UPDATE_CLASS_SCHEDULE_ONE';\nexport const CLEAR_CLASS_SCHEDULE_ONE = 'CLEAR_CLASS_SCHEDULE_ONE';\n\nexport const ADD_GROUP = 'ADD_GROUP';\nexport const DELETE_GROUP = 'DELETE_GROUP';\nexport const SHOW_ALL_GROUPS = 'SHOW_ALL_GROUPS';\nexport const SELECT_GROUP = 'SELECT_GROUP';\nexport const UPDATE_GROUP = 'UPDATE_GROUP';\nexport const CLEAR_GROUP = 'CLEAR_GROUP';\n\nexport const ADD_ROOM = 'ADD_ROOM';\nexport const DELETE_ROOM = 'DELETE_ROOM';\nexport const SHOW_LIST_OF_ROOMS = 'SHOW_LIST_OF_ROOMS';\nexport const SELECT_ONE_ROOM = 'SELECT_ONE_ROOM';\nexport const UPDATE_ONE_ROOM = 'UPDATE_ONE_ROOM';\nexport const CLEAR_ROOM_ONE = 'CLEAR_ROOM_ONE';\nexport const GET_ALL_ROOM_TYPES = 'GET_ALL_ROOM_TYPES';\nexport const POST_NEW_TYPE = 'POST_NEW_TYPE';\nexport const DELETE_TYPE = 'DELETE_TYPE';\nexport const GET_ONE_NEW_TYPE = 'GET_ONE_NEW_TYPE';\nexport const UPDATE_ONE_TYPE = 'UPDATE_ONE_TYPE';\nexport const CLEAR_ONE_NEW_TYPE = 'CLEAR_ONE_NEW_TYPE';\nexport const SHOW_FREE_ROOMS = 'SHOW_FREE_ROOMS';\nexport const CLEAR_FREE_ROOM = 'CLEAR_FREE_ROOM';\n\n\nexport const ADD_SUBJECT = 'ADD_SUBJECT';\nexport const DELETE_SUBJECT = 'DELETE_SUBJECT';\nexport const SHOW_ALL_SUBJECTS = 'SHOW_ALL_SUBJECT';\nexport const SELECT_SUBJECT = 'SELECT_SUBJECT';\nexport const UPDATE_SUBJECT = 'UPDATE_SUBJECT';\nexport const CLEAR_SUBJECT = 'CLEAR_SUBJECT';\n\nexport const SET_SCHEDULE_GROUP_ID = 'SET_SCHEDULE_GROUP_ID';\n\nexport const ADD_SEMESTER = 'ADD_SEMESTER';\nexport const DELETE_SEMESTER = 'DELETE_SEMESTER';\nexport const SHOW_ALL_SEMESTERS = 'SHOW_ALL_SEMESTER';\nexport const SELECT_SEMESTER = 'SELECT_SEMESTER';\nexport const UPDATE_SEMESTER = 'UPDATE_SEMESTER';\nexport const CLEAR_SEMESTER = 'CLEAR_SEMESTER';\nexport const SET_ERROR = 'SET_ERROR';\n\nexport const SET_DISABLED_ROOMS = 'SET_DISABLED_ROOMS';\nexport const SET_DISABLED_TEACHERS = 'SET_DISABLED_TEACHERS';\nexport const SET_DISABLED_GROUPS = 'SET_DISABLED_GROUPS';\nexport const SET_DISABLED_SEMESTERS = 'SET_DISABLED_SEMESTERS';\nexport const SET_DISABLED_SUBJECTS = 'SET_DISABLED_SUBJECTS';\n\nexport const SET_SCHEDULE_TEACHER_ID = 'SET_SCHEDULE_TEACHER_ID';\nexport const SET_TEACHER_SCHEDULE = 'SET_TEACHER_SCHEDULE';\nexport const SET_SEMESTER_LIST = 'SET_SEMESTER_LIST';\nexport const SET_SCHEDULE_SEMESTER_ID = 'SET_SCHEDULE_SEMESTER_ID';\n\n","export const updateObject = (oldObject, updatedValues) => {\n  return {\n    ...oldObject,\n    ...updatedValues\n  };\n};\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    lessons: [],\n    lessonTypes: [],\n    lesson: {},\n    groupId: null,\n    uniqueError: false\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_LESSON_CARD:\n            return updateObject(state, {\n                lessons: state.lessons.concat(action.result)\n            });\n        case actionTypes.SET_LESSONS_CARDS:\n            return updateObject(state, {\n                lessons: action.result\n            });\n        case actionTypes.SET_LESSON_TYPES:\n            return updateObject(state, {\n                lessonTypes: action.result\n            });\n        case actionTypes.DELETE_LESSON_CARD:\n            state.lessons = state.lessons.filter(\n                lesson => lesson.id !== action.result\n            );\n            return updateObject(state, {\n                lessons: state.lessons\n            });\n        case actionTypes.SELECT_LESSON_CARD:\n            let lesson = state.lessons.filter(\n                lesson => lesson.id === action.result\n            )[0];\n            if (!lesson) {\n                lesson = { id: null };\n            }\n            return updateObject(state, {\n                lesson: lesson\n            });\n        case actionTypes.UPDATE_LESSON_CARD:\n            const updatedLessons = [];\n            state.lessons.forEach(lesson => {\n                if (lesson.id === action.result.id) {\n                    lesson = { ...lesson, ...action.result };\n                }\n                updatedLessons.push(lesson);\n            });\n            return updateObject(state, {\n                lessons: updatedLessons,\n                lesson: {}\n            });\n        case actionTypes.SELECT_GROUP_ID:\n            return updateObject(state, {\n                lesson: {},\n                groupId: action.result\n            });\n        case actionTypes.SET_UNIQUE_ERROR:\n            return updateObject(state, {\n                uniqueError: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    isSnackbarOpen: false,\n    snackbarType: null,\n    message: null\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_OPEN_SNACKBAR:\n            let type = action.result.type;\n            let message = action.result.message;\n            return updateObject(state, {\n                isSnackbarOpen: action.result.isOpen,\n                snackbarType: type,\n                message: message\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import axios from 'axios';\nimport { TOKEN_BEGIN } from '../constants/tokenBegin';\n\nconst instance = axios.create({\n    baseURL: `/`\n});\n\nconst token = localStorage.getItem('token');\nif (token && token.includes(TOKEN_BEGIN)) {\n    instance.defaults.headers.common.Authorization = token;\n}\n\nexport default instance;\n","export const TOKEN_BEGIN= 'Bearer_';\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\nimport axios from '../../helper/axios';\n\nconst initialState = {\n    token: null,\n    role: null,\n    error: null,\n    activationError: null\n};\n\nconst reducer = (state = initialState, action) => {\n    const response = action.response;\n\n    switch (action.type) {\n        case actionTypes.AUTH_USER_SUCCESS:\n            return updateObject(state, {\n                token: response.token,\n                role: response.role,\n                error: null\n            });\n        case actionTypes.AUTH_USER_ERROR:\n            return updateObject(state, {\n                response,\n                error: { login: action.error }\n            });\n        case actionTypes.AUTH_USER_LOGOUT:\n            delete axios.defaults.headers.common.Authorization;\n\n            localStorage.removeItem('token');\n            localStorage.removeItem('expirationDate');\n            localStorage.removeItem('userRole');\n            return updateObject(state, {\n                response: null,\n                token: null,\n                error: null,\n                role: null\n            });\n        case actionTypes.REGISTER_USER_SUCCESS:\n            return updateObject(state, {\n                response\n            });\n        case actionTypes.REGISTER_USER_ERROR:\n            return updateObject(state, {\n                error: { registration: { reg: action.error } }\n            });\n        case actionTypes.RESET_USER_PASSWORD_SUCCESS:\n            return updateObject(state, {\n                resetPasswordResponse: response\n            });\n        case actionTypes.RESET_USER_PASSWORD_ERROR:\n            return updateObject(state, {\n                error: action.error\n            });\n        case actionTypes.ACTIVATE_USER_SUCCESS:\n            return updateObject(state, {\n                response\n            });\n        case actionTypes.ACTIVATE_USER_ERROR:\n            return updateObject(state, {\n                activationError: action.error\n            });\n        case actionTypes.SET_AUTH_ERROR:\n            return updateObject(state, {\n                error: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    loading: false,\n    scheduleLoading: false\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_LOADING_INDICATOR:\n            return updateObject(state, {\n                loading: action.result\n            });\n            case actionTypes.SET_SCHEDULE_LOADING_INDICATOR:\n            return updateObject(state, {\n                scheduleLoading: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    items: [],\n    availability: {},\n    itemsIds: [],\n    fullSchedule: [],\n    groupSchedule: {},\n    scheduleType: '',\n    scheduleGroupId: 0,\n    currentSemester: {}\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_SCHEDULE_ITEMS:\n            return updateObject(state, {\n                items: action.result\n            });\n        case actionTypes.SET_CURRENT_SEMESTER:\n            return updateObject(state, {\n                currentSemester: action.result\n            });\n        case actionTypes.CHECK_AVAILABILITY_SCHEDULE:\n            return updateObject(state, {\n                availability: action.result\n            });\n        case actionTypes.ADD_ITEM_TO_SCHEDULE:\n            const id = action.result.id;\n            let itemArr;\n            if (id) {\n                const index = state.items.findIndex(item => {\n                    return item.id === id;\n                });\n                if (index < 0) {\n                    itemArr = state.items.concat(action.result);\n                } else {\n                    state.items.splice(index, 1, action.result);\n                    itemArr = state.items;\n                }\n            } else {\n                itemArr = state.items.concat(action.result);\n            }\n            return updateObject(state, {\n                items: itemArr\n            });\n        case actionTypes.SET_SCHEDULE_TYPE:\n            return updateObject(state, {\n                groupSchedule: {},\n                fullSchedule: [],\n                scheduleType: action.newType\n            });\n        case actionTypes.SET_FULL_SCHEDULE:\n            updateObject(state, {\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n            return updateObject(state, {\n                fullSchedule: action.result\n            });\n        case actionTypes.SET_GROUP_SCHEDULE:\n            return updateObject(state, {\n                groupSchedule: action.result,\n                fullSchedule: []\n            });\n        case actionTypes.SET_ITEM_GROUP_ID:\n            return updateObject(state, {\n                itemGroupId: action.result\n            });\n        case actionTypes.SET_SCHEDULE_GROUP_ID:\n            return updateObject(state, {\n                scheduleGroupId: action.groupId,\n                scheduleTeacherId: null,\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n        case actionTypes.DELETE_ITEM_FROM_SCHEDULE:\n            const index = state.items.findIndex(\n                item => item.id === action.result\n            );\n            state.items.splice(index, 1);\n            const newArr = state.items;\n            return updateObject(state, {\n                items: newArr\n            });\n\n        case actionTypes.SET_SCHEDULE_TEACHER_ID:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                scheduleTeacherId: action.teacherId,\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n        case actionTypes.SET_TEACHER_SCHEDULE:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                scheduleTeacherId: null,\n                teacherSchedule: action.result,\n                groupSchedule: {},\n                fullSchedule: []\n            });\n        case actionTypes.SET_SEMESTER_LIST:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                scheduleTeacherId: null,\n                teacherSchedule: {},\n                groupSchedule: {},\n                fullSchedule: [],\n                semesters: action.result\n            });\n        case actionTypes.SET_SCHEDULE_SEMESTER_ID:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                scheduleTeacherId: null,\n                scheduleSemesterId: action.semesterId,\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from \"../actions/actionsType\";\nconst classActions = (\n  state = {\n    classScheduler: [],\n    classScheduleOne: {}\n  },\n  action\n) => {\n  switch (action.type) {\n    case actionTypes.SET_CLASS_SCHEDULE_LIST:\n      return {\n        ...state,\n        classScheduler: [...action.classScheduler]\n      };\n    case actionTypes.ADD_CLASS_SCHEDULE_ONE:\n      return {\n        ...state,\n        classScheduleOne: {},\n        classScheduler: [...state.classScheduler, action.classSchedulOne]\n      };\n    case actionTypes.GET_CLASS_SCHEDULE_LIST:\n      return state;\n    case actionTypes.GET_CLASS_SCHEDULE_ONE:\n      const one = state.classScheduler.filter(\n        classScheduleItem => classScheduleItem.id === action.classSchedulOne\n      );\n      return {\n        ...state,\n        classScheduleOne: one[0]\n      };\n    case actionTypes.DELETE_CLASS_SCHEDULE_ONE:\n      return {\n        ...state,\n        classScheduler: state.classScheduler.filter(\n          classScheduleItem => classScheduleItem.id !== action.classSchedulOne\n        )\n      };\n    case actionTypes.UPDATE_CLASS_SCHEDULE_ONE:\n      let classSchedulerstate = [...state.classScheduler];\n      classSchedulerstate[\n        classSchedulerstate.findIndex(\n          classItem => classItem.id === action.classSchedulOne.id\n        )\n      ] = action.classSchedulOne;\n      return {\n        ...state,\n        classScheduleOne: {},\n        classScheduler: [...classSchedulerstate]\n      };\n    case actionTypes.CLEAR_CLASS_SCHEDULE_ONE:\n      return {\n        ...state,\n        classScheduleOne: {}\n      };\n    default:\n      return state;\n  }\n};\nexport default classActions;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    subjects: [],\n    subject: {},\n    disabledSubjects: []\n};\n\nconst subjects = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_SUBJECT:\n            return updateObject(state, {\n                subjects: state.subjects.concat(action.result),\n                subject: state.subject\n            });\n\n        case actionTypes.DELETE_SUBJECT:\n            state.subjects = state.subjects.filter(\n                subject => subject.id !== action.result\n            );\n            return updateObject(state, {\n                subjects: state.subjects,\n                subject: state.subject\n            });\n\n        case actionTypes.SHOW_ALL_SUBJECTS:\n            return updateObject(state, {\n                subjects: action.result,\n                subject: state.subject\n            });\n\n        case actionTypes.SET_DISABLED_SUBJECTS:\n            return updateObject(state, {\n                disabledSubjects: action.result\n            });\n\n        case actionTypes.SELECT_SUBJECT:\n            let subject = state.subjects.filter(\n                subject => subject.id === action.result\n            )[0];\n            if (!subject) {\n                subject = { id: null };\n            }\n            return updateObject(state, {\n                subjects: state.subjects,\n                subject: subject\n            });\n\n        case actionTypes.UPDATE_SUBJECT:\n            const updatedSubjects = [];\n            state.subjects.forEach(subject => {\n                if (subject.id === action.result.id) {\n                    subject = { ...subject, ...action.result };\n                }\n                updatedSubjects.push(subject);\n            });\n            return updateObject(state, {\n                subjects: updatedSubjects,\n                subject: {}\n            });\n\n        case actionTypes.CLEAR_SUBJECT:\n            return {\n                ...state,\n                subject: {}\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default subjects;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    groups: [],\n    group: {},\n    disabledGroups: []\n};\n\nconst groups = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_GROUP:\n            return updateObject(state, {\n                groups: state.groups.concat(action.result),\n                group: state.group\n            });\n\n        case actionTypes.DELETE_GROUP:\n            state.groups = state.groups.filter(\n                group => group.id !== action.result\n            );\n            return updateObject(state, {\n                groups: state.groups,\n                group: state.group\n            });\n\n        case actionTypes.SHOW_ALL_GROUPS:\n            return updateObject(state, {\n                ...state,\n                groups: action.result\n            });\n        case actionTypes.SET_DISABLED_GROUPS:\n            return updateObject(state, {\n                ...state,\n                disabledGroups: action.result\n            });\n\n        case actionTypes.SELECT_GROUP:\n            let group = state.groups.filter(\n                group => group.id === action.result\n            )[0];\n            if (!group) {\n                group = { id: null };\n            }\n            return updateObject(state, {\n                groups: state.groups,\n                group: group\n            });\n\n        case actionTypes.UPDATE_GROUP:\n            const updatedGroups = [];\n            state.groups.forEach(group => {\n                if (group.id === action.result.id) {\n                    group = { ...group, ...action.result };\n                }\n                updatedGroups.push(group);\n            });\n            return updateObject(state, {\n                groups: updatedGroups,\n                group: {}\n            });\n\n        case actionTypes.CLEAR_GROUP:\n            return {\n                ...state,\n                group: {}\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default groups;\n","import * as actionTypes from '../actions/actionsType';\n\nconst rooms = (\n    state = {\n        rooms: [],\n        oneRoom: {},\n        disabledRooms: []\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.ADD_ROOM:\n            return {\n                ...state,\n                oneRoom: {},\n                rooms: [...state.rooms, action.result]\n            };\n        case actionTypes.DELETE_ROOM:\n            return {\n                ...state,\n                oneRoom: {},\n                rooms: [\n                    ...state.rooms.filter(rooms => rooms.id !== action.result)\n                ]\n            };\n\n        case actionTypes.SHOW_LIST_OF_ROOMS:\n            return {\n                ...state,\n                rooms: [...action.result]\n            };\n        case actionTypes.SET_DISABLED_ROOMS:\n            return {\n                ...state,\n                disabledRooms: [...action.result]\n            };\n        case actionTypes.SELECT_ONE_ROOM:\n            const one = state.rooms.filter(\n                roomItem => roomItem.id === action.result\n            );\n            return {\n                ...state,\n                oneRoom: one[0]\n            };\n        case actionTypes.UPDATE_ONE_ROOM:\n            let roomState = [...state.rooms];\n            roomState[\n                roomState.findIndex(\n                    roomItem => roomItem.id === action.result.id\n                )\n            ] = action.result;\n            return {\n                ...state,\n                oneRoom: {},\n                rooms: [...roomState]\n            };\n        case actionTypes.CLEAR_ROOM_ONE:\n            return {\n                ...state,\n                oneRoom: {}\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default rooms;\n","export const actionType = {\n  CREATED: 'created',\n  DELETED: 'deleted',\n  UPDATED: 'updated'\n};\n","import * as actionTypes from '../actions/actionsType';\nimport actions from 'redux-form/lib/actions';\nimport { actionType } from '../../constants/actionTypes';\n\nconst roomTypes = (\n    state = {\n        roomTypes: [],\n        oneType: {}\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.POST_NEW_TYPE:\n            return {\n                ...state,\n                roomTypes: [...state.roomTypes, action.result]\n            };\n\n        case actionTypes.GET_ALL_ROOM_TYPES:\n            return {\n                ...state,\n                roomTypes: [...action.result]\n            };\n        case actionTypes.DELETE_TYPE:\n            return {\n                ...state,\n                roomTypes: [\n                    ...state.roomTypes.filter(\n                        roomTypes => roomTypes.id !== action.result\n                    )\n                ]\n            };\n\n            case actionTypes.UPDATE_ONE_TYPE:\n                let updateTypeState = [...state.roomTypes];\n                updateTypeState[\n                    updateTypeState.findIndex(\n                        typeItem => typeItem.id === action.result.id\n                    )\n                ] = action.result;\n                return {\n                    ...state,\n                    oneType: {},\n                    roomTypes: [...updateTypeState]\n                };\n                case actionTypes.GET_ONE_NEW_TYPE:\n                    const one = state.roomTypes.filter(\n                        roomTypeItem => roomTypeItem.id === action.result\n                    );\n                    return {\n                        ...state,\n                        oneType: one[0]\n                    };\n        default:\n            return state;\n    }\n};\n\nexport default roomTypes;\n","import * as actionTypes from '../actions/actionsType';\n\nconst teachersWish = (\n    state = {\n        wishes: [],\n        wish: {},\n        myWishes: {}\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.SELECT_WISH:\n            let wish = state.wishes[0].find(\n                wish => wish.day_of_week === action.result\n            );\n\n            if (!wish) {\n                wish = { day_of_week: null };\n            }\n            return {\n                ...state,\n                wishes: state.wishes,\n                wish: wish\n            };\n\n        case actionTypes.SHOW_ALL_WISH:\n            return {\n                ...state,\n                wishes: [action.result],\n                wish: {}\n            };\n        case actionTypes.SET_MY_TEACHER_WISHES:\n            return {\n                ...state,\n                wish: {},\n                myWishes: action.result\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default teachersWish;\n","import * as actionTypes from '../actions/actionsType';\n\nconst busyRooms = (\n    state = {\n        busyRooms: []\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.SHOW_ALL_BUSY_ROOMS:\n            return {\n                ...state,\n                busyRooms: [action.result]\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default busyRooms;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    semesters: [],\n    semester: {},\n    disabledSemesters: []\n};\n\nconst semesters = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_SEMESTER:\n            return updateObject(state, {\n                semesters: state.semesters.concat(action.result),\n                semester: state.semester\n            });\n\n        case actionTypes.DELETE_SEMESTER:\n            state.semesters = state.semesters.filter(\n                semester => semester.id !== action.result\n            );\n            return updateObject(state, {\n                semesters: state.semesters,\n                semester: state.semester\n            });\n\n        case actionTypes.SHOW_ALL_SEMESTERS:\n            return updateObject(state, {\n                semesters: action.result,\n                semester: state.semester\n            });\n        case actionTypes.SET_DISABLED_SEMESTERS:\n            return updateObject(state, {\n                disabledSemesters: action.result\n            });\n\n        case actionTypes.SELECT_SEMESTER:\n            let semester = state.semesters.filter(\n                semester => semester.id === action.result\n            )[0];\n            if (!semester) {\n                semester = { id: null };\n            }\n            return updateObject(state, {\n                semesters: state.semesters,\n                semester: semester\n            });\n\n        case actionTypes.UPDATE_SEMESTER:\n            const updatedSemesters = [];\n            state.semesters.forEach(semester => {\n                if (semester.id === action.result.id) {\n                    semester = { ...semester, ...action.result };\n                }\n                updatedSemesters.push(semester);\n            });\n            return updateObject(state, {\n                semesters: updatedSemesters,\n                semester: {}\n            });\n\n        case actionTypes.CLEAR_SEMESTER:\n            return {\n                ...state,\n                semester: {}\n            };\n        case actionTypes.SET_ERROR:\n            return updateObject(state, {\n                uniqueError: action.result\n            });\n\n        default:\n            return state;\n    }\n};\n\nexport default semesters;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    users: []\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_USERS:\n            return updateObject(state, {\n                users: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport actions from 'redux-form/lib/actions';\n\nconst freeRooms = (\n    state = {\n        freeRooms : [],\n        freeRoom : {}\n    }, \n    action\n) => {\n    switch(action.type) {\n        case actionTypes.SHOW_FREE_ROOMS:\n            return {\n                ...state,\n                freeRooms: action.result\n            };\n        case actionTypes.CLEAR_FREE_ROOM:\n            return {\n                ...state,\n                freeRoom: {}\n            };\n        default:\n            return state;    \n    }\n};\n\nexport default freeRooms;","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport teachers from './teachers';\nimport lesson from './lesson';\nimport snackbar from './snackbar';\nimport auth from './auth';\nimport loadingIndicator from './loadingIndicator';\nimport schedule from './schedule';\nimport classActions from './class';\nimport subjects from './subjects';\nimport groups from './groups';\nimport rooms from './rooms';\nimport roomTypes from './roomTypes';\nimport teachersWish from './teachersWish';\nimport busyRooms from './busyRooms';\nimport semesters from './semesters';\nimport users from './users';\nimport freeRooms from './freeRooms';\n\n\nconst rootReducer = combineReducers({\n    lesson,\n    auth,\n    snackbar,\n    schedule,\n    users,\n    loadingIndicator,\n    classActions,\n    teachers,\n    subjects,\n    groups,\n    rooms,\n    roomTypes,\n    teachersWish,\n    busyRooms,\n    semesters,\n    freeRooms,\n\n    form: formReducer\n});\n\nexport default rootReducer;\n","import axios from '../helper/axios';\n\nimport {\n    ACTIVATE_ACCOUNT_URL,\n    LOGIN_URL,\n    LOGOUT_URL,\n    REGISTRATION_URL,\n    RESET_PASSWORD_URL\n} from '../constants/axios';\n\nexport const authUserService = request => {\n    return axios.post(LOGIN_URL, request.result).then(response => {\n        return response;\n    });\n};\n\nexport const registerUserService = request => {\n    return axios.post(REGISTRATION_URL, request.result).then(response => {\n        return response;\n    });\n};\n\nexport const resetUserPasswordService = request => {\n    return axios\n        .put(\n            `${RESET_PASSWORD_URL}?email=${request.result.email}`,\n            request.result\n        )\n        .then(response => {\n            return response;\n        });\n};\n\nexport const activateUserService = request => {\n    return axios\n        .put(`${ACTIVATE_ACCOUNT_URL}?token=${request.result}`)\n        .then(response => response);\n};\n\nexport const logoutUserService = () => {\n    return axios.post(LOGOUT_URL).then(response => response);\n};\n","export const CLASS_URL = 'classes';\nexport const GROUP_URL = 'groups';\nexport const LESSON_URL = 'lessons';\nexport const LESSON_TYPES_URL = 'lessons/types';\nexport const LOGIN_URL = 'auth/sign-in';\nexport const LOGOUT_URL = 'auth/sign-out';\nexport const REGISTRATION_URL = 'auth/sign-up';\nexport const RESET_PASSWORD_URL = 'auth/reset-password';\nexport const ACTIVATE_ACCOUNT_URL = 'auth/activation-account';\nexport const TEACHER_URL = 'teachers';\nexport const ROOM_URL = 'rooms';\nexport const ROOM_TYPES_URL = 'room-types';\nexport const FREE_ROOMS_URL = 'rooms/free';\nexport const SUBJECT_URL = 'subjects';\nexport const FULL_SCHEDULE_URL = 'schedules/full/semester?semesterId=';\nexport const GROUP_SCHEDULE_URL = 'schedules/full/groups?semesterId=';\nexport const TEACHER_WISHES = 'teacher_wishes';\nexport const SCHEDULE_SEMESTER_ITEMS_URL = 'schedules/semester';\nexport const SCHEDULE_ITEMS_URL = 'schedules';\nexport const CURRENT_SEMESTER_URL = 'semesters/current';\n\nexport const SCHEDULE_CHECK_AVAILABILITY_URL = 'schedules/data-before';\nexport const BUSY_ROOMS = 'schedules/full/rooms';\nexport const SEMESTERS_URL = 'semesters';\nexport const TEACHER_SCHEDULE_URL = 'schedules/full/teachers?semesterId=';\n\nexport const DISABLED_ROOMS_URL = 'rooms/disabled';\nexport const DISABLED_TEACHERS_URL = 'teachers/disabled';\nexport const DISABLED_GROUPS_URL = 'groups/disabled';\nexport const DISABLED_SEMESTERS_URL = 'semesters/disabled';\nexport const DISABLED_SUBJECTS_URL = 'subjects/disabled';\n\nexport const USERS_URL = 'users/with-role-user';\nexport const TEACHERS_WITHOUT_ACCOUNT_URL = 'not-registered-teachers';\nexport const MERGE_USER_AND_TEACHER_URL = 'managers/teacher_credentials';\n\nexport const MY_TEACHER_WISHES_URL = 'teacher_wishes/my-wishes';\n\nexport const PUBLIC_CLASSES_URL = 'public/classes';\nexport const PUBLIC_GROUP_URL = 'public/groups';\nexport const PUBLIC_TEACHER_URL = 'public/teachers';\nexport const PUBLIC_SEMESTERS_URL = 'public/semesters';\n","import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nvar supportedLangs = ['en', 'uk'];\nvar userLang = (navigator.language || navigator.userLanguage).slice(0, 2);\nexport const lang = supportedLangs.find(i => i === userLang) || 'en';\n\ni18n.use(LanguageDetector)\n    .use(initReactI18next)\n    .use(Backend)\n    .init({\n        lng: lang,\n        backend: {\n            loadPath: '/assets/i18n/translations/{{lng}}/{{ns}}.json'\n        },\n        fallbackLng: 'en',\n        debug: false,\n        ns: ['formElements', 'validationMessages', 'common', 'serviceMessages'],\n        defaultNS: 'common',\n        keySeparator: false,\n        useDataAttrOptions: true,\n        interpolation: {\n            escapeValue: false,\n            formatSeparator: ','\n        },\n        react: {\n            wait: true\n        }\n    });\n\nexport default i18n;\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { authUserService } from '../services/authService';\n\nimport { TOKEN_BEGIN } from '../constants/tokenBegin';\n\nimport axios from '../helper/axios';\nimport i18n from '../helper/i18n';\n\nexport function* authSaga(payload) {\n    try {\n        const response = yield call(authUserService, payload);\n        const jwtDecode = require('jwt-decode');\n        const token = response.data.token;\n        const decodedJWT = jwtDecode(token);\n        const expirationDate = new Date(decodedJWT.exp * 1000);\n\n        axios.defaults.headers.common.Authorization = TOKEN_BEGIN + token;\n\n        yield localStorage.setItem('token', TOKEN_BEGIN + token);\n        yield localStorage.setItem('expirationDate', expirationDate);\n        yield localStorage.setItem('userRole', decodedJWT.roles);\n\n        yield put({\n            type: actionTypes.AUTH_USER_SUCCESS,\n            response: { token, role: decodedJWT.roles }\n        });\n\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n\n        yield put({\n            type: actionTypes.AUTH_USER_AUTO_LOGOUT,\n            expirationTime: decodedJWT.exp * 1000 - new Date().getTime()\n        });\n    } catch (error) {\n        yield put({\n            type: actionTypes.AUTH_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { logoutUserService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* logoutSaga(payload) {\n    try {\n        yield call(logoutUserService, payload);\n        yield put({\n            type: actionTypes.AUTH_USER_LOGOUT\n        });\n    } catch (error) {\n        yield put({\n            type: actionTypes.AUTH_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n    }\n}\n","import { call, delay } from 'redux-saga/effects';\n\nimport { logoutSaga } from './logoutSaga';\n\nexport function* checkAuthTimeoutSaga(action) {\n    yield delay(action.expirationTime);\n    yield call(logoutSaga);\n}\n","import { put } from 'redux-saga/effects';\n\nimport * as actionTypes from '../redux/actions/actionsType';\n\nexport function* checkAuthStateSaga(payload) {\n    if (!payload.token) {\n        yield put({ type: actionTypes.AUTH_USER_LOGOUT });\n    } else {\n        const expirationDate = new Date(localStorage.getItem('expirationDate'));\n        if (expirationDate <= new Date()) {\n            yield put({ type: actionTypes.AUTH_USER_LOGOUT });\n        } else {\n            yield put({\n                type: actionTypes.AUTH_USER_SUCCESS,\n                response: {\n                    token: payload.token,\n                    role: payload.role\n                }\n            });\n        }\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { registerUserService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* registrationSaga(payload) {\n    try {\n        const response = yield call(registerUserService, payload);\n        yield put({ type: actionTypes.REGISTER_USER_SUCCESS, response });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    } catch (error) {\n        yield put({\n            type: actionTypes.REGISTER_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { activateUserService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* activateUserSaga(payload) {\n    try {\n        const response = yield call(activateUserService, payload);\n        yield put({ type: actionTypes.ACTIVATE_USER_SUCCESS, response });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    } catch (error) {\n        yield put({\n            type: actionTypes.ACTIVATE_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { resetUserPasswordService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* resetUserPasswordSaga(payload) {\n    try {\n        const response = yield call(resetUserPasswordService, payload);\n        yield put({ type: actionTypes.RESET_USER_PASSWORD_SUCCESS, response });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    } catch (error) {\n        yield put({\n            type: actionTypes.RESET_USER_PASSWORD_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { takeLatest, takeEvery } from 'redux-saga/effects';\n\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { authSaga } from './authSaga';\nimport { logoutSaga } from './logoutSaga';\nimport { checkAuthTimeoutSaga } from './checkAuthTimeoutSaga';\nimport { checkAuthStateSaga } from './checkAuthStateSaga';\nimport { registrationSaga } from './registrationSaga';\nimport { activateUserSaga } from './activateUserSaga';\nimport { resetUserPasswordSaga } from './resetUserPasswordSaga';\n\nexport default function* watchUserAuthentication() {\n    yield takeLatest(actionTypes.REGISTER_USER, registrationSaga);\n    yield takeLatest(actionTypes.ACTIVATE_USER, activateUserSaga);\n    yield takeLatest(actionTypes.RESET_USER_PASSWORD, resetUserPasswordSaga);\n    yield takeLatest(actionTypes.AUTH_USER, authSaga);\n    yield takeEvery(actionTypes.AUTH_USER_CHECK_STATE, checkAuthStateSaga);\n    yield takeEvery(actionTypes.AUTH_USER_AUTO_LOGOUT, checkAuthTimeoutSaga);\n    yield takeLatest(actionTypes.AUTH_USER_INITIATE_LOGOUT, logoutSaga);\n}\n","import { fork } from 'redux-saga/effects';\nimport watchUserAuthentication from './watchers';\n\nexport default function* startForman() {\n  yield fork(watchUserAuthentication);\n}","import * as moment from 'moment';\nimport {\n    checkUniqClassName,\n    checkUniqueGroup,\n    checkUniqueRoomName,\n    checkUniqueSubject,\n    checkUniqWish,\n    timeIntersectService,\n    checkUniqSemester\n} from './storeValidation';\nimport i18n from '../helper/i18n';\nimport { validation } from '../constants/validation';\n\nexport const required = value =>\n    value ? undefined : i18n.t('validationMessages:required_message');\n\nexport const lessThanZero = value =>\n    value > 0\n        ? undefined\n        : i18n.t('validationMessages:bigger_than_zero_message');\n\nconst minLength = min => value =>\n    value && value.length < min\n        ? i18n.t('validationMessages:bigger_than_char_message', { min: min })\n        : undefined;\n\nexport const minLengthValue = minLength(3);\n\nconst maxLength = max => value =>\n    value && value.length > max\n        ? i18n.t('validationMessages:less_than_char_message', {\n              max: max\n          })\n        : undefined;\n\nexport const maxLengthValue = maxLength(55);\n\nexport const lessThanTime = (value, previousValue, allValues) => {\n    const otherField = 'endTime';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'HH:mm').toDate() <=\n        moment(allValues.values[otherField], 'HH:mm').toDate() &&\n        allValues.values[otherField] !== undefined\n        ? undefined\n        : i18n.t('validationMessages:less_than_field_message', {\n              field: i18n.t('formElements:class_to_label')\n          });\n};\n\nexport const greaterThanTime = (value, previousValue, allValues) => {\n    const otherField = 'startTime';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'HH:mm').toDate() >=\n        moment(allValues.values[otherField], 'HH:mm').toDate()\n        ? undefined\n        : i18n.t('validationMessages:bigger_than_field_message', {\n              field: i18n.t('formElements:class_from_label')\n          });\n};\n\nexport const uniqueClassName = value => {\n    return checkUniqClassName(value);\n};\n\nexport const uniqueGroup = value => {\n    return checkUniqueGroup(value);\n};\n\nexport const uniqueSubject = value => {\n    return checkUniqueSubject(value);\n};\n\nexport const timeIntersect = (value, previousValue, allValues) => {\n    return timeIntersectService(\n        allValues.values['startTime'],\n        allValues.values['endTime']\n    );\n};\n\nexport const uniqueRoomName = value => {\n    return checkUniqueRoomName(value);\n};\n\nexport const uniqWish = value => {\n    return checkUniqWish(value);\n};\n\nexport const email = value =>\n    value && !validation.EMAIL.test(value)\n        ? i18n.t('validationMessages:email')\n        : undefined;\n\nexport const password = value =>\n    value && !validation.PASSWORD.test(value)\n        ? i18n.t('validationMessages:password')\n        : undefined;\n\n        const minYear = min => value =>\n        value < min\n            ? i18n.t('validationMessages:bigger_than_this_year_message', { min: min })\n            : undefined;\n            var today = new Date();\n            var year = today.getFullYear();\n    export const minYearValue = minYear(year);\n    \n    export const lessThanDate = (value, previousValue, allValues) => {\n        const otherField = 'endDay';\n        if (allValues.values[otherField] === undefined) return undefined;\n        return moment(value, 'DD/MM/YYYY').toDate() <=\n            moment(allValues.values[otherField], 'DD/MM/YYYY').toDate() &&\n            allValues.values[otherField] !== undefined\n            ? undefined\n            : i18n.t('validationMessages:less_than_field_message', {\n                  field: i18n.t('formElements:class_to_label')\n              });\n    };\n    \n    export const greaterThanDate = (value, previousValue, allValues) => {\n        const otherField = 'startDay';\n        if (allValues.values[otherField] === undefined) return undefined;\n        return moment(value, 'DD/MM/YYYY').toDate() >=\n            moment(allValues.values[otherField], 'DD/MM/YYYY').toDate()\n            ? undefined\n            : i18n.t('validationMessages:bigger_than_field_message', {\n                  field: i18n.t('formElements:class_from_label')\n              });\n    };\n    \n    export const uniquesSemesterName = value => checkUniqSemester(value)\n    \n","export const links = {\n    HOME_PAGE: '/',\n    ADMIN_PAGE: '/admin',\n    SCHEDULE_PAGE: '/schedule',\n    AUTH: '/login',\n    ACTIVATION_PAGE: '/activation-page',\n    LOGOUT: '/logout',\n    WISHES: '/wishes'\n};\n","import React from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { useTranslation } from 'react-i18next';\n\nconst LanguageSelector = props => {\n    const { t, i18n } = useTranslation();\n\n    const changeLanguage = event => {\n        i18n.changeLanguage(event.target.value);\n    };\n\n    return (\n        <RadioGroup row aria-label=\"lang\" name=\"lang\" value={i18n.language}>\n            <FormControlLabel\n                control={\n                    <>\n                        <Radio\n                            color=\"primary\"\n                            value=\"en\"\n                            onChange={changeLanguage}\n                        />\n                        <img\n                            className=\"language-icon\"\n                            src=\"https://image.flaticon.com/icons/svg/555/555417.svg\"\n                            alt=\"en\"\n                        />\n                    </>\n                }\n                label=\"\"\n            />\n            <FormControlLabel\n                control={\n                    <>\n                        <Radio\n                            color=\"primary\"\n                            value=\"uk\"\n                            onChange={changeLanguage}\n                        />\n                        <img\n                            className=\"language-icon\"\n                            src=\"https://image.flaticon.com/icons/svg/321/321267.svg\"\n                            alt=\"en\"\n                        />\n                    </>\n                }\n                label=\"\"\n            />\n        </RadioGroup>\n    );\n};\n\nexport default LanguageSelector;\n","export const colors = {\n    POSSIBILITY: '#f7f7c1',\n    DANGER: '#ff5e54',\n    ALLOW: '#68f271',\n    NOTHING: '#fff',\n    BORDER: '#d3d4d5'\n};\n","import * as actionTypes from \"./actionsType\";\n\nexport const setOpenSnackbar = res => {\n  return {\n    type: actionTypes.SET_OPEN_SNACKBAR,\n    result: res\n  };\n};\n","import * as actionTypes from './actionsType';\n\nexport const setLoading = res => {\n    return {\n        type: actionTypes.SET_LOADING_INDICATOR,\n        result: res\n    };\n};\n\nexport const setScheduleLoading = res => {\n    return {\n        type: actionTypes.SET_SCHEDULE_LOADING_INDICATOR,\n        result: res\n    };\n};\n\n\n\n","import * as actionTypes from './actionsType';\n\nexport const setScheduleItems = res => {\n    return {\n        type: actionTypes.SET_SCHEDULE_ITEMS,\n        result: res\n    };\n};\n\nexport const setCurrentSemester = res => {\n    return {\n        type: actionTypes.SET_CURRENT_SEMESTER,\n        result: res\n    };\n};\n\nexport const addItemToSchedule = res => {\n    return {\n        type: actionTypes.ADD_ITEM_TO_SCHEDULE,\n        result: res\n    };\n};\n\nexport const checkAvailabilitySchedule = res => {\n    return {\n        type: actionTypes.CHECK_AVAILABILITY_SCHEDULE,\n        result: res\n    };\n};\n\nexport const setFullSchedule = result => {\n    return {\n        type: actionTypes.SET_FULL_SCHEDULE,\n        result: result\n    };\n};\nexport const setItemGroupId = res => {\n    return {\n        type: actionTypes.SET_ITEM_GROUP_ID,\n        result: res\n    };\n};\n\nexport const setGroupSchedule = result => {\n    return {\n        type: actionTypes.SET_GROUP_SCHEDULE,\n        result: result\n    };\n};\nexport const deleteItemFromSchedule = res => {\n    return {\n        type: actionTypes.DELETE_ITEM_FROM_SCHEDULE,\n        result: res\n    };\n};\n\nexport const setScheduleType = result => {\n    return {\n        type: actionTypes.SET_SCHEDULE_TYPE,\n        newType: result\n    };\n};\n\nexport const setScheduleGroupId = groupId => {\n    return {\n        type: actionTypes.SET_SCHEDULE_GROUP_ID,\n        groupId: groupId\n    };\n};\n\nexport const setScheduleTeacherId = teacherId => {\n    return {\n        type: actionTypes.SET_SCHEDULE_TEACHER_ID,\n        teacherId: teacherId\n    };\n};\nexport const setTeacherSchedule = result => {\n    return {\n        type: actionTypes.SET_TEACHER_SCHEDULE,\n        result: result\n    };\n};\n\nexport const setSemesterList = result => {\n    return {\n        type: actionTypes.SET_SEMESTER_LIST,\n        result: result\n    };\n};\nexport const setScheduleSemesterId = semesterId => {\n    return {\n        type: actionTypes.SET_SCHEDULE_SEMESTER_ID,\n        semesterId: semesterId\n    };\n};\n","\nimport * as actionsType from './actionsType';\n\nexport const addTeacher = teacher => {\n\treturn {\n\t\ttype: actionsType.ADD_TEACHER,\n\t\tresult: teacher\n\t};\n};\n\nexport const deleteTeacher = id => {\n\treturn {\n\t\ttype: actionsType.DELETE_TEACHER,\n\t\tresult: id\n\t};\n};\n\nexport const selectTeacherCard = res => {\n\treturn {\n\t\ttype: actionsType.SELECT_TEACHER,\n\t\tresult: res\n\t};\n};\n\nexport const updateTeacherCard = res => {\n\treturn {\n\t\ttype: actionsType.UPDATE_TEACHER,\n\t\tresult: res\n\t};\n};\n\nexport const showAllTeachers = teachers => {\n\treturn {\n\t\ttype: actionsType.SHOW_ALL,\n\t\tresult: teachers\n\t};\n};\n\nexport const setDisabledTeachers = teachers => {\n\treturn {\n\t\ttype: actionsType.SET_DISABLED_TEACHERS,\n\t\tresult: teachers\n\t};\n};\n","import * as actionsType from './actionsType';\n\nexport const selectWishCard = res => {\n    return {\n        type: actionsType.SELECT_WISH,\n        result: res\n    };\n};\n\nexport const setMyTeacherWishes = res => {\n    return {\n        type: actionsType.SET_MY_TEACHER_WISHES,\n        result: res\n    };\n};\n\nexport const showAllWishes = data => {\n    return {\n        type: actionsType.SHOW_ALL_WISH,\n        result: data\n    };\n};\n","import * as actionTypes from \"./actionsType\";\n\nexport const setClassScheduleList = classScheduler => ({\n  type: actionTypes.SET_CLASS_SCHEDULE_LIST,\n  classScheduler\n});\n\nexport const addClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.ADD_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const getClassScheduleList = () => ({\n  type: actionTypes.GET_CLASS_SCHEDULE_LIST\n});\n\nexport const getClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.GET_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const deleteClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.DELETE_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const updateClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.UPDATE_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const clearClassScheduleOne = () => ({\n  type: actionTypes.CLEAR_CLASS_SCHEDULE_ONE\n});\n","import * as actionTypes from './actionsType';\n\nexport const showAllGroups = res => {\n    return {\n        type: actionTypes.SHOW_ALL_GROUPS,\n        result: res\n    };\n};\n\nexport const setDisabledGroups = res => {\n    return {\n        type: actionTypes.SET_DISABLED_GROUPS,\n        result: res\n    };\n};\n\nexport const addGroup = res => {\n    return {\n        type: actionTypes.ADD_GROUP,\n        result: res\n    };\n};\n\nexport const deleteGroup = res => {\n    return {\n        type: actionTypes.DELETE_GROUP,\n        result: res\n    };\n};\n\nexport const selectGroup = res => {\n    return {\n        type: actionTypes.SELECT_GROUP,\n        result: res\n    };\n};\n\nexport const updateGroup = res => {\n    return {\n        type: actionTypes.UPDATE_GROUP,\n        result: res\n    };\n};\n\nexport const clearGroup = () => ({\n    type: actionTypes.CLEAR_GROUP\n});\n","import * as actionTypes from './actionsType';\n\nexport const showAllSemesters = res => {\n    return {\n        type: actionTypes.SHOW_ALL_SEMESTERS,\n        result: res\n    };\n};\n\nexport const setDisabledSemesters = res => {\n    return {\n        type: actionTypes.SET_DISABLED_SEMESTERS,\n        result: res\n    };\n};\n\nexport const addSemester = res => {\n    return {\n        type: actionTypes.ADD_SEMESTER,\n        result: res\n    };\n};\n\nexport const deleteSemester = res => {\n    return {\n        type: actionTypes.DELETE_SEMESTER,\n        result: res\n    };\n};\n\nexport const selectSemester = res => {\n    return {\n        type: actionTypes.SELECT_SEMESTER,\n        result: res\n    };\n};\n\nexport const updateSemester = res => {\n    return {\n        type: actionTypes.UPDATE_SEMESTER,\n        result: res\n    };\n};\n\nexport const clearSemester = () => ({\n    type: actionTypes.CLEAR_SEMESTER\n});\n\nexport const setError = res => {\n    return {\n        type: actionTypes.SET_ERROR,\n        result: res\n    };\n};\n","import { store } from '../index';\n\nimport { setOpenSnackbar } from '../redux/actions/index';\n\nexport const handleSnackbarOpenService = (isOpen, type, message) => {\n    store.dispatch(\n        setOpenSnackbar({\n            isOpen: isOpen,\n            type: type,\n            message: message\n        })\n    );\n};\n\nexport const handleSnackbarCloseService = () => {\n    const snackbarStore = store.getState().snackbar;\n    store.dispatch(\n        setOpenSnackbar({\n            isOpen: false,\n            type: snackbarStore.snackbarType,\n            message: null\n        })\n    );\n};\n","export const snackbarTypes = {\n    ERROR: 'error',\n    WARNING: 'warning',\n    INFO: 'info',\n    SUCCESS: 'success'\n};\n","import { handleSnackbarOpenService } from '../services/snackbarService';\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport i18n from './i18n';\n\nexport const errorHandler = error => {\n    handleSnackbarOpenService(\n        true,\n        snackbarTypes.ERROR,\n        error.response\n            ? i18n.t(error.response.data.message, error.response.data.message)\n            : error\n    );\n};\n\nexport const successHandler = message => {\n    handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n};\n","import { store } from '../index';\n\nimport { reset } from 'redux-form';\nimport { TEACHER_WISH_FORM } from '../constants/reduxForms';\n\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { snackbarTypes } from '../constants/snackbarTypes';\n\nimport { MY_TEACHER_WISHES_URL, TEACHER_WISHES } from '../constants/axios';\nimport axios from '../helper/axios';\n\nimport i18n from '../helper/i18n';\n\nimport {\n    selectWishCard,\n    setMyTeacherWishes,\n    showAllWishes\n} from '../redux/actions';\nimport { errorHandler } from '../helper/handlerAxios';\n\nconst resetForm = form => {\n    store.dispatch(reset(form));\n};\n\nlet teacherWithWish = {};\n\nexport const showTeacherWish = wishId => {\n    axios\n        .get(TEACHER_WISHES)\n        .then(response => {\n            const teacherWish = response.data;\n            const teacherWishOne = teacherWish.find(teacherWish => {\n                return wishId === +teacherWish.teacher.id;\n            });\n\n            teacherWithWish = teacherWishOne;\n            store.dispatch(showAllWishes(teacherWishOne.teacherWishesList));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const updateTeacherWishService = (data, teacherWishList) => {\n    let updatedWish = [];\n\n    teacherWishList[0].forEach(wish => {\n        if (wish.day_of_week === data.day_of_week) {\n            wish = { ...wish, ...data };\n        }\n        updatedWish.push(wish);\n    });\n\n    const updatatTeacherWishes = {\n        id: teacherWithWish.id,\n        teacherWishesList: updatedWish\n    };\n\n    return axios\n        .put(TEACHER_WISHES, updatatTeacherWishes)\n        .then(response => {\n            store.dispatch(showAllWishes(response.data.teacherWishesList));\n            resetForm(TEACHER_WISH_FORM);\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:wish_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const selectTeacherWishService = wishDay => {\n    store.dispatch(selectWishCard(wishDay));\n};\n\nexport const getMyTeacherWishesService = () => {\n    axios\n        .get(MY_TEACHER_WISHES_URL)\n        .then(response => {\n            store.dispatch(setMyTeacherWishes(response.data));\n            store.dispatch(showAllWishes(response.data[0].teacherWishesList));\n            teacherWithWish = { id: response.data[0].teacher.id };\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n","export const LESSON_FORM = 'lessonForm';\nexport const GROUP_FORM = 'addGroup';\nexport const ROOM_FORM = 'AddRoom';\nexport const ROOM_FORM_TYPE = 'roomType';\nexport const FREE_ROOMS = 'FREE_ROOMS';\nexport const TEACHER_FORM = 'addTeacher';\nexport const CLASS_FORM = 'classForm';\nexport const LOGIN_FORM = 'loginForm';\nexport const REGISTRATION_FORM = 'registrationForm';\nexport const RESET_PASSWORD_FORM = 'resetPasswordForm';\nexport const SUBJECT_FORM = 'addSubject';\nexport const TEACHER_WISH_FORM = 'teacherWish';\nexport const SEMESTER_FORM = 'addSemester';\n","import { store } from '../index';\n\nimport { setLoading, setScheduleLoading } from '../redux/actions/index';\n\nexport const setLoadingService = isLoading => {\n    store.dispatch(setLoading(isLoading));\n};\n\nexport const setScheduleLoadingService = isLoading => {\n    store.dispatch(setScheduleLoading(isLoading));\n};\n","import { store } from '../index';\n\nimport axios from '../helper/axios';\nimport i18n from '../helper/i18n';\nimport { errorHandler } from '../helper/handlerAxios';\n\nimport {\n    checkAvailabilitySchedule,\n    deleteItemFromSchedule,\n    setCurrentSemester,\n    setFullSchedule,\n    setGroupSchedule,\n    setItemGroupId,\n    setScheduleGroupId,\n    setScheduleItems,\n    setScheduleSemesterId,\n    setScheduleTeacherId,\n    setScheduleType,\n    setSemesterList,\n    setTeacherSchedule,\n    showAllGroups,\n    showAllTeachers\n} from '../redux/actions/index';\n\nimport { setLoadingService, setScheduleLoadingService } from './loadingService';\nimport { handleSnackbarOpenService } from './snackbarService';\n\nimport {\n    CURRENT_SEMESTER_URL,\n    FULL_SCHEDULE_URL,\n    GROUP_SCHEDULE_URL,\n    SCHEDULE_CHECK_AVAILABILITY_URL,\n    SCHEDULE_ITEMS_URL,\n    SCHEDULE_SEMESTER_ITEMS_URL,\n    PUBLIC_SEMESTERS_URL,\n    TEACHER_SCHEDULE_URL,\n    PUBLIC_GROUP_URL,\n    PUBLIC_TEACHER_URL\n} from '../constants/axios';\n\nimport { snackbarTypes } from '../constants/snackbarTypes';\n\nimport { showBusyRooms } from './busyRooms';\n\nexport const getScheduleItemsService = () => {\n    axios\n        .get(CURRENT_SEMESTER_URL)\n        .then(response => {\n            store.dispatch(setCurrentSemester(response.data));\n            getScheduleItemsServiceBySemester(response.data.id);\n            showBusyRooms(response.data.id);\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t('common:no_current_semester_error')\n            );\n            setLoadingService(false);\n        });\n};\n\nconst getScheduleItemsServiceBySemester = semesterId => {\n    axios\n        .get(`${SCHEDULE_SEMESTER_ITEMS_URL}?semesterId=${semesterId}`)\n        .then(response => {\n            store.dispatch(setScheduleItems(response.data));\n            setScheduleLoadingService(false);\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const checkAvailabilityScheduleService = item => {\n    axios\n        .get(\n            SCHEDULE_CHECK_AVAILABILITY_URL +\n                '?classId=' +\n                item.periodId +\n                '&dayOfWeek=' +\n                item.dayOfWeek +\n                '&evenOdd=' +\n                item.evenOdd +\n                '&lessonId=' +\n                item.lessonId +\n                '&semesterId=' +\n                item.semesterId\n        )\n        .then(response => {\n            setLoadingService(false);\n            store.dispatch(checkAvailabilitySchedule(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\nexport const addItemToScheduleService = item => {\n    axios\n        .post(SCHEDULE_ITEMS_URL, item)\n        .then(response => {\n            getScheduleItemsService();\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const deleteItemFromScheduleService = itemId => {\n    axios\n        .delete(`${SCHEDULE_ITEMS_URL}/${itemId}`)\n        .then(response => {\n            store.dispatch(deleteItemFromSchedule(itemId));\n            getScheduleItemsService();\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const setItemGroupIdService = groupId => {\n    store.dispatch(setItemGroupId(groupId));\n};\n\nexport const setScheduleGroupIdService = groupId => {\n    store.dispatch(setScheduleGroupId(groupId));\n};\n\nexport const setScheduleTypeService = item => {\n    store.dispatch(setScheduleType(item));\n};\n\nexport const getFullSchedule = semesterId => {\n    axios\n        .get(FULL_SCHEDULE_URL + semesterId)\n        .then(response => {\n            store.dispatch(setFullSchedule(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const getGroupSchedule = (groupId, semesterId) => {\n    if (groupId > 0) {\n        axios\n            .get(GROUP_SCHEDULE_URL + semesterId + '&groupId=' + groupId)\n            .then(response => {\n                store.dispatch(setGroupSchedule(response.data));\n            })\n            .catch(err => {\n                errorHandler(err);\n            });\n    }\n};\nexport const getTeacherSchedule = (teacherId, semesterId) => {\n    if (teacherId > 0) {\n        axios\n            .get(TEACHER_SCHEDULE_URL + semesterId + '&teacherId=' + teacherId)\n            .then(response => {\n                store.dispatch(setTeacherSchedule(response.data));\n            })\n            .catch(err => {\n                errorHandler(err);\n            });\n    }\n};\nexport const setScheduleTeacherIdService = teacherId => {\n    store.dispatch(setScheduleTeacherId(teacherId));\n};\n\nexport const showAllPublicSemestersService = () => {\n    axios\n        .get(PUBLIC_SEMESTERS_URL)\n        .then(response => {\n            store.dispatch(setSemesterList(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\nexport const setScheduleSemesterIdService = semesterId => {\n    store.dispatch(setScheduleSemesterId(semesterId));\n};\n\nexport const showAllPublicGroupsService = () => {\n    axios\n        .get(PUBLIC_GROUP_URL)\n        .then(response => {\n            store.dispatch(showAllGroups(response.data.sort((a, b) => a - b)));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const showAllPublicTeachersService = () => {\n    axios\n        .get(PUBLIC_TEACHER_URL)\n        .then(response => {\n            store.dispatch(showAllTeachers(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n","import { store } from '../index';\n\nimport { BUSY_ROOMS } from '../constants/axios';\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport i18n from '../helper/i18n';\n\nimport axios from '../helper/axios';\n\nimport { showAllBusyRooms } from '../redux/actions';\n\nexport const showBusyRooms = semesterId => {\n    axios\n        .get(`${BUSY_ROOMS}?semesterId=${semesterId}`)\n        .then(response => {\n            store.dispatch(showAllBusyRooms(response.data));\n        })\n        .catch(error => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                error.response\n                    ? i18n.t(\n                          error.response.data.message,\n                          error.response.data.message\n                      )\n                    : error\n            );\n        });\n};\n","import * as actionsType from './actionsType';\n\nexport const showAllBusyRooms = data => {\n    return {\n        type: actionsType.SHOW_ALL_BUSY_ROOMS,\n        result: data\n    };\n};\n","export const cssClasses = {\n    SCHEDULE_BOARD: 'schedule-board',\n    IN_BOARD_SECTION: 'in-board-section',\n    IN_BOARD_CARD: 'in-board-card',\n    MORE_ICON: 'more-icon'\n};\n","import React, { useRef } from 'react';\n\nimport './Card.scss';\nimport { colors } from '../../constants/schedule/colors';\n\nimport { setItemGroupIdService } from '../../services/scheduleService';\nimport { cssClasses } from '../../constants/schedule/cssClasses';\n\nconst Card = props => {\n    let className = 'card';\n    if (props.class) {\n        className = className.concat(' ' + props.class);\n    }\n\n    let card = <div className={className}>{props.children}</div>;\n\n    const dragItemNode = useRef();\n    const dragItem = useRef();\n\n    if (props.draggable) {\n        const dragStart = e => {\n            const item = JSON.parse(e.target.childNodes[0].value);\n            const groupId = item.lesson.group.id;\n            const groupTitle = document.getElementById(`group-${groupId}`);\n            groupTitle.style.backgroundColor = colors.ALLOW;\n            const boards = document.getElementsByClassName(`group-${groupId}`);\n\n            const allBoards = document.getElementsByClassName('schedule-board');\n            const groupTitles = document.getElementsByClassName('group-title');\n\n            setTimeout(() => {\n                for (const board of allBoards) {\n                    board.style.display = 'none';\n                }\n\n                for (const groupTitle of groupTitles) {\n                    groupTitle.style.display = 'none';\n                }\n\n\n                groupTitle.style.display = 'flex';\n\n                for (const board of boards) {\n                    board.style.display = 'flex';\n                    if (\n                        board.childNodes[0].classList.contains(\n                            cssClasses.MORE_ICON\n                        ) &&\n                        !board.childNodes[1]\n                    ) {\n                        board.style.background = colors.POSSIBILITY;\n                    }\n                }\n            }, 50);\n\n\n            setItemGroupIdService(groupId);\n\n            dragItemNode.current = e.target;\n            dragItemNode.current.addEventListener('dragend', handleDragEnd);\n\n            e.dataTransfer.setData('card_id', dragItemNode.current.id);\n        };\n\n        const handleDragEnd = e => {\n            const groupId = +JSON.parse(e.target.childNodes[0].value).lesson\n                .group.id;\n            const groupTitleEl = document.getElementById(`group-${groupId}`);\n\n            const allBoards = document.getElementsByClassName('schedule-board');\n            const groupTitles = document.getElementsByClassName('group-title');\n\n            const boards = document.getElementsByClassName(`group-${groupId}`);\n\n            if (groupTitleEl) {\n                groupTitleEl.style.backgroundColor = colors.NOTHING;\n            }\n            for (const board of boards) {\n                if (board) {\n                    board.style.background = colors.NOTHING;\n                }\n            }\n\n            for (let board of allBoards) {\n                board.style.display = 'flex';\n            }\n\n            for (const groupTitle of groupTitles) {\n                groupTitle.style.display = 'flex';\n            }\n\n            dragItem.current = null;\n            dragItemNode.current.removeEventListener('dragend', handleDragEnd);\n            dragItemNode.current = null;\n        };\n\n        card = (\n            <div\n                id={props.id}\n                className={className}\n                onDragStart={dragStart}\n                draggable={props.draggable}\n            >\n                {props.children}\n            </div>\n        );\n    }\n\n    return <>{card}</>;\n};\n\nexport default Card;\n","import { store } from '../index';\n\nimport Moment from 'moment';\nimport { extendMoment } from 'moment-range';\nimport i18n from '../helper/i18n';\n\nexport const checkUniqClassName = className => {\n    const classId = store.getState().classActions.classScheduleOne.id;\n    var find = false;\n    if (classId) {\n        find = store\n            .getState()\n            .classActions.classScheduler.some(function (value, index, _arr) {\n                return value.class_name === className && value.id !== classId;\n            });\n    } else {\n        find = store\n            .getState()\n            .classActions.classScheduler.some(function (value, index, _arr) {\n                return value.class_name === className;\n            });\n    }\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const timeIntersectService = (startTime, endTime) => {\n    const classId = store.getState().classActions.classScheduleOne.id;\n    const moment = extendMoment(Moment);\n    let find = false;\n    if (startTime && endTime) {\n        const incomeRange = moment.range(\n            moment(startTime, 'HH:mm').toDate(),\n            moment(endTime, 'HH:mm').toDate()\n        );\n        if (classId) {\n            find = store\n                .getState()\n                .classActions.classScheduler.some(function (\n                    value,\n                    index,\n                    _arr\n                ) {\n                    return (\n                        incomeRange.intersect(\n                            moment.range(\n                                moment(value.startTime, 'HH:mm').toDate(),\n                                moment(value.endTime, 'HH:mm').toDate()\n                            )\n                        ) !== null && value.id !== classId\n                    );\n                });\n        } else {\n            find = store\n                .getState()\n                .classActions.classScheduler.some(function (\n                    value,\n                    index,\n                    _arr\n                ) {\n                    return (\n                        incomeRange.intersect(\n                            moment.range(\n                                moment(value.startTime, 'HH:mm').toDate(),\n                                moment(value.endTime, 'HH:mm').toDate()\n                            )\n                        ) !== null\n                    );\n                });\n        }\n    }\n    return find\n        ? i18n.t('validationMessages:intersect_time_error_message')\n        : undefined;\n};\n\nexport const checkUniqLesson = lesson => {\n    const lessons = store.getState().lesson.lessons;\n    let isNotUnique;\n    if (!lesson.id) {\n        isNotUnique = !!lessons.find(\n            storeLesson =>\n                storeLesson.subject.id === +lesson.subject.id &&\n                storeLesson.teacher.id === +lesson.teacher.id &&\n                storeLesson.lessonType === lesson.lessonType\n        );\n    } else {\n        isNotUnique = !!lessons.find(\n            storeLesson =>\n                storeLesson.subject.id === +lesson.subject.id &&\n                storeLesson.teacher.id === +lesson.teacher.id &&\n                storeLesson.lessonType === lesson.lessonType &&\n                storeLesson.id !== +lesson.id\n        );\n    }\n    return !isNotUnique;\n};\n\nexport const checkUniqueRoomName = roomName => {\n    const roomdId = store.getState().rooms.oneRoom.id;\n    let find = false;\n    if (roomdId) {\n        find = store\n        .getState()\n        .rooms.rooms.some(function (value, index, _arr) {\n            return value.name.toUpperCase() === roomName.toUpperCase() && value.id !== roomdId;\n        });\n    } else {\n     find = store\n        .getState()\n        .rooms.rooms.some(function (value, index, _arr) {\n            return value.name.toUpperCase() === roomName.toUpperCase()  ;\n        });\n    }\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const checkUniqueGroup = groupTitle => {\n    if (!groupTitle) {\n        return;\n    }\n    const find = store.getState().groups.groups.some(function (value) {\n        return (\n            value.title.toUpperCase().trim() === groupTitle.toUpperCase().trim()\n        );\n    });\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const checkUniqueSubject = subjectTitle => {\n    if (!subjectTitle) {\n        return;\n    }\n    const find = store.getState().subjects.subjects.some(function (value) {\n        return (\n            value.name.toUpperCase().trim() ===\n            subjectTitle.toUpperCase().trim()\n        );\n    });\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const checkUniqWish = wish => {\n    if (!wish) {\n        return;\n    }\n    const find = store.getState().teachersWish.wishes.some(function (value) {\n        return (\n            value.teacherWishesList[0].day_of_week.toUpperCase() ===\n            wish.toUpperCase()\n        );\n    });\n    return find ? 'Day must be unique!' : undefined;\n};\n\nexport const checkUniqSemester = semester => {\n    const semesters = store.getState().semesters.semesters;\n    let isNotUnique;\n    if (!semester.id) {\n        isNotUnique = !!semesters.find(\n            storeSemester =>\n                storeSemester.year === +semester.year &&\n                storeSemester.description.toUpperCase().trim() === semester.description.toUpperCase().trim()\n        );\n    } else {\n        isNotUnique = !!semesters.find(\n            storeSemester =>\n            storeSemester.year=== +semester.year &&\n            storeSemester.description.toUpperCase().trim() === semester.description.toUpperCase().trim() && \n            storeSemester.id !== +semester.id\n        );\n    }\n    \n    return !isNotUnique\n};\n","export const validation = {\n    EMAIL: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n    PASSWORD: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?=.*[!@#$%^&*]).{8,}$/\n};\n","import React from \"react\";\n\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport InputLabel from '@material-ui/core/InputLabel'\n\nimport {renderFromHelper} from './error';\n\nconst renderSelectField = ({\n  input,\n  label,\n  name,\n  id,\n  meta: { touched, error },\n  children,\n  ...custom\n}) => (\n  <FormControl error={touched && !!error}>\n    <InputLabel htmlFor={id}>{label}</InputLabel>\n    <Select\n      native\n      {...input}\n      {...custom}\n      name={name}\n      id={id}\n    >\n      {children}\n    </Select>\n    {renderFromHelper({ touched, error })}\n  </FormControl>\n)\n\nexport default renderSelectField;\n","import React from \"react\";\n\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\n\nexport const renderFromHelper = ({ touched, error }) => {\n  if (!(touched && error)) {\n    return;\n  } else {\n    return <FormHelperText>{touched && error}</FormHelperText>;\n  }\n};\n","import React, { useEffect } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { required } from '../../validation/validateFields';\nimport Button from '@material-ui/core/Button';\nimport renderSelectField from '../../share/renderedFields/select';\nimport { TEACHER_WISH_FORM } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\n\nlet WishForm = props => {\n    const { t } = useTranslation('formElements');\n\n    const { handleSubmit, classScheduler, pristine, submitting, reset } = props;\n\n    const class_on_day = [];\n\n    if (classScheduler.length > 0) {\n        classScheduler.map(classSchedulerOne => {\n            class_on_day.push(classSchedulerOne.class_name);\n        });\n    }\n\n    const days_of_week = [\n        'MONDAY',\n        'TUESDAY',\n        'WEDNESDAY',\n        'THURSDAY',\n        'FRIDAY',\n        'SATURDAY',\n        'SUNDAY'\n    ];\n\n    const wishOne = props.wish;\n    const wishDays = wishOne.day_of_week;\n\n    useEffect(() => {\n        if (wishDays) {\n            initializeFormWish(wishOne);\n        } else {\n            props.initialize();\n        }\n    }, [wishDays]);\n\n    const initializeFormWish = wishOne => {\n        props.initialize({\n            day_of_week: wishOne.day_of_week,\n            evenOdd: wishOne.evenOdd\n        });\n\n        const classStats = [];\n        wishOne.class_status.map(classStatus => {\n            classStats.push(classStatus);\n        });\n\n        for (let i = 0; i < classStats.length; i++) {\n            props.change(\n                `class_number${classStats[i].class_name}`,\n                `${classStats[i].status}`\n            );\n        }\n    };\n\n    return (\n        <form className=\"wish-form\" onSubmit={handleSubmit}>\n            <Field\n                name=\"day_of_week\"\n                className=\"week-days\"\n                component={renderSelectField}\n                label={t('teacher_wish_day')}\n                type=\"text\"\n                validate={[required]}\n                disabled\n            >\n                <option />\n                {days_of_week.map((day_of_week, index) => (\n                    <option key={index} value={`${day_of_week}`}>\n                        {t(`common:day_of_week_${day_of_week}`)}\n                    </option>\n                ))}\n            </Field>\n            {class_on_day.map(class_number => (\n                <Field\n                    key={class_number}\n                    name={`class_number${class_number}`}\n                    component={renderSelectField}\n                    validate={[required]}\n                    label={`${t(\n                        'teacher_wish_class_number'\n                    )}: ${class_number}`}\n                >\n                    <option />\n                    <option value={'OK'}>\n                        {t('common:teacher_wish_class_status_OK')}\n                    </option>\n                    <option value={'GOOD'}>\n                        {t('common:teacher_wish_class_status_GOOD')}\n                    </option>\n                    <option value={'BAD'}>\n                        {t('common:teacher_wish_class_status_BAD')}\n                    </option>\n                </Field>\n            ))}\n            <div className=\"form-buttons-container wish-margin-top\">\n                <Button\n                    className=\"buttons-style\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    type=\"submit\"\n                    disabled={pristine || submitting}\n                >\n                    {t('save_button_label')}\n                </Button>\n                <Button\n                    className=\"buttons-style\"\n                    variant=\"contained\"\n                    type=\"button\"\n                    disabled={pristine || submitting}\n                    onClick={() => {\n                        reset();\n                    }}\n                >\n                    {t('clear_button_label')}\n                </Button>\n            </div>\n        </form>\n    );\n};\nconst mapStateToProps = state => ({ wish: state.teachersWish.wish });\n\nWishForm = reduxForm({\n    form: TEACHER_WISH_FORM\n})(WishForm);\n\nexport default connect(mapStateToProps)(WishForm);\n","import { reset } from 'redux-form';\nimport { store } from '../index';\n\nexport const resetFormHandler = formName => {\n    store.dispatch(reset(formName));\n};\n","import axios from '../helper/axios';\nimport { store } from '../index';\nimport { CLASS_URL, PUBLIC_CLASSES_URL } from '../constants/axios';\n\nimport { CLASS_FORM } from '../constants/reduxForms';\n\nimport {\n    addClassScheduleOne,\n    setClassScheduleList,\n    getClassScheduleOne,\n    deleteClassScheduleOne,\n    updateClassScheduleOne,\n    clearClassScheduleOne\n} from '../redux/actions/class';\n\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport { setLoadingService } from './loadingService';\n\nexport const getClassScheduleListService = dispatch => {\n    axios\n        .get(CLASS_URL)\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(setClassScheduleList(bufferArray));\n            setLoadingService(false);\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getPublicClassScheduleListService = dispatch => {\n    axios\n        .get(PUBLIC_CLASSES_URL)\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(setClassScheduleList(bufferArray));\n        })\n        .catch(error => {\n            errorHandler(error);\n            setLoadingService(false);\n        });\n};\n\nexport const addClassScheduleOneService = values => {\n    if (values.id) {\n        putAddClassScheduleOneService(values);\n    } else {\n        postAddClassScheduleOneService(values);\n    }\n};\n\nexport const putAddClassScheduleOneService = values => {\n    axios\n        .put(CLASS_URL, values)\n        .then(response => {\n            store.dispatch(updateClassScheduleOne(response.data));\n            resetFormHandler(CLASS_FORM);\n\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:class_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const postAddClassScheduleOneService = values => {\n    axios\n        .post(CLASS_URL, values)\n        .then(response => {\n            store.dispatch(addClassScheduleOne(response.data));\n            resetFormHandler(CLASS_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:class_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getClassScheduleOneService = classId => {\n    store.dispatch(getClassScheduleOne(classId));\n};\n\nexport const deleteClassScheduleOneService = classId => {\n    axios\n        .delete(CLASS_URL + `/${classId}`)\n        .then(response => {\n            store.dispatch(deleteClassScheduleOne(classId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:class_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const clearClassScheduleOneService = () => {\n    store.dispatch(clearClassScheduleOne());\n    resetFormHandler(CLASS_FORM);\n};\n","export const userRoles = {\n    USER: 'ROLE_USER',\n    MANAGER: 'ROLE_MANAGER',\n    TEACHER: 'ROLE_TEACHER'\n};\n","import React, { useEffect, useState } from 'react';\n\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport Card from '../../share/Card/Card';\nimport WishForm from '../../components/AddTeacherWishForm/WishForm';\n\nimport {\n    getMyTeacherWishesService,\n    selectTeacherWishService,\n    updateTeacherWishService\n} from '../../services/teacherWishService';\n\nimport { getPublicClassScheduleListService } from '../../services/classService';\n\nimport { FaEdit } from 'react-icons/fa';\nimport { useTranslation } from 'react-i18next';\n\nimport './WishModal.scss';\nimport { userRoles } from '../../constants/userRoles';\n\nconst WishModal = props => {\n    const { t } = useTranslation('common');\n    const {\n        onCloseWish,\n        teacher,\n        classScheduler,\n        teacherWishes,\n        openWish\n    } = props;\n\n    const [showForm, setShowForm] = useState(false);\n\n    useEffect(() => getPublicClassScheduleListService, []);\n\n    const class_names = [];\n\n    if (classScheduler.length - 1 > 0) {\n        classScheduler.map(classSchedulerOne => {\n            class_names.push(classSchedulerOne.class_name);\n        });\n    }\n\n    let teacherWishList = [];\n\n    if (teacherWishes[0] !== undefined) {\n        teacherWishes.map(wishes => {\n            for (let i = 0; i < wishes.length; i++) {\n                teacherWishList.push(wishes[i]);\n            }\n        });\n    } else {\n        teacherWishList = undefined;\n    }\n\n    const selectWishCard = day => {\n        selectTeacherWishService(day);\n    };\n\n    const teacherWishSubmit = values => {\n        const someWish = {\n            day_of_week: values.day_of_week,\n            evenOdd: values.evenOdd,\n            class_status: []\n        };\n\n        for (let i = 0; i <= classScheduler.length - 1; i++) {\n            let new_class_status = {\n                class_name: class_names[i],\n                status: values[`class_number${class_names[i]}`]\n            };\n\n            someWish.class_status.push(new_class_status);\n        }\n\n        updateTeacherWishService(someWish, props.teacherWishes);\n    };\n\n    const handleClose = () => {\n        onCloseWish();\n        setShowForm(!showForm);\n    };\n\n    return (\n        <Dialog onClose={handleClose} open={openWish} maxWidth=\"lg\">\n            <h2 className=\"modal-teacher-title\">\n                {t('teacher_wish_heading', {\n                    teacherName: teacher.name + ' ' + teacher.surname\n                })}\n            </h2>\n\n            <div className=\"cards-container\">\n                <Card class=\"wish-modal\">\n                    {showForm ? (\n                        <WishForm\n                            teacherWishId={teacher.id}\n                            classScheduler={classScheduler}\n                            onSubmit={teacherWishSubmit}\n                            teacherWishList={teacherWishList}\n                            selectWishCard={selectWishCard}\n                        />\n                    ) : (\n                        <>{t('teacher_wish_edit_wish')}</>\n                    )}\n                </Card>\n\n                <section className=\"container-flex-wrap\">\n                    {teacherWishList !== undefined ? (\n                        <div className=\"wish-card\">\n                            {teacherWishList.map((teacherWish, index) => (\n                                <Card class=\"day-week-status\" key={index}>\n                                    <div className=\"cards-btns\">\n                                        <FaEdit\n                                            className=\"svg-btn edit-btn\"\n                                            title={t('edit_hover_title')}\n                                            onClick={() => {\n                                                selectWishCard(\n                                                    teacherWish.day_of_week\n                                                );\n                                                setShowForm(true);\n                                            }}\n                                        />\n                                    </div>\n                                    <h3 className=\"wish-title-day\">\n                                        {t(\n                                            `day_of_week_${teacherWish.day_of_week}`\n                                        )}\n                                    </h3>\n                                    {teacherWish.class_status.map(\n                                        (class_status, index) => (\n                                            <div\n                                                className=\"class-status-block\"\n                                                key={index}\n                                            >\n                                                <span>\n                                                    {t('teacher_wish_class')}{' '}\n                                                    {class_status.class_name}\n                                                </span>\n                                                <span\n                                                    className={`_${class_status.status}`}\n                                                >\n                                                    {t(\n                                                        `teacher_wish_class_status_${class_status.status}`\n                                                    )}\n                                                </span>\n                                            </div>\n                                        )\n                                    )}\n                                </Card>\n                            ))}\n                        </div>\n                    ) : (\n                        <Card class=\"teacher-without-wishes\">\n                            <p>{t('teacher_wish_no_wish')}</p>\n                        </Card>\n                    )}\n                </section>\n            </div>\n        </Dialog>\n    );\n};\n\nWishModal.propTypes = {\n    onCloseWish: PropTypes.func.isRequired,\n    openWish: PropTypes.bool.isRequired\n};\n\nexport default WishModal;\n","import i18n from '../helper/i18n';\nimport { store } from '../index';\nimport axios from '../helper/axios';\nimport { DISABLED_SEMESTERS_URL, SEMESTERS_URL } from '../constants/axios';\nimport { setDisabledSemesters, setError } from '../redux/actions/semesters';\nimport { SEMESTER_FORM } from '../constants/reduxForms';\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { checkUniqSemester } from '../validation/storeValidation';\nimport {\n    addSemester,\n    clearSemester,\n    deleteSemester,\n    selectSemester,\n    showAllSemesters,\n    updateSemester\n} from '../redux/actions/index';\n\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const selectSemesterService = semesterId =>\n    store.dispatch(selectSemester(semesterId));\n\nexport const setUniqueErrorService = isUniqueError =>\n    store.dispatch(setError(isUniqueError));\n\nexport const clearSemesterService = () => {\n    store.dispatch(clearSemester());\n    resetFormHandler(SEMESTER_FORM);\n};\n\nexport const showAllSemestersService = () => {\n    axios\n        .get(SEMESTERS_URL)\n        .then(response => {\n            store.dispatch(\n                showAllSemesters(\n                    response.data\n                        .sort((a, b) => (a.year > b.year ? 1 : -1))\n                        .reverse()\n                )\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nconst cardSemester = semester => {\n    const semester_days = [];\n    const semester_classes = [];\n    for (let prop in semester) {\n        if (Object.prototype.hasOwnProperty.call(semester, prop)) {\n            if (\n                prop.indexOf('semester_days_markup_') >= 0 &&\n                semester[prop] === true\n            ) {\n                semester_days.push(prop.substring(21));\n            }\n        }\n        if (Object.prototype.hasOwnProperty.call(semester, prop)) {\n            if (\n                prop.indexOf('semester_classes_markup_') >= 0 &&\n                semester[prop] === true\n            ) {\n                semester_classes.push(\n                    store\n                        .getState()\n                        .classActions.classScheduler.find(\n                            schedule => schedule.id === +prop.substring(24)\n                        )\n                );\n            }\n        }\n    }\n\n    return {\n        id: semester.id,\n        year: +semester.year,\n        description: semester.description,\n        startDay: semester.startDay,\n        endDay: semester.endDay,\n        currentSemester: semester.currentSemester,\n        semester_days: semester_days,\n        semester_classes: semester_classes\n    };\n};\n\nexport const removeSemesterCardService = semesterId => {\n    const semester = store\n        .getState()\n        .semesters.semesters.find(item => item.id === semesterId);\n    if (semester.currentSemester === true) {\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.ERROR,\n            i18n.t('serviceMessages:semester_service_is_active')\n        );\n        return;\n    }\n    axios\n        .delete(SEMESTERS_URL + `/${semesterId}`)\n        .then(response => {\n            store.dispatch(deleteSemester(semesterId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nconst switchSaveActions = semester => {\n    if (semester.id) {\n        putSemester(semester);\n    } else {\n        postSemester(semester);\n    }\n};\n\nexport const handleSemesterService = values => {\n    let semester = cardSemester(values);\n    if (!checkUniqSemester(semester)) {\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.ERROR,\n            i18n.t('common:semester_service_is_not_unique')\n        );\n        setUniqueErrorService(true);\n        return;\n    }\n    if (!checkSemesterYears(semester.endDay, semester.startDay, semester.year))\n        return;\n\n    if (semester.currentSemester) {\n        const currentScheduleOld = findCurrentSemester(semester.id);\n        if (currentScheduleOld) {\n            currentScheduleOld.currentSemester = false;\n            axios\n                .put(SEMESTERS_URL, currentScheduleOld)\n                .then(response => {\n                    store.dispatch(updateSemester(response.data));\n                    switchSaveActions(semester);\n                })\n                .catch(error => errorHandler(error));\n        } else {\n            switchSaveActions(semester);\n        }\n    } else {\n        switchSaveActions(semester);\n    }\n};\n\nconst checkSemesterYears = (endDay, startDay, year) => {\n    const dateEndYear = +endDay.substring(endDay.length - 4);\n    const dateStartYear = +startDay.substring(startDay.length - 4);\n    let conf = true;\n    if (year !== dateEndYear || year !== dateStartYear) {\n        conf = window.confirm(\n            i18n.t('serviceMessages:semester_service_not_as_begin_or_end')\n        );\n    }\n    return conf;\n};\n\nconst putSemester = data => {\n    axios\n        .put(SEMESTERS_URL, data)\n        .then(response => {\n            store.dispatch(updateSemester(response.data));\n            selectSemesterService(null);\n            getDisabledSemestersService();\n            showAllSemestersService();\n            resetFormHandler(SEMESTER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nconst postSemester = data => {\n    axios\n        .post(SEMESTERS_URL, data)\n        .then(response => {\n            store.dispatch(addSemester(response.data));\n            resetFormHandler(SEMESTER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nconst findCurrentSemester = semesterId => {\n    return store\n        .getState()\n        .semesters.semesters.find(\n            semesterItem =>\n                semesterItem.currentSemester === true &&\n                semesterItem.id !== semesterId\n        );\n};\n\nexport const getDisabledSemestersService = () => {\n    axios\n        .get(DISABLED_SEMESTERS_URL)\n        .then(res => {\n            store.dispatch(setDisabledSemesters(res.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const setDisabledSemestersService = semester => {\n    semester.disable = true;\n    putSemester(semester);\n};\n\nexport const setEnabledSemestersService = semester => {\n    semester.disable = false;\n    putSemester(semester);\n};\n","export const days = [\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n    'Sunday'\n];\n\nexport const daysUppercase = [];\ndays.map(day => daysUppercase.push(day.toUpperCase()));\n","import React, { useEffect } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport { required } from '../../validation/validateFields';\nimport renderSelectField from '../../share/renderedFields/select';\nimport { FREE_ROOMS } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\nimport { showAllSemestersService } from '../../services/semesterService';\nimport './freeRoomForm.scss';\nimport { daysUppercase } from '../../constants/schedule/days';\n\nlet FreeRoomForm = props => {\n\n    const { t } = useTranslation('formElements');\n\n    const weeks = ['ODD', 'EVEN', 'WEEKLY'];\n\n    useEffect(() => showAllSemestersService(), []);\n\n    const {\n        handleSubmit,\n        classScheduler,\n        pristine,\n        submitting,\n        onReset\n    } = props;\n\n    const class_names = [];\n\n    if (classScheduler.length - 1 > 0) {\n        classScheduler.map(classSchedulerOne => {\n            class_names.push(classSchedulerOne.class_name);\n        });\n    }\n\n    return (\n        <>\n            <form className=\"freeRoomsItems\" onSubmit={handleSubmit}>\n                <div className=\"roomsItems\">\n                    <Field\n                        name=\"semesterId\"\n                        component={renderSelectField}\n                        label={t('formElements:semester_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {props.semesters.map((semesters, index) => (\n                            <option key={index} value={semesters.id}>\n                                {semesters.description}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"evenOdd\"\n                        component={renderSelectField}\n                        label={t('formElements:week_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {weeks.map((week, index) => (\n                            <option key={index} value={`${week}`}>\n                                {t(`common:${week.toLowerCase()}_week`)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"dayOfWeek\"\n                        component={renderSelectField}\n                        label={t('formElements:day_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {daysUppercase.map((day, index) => (\n                            <option key={index} value={`${day}`}>\n                                {t(`common:day_of_week_${day}`)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"class\"\n                        component={renderSelectField}\n                        label={t('formElements:class_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {class_names.map((classNum, index) => (\n                            <option key={index} value={`${classNum}`}>\n                                {classNum}\n                            </option>\n                        ))}\n                    </Field>\n                </div>\n                <div className=\"form-buttons-container freeRoomsButtons\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                        className=\"buttons-style\"\n                        type=\"submit\"\n                    >\n                        {t('formElements:submit_button_label')}\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        disabled={pristine || submitting}\n                        className=\"buttons-style\"\n                        onClick={onReset}\n                    >\n                        {t('formElements:clear_button_label')}\n                    </Button>\n                </div>\n            </form>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    freeRooms: state.freeRooms.freeRooms,\n    semesters: state.semesters.semesters\n});\n\nFreeRoomForm = reduxForm({\n    form: FREE_ROOMS\n})(FreeRoomForm);\n\nexport default connect(mapStateToProps)(FreeRoomForm);\n","import axios from '../helper/axios';\nimport { store } from '../index';\nimport { reset } from 'redux-form';\n\nimport { showFreeRooms, clearFreeRooms } from '../redux/actions/freeRooms';\nimport { FREE_ROOMS_URL } from '../constants/axios';\nimport { FREE_ROOMS } from '../constants/reduxForms';\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { snackbarTypes } from '../constants/snackbarTypes';\n\nimport i18n from '../helper/i18n';\n\nconst resetFormHandler = formName => {\n    store.dispatch(reset(formName));\n};\n\nexport const showFreeRoomsService = elem => {\n    axios\n        .get(\n            FREE_ROOMS_URL +\n                '?dayOfWeek=' +\n                elem.dayOfWeek +\n                '&evenOdd=' +\n                elem.evenOdd +\n                '&classId=' +\n                elem.class +\n                '&semesterId=' +\n                elem.semesterId\n        )\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(showFreeRooms(bufferArray));\n        })\n        .catch(error => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t(error.response.data.message, error.response.data.message)\n            );\n        });\n};\n\nexport const clearFreeRoomsService = () => {\n    store.dispatch(clearFreeRooms());\n    resetFormHandler(FREE_ROOMS);\n};\n","import * as actionsType from './actionsType';\n\nexport const showFreeRooms = freeRooms => {\n    return {\n        type: actionsType.SHOW_FREE_ROOMS,\n        result: freeRooms\n    };\n};\n\nexport const clearFreeRooms = () => ({\n    type: actionsType.CLEAR_FREE_ROOM\n});\n","import React, { useEffect, useState } from 'react';\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport Dialog from '@material-ui/core/Dialog';\n\nimport FreeRoomForm from '../../components/FreeRoomForm/freeRoomForm';\nimport { GiCancel } from 'react-icons/gi';\nimport { useTranslation } from 'react-i18next';\nimport { clearFreeRoomsService } from '../../services/freeRoomsService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { showFreeRoomsService } from '../../services/freeRoomsService';\n\nimport './freeRooms.scss';\n\nconst FreeRooms = props => {\n    const { t } = useTranslation('formElements');\n\n    const [open, setOpen] = useState(false);\n\n    const { classScheduler } = props;\n\n    useEffect(() => getClassScheduleListService(), []);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleFormReset = () => {\n        clearFreeRoomsService();\n    };\n\n    const submit = values => {\n        showFreeRoomsService(values);\n    };\n\n    return (\n        \n          <>  \n                <a className=\"navLinks\" onClick={handleClickOpen}>\n                    {t('find_free_room')}\n                </a>\n               \n            <Dialog\n                open={open}\n                onClose={handleClose}\n                maxWidth=\"lg\"\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <div className=\"cards-container \">\n                    <aside className=\"free-rooms__panel\">\n                        <Card className=\"free-rooms-wrapper freeRoomCard\">\n                            <div className=\"freeRoomForms\">\n                                <h2 id=\"form-dialog-title\">\n                                    {t('find_free_room')}\n                                </h2>\n                                <FreeRoomForm\n                                    classScheduler={classScheduler}\n                                    onReset={handleFormReset}\n                                    onSubmit={submit}\n                                />\n                            </div>\n                        </Card>\n                    </aside>\n                    <section className=\"container-flex-wrap wrapper\">\n                        {props.freeRooms.map((freeRoom) => (\n                            <Card key={freeRoom.id} className=\"container\">\n                                <div className=\"freeRoomCard\">\n                                    <span> {t('room_label') + ':'} </span>\n                                    <h2 className=\"room-card__number\">\n                                        {freeRoom.name}\n                                    </h2>\n                                    <span>{t('type_label') + ':'}</span>\n                                    <h2 className=\"room-card__number\">\n                                        {freeRoom.type.description}\n                                    </h2>\n                                </div>\n                            </Card>\n                        ))}\n                    </section>\n                </div>\n            </Dialog>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    freeRooms: state.freeRooms.freeRooms\n});\n\nexport default connect(mapStateToProps)(FreeRooms);\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {\n    FaHome,\n    FaClock,\n    FaUser,\n    FaWindowClose,\n    FaRunning,\n    FaClipboardList,\n    FaDoorOpen\n} from 'react-icons/fa';\nimport Menu from '@material-ui/core/Menu';\nimport Button from '@material-ui/core/Button';\nimport { useTranslation } from 'react-i18next';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { withStyles } from '@material-ui/core/styles';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\n\nimport '../../App.scss';\nimport './Header.scss';\nimport { links } from '../../constants/links';\n\nimport LanguageSelector from '../LanguageSelector/LanguageSelector';\nimport * as colors from '../../constants/schedule/colors';\nimport { getMyTeacherWishesService } from '../../services/teacherWishService';\n\nimport WishModal from '../../containers/WishModal/WishModal';\nimport { getScheduleItemsService } from '../../services/scheduleService';\n\nimport FreeRooms from '../../containers/FreeRooms/freeRooms';\n\nconst StyledMenu = withStyles({\n    paper: {\n        border: `1px solid ${colors.colors.BORDER}`\n    }\n})(props => (\n    <Menu\n        elevation={0}\n        getContentAnchorEl={null}\n        anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center'\n        }}\n        transformOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center'\n        }}\n        {...props}\n    />\n));\n\nconst StyledMenuItem = withStyles(theme => ({\n    root: {\n        '&:focus': {\n            backgroundColor: theme.palette.primary.main,\n            color: theme.palette.common.white\n        }\n    }\n}))(MenuItem);\n\nconst Header = props => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = event => setAnchorEl(event.currentTarget);\n\n    const handleClose = () => setAnchorEl(null);\n\n    const { t } = useTranslation('common');\n\n    const [openWish, setOpenWish] = useState(false);\n    const [teacher, setTeacher] = useState(0);\n\n    useEffect(() => {\n        if (props.userRole === roles.MANAGER) getScheduleItemsService();\n    }, []);\n\n    const handleClickOpenWish = teacher => {\n        setTeacher(teacher);\n        setOpenWish(true);\n    };\n\n    const handleCloseWish = value => {\n        setOpenWish(false);\n    };\n\n    const roles = props.roles;\n\n    let leftLinks = null;\n    let rightLinks = null;\n    let menu = null;\n    if (props.userRole === roles.MANAGER) {\n        leftLinks = (\n            <>\n                <Link to={links.SCHEDULE_PAGE} className=\"navLinks\">\n                    {t('schedule_title')}\n                </Link>\n                <span className=\"navLinks nav-semester\">\n                    {t('formElements:semester_label')}:{' '}\n                    {props.currentSemester.description}\n                </span>\n            </>\n        );\n        rightLinks = (\n            <>\n                <FreeRooms classScheduler={props.classScheduler} />\n                <Link to={links.ADMIN_PAGE} className=\"navLinks\">\n                    {t('admin_title')}\n                </Link>\n                <Link to={links.LOGOUT} className=\"navLinks\">\n                    {t('logout_title')}\n                </Link>\n            </>\n        );\n        menu = (\n            <div className=\"menu\">\n                <Button\n                    aria-controls=\"customized-menu\"\n                    aria-haspopup=\"true\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleClick}\n                >\n                    {t('menu_button')}\n                </Button>\n\n                <StyledMenu\n                    id=\"customized-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                <span className=\"navLinks menu-semester\">\n                    {props.currentSemester.description}\n                </span>\n                    <Link\n                        to={links.HOME_PAGE}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaHome fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('home_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        to={links.SCHEDULE_PAGE}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaClock fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('schedule_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        to={links.ADMIN_PAGE}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaUser fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('admin_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaDoorOpen fontSize=\"normall\" />\n                            </ListItemIcon>\n                            <FreeRooms classScheduler={props.classScheduler} />\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        to={links.LOGOUT}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaWindowClose fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('logout_title')}\n                        </StyledMenuItem>\n                    </Link>\n                </StyledMenu>\n            </div>\n        );\n    } else if (props.userRole === roles.TEACHER) {\n        leftLinks = (\n            <>\n                <a\n                    className=\"navLinks\"\n                    onClick={() => {\n                        handleClickOpenWish(props.myWishes[0].teacher);\n                        getMyTeacherWishesService();\n                    }}\n                >\n                    {t('wishes_title')}\n                </a>\n            </>\n        );\n        rightLinks = (\n            <Link to={links.LOGOUT} className=\"navLinks\">\n                {t('logout_title')}\n            </Link>\n        );\n        menu = (\n            <div className=\"menu\">\n                <Button\n                    aria-controls=\"customized-menu\"\n                    aria-haspopup=\"true\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleClick}\n                >\n                    {t('menu_button')}\n                </Button>\n\n                <StyledMenu\n                    id=\"customized-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    \n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaClipboardList fontSize=\"normall\" />\n                            </ListItemIcon>\n    \n                            <a\n                    className=\"navLinks\"\n                    onClick={() => {\n                        handleClickOpenWish(props.myWishes[0].teacher);\n                        getMyTeacherWishesService();\n                    }}\n                >\n                    {t('wishes_title')}\n                </a>\n                            \n                        </StyledMenuItem>\n                \n\n                    <Link\n                        to={links.LOGOUT}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaWindowClose fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('logout_title')}\n                        </StyledMenuItem>\n                    </Link>\n                </StyledMenu>\n            </div>\n        );\n    } else if (props.userRole) {\n        rightLinks = (\n            <>\n                <Link to={links.LOGOUT} className=\"navLinks\">\n                    {t('logout_title')}\n                </Link>\n            </>\n        );\n    } else {\n        rightLinks = (\n            <>\n                <Link to={links.AUTH} className=\"navLinks\">\n                    {t('login_title')}\n                </Link>\n            </>\n        );\n        menu = (\n            <div className=\"menu\">\n                <Button\n                    aria-controls=\"customized-menu\"\n                    aria-haspopup=\"true\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleClick}\n                >\n                    {t('menu_button')}\n                </Button>\n\n                <StyledMenu\n                    id=\"customized-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    <Link\n                        to={links.HOME_PAGE}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaHome fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('home_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        to={links.AUTH}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaRunning fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('login_title')}\n                        </StyledMenuItem>\n                    </Link>\n                </StyledMenu>\n            </div>\n        );\n    }\n\n    return (\n        <>\n            {props.userRole === roles.TEACHER ? (\n                <>\n                    <WishModal\n                        openWish={openWish}\n                        onCloseWish={handleCloseWish}\n                        teacher={teacher}\n                        teacherWishes={props.teacherWishes}\n                        classScheduler={props.classScheduler}\n                    />\n                </>\n            ) : (\n                ''\n            )}\n            <header className=\"header\">\n                {menu}\n                <nav className=\"header-blocks header-blocks_one\">\n                    <Link to={links.HOME_PAGE} className=\"navLinks\">\n                        {t('home_title')}\n                    </Link>\n                    {leftLinks}\n                </nav>\n                <nav className=\"header-blocks header-blocks_two\">\n                    {rightLinks}\n                </nav>\n\n                <nav className=\"header-blocks header-blocks_three\">\n                    <LanguageSelector />\n                </nav>\n            </header>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    myWishes: state.teachersWish.myWishes,\n    classScheduler: state.classActions.classScheduler,\n    currentSemester: state.schedule.currentSemester,\n    teacherWishes: state.teachersWish.wishes\n});\n\nexport default connect(mapStateToProps, {})(Header);\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport i18next from './i18n';\n\nimport { daysUppercase } from '../constants/schedule/days';\n\nconst shortid = require('shortid');\n\nconst matchDayNumberSysytemToDayName = () => {\n    var now = new Date();\n    return daysUppercase[now.getDay() - 1];\n};\nconst currentDay = matchDayNumberSysytemToDayName();\n\nconst getWeekNumber = (startScheduleDate, date) => {\n    const parsed = Array.from(startScheduleDate);\n\n    const startDay = new Date(\n        parsed[3] +\n            parsed[4] +\n            parsed[5] +\n            parsed[0] +\n            parsed[1] +\n            parsed[2] +\n            parsed[6] +\n            parsed[7] +\n            parsed[8] +\n            parsed[9]\n    );\n\n    const numberOfDays = Math.floor((date - startDay) / (24 * 60 * 60 * 1000));\n    return Math.ceil((date.getDay() + 1 + numberOfDays) / 7);\n};\nconst printWeekNumber = startScheduleDate => {\n    var date = new Date();\n    var result = getWeekNumber(startScheduleDate, date);\n    return result;\n};\nfunction isOddFunction(num) {\n    return num % 2;\n}\nlet currentWeekType = 0;\n\nconst renderClassCell = classItem =>\n    classItem.class_name +\n    '\\n\\r\\n\\r' +\n    classItem.startTime +\n    ' - ' +\n    classItem.endTime;\n\nexport const prepareLessonCardCell = card => {\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        inner = card.teacherForSite + '\\n\\r' + card.subjectForSite;\n    }\n    return inner;\n};\nexport const prepareLessonSubCardCell = card => {\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        inner =\n            '( ' +\n            i18next.t(\n                `formElements:lesson_type_${card.lessonType.toLowerCase()}_label`\n            );\n        if (card.room) {\n            inner += ', ' + card.room.name + ' )';\n        }\n    }\n    return inner;\n};\n\nexport const renderGroupDayClass = (classDay, isOddWeek) => {\n    let res = [];\n    for (let [key, value] of Object.entries(classDay.cards)) {\n        value.day = key;\n        res.push(value);\n    }\n    return (\n        <TableRow key={shortid.generate()}>\n            <TableCell className=\" lesson groupLabelCell\">\n                {renderClassCell(classDay.class)}\n            </TableCell>\n            {res.map(day => {\n                let className = 'lesson ';\n                if (currentDay === day.day && currentWeekType === isOddWeek) {\n                    className += ' currentDay';\n                }\n                return (\n                    <TableCell key={shortid.generate()} className={className}>\n                        <p>{prepareLessonCardCell(day.card, currentDay)}</p>\n                        <p>{prepareLessonSubCardCell(day.card, currentDay)}</p>\n                    </TableCell>\n                );\n            })}\n        </TableRow>\n    );\n};\n\nexport const renderScheduleGroupHeader = daysUppercase => (\n    <TableHead>\n        <TableRow>\n            <TableCell className=\"groupLabelCell\"></TableCell>\n            {daysUppercase.map(day => (\n                <TableCell key={shortid.generate()}>\n                    {i18next.t(`day_of_week_${day}`)}\n                </TableCell>\n            ))}\n        </TableRow>\n    </TableHead>\n);\n\nexport const renderGroupTable = (classes, isOdd, semester) => {\n    if (semester) {\n        currentWeekType = isOddFunction(printWeekNumber(semester.startDay));\n    }\n    return (\n        <TableContainer>\n            <Table aria-label=\"sticky table\">\n                {renderScheduleGroupHeader(daysUppercase)}\n                <TableBody>\n                    {classes.map((classDay, classIndex) => {\n                        if (classDay) {\n                            return renderGroupDayClass(classDay, isOdd);\n                        }\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nexport const renderGroupCells = (\n    groups,\n    isOdd = 0,\n    currentWeekType = 0,\n    isCurrentDay = 0\n) => {\n    return groups.map((group, groupIndex) => {\n        var colspan = 1;\n        var rowspan = 1;\n        var classname = 'lesson';\n\n        if (currentWeekType === isOdd && isCurrentDay) {\n            classname += ' currentDay';\n        }\n        if (group.card !== null && group.card.skip_render === 1) {\n            return;\n        }\n        if (group.card !== null && group.card.weekly_render === 1) {\n            rowspan = 2;\n            classname += ' weekly';\n        }\n\n        for (let i = groupIndex; i < groups.length; i++) {\n            if (\n                group &&\n                groups[i + 1] &&\n                group.card !== null &&\n                groups[i + 1].card !== null\n            ) {\n                if (\n                    group.card.teacherForSite &&\n                    group.card.teacherForSite ===\n                        groups[i + 1].card.teacherForSite &&\n                    group.card.subjectForSite ===\n                        groups[i + 1].card.subjectForSite &&\n                    group.card.room.id === groups[i + 1].card.room.id &&\n                    group.card.weekly_render ===\n                        groups[i + 1].card.weekly_render\n                ) {\n                    groups[i + 1].card.skip_render = 1;\n                    colspan++;\n                    classname += ' grouped';\n                }\n            }\n        }\n        return (\n            <TableCell\n                key={shortid.generate()}\n                colSpan={colspan}\n                rowSpan={rowspan}\n                className={classname}\n            >\n                <p>{prepareLessonCardCell(group.card)}</p>\n                <p>{prepareLessonSubCardCell(group.card)}</p>\n            </TableCell>\n        );\n    });\n};\n\nexport const renderScheduleHeader = groups => (\n    <TableHead>\n        <TableRow>\n            <TableCell className=\"groupLabelCell\" colSpan={3}>\n                {i18next.t('group_y_label')}\n            </TableCell>\n            {groups.map(group => (\n                <TableCell key={shortid.generate()}>{group}</TableCell>\n            ))}\n        </TableRow>\n    </TableHead>\n);\n\nexport const renderFirstDayFirstClassFirstCardLine = (\n    day_name,\n    classItem,\n    groups,\n    classesCount\n) => {\n    let dayClassName = 'dayNameCell ';\n    let classClassName = 'classNameCell ';\n\n    let oddWeekClass = '';\n    let evenWeekClass = '';\n    if (currentDay === day_name) {\n        dayClassName += ' currentDay';\n\n        if (currentWeekType === 1) {\n            oddWeekClass = ' currentDay';\n        } else {\n            evenWeekClass = ' currentDay';\n        }\n    }\n\n    if (groups.even.length <= 2 || groups.odd.length <= 2) {\n        dayClassName += ' minHeightDouble';\n    }\n\n    return (\n        <React.Fragment key={shortid.generate()}>\n            <TableRow>\n                <TableCell rowSpan={classesCount * 2} className={dayClassName}>\n                    <span className=\"dayName\">\n                        <b>{i18next.t(`common:day_of_week_${day_name}`)}</b>\n                    </span>\n                </TableCell>\n                <TableCell className={classClassName} rowSpan={2}>\n                    {renderClassCell(classItem)}\n                </TableCell>\n                <TableCell\n                    className={classClassName + oddWeekClass + ' subClassName'}\n                >\n                    1\n                </TableCell>\n                {renderGroupCells(groups.odd)}\n            </TableRow>\n            <TableRow>\n                <TableCell\n                    className={classClassName + evenWeekClass + ' subClassName'}\n                >\n                    2\n                </TableCell>\n                {renderGroupCells(groups.even)}\n            </TableRow>\n        </React.Fragment>\n    );\n};\n\nexport const renderFirstDayOtherClassFirstCardLine = (\n    day_name,\n    classItem,\n    groups\n) => {\n    let classClassName = 'classNameCell ';\n    let oddWeekClass = '';\n    let evenWeekClass = '';\n\n    if (currentDay === day_name) {\n        if (currentWeekType === 1) {\n            oddWeekClass = ' currentDay';\n        } else {\n            evenWeekClass = ' currentDay';\n        }\n    }\n\n    return (\n        <React.Fragment key={shortid.generate()}>\n            <TableRow>\n                <TableCell className={classClassName} rowSpan={2}>\n                    {renderClassCell(classItem)}\n                </TableCell>\n                <TableCell\n                    className={classClassName + oddWeekClass + ' subClassName'}\n                >\n                    1\n                </TableCell>\n                {renderGroupCells(groups.odd, 1)}\n            </TableRow>\n            <TableRow>\n                <TableCell\n                    className={classClassName + evenWeekClass + ' subClassName'}\n                >\n                    2\n                </TableCell>\n                {renderGroupCells(groups.even, 0)}\n            </TableRow>\n        </React.Fragment>\n    );\n};\n\nconst prepareForRender = classItem => {\n    if (classItem.cards) {\n        classItem.cards.odd.forEach((card, cardIndex, map) => {\n            if (\n                classItem.cards.even[cardIndex] &&\n                card.group.id === classItem.cards.even[cardIndex].group.id\n            ) {\n                if (\n                    card.card !== null &&\n                    classItem.cards.even[cardIndex].card !== null\n                ) {\n                    if (\n                        card.card.teacherForSite ===\n                            classItem.cards.even[cardIndex].card\n                                .teacherForSite &&\n                        card.card.subjectForSite ===\n                            classItem.cards.even[cardIndex].card\n                                .subjectForSite &&\n                        card.card.room.id ===\n                            classItem.cards.even[cardIndex].card.room.id\n                    ) {\n                        classItem.cards.odd[cardIndex].card.weekly_render = 1;\n                        classItem.cards.even[cardIndex].card.skip_render = 1;\n                    }\n                }\n            }\n        });\n    }\n};\n\nexport const renderDay = (dayName, dayItem, semesterClassesCount) => {\n    return dayItem.map((classItem, classIndex) => {\n        prepareForRender(classItem);\n        if (classIndex === 0) {\n            return renderFirstDayFirstClassFirstCardLine(\n                dayName,\n                classItem.class,\n                classItem.cards,\n                semesterClassesCount\n            );\n        } else {\n            return renderFirstDayOtherClassFirstCardLine(\n                dayName,\n                classItem.class,\n                classItem.cards\n            );\n        }\n    });\n};\n\nexport const renderScheduleFullHeader = groupList => (\n    <TableHead>\n        <TableRow>\n            <TableCell colSpan={3}>\n                {i18next.t('formElements:group_label')}\n            </TableCell>\n            {groupList.map(group => (\n                <TableCell key={shortid.generate()} className=\"groupLabelCell\">\n                    {group.title}\n                </TableCell>\n            ))}\n        </TableRow>\n    </TableHead>\n);\n\nconst renderScheduleDays = fullResultSchedule =>\n    fullResultSchedule.resultArray.map((dayItem, dayName) => {\n        return renderDay(\n            dayItem.day,\n            dayItem.classes,\n            fullResultSchedule.semester_classes.length\n        );\n    });\n\nexport const renderFullSchedule = fullResultSchedule => {\n    currentWeekType = isOddFunction(\n        printWeekNumber(fullResultSchedule.semester.startDay)\n    );\n    let scheduleTitle = '';\n    if (fullResultSchedule.semester) {\n        scheduleTitle =\n            fullResultSchedule.semester.description +\n            ' (' +\n            fullResultSchedule.semester.year +\n            ')';\n    }\n\n    return (\n        <>\n            <h1>{scheduleTitle}</h1>\n            <TableContainer>\n                <Table aria-label=\"sticky table\">\n                    {renderScheduleFullHeader(fullResultSchedule.groupList)}\n                    <TableBody>\n                        {renderScheduleDays(fullResultSchedule)}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n};\n\nexport const prepareTeacherCardCell = card => {\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        inner = card.subjectForSite;\n    }\n    return inner;\n};\n\nconst renderClassRow = (classItem, days, scheduleRow) => (\n    <TableRow key={shortid.generate()}>\n        <TableCell className=\"lesson groupLabelCell\">\n            {renderClassCell(classItem)}\n        </TableCell>\n        {days.map(dayName => {\n            if (scheduleRow) {\n                return renderTeacherClassCell(\n                    scheduleRow.find(clas => clas.day === dayName)\n                );\n            }\n        })}\n    </TableRow>\n);\nconst renderTeacherClassCell = cards => {\n    let cellText = '';\n    let subCellText = '';\n    let groupCellText = '';\n    if (cards !== undefined) {\n        cards.cards.map((card, cardIndex) => {\n            if (cardIndex === 0) {\n                cellText += prepareTeacherCardCell(card);\n                subCellText +=\n                    ' (' +\n                    i18next.t(\n                        `formElements:lesson_type_${card.lessonType.toLowerCase()}_label`\n                    ) +\n                    ', ' +\n                    card.room +\n                    ')';\n                groupCellText +=\n                    i18next.t('common:GroupList_management_title') + ': ';\n            }\n            groupCellText += card.group.title + ' ';\n        });\n    }\n    return (\n        <TableCell key={shortid.generate()} className=\"lesson\">\n            <p>{cellText}</p>\n            <p>{subCellText}</p>\n            <p>{groupCellText}</p>\n        </TableCell>\n    );\n};\nexport const renderWeekTable = (schedule, isOdd) => {\n    if (schedule) {\n        return (\n            <TableContainer>\n                <Table aria-label=\"sticky table\">\n                    {renderScheduleGroupHeader(schedule.days)}\n                    <TableBody>\n                        {schedule.classes.map(classItem => {\n                            return renderClassRow(\n                                classItem,\n                                schedule.days,\n                                schedule.cards[classItem.id]\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n};\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\n\nimport Button from '@material-ui/core/Button';\nimport { MdPlayArrow } from 'react-icons/md';\n\nimport {\n    setScheduleTypeService,\n    setScheduleGroupIdService,\n    setScheduleTeacherIdService,\n    setScheduleSemesterIdService,\n    showAllPublicSemestersService,\n    showAllPublicGroupsService,\n    showAllPublicTeachersService\n} from '../../services/scheduleService';\n\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { styled } from '@material-ui/core/styles';\nimport './GroupSchedulePageTop.scss';\nimport { setLoadingService } from '../../services/loadingService';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    }\n}));\n\nconst GroupField = styled(TextField)({\n    display: 'inline-block',\n    width: '150px'\n});\n\nlet groupId = 0;\nlet teacherId = 0;\nlet semesterId = 0;\n\nconst GroupSchedulePageTop = props => {\n    const classes = useStyles();\n    const { t } = useTranslation('common');\n    const { groups, teachers, semesters } = props;\n    const isLoading = props.loading;\n\n    let loadingContainer = '';\n    if (isLoading) {\n        loadingContainer = (\n            <section className=\"centered-container\">\n                <CircularProgress />\n            </section>\n        );\n    }\n\n    useEffect(() => showAllPublicGroupsService(), []);\n    useEffect(() => showAllPublicTeachersService(), []);\n    useEffect(() => showAllPublicSemestersService(), []);\n\n    const defaultProps = {\n        options: groups,\n        getOptionLabel: option => (option ? option.title : '')\n    };\n\n    const defaultTeacherProps = {\n        options: teachers,\n        getOptionLabel: option =>\n            option\n                ? option.surname + ' ' + option.name + ' ' + option.patronymic\n                : ''\n    };\n\n    const defaultSemesterProps = {\n        options: semesters,\n        getOptionLabel: option => (option ? option.description : '')\n    };\n    const handleGroupSelect = group => {\n        if (group) {\n            groupId = group.id;\n        }\n    };\n    const handleTeacherSelect = teacher => {\n        if (teacher) {\n            teacherId = teacher.id;\n        }\n    };\n    const handleSemesterSelect = semester => {\n        if (semester) {\n            semesterId = semester.id;\n        }\n    };\n\n    const renderSemesterList = () => {\n        if (semesters) {\n            if (semesters.length > 1) {\n                return (\n                    <Autocomplete\n                        {...defaultSemesterProps}\n                        id=\"semester\"\n                        name=\"semester\"\n                        clearOnEscape\n                        openOnFocus\n                        onChange={(event, newValue) => {\n                            handleSemesterSelect(newValue);\n                        }}\n                        renderInput={params => (\n                            <GroupField\n                                {...params}\n                                label={t('formElements:semester_label')}\n                                margin=\"normal\"\n                            />\n                        )}\n                    />\n                );\n            } else {\n                semesterId = semesters[0].id;\n                return <p>{semesters[0].description}</p>;\n            }\n        }\n    };\n    return (\n        <section className={classes.root}>\n            <p>{t('greetings_schedule_message')}</p>\n            <p>{t('greetings_schedule_message_hint')}</p>\n            <section className=\"form-buttons-container\">\n                <div className=\"schedule-selector-part\">\n                    {renderSemesterList()}\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                            setLoadingService('true');\n                            setScheduleTypeService('full');\n                            setScheduleSemesterIdService(semesterId);\n                        }}\n                    >\n                        <MdPlayArrow\n                            title={t('full_schedule_label')}\n                            className=\"svg-btn\"\n                        />\n                    </Button>\n                </div>\n                <div className=\"schedule-selector-part\">\n                    <Autocomplete\n                        {...defaultProps}\n                        id=\"group\"\n                        name=\"group\"\n                        clearOnEscape\n                        openOnFocus\n                        onChange={(event, newValue) => {\n                            handleGroupSelect(newValue);\n                        }}\n                        renderInput={params => (\n                            <GroupField\n                                {...params}\n                                label={t('formElements:group_label')}\n                                margin=\"normal\"\n                            />\n                        )}\n                    />\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                            if (!semesterId) {\n                                alert(t('semester_is_empty'));\n                                return;\n                            }\n                            setLoadingService('true');\n                            setScheduleTypeService('group');\n                            setScheduleSemesterIdService(semesterId);\n                            setScheduleGroupIdService(groupId);\n                        }}\n                    >\n                        <MdPlayArrow\n                            title={t('group_schedule_label')}\n                            className=\"svg-btn\"\n                        />\n                    </Button>\n                </div>\n                <div className=\"schedule-selector-part\">\n                    <Autocomplete\n                        {...defaultTeacherProps}\n                        id=\"teacher\"\n                        clearOnEscape\n                        openOnFocus\n                        onChange={(event, newValue) => {\n                            handleTeacherSelect(newValue);\n                        }}\n                        renderInput={params => (\n                            <GroupField\n                                {...params}\n                                label={t('formElements:teacher_label')}\n                                margin=\"normal\"\n                            />\n                        )}\n                    />\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                            if (!semesterId) {\n                                alert(t('semester_is_empty'));\n                                return;\n                            }\n                            setLoadingService('true');\n                            setScheduleTypeService('teacher');\n                            setScheduleSemesterIdService(semesterId);\n                            setScheduleTeacherIdService(teacherId);\n                        }}\n                    >\n                        <MdPlayArrow\n                            title={t('teacher_schedule_label')}\n                            className=\"svg-btn\"\n                        />\n                    </Button>\n                </div>\n            </section>\n            {loadingContainer}\n        </section>\n    );\n};\n\nconst mapStateToProps = state => ({\n    groups: state.groups.groups,\n    teachers: state.teachers.teachers,\n    semesters: state.schedule.semesters,\n    loading: state.loadingIndicator.loading\n});\nexport default connect(mapStateToProps)(GroupSchedulePageTop);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport './GroupSchedulePage.scss';\n\nimport {\n    makeGroupSchedule,\n    makeFullSchedule,\n    makeTeacherSchedule\n} from '../../helper/prepareSchedule';\nimport {\n    renderGroupTable,\n    renderFullSchedule,\n    renderWeekTable\n} from '../../helper/renderScheduleTable';\nimport {\n    getGroupSchedule,\n    getFullSchedule,\n    getTeacherSchedule\n} from '../../services/scheduleService';\n\nimport GroupSchedulePageTop from '../GroupSchedulePageTop/GroupSchedulePageTop';\nimport { setLoadingService } from '../../services/loadingService';\n\nconst GroupSchedulePage = props => {\n    let { groupSchedule, fullSchedule, teacherSchedule } = props;\n    const matchFunction = scheduleType => {\n        switch (scheduleType) {\n            case 'full':\n                getFullSchedule(props.semesterId);\n                break;\n            case 'group':\n                getGroupSchedule(props.groupId, props.semesterId);\n                break;\n            case 'teacher':\n                getTeacherSchedule(props.teacherId, props.semesterId);\n                break;\n            default:\n                break;\n        }\n        return 1;\n    };\n    useEffect(() => {\n        matchFunction(props.scheduleType);\n    }, [props.scheduleType, props.groupId, props.teacherId, props.semesterId]);\n\n    const emptySchedule = () => (\n        <>\n            <GroupSchedulePageTop />\n            <p className=\"empty_schedule\">{t('common:empty_schedule')}</p>\n        </>\n    );\n    const { t } = useTranslation('common');\n\n    switch (props.scheduleType) {\n        case 'group':\n            if (\n                (!groupSchedule ||\n                    (groupSchedule.schedule &&\n                        groupSchedule.schedule.length === 0)) &&\n                !props.loading\n            ) {\n                return emptySchedule();\n            }\n            const resultArrays = makeGroupSchedule(groupSchedule);\n            if (resultArrays.done) {\n                setLoadingService(false);\n                return (\n                    <>\n                        <GroupSchedulePageTop />\n                        <h1>{resultArrays.group.title}</h1>\n                        <h2>{t('common:odd_week')}</h2>\n                        {renderGroupTable(\n                            resultArrays.oddArray,\n                            1,\n                            resultArrays.semester\n                        )}\n                        <h2>{t('common:even_week')}</h2>\n                        {renderGroupTable(\n                            resultArrays.evenArray,\n                            0,\n                            resultArrays.semester\n                        )}\n                    </>\n                );\n            }\n            return (\n                <>\n                    <GroupSchedulePageTop />\n                </>\n            );\n\n        case 'teacher':\n            if (\n                (!teacherSchedule ||\n                    !teacherSchedule.days ||\n                    teacherSchedule.days.length === 0) &&\n                !props.loading\n            ) {\n                return emptySchedule();\n            }\n            const teacher = makeTeacherSchedule(teacherSchedule);\n            if (teacher.done) {\n                setLoadingService(false);\n                return (\n                    <>\n                        <GroupSchedulePageTop />\n                        <h1>\n                            {teacher.teacher.position +\n                                ' ' +\n                                teacher.teacher.surname +\n                                ' ' +\n                                teacher.teacher.name +\n                                ' ' +\n                                teacher.teacher.patronymic}\n                        </h1>\n                        <h2>{t('common:odd_week')}</h2>\n                        {renderWeekTable(teacher.odd, 1)}\n                        <h2>{t('common:even_week')}</h2>\n                        {renderWeekTable(teacher.even, 0)}\n                    </>\n                );\n            }\n            return (\n                <>\n                    <GroupSchedulePageTop />\n                </>\n            );\n\n        case 'full':\n            if (\n                (!fullSchedule.schedule ||\n                    fullSchedule.schedule.length === 0) &&\n                !props.loading\n            ) {\n                return emptySchedule();\n            }\n            const result = makeFullSchedule(fullSchedule);\n            if (result.groupsCount || result.done) {\n                setLoadingService(false);\n                return (\n                    <>\n                        <GroupSchedulePageTop />\n                        {renderFullSchedule(result)}\n                    </>\n                );\n            }\n            return (\n                <>\n                    <GroupSchedulePageTop />\n                </>\n            );\n        default:\n            return <GroupSchedulePageTop />;\n    }\n};\nconst mapStateToProps = state => ({\n    scheduleType: state.schedule.scheduleType,\n    groupSchedule: state.schedule.groupSchedule,\n    fullSchedule: state.schedule.fullSchedule,\n    teacherSchedule: state.schedule.teacherSchedule,\n    groupId: state.schedule.scheduleGroupId,\n    teacherId: state.schedule.scheduleTeacherId,\n    semesterId: state.schedule.scheduleSemesterId,\n    loading: state.loadingIndicator.loading\n});\nexport default connect(mapStateToProps)(GroupSchedulePage);\n","import { daysUppercase } from '../constants/schedule/days';\n\nexport const makeGroupSchedule = groupSchedule => {\n    let evenArray = [];\n    let oddArray = [];\n    let group = {};\n    let done = false;\n\n    const evenDaysPrepArray = [\n        { day: 'MONDAY', class: [] },\n        { day: 'TUESDAY', class: [] },\n        { day: 'WEDNESDAY', class: [] },\n        { day: 'THURSDAY', class: [] },\n        { day: 'FRIDAY', class: [] },\n        { day: 'SATURDAY', class: [] },\n        { day: 'SUNDAY', class: [] }\n    ];\n    const oddDaysPrepArray = [\n        { day: 'MONDAY', class: [] },\n        { day: 'TUESDAY', class: [] },\n        { day: 'WEDNESDAY', class: [] },\n        { day: 'THURSDAY', class: [] },\n        { day: 'FRIDAY', class: [] },\n        { day: 'SATURDAY', class: [] },\n        { day: 'SUNDAY', class: [] }\n    ];\n\n    if (groupSchedule.schedule && groupSchedule.schedule.length > 0) {\n        group = groupSchedule.schedule[0].group;\n        groupSchedule.schedule[0].days.map(day => {\n            day.classes.map(classItem => {\n                evenDaysPrepArray.map(evenDayPrep => {\n                    if (evenDayPrep.day === day.day) {\n                        evenDayPrep.class[classItem.class.id] = {\n                            class: classItem.class,\n                            card: classItem.weeks.even\n                        };\n                    }\n                });\n\n                oddDaysPrepArray.map(oddDayPrep => {\n                    if (oddDayPrep.day === day.day) {\n                        oddDayPrep.class[classItem.class.id] = {\n                            class: classItem.class,\n                            card: classItem.weeks.odd\n                        };\n                    }\n                });\n            });\n        });\n    }\n\n    oddDaysPrepArray.map(oddDay => {\n        oddDay.class.map((oddClas, clasIndex) => {\n            if (!oddArray.hasOwnProperty(clasIndex)) {\n                oddArray[clasIndex] = { class: oddClas.class, cards: {} };\n            }\n\n            daysUppercase.map(dayArr => {\n                if (!oddArray[clasIndex].cards.hasOwnProperty(dayArr)) {\n                    oddArray[clasIndex].cards[dayArr] = {};\n                }\n            });\n            if (oddClas.card !== null && oddClas.card !== undefined) {\n                if (oddClas.card.hasOwnProperty('teacherForSite')) {\n                    oddArray[clasIndex].cards[oddDay.day] = {\n                        card: oddClas.card\n                    };\n                }\n            }\n        });\n    });\n\n    evenDaysPrepArray.map(evenDay => {\n        evenDay.class.map((evenClas, clasIndex) => {\n            if (!evenArray.hasOwnProperty(clasIndex)) {\n                evenArray[clasIndex] = { class: evenClas.class, cards: {} };\n            }\n\n            daysUppercase.map(dayArr => {\n                if (!evenArray[clasIndex].cards.hasOwnProperty(dayArr)) {\n                    evenArray[clasIndex].cards[dayArr] = {};\n                }\n            });\n            if (evenClas.card !== null && evenClas.card !== undefined) {\n                if (evenClas.card.hasOwnProperty('teacherForSite')) {\n                    evenArray[clasIndex].cards[evenDay.day] = {\n                        card: evenClas.card\n                    };\n                }\n            }\n        });\n    });\n    done = true;\n\n    return {\n        semester: groupSchedule.semester,\n        oddArray,\n        evenArray,\n        group,\n        done\n    };\n};\n\nexport const makeFullSchedule = fullSchedule => {\n    let groupsCount = 0;\n    let groupList = [];\n    let groupListId = new Map([]);\n    let daysPrepArrayFull = [];\n    let done = false;\n    let semester_days = [];\n    let semester_classes = [];\n\n    if (fullSchedule.schedule) {\n        groupsCount = fullSchedule.schedule.length;\n        semester_days = fullSchedule.semester.semester_days;\n        semester_classes = fullSchedule.semester.semester_classes;\n\n        fullSchedule.schedule.map(group => {\n            groupList.push(group.group);\n            groupListId.set(group.group.id, {});\n        });\n        groupList = groupList.sort((a, b) =>\n            a.title > b.title ? 1 : b.title > a.title ? -1 : 0\n        );\n\n        fullSchedule.semester.semester_days.map(day => {\n            let prep_schedule_array = [];\n            fullSchedule.semester.semester_classes.map(classItem => {\n                const oddArray = [];\n                const evenArray = [];\n                groupList.forEach((groupItem, groupIndex) => {\n                    const groupFull = fullSchedule.schedule.find(\n                        groupFullIterate =>\n                            groupFullIterate.group.id === groupItem.id\n                    );\n                    const dayFull = groupFull.days.find(\n                        dayFullIterate => dayFullIterate.day === day\n                    );\n                    const classFull = dayFull.classes.find(\n                        dayFullIterable =>\n                            dayFullIterable.class.id === classItem.id\n                    );\n                    oddArray.push({\n                        group: groupItem,\n                        card: classFull.weeks.odd\n                    });\n                    evenArray.push({\n                        group: groupItem,\n                        card: classFull.weeks.even\n                    });\n                });\n                prep_schedule_array.push({\n                    class: classItem,\n                    cards: { odd: oddArray, even: evenArray }\n                });\n            });\n            daysPrepArrayFull.push({ day, classes: prep_schedule_array });\n        });\n        done = true;\n    }\n\n    return {\n        semester: fullSchedule.semester,\n        schedule: fullSchedule.schedule,\n        semester_classes,\n        semester_days,\n        groupsCount: groupsCount,\n        groupList: groupList,\n        resultArray: daysPrepArrayFull,\n        done\n    };\n};\n\nexport const makeTeacherSchedule = teacherSchedule => {\n    let teacher = {};\n    let evenArray = [];\n    let oddArray = [];\n    let oddDays = [];\n    let evenDays = [];\n    let oddClasses = [];\n    let evenClasses = [];\n    let done = false;\n\n    if (teacherSchedule && teacherSchedule.days) {\n        teacher = teacherSchedule.teacher;\n\n        teacherSchedule.days.map(dayTeacher => {\n            dayTeacher.odd.classes.map(clas => {\n                if (\n                    oddClasses.findIndex(\n                        oddClass => oddClass.id === clas.class.id\n                    ) < 0\n                ) {\n                    oddClasses.push(clas.class);\n                }\n                if (oddDays.indexOf(dayTeacher.day) < 0) {\n                    oddDays.push(dayTeacher.day);\n                }\n                if (!(clas.class.id in oddArray)) {\n                    oddArray[clas.class.id] = [];\n                }\n\n                oddArray[clas.class.id].push({\n                    day: dayTeacher.day,\n                    cards: clas.lessons\n                });\n            });\n\n            dayTeacher.even.classes.map(clas => {\n                if (\n                    evenClasses.findIndex(\n                        evenClass => evenClass.id === clas.class.id\n                    ) < 0\n                ) {\n                    evenClasses.push(clas.class);\n                }\n                if (evenDays.indexOf(dayTeacher.day) < 0) {\n                    evenDays.push(dayTeacher.day);\n                }\n                if (!(clas.class.id in evenArray)) {\n                    evenArray[clas.class.id] = [];\n                }\n\n                evenArray[clas.class.id].push({\n                    day: dayTeacher.day,\n                    cards: clas.lessons\n                });\n            });\n        });\n        done = true;\n    }\n    return {\n        done,\n        teacher,\n        odd: {\n            days: oddDays,\n            classes: oddClasses.sort((a, b) =>\n                a.startTime > b.startTime\n                    ? 1\n                    : b.startTime > a.startTime\n                    ? -1\n                    : 0\n            ),\n            cards: oddArray\n        },\n        even: {\n            days: evenDays,\n            classes: evenClasses.sort((a, b) =>\n                a.startTime > b.startTime\n                    ? 1\n                    : b.startTime > a.startTime\n                    ? -1\n                    : 0\n            ),\n            cards: evenArray\n        }\n    };\n};\n","import React, { Fragment, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\n\nimport { userRoles } from '../../constants/userRoles';\n\nimport GroupSchedulePage from '../../components/GroupSchedulePage/GroupSchedulePage';\n\nimport { getPublicClassScheduleListService } from '../../services/classService';\nimport { getMyTeacherWishesService } from '../../services/teacherWishService';\n\nconst HomePage = props => {\n    const { t } = useTranslation('common');\n\n    useEffect(() => getPublicClassScheduleListService(), []);\n    useEffect(() => {\n        if (props.userRole === userRoles.TEACHER) {\n            getMyTeacherWishesService();\n        }\n    }, []);\n\n    return (\n        <Fragment>\n            <h1>{t('home_title')}</h1>\n            <GroupSchedulePage scheduleType=\"default\" />\n        </Fragment>\n    );\n};\n\nconst mapStateToProps = state => ({ userRole: state.auth.role });\n\nexport default connect(mapStateToProps)(HomePage);\n","import axios from '../helper/axios';\nimport { store } from '../index';\nimport { reset } from 'redux-form';\n\nimport { LESSON_TYPES_URL, LESSON_URL } from '../constants/axios';\nimport { LESSON_FORM } from '../constants/reduxForms';\n\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { setLoadingService } from './loadingService';\n\nimport {\n    deleteLessonCard,\n    selectGroupId,\n    selectLessonCard,\n    setLessonsCards,\n    setLessonTypes,\n    setUniqueError,\n    storeLessonCard,\n    updateLessonCard\n} from '../redux/actions/index';\n\nimport { snackbarTypes } from '../constants/snackbarTypes';\n\nimport { checkUniqLesson } from '../validation/storeValidation';\nimport i18n from '../helper/i18n';\nimport { errorHandler } from '../helper/handlerAxios';\n\nexport const getLessonsByGroupService = groupId => {\n    axios\n        .get(LESSON_URL + `?groupId=${groupId}`)\n        .then(response => {\n            store.dispatch(setLessonsCards(response.data));\n            setLoadingService(false);\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const getLessonTypesService = () => {\n    axios\n        .get(LESSON_TYPES_URL)\n        .then(response => {\n            store.dispatch(setLessonTypes(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const resetFormService = formName => {\n    store.dispatch(reset(formName));\n};\n\nconst cardObjectHandler = (card, groupId) => {\n    return {\n        id: card.lessonCardId,\n        group: {\n            id: groupId\n        },\n        hours: card.hours,\n        subject: {\n            id: card.subject\n        },\n        lessonType: card.type,\n        subjectForSite: card.subjectForSite,\n        teacher: { id: card.teacher },\n        teacherForSite: card.teacherForSite\n    };\n};\n\nconst updateLessonHandler = data => {\n    return axios\n        .put(LESSON_URL, data)\n        .then(response => {\n            store.dispatch(updateLessonCard(response.data));\n            selectLessonCardService(null);\n            resetFormService(LESSON_FORM);\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nconst createLessonHandler = (data, isCopy) => {\n    return axios\n        .post(LESSON_URL, data)\n        .then(response => {\n            if (!isCopy) {\n                store.dispatch(storeLessonCard(response.data));\n            }\n            resetFormService(LESSON_FORM);\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const handleLessonCardService = (card, groupId) => {\n    let cardObj = cardObjectHandler(card, groupId);\n    if (!checkUniqLesson(cardObj)) {\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.ERROR,\n            i18n.t('common:lesson_service_is_not_unique')\n        );\n        setUniqueErrorService(true);\n        return;\n    }\n    if (cardObj.id) {\n        updateLessonHandler(cardObj);\n    } else {\n        createLessonHandler(cardObj, false);\n    }\n};\nexport const removeLessonCardService = lessonCardId => {\n    axios\n        .delete(LESSON_URL + `/${lessonCardId}`)\n        .then(res => {\n            store.dispatch(deleteLessonCard(lessonCardId));\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const selectLessonCardService = lessonCardId => {\n    store.dispatch(selectLessonCard(lessonCardId));\n};\n\nexport const copyLessonCardService = lessonGroupObj => {\n    const lesson = lessonGroupObj.lesson;\n    lesson.group = lessonGroupObj.group;\n    lesson.id = null;\n    createLessonHandler(lesson, true);\n};\n\nexport const selectGroupIdService = groupId => {\n    store.dispatch(selectGroupId(groupId));\n};\n\nexport const setUniqueErrorService = isUniqueError => {\n    store.dispatch(setUniqueError(isUniqueError));\n};\n","import * as actionTypes from './actionsType';\n\nexport const storeLessonCard = res => {\n    return {\n        type: actionTypes.ADD_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const setLessonsCards = res => {\n    return {\n        type: actionTypes.SET_LESSONS_CARDS,\n        result: res\n    };\n};\n\nexport const setLessonTypes = res => {\n    return {\n        type: actionTypes.SET_LESSON_TYPES,\n        result: res\n    };\n};\n\nexport const deleteLessonCard = res => {\n    return {\n        type: actionTypes.DELETE_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const selectLessonCard = res => {\n    return {\n        type: actionTypes.SELECT_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const updateLessonCard = res => {\n    return {\n        type: actionTypes.UPDATE_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const selectGroupId = res => {\n    return {\n        type: actionTypes.SELECT_GROUP_ID,\n        result: res\n    };\n};\n\nexport const setUniqueError = res => {\n    return {\n        type: actionTypes.SET_UNIQUE_ERROR,\n        result: res\n    };\n};\n","export const authTypes = {\n    LOGIN: 'LOGIN',\n    REGISTRATION: 'REGISTRATION',\n    RESET_PASSWORD: 'RESET_PASSWORD'\n};\n","import React from \"react\";\n\nimport TextField from \"@material-ui/core/TextField\";\n\nconst renderTextField = ({\n  label,\n  input,\n  meta: { touched, invalid, error },\n  ...custom\n}) => {\n  return (\n    <TextField\n      label={label}\n      placeholder={label}\n      error={touched && invalid}\n      helperText={touched && error}\n      {...input}\n      {...custom}\n    />\n  );\n};\n\nexport default renderTextField;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Card from '../../share/Card/Card';\nimport renderTextField from '../../share/renderedFields/input';\n\nimport { LOGIN_FORM } from '../../constants/reduxForms';\nimport { authTypes } from '../../constants/auth';\n\nimport { required } from '../../validation/validateFields';\n\n\nlet LoginForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n\n    const error = props.loginError;\n\n    const translation = props.translation;\n\n    const errorHandling = value => {\n        if (required(value)) props.setError(required(value));\n        else props.setError(null);\n    };\n\n    let form = (\n        <form onSubmit={handleSubmit}>\n            <Field\n                name=\"email\"\n                className=\"form-field\"\n                component={renderTextField}\n                label={t('email_label')}\n                error={!!error}\n                helperText={error ? error.login : null}\n                onChange={e => errorHandling(e.target.value)}\n            />\n            <Field\n                name=\"password\"\n                className=\"form-field\"\n                type=\"password\"\n                component={renderTextField}\n                label={t('password_label')}\n                error={!!error}\n                onChange={() => props.setError(null)}\n            />\n            <Button\n                className=\"buttons-style under-line\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                {translation('login_title')}\n            </Button>\n            <div className=\"group-btns\">\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.REGISTRATION);\n                        props.setError(null);\n                    }}\n                >\n                    {translation('no_account')}\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.RESET_PASSWORD);\n                        props.setError(null);\n                    }}\n                >\n                    {translation('forgot_password')}\n                </button>\n            </div>\n        </form>\n    );\n\n    if (props.isLoading) {\n        form = <CircularProgress />;\n    }\n\n    return (\n        <Card class=\"auth-card\">\n            <h2 className=\"under-line\">{translation('login_page_title')}</h2>\n            {form}\n        </Card>\n    );\n};\n\nLoginForm = reduxForm({\n    form: LOGIN_FORM\n})(LoginForm);\n\nexport default LoginForm;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport Card from '../../share/Card/Card';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { REGISTRATION_FORM } from '../../constants/reduxForms';\nimport { authTypes } from '../../constants/auth';\n\nimport { email, password, required } from '../../validation/validateFields';\n\nlet RegistrationForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n\n    const translation = props.translation;\n\n    const error = props.registrationError;\n\n    const emailValidate = { validate: [required, email] };\n    const emailErrorCondition = error && error.registration.reg;\n    const emailAdvancedValidate = {\n        error: !!emailErrorCondition,\n        helperText: emailErrorCondition ? error.registration.reg : ''\n    };\n\n    const passwordValidate = { validate: [required, password] };\n    const passwordsCondition = error && error.registration.passwords;\n    const passwordValidateAdvanced = {\n        error: !!passwordsCondition,\n        helperText: passwordsCondition ? error.registration.passwords : ''\n    };\n\n    const retypePasswordValidate = { validate: [required, password] };\n    const retypePasswordValidateAdvanced = {\n        error: !!passwordsCondition\n    };\n\n    let form = (\n        <form onSubmit={handleSubmit}>\n            <Field\n                name=\"email\"\n                className=\"form-field\"\n                type=\"email\"\n                component={renderTextField}\n                label={t('email_label')}\n                {...(!error ? emailValidate : emailAdvancedValidate)}\n                onChange={e => props.setError(null)}\n            />\n            <Field\n                name=\"password\"\n                className=\"form-field\"\n                type=\"password\"\n                component={renderTextField}\n                label={t('password_label')}\n                {...(!error ? passwordValidate : passwordValidateAdvanced)}\n                onChange={e => props.setError(null)}\n            />\n            <Field\n                name=\"retypePassword\"\n                className=\"form-field\"\n                type=\"password\"\n                component={renderTextField}\n                label={t('retype_password_label')}\n                {...(!error\n                    ? retypePasswordValidate\n                    : retypePasswordValidateAdvanced)}\n            />\n            <Button\n                className=\"buttons-style\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                {translation('create_account')}\n            </Button>\n            <div className=\"group-btns\">\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.LOGIN);\n                        props.setError(null);\n                    }}\n                >\n                    {translation('account_exist')}\n                </button>\n            </div>\n        </form>\n    );\n\n    if (props.isLoading) {\n        form = <CircularProgress />;\n    }\n    return (\n        <Card class=\"auth-card\">\n            <h2 className=\"under-line\">\n                {props.translation('registration_page_title')}\n            </h2>\n            {form}\n        </Card>\n    );\n};\n\nRegistrationForm = reduxForm({\n    form: REGISTRATION_FORM\n})(RegistrationForm);\n\nexport default RegistrationForm;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Card from '../../share/Card/Card';\nimport renderTextField from '../../share/renderedFields/input';\n\nimport { RESET_PASSWORD_FORM } from '../../constants/reduxForms';\nimport { authTypes } from '../../constants/auth';\n\nimport { email, required } from '../../validation/validateFields';\n\n\nlet ResetPasswordForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n\n    const error = props.resetPasswordError;\n\n    const translation = props.translation;\n\n    const emailValidate = { validate: [required, email] };\n\n    const errorHandling = value => {\n        if (required(value)) {\n            props.setError(required(value));\n        } else {\n            props.setError(null);\n        }\n    };\n\n    let form = (\n        <form onSubmit={handleSubmit}>\n            <Field\n                name=\"email\"\n                className=\"form-field\"\n                component={renderTextField}\n                label={t('email_label')}\n                {...(!error ? emailValidate : error)}\n                onChange={e => {\n                    errorHandling(e.target.value);\n                }}\n            />\n            <Button\n                className=\"buttons-style under-line\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                {translation('reset_password_button')}\n            </Button>\n            <div className=\"group-btns\">\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.LOGIN);\n                        props.setError(null);\n                    }}\n                >\n                    {translation('login_page_title')}\n                </button>\n            </div>\n        </form>\n    );\n\n    if (props.isLoading) {\n        form = <CircularProgress />;\n    }\n\n    return (\n        <Card class=\"auth-card\">\n            <h2 className=\"under-line\">\n                {translation('reset_password_page_title')}\n            </h2>\n            {form}\n        </Card>\n    );\n};\n\nResetPasswordForm = reduxForm({\n    form: RESET_PASSWORD_FORM\n})(ResetPasswordForm);\n\nexport default ResetPasswordForm;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { resetFormService } from '../../services/lessonService';\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\n\nimport {\n    LOGIN_FORM,\n    REGISTRATION_FORM,\n    RESET_PASSWORD_FORM\n} from '../../constants/reduxForms';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\nimport { links } from '../../constants/links';\nimport { authTypes } from '../../constants/auth';\nimport { userRoles } from '../../constants/userRoles';\nimport { validation } from '../../constants/validation';\n\n\nimport LoginForm from '../../components/LoginForm/LoginForm';\nimport RegistrationForm from '../../components/RegistrationForm/RegistrationForm';\nimport ResetPasswordForm from '../../components/ResetPasswordForm/ResetPasswordForm';\n\nimport {\n    authUser,\n    registerUser,\n    resetUserPassword,\n    setAuthError,\n    setLoading\n} from '../../redux/actions/index';\n\nimport './Auth.scss';\n\n\nconst Auth = props => {\n    const { t } = useTranslation('common');\n    const [authType, setAuthType] = useState(authTypes.LOGIN);\n\n    const error = props.error;\n\n    useEffect(() => {\n        if (\n            authType === authTypes.REGISTRATION &&\n            props.response &&\n            props.response.data.hasOwnProperty('message')\n        ) {\n            setAuthType(authTypes.LOGIN);\n            message = t('successful_registered_message');\n            handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n        }\n    }, [props.response]);\n\n    useEffect(() => {\n        if (\n            props.resetPasswordResponse &&\n            props.resetPasswordResponse.data.hasOwnProperty('message')\n        ) {\n            setAuthType(authTypes.LOGIN);\n            message = t('successful_reset_password_message');\n            handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n        }\n    }, [props.resetPasswordResponse]);\n\n    const loginHandler = loginData => {\n        if (!loginData.email || !loginData.password) {\n            props.setError({ login: t('empty_fields') });\n            return;\n        }\n        if (!validation.EMAIL.test(loginData.email)) {\n            props.setError({ login: t('validationMessages:email') });\n            return;\n        }\n        props.onAuth(loginData);\n        props.setLoading(true);\n        resetFormService(LOGIN_FORM);\n    };\n\n    const registrationHandler = registrationData => {\n        if (registrationData.password !== registrationData.retypePassword) {\n            props.setError({\n                registration: { passwords: t('different_passwords') }\n            });\n            return;\n        }\n        props.onRegister({\n            email: registrationData.email,\n            password: registrationData.password\n        });\n        props.setLoading(true);\n        resetFormService(REGISTRATION_FORM);\n    };\n\n    const resetPasswordHandler = resetPasswordData => {\n        props.onResetPassword({\n            email: resetPasswordData.email\n        });\n        props.setLoading(true);\n        resetFormService(RESET_PASSWORD_FORM);\n    };\n\n    let isSuccess, message;\n    const isLoading = props.loading;\n\n    if (!error && props.userRole) {\n        const token = props.token;\n        isSuccess = !!token;\n        message = t('successful_login_message');\n        handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n    }\n\n    const commonCondition = !error && isSuccess && !isLoading;\n\n    let authRedirect = null;\n    if (commonCondition && props.userRole === userRoles.MANAGER) {\n        authRedirect = <Redirect to={links.ADMIN_PAGE} />;\n    } else if (commonCondition && props.userRole) {\n        authRedirect = <Redirect to={links.HOME_PAGE} />;\n    } else if (commonCondition && props.userRole === userRoles.TEACHER) {\n        authRedirect = <Redirect to={links.HOME_PAGE} />;\n    }\n\n    const switchAuthModeHandler = authType => {\n        setAuthType(authType);\n    };\n\n    let authPage;\n\n    switch (authType) {\n        case authTypes.LOGIN:\n            document.title = t('login_page_title');\n            authPage = (\n                <LoginForm\n                    isLoading={isLoading}\n                    loginError={error}\n                    onSubmit={loginHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n            break;\n        case authTypes.REGISTRATION:\n            document.title = t('registration_page_title');\n            authPage = (\n                <RegistrationForm\n                    isLoading={isLoading}\n                    registrationError={error}\n                    onSubmit={registrationHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n            break;\n        case authTypes.RESET_PASSWORD:\n            document.title = t('reset_password_page_title');\n            authPage = (\n                <ResetPasswordForm\n                    isLoading={isLoading}\n                    resetPasswordError={error}\n                    onSubmit={resetPasswordHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n            break;\n        default:\n            document.title = t('login_page_title');\n            authPage = (\n                <LoginForm\n                    isLoading={isLoading}\n                    loginError={error}\n                    onSubmit={loginHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n    }\n\n    return (\n        <div className=\"auth-form\">\n            {authRedirect}\n            {authPage}\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    response: state.auth.response,\n    resetPasswordResponse: state.auth.resetPasswordResponse,\n    error: state.auth.error,\n    token: state.auth.token,\n    userRole: state.auth.role,\n    loading: state.loadingIndicator.loading\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: data => dispatch(authUser(data)),\n        onRegister: data => dispatch(registerUser(data)),\n        onResetPassword: data => dispatch(resetUserPassword(data)),\n        setLoading: isLoading => dispatch(setLoading(isLoading)),\n        setError: error => dispatch(setAuthError(error))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n","import * as actionTypes from './actionsType';\nimport { TOKEN_BEGIN } from '../../constants/tokenBegin';\n\nexport const authUser = res => {\n    return {\n        type: actionTypes.AUTH_USER,\n        result: res\n    };\n};\n\nexport const registerUser = res => {\n    return {\n        type: actionTypes.REGISTER_USER,\n        result: res\n    };\n};\n\nexport const resetUserPassword = res => {\n    return {\n        type: actionTypes.RESET_USER_PASSWORD,\n        result: res\n    };\n};\n\nexport const activateUser = res => {\n    return {\n        type: actionTypes.ACTIVATE_USER,\n        result: res\n    };\n};\n\nexport const logout = () => {\n    return {\n        type: actionTypes.AUTH_USER_INITIATE_LOGOUT\n    };\n};\n\nexport const authCheckState = () => {\n    const token = localStorage.getItem('token');\n    if (token && !token.includes(TOKEN_BEGIN)) {\n        return {\n            type: actionTypes.AUTH_USER_LOGOUT\n        }\n    }\n    const role = localStorage.getItem('userRole');\n    return {\n        type: actionTypes.AUTH_USER_CHECK_STATE,\n        token,\n        role\n    }\n};\n\nexport const setAuthError = res => {\n    return {\n        type: actionTypes.SET_AUTH_ERROR,\n        result: res\n    }\n};\n\n\n\n","export const cardType = {\n    LESSON: 'Lesson',\n    TEACHER: 'Teacher',\n    CLASS: 'Class',\n    GROUP: 'Group',\n    ROOM: 'Room',\n    TYPE: 'Type',\n    SUBJECT: 'Subject',\n    WISH: 'Wish',\n    SEMESTER: 'Semester'\n};\n","export const snackbarMessage = (cardType, actionType) => {\n  return `${cardType} was ${actionType} successfully`;\n};\n","import { reset } from 'redux-form';\n\nimport { store } from '../index';\nimport axios from '../helper/axios';\nimport {\n    DISABLED_GROUPS_URL,\n    DISABLED_ROOMS_URL,\n    GROUP_URL\n} from '../constants/axios';\nimport { cardType } from '../constants/cardType';\nimport { GROUP_FORM } from '../constants/reduxForms';\nimport { actionType } from '../constants/actionTypes';\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { snackbarMessage } from '../constants/snackbarMessages';\nimport {\n    showAllGroups,\n    deleteGroup,\n    addGroup,\n    selectGroup,\n    updateGroup,\n    clearGroup,\n    setDisabledRooms,\n    setDisabledGroups\n} from '../redux/actions/index';\nimport i18n from '../helper/i18n';\n\nconst resetForm = form => store.dispatch(reset(form));\n\nexport const selectGroupService = groupId =>\n    store.dispatch(selectGroup(groupId));\n\nexport const handleGroupService = values =>\n    values.id ? updateGroupService(values) : createGroupService(values);\n\nexport const clearGroupService = () => {\n    store.dispatch(clearGroup());\n    resetForm(GROUP_FORM);\n};\n\nexport const showAllGroupsService = () => {\n    axios\n        .get(GROUP_URL)\n        .then(response => {\n            store.dispatch(showAllGroups(response.data.sort((a, b) => a - b)));\n        })\n        .catch(error =>\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                `${error.response.data.message}`\n            )\n        );\n};\n\nexport const removeGroupCardService = groupId => {\n    axios\n        .delete(GROUP_URL + `/${groupId}`)\n        .then(response => {\n            store.dispatch(deleteGroup(groupId));\n            getDisabledGroupsService();\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                snackbarMessage(cardType.GROUP, actionType.DELETED)\n            );\n        })\n        .catch(error =>\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                `${error.response.data.message}`\n            )\n        );\n};\n\nexport const createGroupService = data => {\n    axios\n        .post(GROUP_URL, data)\n        .then(response => {\n            store.dispatch(addGroup(response.data));\n            resetForm(GROUP_FORM);\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                snackbarMessage(cardType.GROUP, actionType.CREATED)\n            );\n        })\n        .catch(error =>\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                `${error.response.data.message}`\n            )\n        );\n};\n\nexport const updateGroupService = data => {\n    return axios\n        .put(GROUP_URL, data)\n        .then(response => {\n            store.dispatch(updateGroup(response.data));\n            selectGroupService(null);\n            getDisabledGroupsService();\n            resetForm(GROUP_FORM);\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                snackbarMessage(cardType.GROUP, actionType.UPDATED)\n            );\n        })\n        .catch(error =>\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                `${error.response.data.message}`\n            )\n        );\n};\n\nexport const getDisabledGroupsService = () => {\n    axios\n        .get(DISABLED_GROUPS_URL)\n        .then(res => {\n            store.dispatch(setDisabledGroups(res.data));\n        })\n        .catch(error => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t(error.response.data.message, error.response.data.message)\n            );\n        });\n};\n\nexport const setDisabledGroupService = group => {\n    group.disable = true;\n    updateGroupService(group);\n};\n\nexport const setEnabledGroupService = group => {\n    group.disable = false;\n    updateGroupService(group);\n};\n","import { store } from '../index';\nimport { reset } from 'redux-form';\nimport { DISABLED_ROOMS_URL, ROOM_URL } from '../constants/axios';\nimport { ROOM_FORM } from '../constants/reduxForms';\nimport axios from '../helper/axios';\n\nimport {\n    showListOfRooms,\n    deleteRoom,\n    addRoom,\n    selectOneRoom,\n    updateOneRoom,\n    clearRoomOne,\n    setDisabledRooms\n} from '../redux/actions/rooms';\n\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { snackbarTypes } from '../constants/snackbarTypes';\n\nimport i18n from '../helper/i18n';\n\nconst resetFormHandler = form => {\n    store.dispatch(reset(form));\n};\n\nexport const showListOfRoomsService = () => {\n    axios\n        .get(ROOM_URL)\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(showListOfRooms(bufferArray));\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                err.response\n                    ? i18n.t(\n                    err.response.data.message,\n                    err.response.data.message\n                    )\n                    : err\n            );\n        });\n};\n\nexport const deleteRoomCardService = id => {\n    axios\n        .delete(ROOM_URL + `/${id}`)\n        .then(res => {\n            store.dispatch(deleteRoom(id));\n            getDisabledRoomsService();\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:room_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                err.response\n                    ? i18n.t(\n                    err.response.data.message,\n                    err.response.data.message\n                    )\n                    : err\n            );\n        });\n};\n\nexport const getDisabledRoomsService = () => {\n    axios\n        .get(DISABLED_ROOMS_URL)\n        .then(res => {\n            store.dispatch(setDisabledRooms(res.data));\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                err.response\n                    ? i18n.t(\n                    err.response.data.message,\n                    err.response.data.message\n                    )\n                    : err\n            );\n        });\n};\n\nexport const setDisabledRoomsService = room => {\n    room.disable = true;\n    put(room);\n};\n\nexport const setEnabledRoomsService = room => {\n    room.disable = false;\n    put(room);\n};\n\nconst put = values => {\n    axios\n        .put(ROOM_URL, values)\n        .then(result => {\n            store.dispatch(updateOneRoom(result.data));\n            resetFormHandler(ROOM_FORM);\n            getDisabledRoomsService();\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:room_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                err.response\n                    ? i18n.t(\n                    err.response.data.message,\n                    err.response.data.message\n                    )\n                    : err\n            );\n        });\n};\nconst post = values => {\n    axios\n        .post(ROOM_URL, values)\n        .then(res => {\n            store.dispatch(addRoom(res.data));\n            resetFormHandler(ROOM_FORM);\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:room_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                err.response\n                    ? i18n.t(\n                    err.response.data.message,\n                    err.response.data.message\n                    )\n                    : err\n            );\n        });\n};\n\nexport const createRoomService = values => {\n    if (values.id) {\n        const newValue = {\n            id: values.id,\n            name: values.name,\n            type: { id: +values.type, description: values.typeDescription }\n        };\n        put(newValue);\n    } else {\n        const newValue = {\n            name: values.name,\n            type: { id: +values.type, description: values.typeDescription }\n        };\n\n        post(newValue);\n    }\n};\n\nexport const selectOneRoomService = roomId => {\n    store.dispatch(selectOneRoom(roomId));\n};\n\nexport const clearRoomOneService = () => {\n    store.dispatch(clearRoomOne());\n    resetFormHandler(ROOM_FORM);\n};\n","import * as actionsType from './actionsType';\n\nexport const addRoom = room => {\n    return {\n        type: actionsType.ADD_ROOM,\n        result: room\n    };\n};\n\nexport const deleteRoom = id => {\n    return {\n        type: actionsType.DELETE_ROOM,\n        result: id\n    };\n};\n\nexport const showListOfRooms = rooms => {\n    return {\n        type: actionsType.SHOW_LIST_OF_ROOMS,\n        result: rooms\n    };\n};\n\nexport const  setDisabledRooms = rooms => {\n    return {\n        type: actionsType.SET_DISABLED_ROOMS,\n        result: rooms\n    };\n};\n\nexport const selectOneRoom = id => {\n    return {\n        type: actionsType.SELECT_ONE_ROOM,\n        result: id\n    };\n};\n\nexport const updateOneRoom = room => {\n    return {\n        type: actionsType.UPDATE_ONE_ROOM,\n        result: room\n    };\n};\n\nexport const clearRoomOne = () => ({\n    type: actionsType.CLEAR_ROOM_ONE\n});\n\n\n","import React from 'react';\n\nimport { colors } from '../../constants/schedule/colors';\nimport { cssClasses } from '../../constants/schedule/cssClasses';\nimport { checkAvailabilityScheduleService } from '../../services/scheduleService';\nimport { setLoadingService } from '../../services/loadingService';\n\nconst Board = props => {\n    const itemGroupId = props.itemGroupId;\n\n    const drop = e => {\n        e.preventDefault();\n        const card_id = e.dataTransfer.getData('card_id');\n\n        const card = document.getElementById(card_id);\n        if (card) card.style.display = 'block';\n\n        const arr = e.target.id.split('-');\n        const day = arr[3];\n        const classId = arr[5];\n        const week = arr[7];\n\n        const item = JSON.parse(card.childNodes[0].value);\n        let itemId = item.id;\n\n        let obj = {\n            lessonId: item.lesson.id,\n            dayOfWeek: day.toUpperCase(),\n            periodId: +classId,\n            evenOdd: week.toUpperCase(),\n            semesterId: props.currentSemester.id\n        };\n        checkAvailabilityScheduleService(obj);\n        setLoadingService(true);\n        if (itemId) obj = { ...obj, id: itemId };\n\n        props.setModalData({ item: obj, groupId: item.lesson.group.id });\n        props.openDialog();\n    };\n\n    const dragOver = e => {\n        const target = e.target;\n        const children = target.childNodes;\n        const arr = target.id.split('-');\n        const borderGroupId = +arr[1];\n\n        if (\n            borderGroupId !== itemGroupId &&\n            target.classList.contains(cssClasses.SCHEDULE_BOARD)\n        ) {\n            target.style.backgroundColor = colors.DANGER;\n        } else if (\n            target.classList.contains(cssClasses.SCHEDULE_BOARD) &&\n            children[1]\n        ) {\n            children[1].style.backgroundColor = colors.DANGER;\n            target.style.backgroundColor = colors.DANGER;\n        } else if (\n            !children[1] &&\n            target.classList.contains(cssClasses.SCHEDULE_BOARD)\n        ) {\n            target.style.backgroundColor = colors.ALLOW;\n            e.preventDefault();\n        }\n    };\n\n    const dragLeave = e => {\n        const target = e.target;\n        const children = target.childNodes;\n        const parent = target.parentNode;\n\n        const arr = target.id.split('-');\n        const borderGroupId = +arr[1];\n\n        if (borderGroupId === itemGroupId && !target.childNodes[1]) {\n            target.style.backgroundColor = colors.POSSIBILITY;\n        } else if (\n            target.classList.contains(cssClasses.SCHEDULE_BOARD) &&\n            children[1]\n        ) {\n            target.style.backgroundColor = colors.NOTHING;\n            children[1].style.backgroundColor = colors.NOTHING;\n        } else if (\n            parent &&\n            parent.classList.contains(cssClasses.SCHEDULE_BOARD)\n        ) {\n            parent.style.backgroundColor = colors.NOTHING;\n            parent.parentNode.style.backgroundColor = colors.NOTHING;\n        } else {\n            target.style.backgroundColor = colors.NOTHING;\n        }\n    };\n\n    return (\n        <div\n            id={props.id}\n            onDrop={drop}\n            onDragOver={dragOver}\n            onDragLeave={dragLeave}\n            className={props.className}\n        >\n            {props.children}\n        </div>\n    );\n};\n\nexport default Board;\n","import React from 'react';\nimport { MdDelete } from 'react-icons/md';\n\nimport Card from '../../share/Card/Card';\n\nconst ScheduleItem = props => {\n    let lesson = props.lesson;\n    let itemId;\n\n    const item = props.item || null;\n    const t = props.translation;\n    const { fStrLetterCapital } = props;\n\n    if (item) {\n        lesson = item.lesson;\n        itemId = item.id;\n    }\n\n    const addition = props.addition;\n\n    const itemNodeId = `card-${lesson.id}-group-${lesson.group.id}-${addition}`;\n    const deleteNodeId = `delete-${lesson.id}-${lesson.group.id}-${addition}`;\n\n    return (\n        <Card id={itemNodeId} class={props.class} draggable={true}>\n            <input\n                type=\"hidden\"\n                value={JSON.stringify({\n                    lesson: lesson,\n                    id: itemId\n                })}\n            />\n            {props.inBoard ? (\n                <>\n                    <div className=\"cards-btns delete-item\" id={deleteNodeId}>\n                        <MdDelete\n                            title={t('common:delete_schedule_item')}\n                            className=\"svg-btn delete-btn\"\n                            onClick={() =>\n                                props.deleteItem(itemId, item.lesson.group.id)\n                            }\n                        />\n                    </div>\n                </>\n            ) : (\n                ''\n            )}\n            <p>\n                {fStrLetterCapital(lesson.subjectForSite)} (\n                {t(\n                    `formElements:lesson_type_${lesson.lessonType.toLowerCase()}_label`\n                )}\n                )\n            </p>\n            <p>{lesson.teacherForSite}</p>\n            {props.inBoard ? (\n                <p>\n                    {t('common:room_card_title')} <b>{item.room.name}</b>\n                </p>\n            ) : (\n                <p>\n                    <b>1</b> {t('formElements:hours_label')}\n                </p>\n            )}\n        </Card>\n    );\n};\n\nexport default ScheduleItem;\n","export const firstStringLetterCapital = str => {\n    return str.replace(/^\\w/, c => c.toUpperCase());\n};\n","import React from 'react';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { styled } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nimport Board from '../Board/Board';\nimport ScheduleItem from '../ScheduleItem/ScheduleItem';\n\nimport { selectGroupIdService } from '../../services/lessonService';\n\nimport { firstStringLetterCapital } from '../../helper/strings';\n\nconst GroupField = styled(TextField)({\n    width: '150px'\n});\n\nconst ScheduleLessonsList = props => {\n    const { groups, groupId } = props;\n\n    let lessons = props.lessons;\n    const items = props.items;\n\n    const t = props.translation;\n\n    const handleGroupSelect = group => {\n        if (group) selectGroupIdService(group.id);\n    };\n\n    const groupFinderHandle = groupId => {\n        if (groupId) return groups.find(group => group.id === groupId);\n        else return '';\n    };\n\n    const defaultProps = {\n        options: groups,\n        getOptionLabel: option => (option ? option.title : '')\n    };\n\n    const firstStringLetterCapitalHandle = str => {\n        return firstStringLetterCapital(str);\n    };\n\n    const lessonItems = lesson => {\n        let hours = lesson.hours;\n        const lessonItem = [];\n        let els = [];\n        let hoursInSchedule = 0;\n\n        if (items.length > 0) {\n            els = items.filter(item => item.lesson.id === lesson.id);\n        }\n\n        els.forEach(() => {\n            hoursInSchedule += 1;\n        });\n\n        for (let i = 0; i < hours - hoursInSchedule; i++) {\n            lessonItem.push(\n                <section key={lesson.id + i}>\n                    <ScheduleItem\n                        index={i}\n                        lesson={lesson}\n                        fStrLetterCapital={firstStringLetterCapitalHandle}\n                        translation={t}\n                        classScheduler={props.classScheduler}\n                    />\n                </section>\n            );\n        }\n        return lessonItem;\n    };\n\n    return (\n        <>\n            {t('common:select_group_schedule')}\n            <Autocomplete\n                {...defaultProps}\n                id=\"group\"\n                clearOnEscape\n                openOnFocus\n                value={groupFinderHandle(groupId)}\n                onChange={(event, newValue) => {\n                    handleGroupSelect(newValue);\n                }}\n                renderInput={params => (\n                    <GroupField\n                        {...params}\n                        label={t('formElements:group_label')}\n                        margin=\"normal\"\n                    />\n                )}\n            />\n            {lessons.length > 0 ? (\n                <Board className=\"board lesson-board\">\n                    {lessons.map(lesson => lessonItems(lesson))}\n                </Board>\n            ) : groupId ? (\n                t('lesson_no_lesson_for_group_label')\n            ) : (\n                ''\n            )}\n        </>\n    );\n};\n\nexport default ScheduleLessonsList;\n","import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from '@material-ui/core';\n\nimport '../../share/modals/dialog.scss';\n\nconst useStyles = makeStyles(() => ({\n    roomField: {\n        '&': {\n            margin: '0 auto',\n            width: 250\n        }\n    }\n}));\n\nconst ScheduleDialog = props => {\n    const {\n        onClose,\n        itemData,\n        open,\n        rooms,\n        availability,\n        translation,\n        isLoading\n    } = props;\n    const [room, setRoom] = useState('');\n    const [sure, setSure] = useState(true);\n\n    const classes = useStyles();\n\n    const handleClose = () => {\n        onClose();\n    };\n\n    const chooseClickHandle = () => {\n        if (!room) return;\n\n        if (\n            !room.available ||\n            !availability.teacherAvailable ||\n            !availability.classSuitsToTeacher\n        ) {\n            setSure(false);\n            return;\n        }\n        onClose({ itemData, room });\n        setRoom(null);\n    };\n\n    const groupByAvailability = arr => {\n        arr.sort((x, y) => {\n            return x === y ? 0 : x ? 1 : -1;\n        });\n        return arr;\n    };\n\n    const defaultProps = {\n        options: availability.rooms\n            ? groupByAvailability(availability.rooms)\n            : rooms,\n        getOptionLabel: option =>\n            option\n                ? option.available\n                    ? option.name + ` (${translation('common:available')})`\n                    : option.name + ` (${translation('common:unavailable')})`\n                : ''\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"simple-dialog-title\"\n            open={open}\n        >\n            {sure ? (\n                <>\n                    {isLoading ? (\n                        <div className=\"circular-progress-dialog\">\n                            <CircularProgress />\n                        </div>\n                    ) : (\n                        <>\n                            <DialogTitle id=\"simple-dialog-title\">\n                                {translation('common:schedule_dialog_title')}\n                            </DialogTitle>\n                            <div className=\"availability-info\">\n                                {!availability.classSuitsToTeacher ? (\n                                    <p className=\"availability-warning\">\n                                        {translation(\n                                            'common:class_does_not_suit_for_teacher'\n                                        )}\n                                    </p>\n                                ) : (\n                                    ''\n                                )}\n                                {!availability.teacherAvailable ? (\n                                    <p className=\"availability-warning\">\n                                        {translation(\n                                            'common:teacher_is_unavailable'\n                                        )}{' '}\n                                    </p>\n                                ) : (\n                                    ''\n                                )}\n                            </div>\n                            <Autocomplete\n                                {...defaultProps}\n                                id=\"group\"\n                                clearOnEscape\n                                openOnFocus\n                                className={classes.roomField}\n                                onChange={(event, newValue) => {\n                                    setRoom(newValue);\n                                }}\n                                renderInput={params => (\n                                    <TextField\n                                        {...params}\n                                        label={translation(\n                                            'formElements:room_label'\n                                        )}\n                                        margin=\"normal\"\n                                    />\n                                )}\n                            />\n                            <div className=\"buttons-container\">\n                                <Button\n                                    className=\"dialog-button\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => chooseClickHandle()}\n                                >\n                                    {translation(\n                                        'formElements:choose_button_title'\n                                    )}\n                                </Button>\n                                <Button\n                                    className=\"dialog-button\"\n                                    variant=\"contained\"\n                                    onClick={() => onClose()}\n                                >\n                                    {translation(\n                                        'formElements:cancel_button_title'\n                                    )}\n                                </Button>\n                            </div>\n                        </>\n                    )}\n                </>\n            ) : (\n                <>\n                    <DialogTitle id=\"simple-dialog-title\">\n                        <p className=\"availability-warning\">\n                            {!room.available\n                                ? translation('common:room_is_unavailable') +\n                                  '. '\n                                : ''}\n                        </p>\n                        <p className=\"availability-warning\">\n                            {!availability.teacherAvailable\n                                ? translation('common:teacher_is_unavailable') +\n                                  '. '\n                                : ''}\n                        </p>\n\n                        <p className=\"availability-warning\">\n                            {!availability.classSuitsToTeacher\n                                ? translation(\n                                      'common:class_does_not_suit_for_teacher'\n                                  ) + '. '\n                                : ''}\n                        </p>\n\n                        {translation('common:are_you_sure')}\n                    </DialogTitle>\n                    <div className=\"buttons-container\">\n                        <Button\n                            className=\"dialog-button\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                onClose({ itemData, room });\n                                setSure(true);\n                            }}\n                        >\n                            {translation('common:yes_button_title')}\n                        </Button>\n                        <Button\n                            className=\"dialog-button\"\n                            variant=\"contained\"\n                            onClick={() => setSure(true)}\n                        >\n                            {translation('common:no_button_title')}\n                        </Button>\n                    </div>\n                </>\n            )}\n        </Dialog>\n    );\n};\n\nScheduleDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    rooms: PropTypes.array.isRequired,\n    availability: PropTypes.object.isRequired\n};\n\nexport default ScheduleDialog;\n","import React, { useState } from 'react';\nimport { IoMdMore } from 'react-icons/all';\n\nimport Board from '../Board/Board';\nimport ScheduleItem from '../ScheduleItem/ScheduleItem';\nimport ScheduleDialog from '../ScheduleDialog/ScheduleDialog';\n\nimport { firstStringLetterCapital } from '../../helper/strings';\n\nimport {\n    addItemToScheduleService,\n    deleteItemFromScheduleService\n} from '../../services/scheduleService';\nimport {\n    getLessonsByGroupService,\n    selectGroupIdService\n} from '../../services/lessonService';\nimport { setLoadingService } from '../../services/loadingService';\n\nimport { cssClasses } from '../../constants/schedule/cssClasses';\nimport { colors } from '../../constants/schedule/colors';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst Schedule = props => {\n    const { groups, itemGroupId } = props;\n    const [open, setOpen] = useState(false);\n    const [itemData, setItemData] = useState(null);\n\n    const setNewItemHandle = (item, room, groupId) => {\n        getLessonsByGroupService(groupId);\n        selectGroupIdService(groupId);\n        if (item.id) deleteItemFromScheduleService(item.id);\n\n        addItemToScheduleService({ ...item, roomId: room.id });\n    };\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = value => {\n        setOpen(false);\n        if (value) {\n            setLoadingService(true);\n            setNewItemHandle(\n                value.itemData.item,\n                value.room,\n                value.itemData.groupId\n            );\n            const el = document.getElementById(\n                'group-' +\n                    value.itemData.groupId +\n                    '-day-' +\n                    value.itemData.item.dayOfWeek.toLowerCase() +\n                    '-class-' +\n                    value.itemData.item.periodId +\n                    '-week-' +\n                    value.itemData.item.evenOdd.toLowerCase()\n            );\n            el.scrollIntoView();\n            setTimeout(() => {\n                el.style.backgroundColor = colors.ALLOW;\n            }, 1000);\n\n            setTimeout(() => {\n                el.style.backgroundColor = colors.NOTHING;\n            }, 3000);\n        }\n    };\n\n    const items = props.items;\n\n    const currentSemester = props.currentSemester;\n    const days = currentSemester.semester_days;\n    const classes = currentSemester.semester_classes;\n\n    const t = props.translation;\n\n    const boardHeight = 70;\n\n    const useStyles = makeStyles({\n        day: {\n            top: boardHeight * classes.length\n        }\n    });\n    const elClasses = useStyles();\n\n    const firstStringLetterCapitalHandle = str => {\n        return firstStringLetterCapital(str);\n    };\n\n    const deleteItemFromScheduleHandler = (itemId, groupId) => {\n        deleteItemFromScheduleService(itemId);\n        getLessonsByGroupService(groupId);\n        selectGroupIdService(groupId);\n    };\n\n    const conditionFunc = (item, lesson, group) => {\n        return (\n            `group-${\n                item.lesson.group.id\n            }-day-${item.dayOfWeek.toLowerCase()}-class-${\n                item.period.id\n            }-week-${item.evenOdd.toLowerCase()}` ===\n            `group-${group.id}-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`\n        );\n    };\n\n    const addDeleteBtnToItem = (item, group, lesson) => {\n        const addition = `in-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`;\n        const itemNodeId = `card-${item.lesson.id}-group-${group.id}-${addition}`;\n        const deleteNodeId = `delete-${item.lesson.id}-${group.id}-${addition}`;\n        setTimeout(() => {\n            const itemNode = document.getElementById(itemNodeId);\n            const deleteNode = document.getElementById(deleteNodeId);\n            if (deleteNode && itemNode) {\n                itemNode.addEventListener('mouseenter', () => {\n                    deleteNode.style.display = 'block';\n                });\n                itemNode.addEventListener('mouseleave', () => {\n                    deleteNode.style.display = 'none';\n                });\n            }\n        }, 1000);\n    };\n\n    const itemInBoard = (group, lesson, index) => {\n        for (let item of items) {\n            if (conditionFunc(item, lesson, group)) {\n                const addition = `in-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`;\n                addDeleteBtnToItem(item, group, lesson);\n                return (\n                    <section\n                        key={group.id + index + item.id}\n                        className={cssClasses.IN_BOARD_SECTION}\n                    >\n                        <ScheduleItem\n                            inBoard={true}\n                            addition={addition}\n                            class={cssClasses.IN_BOARD_CARD}\n                            item={item}\n                            deleteItem={deleteItemFromScheduleHandler}\n                            fStrLetterCapital={firstStringLetterCapitalHandle}\n                            translation={t}\n                        />\n                    </section>\n                );\n            }\n        }\n    };\n\n    const allLessons = [];\n    days.forEach(day => {\n        classes.forEach(classNumber => {\n            for (let i = 0; i < 2; i++) {\n                if ((i + 1) % 2 === 0) {\n                    allLessons.push({\n                        day: { name: day.toLowerCase() },\n                        classNumber,\n                        week: 'even'\n                    });\n                } else {\n                    allLessons.push({\n                        day: { name: day.toLowerCase() },\n                        classNumber,\n                        week: 'odd'\n                    });\n                }\n            }\n        });\n    });\n\n    return (\n        <section className=\"cards-container\">\n            <ScheduleDialog\n                translation={t}\n                itemData={itemData}\n                rooms={props.rooms}\n                availability={props.availability}\n                open={open}\n                isLoading={props.isLoading}\n                onClose={handleClose}\n            />\n            <aside className=\"day-classes-aside\">\n                <section className=\"card empty-card\">Група</section>\n                {days.map(day => (\n                    <section\n                        className=\"cards-container before-border\"\n                        key={day}\n                    >\n                        <section\n                            className={elClasses.day + ' card schedule-day'}\n                        >\n                            {t(`day_of_week_${day}`)}\n                        </section>\n                        <section className=\"class-section\">\n                            {classes.map(classScheduler => (\n                                <section\n                                    className=\"card schedule-class\"\n                                    key={classScheduler.id}\n                                >\n                                    {classScheduler.class_name}\n                                </section>\n                            ))}\n                        </section>\n                    </section>\n                ))}\n            </aside>\n            {groups.map(group => (\n                <section key={'group-' + group.id}>\n                    <div className=\"group-title card\" id={`group-${group.id}`}>\n                        {group.title}\n                    </div>\n                    {allLessons.map((lesson, index) => (\n                        <div key={group + '-' + index} className=\"board-div\">\n                            <Board\n                                currentSemester={currentSemester}\n                                setModalData={setItemData}\n                                openDialog={handleClickOpen}\n                                itemGroupId={itemGroupId}\n                                id={`group-${group.id}-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`}\n                                className={`board card ${cssClasses.SCHEDULE_BOARD} group-${group.id} schedule-board`}\n                            >\n                                <IoMdMore\n                                    className=\"more-icon\"\n                                    title={\n                                        `${t(\n                                            `formElements:teacher_wish_day`\n                                        )}: ` +\n                                        t(\n                                            `day_of_week_${lesson.day.name.toUpperCase()}`\n                                        ).toLowerCase() +\n                                        `\\n${t(`teacher_wish_week`)}: ` +\n                                        t(`week_${lesson.week}_title`) +\n                                        `\\n${t('class_schedule')}: ` +\n                                        lesson.classNumber.class_name\n                                    }\n                                />\n                                {itemInBoard(group, lesson, index)}\n                            </Board>\n                        </div>\n                    ))}\n                </section>\n            ))}\n        </section>\n    );\n};\n\nexport default Schedule;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport { showAllGroupsService } from '../../services/groupService';\nimport { getLessonsByGroupService } from '../../services/lessonService';\nimport {\n    setLoadingService,\n    setScheduleLoadingService\n} from '../../services/loadingService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { getScheduleItemsService } from '../../services/scheduleService';\nimport { showListOfRoomsService } from '../../services/roomService';\n\nimport ScheduleLessonsList from '../../components/ScheduleLessonsList/ScheduleLessonsList';\nimport Schedule from '../../components/Schedule/Schedule';\n\nimport { CircularProgress } from '@material-ui/core';\n\nimport './SchedulePage.scss';\n\nconst SchedulePage = props => {\n    const { t } = useTranslation('common');\n\n    document.title = t('schedule_title');\n\n    const { groups, groupId } = props;\n\n    const itemGroupId = props.itemGroupId;\n\n    const scheduleItems = props.scheduleItems;\n\n    let lessons = props.lessons;\n\n    const isLoading = props.loading;\n\n    useEffect(() => {\n        setLoadingService(true);\n        setScheduleLoadingService(true);\n        getScheduleItemsService();\n    }, []);\n\n    useEffect(() => {\n        showAllGroupsService();\n    }, []);\n\n    useEffect(() => {\n        if (groupId) {\n            setLoadingService(true);\n            getLessonsByGroupService(groupId);\n        }\n    }, [groupId]);\n\n    useEffect(() => getClassScheduleListService(), []);\n\n    useEffect(() => showListOfRoomsService(), []);\n\n    return (\n        <>\n            <section className=\"cards-container schedule-page\">\n                <section className=\"flexbox card \">\n                    {props.scheduleLoading ? (\n                        <CircularProgress />\n                    ) : (\n                        <>\n                            {!props.currentSemester.id ? (\n                                <h2 className=\"no-current-semester\">\n                                    {t('no_current_semester')}\n                                </h2>\n                            ) : (\n                                <Schedule\n                                    currentSemester={props.currentSemester}\n                                    groups={groups}\n                                    itemGroupId={itemGroupId}\n                                    items={scheduleItems}\n                                    translation={t}\n                                    rooms={props.rooms}\n                                    availability={props.availability}\n                                    isLoading={isLoading}\n                                />\n                            )}\n                        </>\n                    )}\n                </section>\n                <aside className=\"lesson-list card\">\n                    {isLoading ? (\n                        <CircularProgress />\n                    ) : (\n                        <ScheduleLessonsList\n                            items={scheduleItems}\n                            groups={groups}\n                            lessons={lessons}\n                            groupId={groupId}\n                            translation={t}\n                            classScheduler={\n                                props.currentSemester.semester_classes\n                            }\n                        />\n                    )}\n                </aside>\n            </section>\n            <section className=\"for-phones-and-tablets card\">\n                <h1>{t('use_pc')}</h1>\n            </section>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    groups: state.groups.groups,\n    lessons: state.lesson.lessons,\n    groupId: state.lesson.groupId,\n    loading: state.loadingIndicator.loading,\n    scheduleLoading: state.loadingIndicator.scheduleLoading,\n    scheduleItems: state.schedule.items,\n    itemGroupId: state.schedule.itemGroupId,\n    availability: state.schedule.availability,\n    currentSemester: state.schedule.currentSemester,\n    rooms: state.rooms.rooms\n});\n\nexport default connect(mapStateToProps)(SchedulePage);\n","export const disabledCard = {\n    SHOW: 'show',\n    HIDE: 'hide'\n};\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './dialog.scss';\n\nimport i18n from '../../helper/i18n';\nimport { disabledCard } from '../../constants/disabledCard';\n\nexport const ConfirmDialog = props => {\n    const { onClose, whatDelete, cardId, isHide, open } = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">\n                <>\n                    {isHide ? (\n                        <>\n                            {isHide === disabledCard.HIDE ? (\n                                <>{i18n.t('common:do_you_wanna_disable')}</>\n                            ) : (\n                                <>{i18n.t('common:do_you_wanna_show')}</>\n                            )}\n                        </>\n                    ) : (\n                        <>\n                            {i18n.t('common:do_you_wanna')}{' '}\n                            <span className=\"delete-word\">\n                                {i18n.t('common:delete_word')}\n                            </span>{' '}\n                        </>\n                    )}\n\n                    {i18n.t('common:this_card_type', {\n                        cardType: i18n.t(`formElements:${whatDelete}_element`)\n                    })}\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => onClose(cardId)}\n                >\n                    {i18n.t('common:yes_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                >\n                    {i18n.t('common:no_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nConfirmDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default ConfirmDialog;\n","import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n    groupField: {\n        '&': {\n            margin: '0 auto',\n            width: '90%'\n        }\n    }\n}));\n\nexport const CopyLessonDialog = props => {\n    const { onClose, lesson, translation, groups, groupId, open } = props;\n    const [group, setGroup] = useState('');\n    const [error, setError] = useState('');\n\n    const classes = useStyles();\n\n    const handleClose = () => {\n        onClose();\n    };\n\n    const chooseClickHandle = () => {\n        if (!group) {\n            return;\n        }\n        if (group.id === groupId) {\n            setError(translation('copy_to_same_group_error'));\n            return;\n        }\n        onClose({ lesson, group });\n    };\n\n    const defaultProps = {\n        options: groups,\n        getOptionLabel: option => (option ? option.title : '')\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"simple-dialog-title\">\n                {translation('choose_group')}\n            </DialogTitle>\n            <Autocomplete\n                {...defaultProps}\n                id=\"group\"\n                clearOnEscape\n                openOnFocus\n                className={classes.groupField}\n                onChange={(event, newValue) => {\n                    setGroup(newValue);\n                    setError(null);\n                }}\n                renderInput={params => (\n                    <TextField\n                        {...params}\n                        label={translation('common:choose_group')}\n                        error={!!error}\n                        helperText={error ? error : null}\n                        margin=\"normal\"\n                    />\n                )}\n            />\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => chooseClickHandle()}\n                >\n                    {translation('formElements:choose_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose()}\n                >\n                    {translation('formElements:cancel_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nCopyLessonDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default CopyLessonDialog;\n","import React, { useEffect } from 'react';\n\nimport Card from '../../share/Card/Card';\n\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { LESSON_FORM } from '../../constants/reduxForms';\n\nimport {\n    lessThanZero,\n    maxLengthValue,\n    required\n} from '../../validation/validateFields';\nimport { useTranslation } from 'react-i18next';\nimport { setUniqueErrorService } from '../../services/lessonService';\n\nconst useStyles = makeStyles(() => ({\n    notSelected: {\n        '&': {\n            textAlign: 'center',\n            margin: 'auto'\n        }\n    }\n}));\n\nlet LessonForm = props => {\n    const { t } = useTranslation('formElements');\n\n    const { handleSubmit, pristine, reset, submitting } = props;\n\n    const classes = useStyles();\n\n    const lesson = props.lesson;\n    const lessonId = lesson.id;\n\n    const isUniqueError = props.isUniqueError;\n\n    const teachers = props.teachers;\n\n    const subjects = props.subjects;\n\n    const groupId = props.groupId;\n\n    useEffect(() => {\n        if (lessonId) {\n            initializeFormHandler(lesson);\n        } else {\n            props.initialize();\n        }\n    }, [lessonId]);\n\n    const initializeFormHandler = lesson => {\n        props.initialize({\n            lessonCardId: lesson.id,\n            teacher: lesson.teacher.id,\n            subject: lesson.subject.id,\n            type: lesson.lessonType,\n            hours: lesson.hours,\n            teacherForSite: lesson.teacherForSite,\n            subjectForSite: lesson.subjectForSite\n        });\n    };\n\n    const setValueToTeacherForSiteHandler = teacherId => {\n        const teacher = teachers.find(teacher => teacher.id === +teacherId);\n        props.change(\n            'teacherForSite',\n            concatTeacherNameHandler(teacher, false)\n        );\n    };\n\n    const setValueToSubjectForSiteHandler = subjectId => {\n        const subject = subjects.find(subject => subject.id === +subjectId);\n\n        if (!subject) return props.change('subjectForSite', '');\n\n        const subjectName = subject.name;\n        props.change('subjectForSite', subjectName);\n    };\n\n    const concatTeacherNameHandler = (teacher, isFullName) => {\n        if (!teacher) return '';\n\n        if (isFullName) {\n            return (\n                teacher.surname + ' ' + teacher.name + ' ' + teacher.patronymic\n            );\n        } else {\n            return (\n                teacher.position +\n                ' ' +\n                teacher.surname +\n                ' ' +\n                teacher.name.split('')[0] +\n                '.' +\n                teacher.patronymic.split('')[0] +\n                '.'\n            );\n        }\n    };\n\n    return (\n        <Card class=\"form-card\">\n            {groupId ? (\n                <h2 className=\"form-title under-line\">\n                    {lessonId ? t('edit_title') : t('create_title')}\n                    {t('lesson_label')}\n                </h2>\n            ) : (\n                ''\n            )}\n            {groupId ? (\n                <form onSubmit={handleSubmit}>\n                    <Field\n                        id=\"teacher\"\n                        name=\"teacher\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('teacher_label')}\n                        {...(!isUniqueError\n                            ? { validate: [required] }\n                            : { error: isUniqueError })}\n                        onChange={event => {\n                            setValueToTeacherForSiteHandler(event.target.value);\n                            setUniqueErrorService(false);\n                        }}\n                    >\n                        <option value={''} />\n                        {teachers.map(teacher => (\n                            <option key={teacher.id} value={teacher.id}>\n                                {concatTeacherNameHandler(teacher, true)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        id=\"subject\"\n                        name=\"subject\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('subject_label')}\n                        {...(!isUniqueError\n                            ? { validate: [required] }\n                            : { error: isUniqueError })}\n                        onChange={event => {\n                            setValueToSubjectForSiteHandler(event.target.value);\n                            setUniqueErrorService(false);\n                        }}\n                    >\n                        <option value={''} />\n                        {subjects.map(subject => (\n                            <option key={subject.id} value={subject.id}>\n                                {subject.name}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        id=\"type\"\n                        name=\"type\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('type_label')}\n                        {...(!isUniqueError\n                            ? { validate: [required] }\n                            : { error: isUniqueError })}\n                        onChange={() => {\n                            setUniqueErrorService(false);\n                        }}\n                    >\n                        <option value={''} />\n                        {props.lessonTypes.map((lessonType, index) => (\n                            <option value={lessonType} key={index}>\n                                {t(\n                                    `formElements:lesson_type_${lessonType.toLowerCase()}_label`\n                                )}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        id=\"hours\"\n                        name=\"hours\"\n                        className=\"form-field\"\n                        type=\"number\"\n                        component={renderTextField}\n                        label={t('hours_label')}\n                        validate={[required, lessThanZero]}\n                    />\n                    <Field\n                        id=\"teacherForSite\"\n                        name=\"teacherForSite\"\n                        className=\"form-field\"\n                        multiline\n                        rowsMax=\"1\"\n                        margin=\"normal\"\n                        component={renderTextField}\n                        label={t('teacher_label') + t('for_site_label')}\n                        validate={[required, maxLengthValue]}\n                    />\n                    <Field\n                        id=\"subjectForSite\"\n                        name=\"subjectForSite\"\n                        className=\"form-field\"\n                        multiline\n                        rowsMax=\"1\"\n                        margin=\"normal\"\n                        component={renderTextField}\n                        label={t('subject_label') + t('for_site_label')}\n                        validate={[required, maxLengthValue]}\n                    />\n                    <div className=\"form-buttons-container\">\n                        <Button\n                            className=\"buttons-style\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            disabled={pristine || submitting}\n                        >\n                            {t('save_button_label')}\n                        </Button>\n                        <Button\n                            className=\"buttons-style\"\n                            type=\"button\"\n                            variant=\"contained\"\n                            disabled={pristine || submitting}\n                            onClick={() => {\n                                reset();\n                                setUniqueErrorService(null);\n                                props.onSetSelectedCard(null);\n                            }}\n                        >\n                            {t('clear_button_label')}\n                        </Button>\n                    </div>\n                </form>\n            ) : (\n                <div className={classes.notSelected}>\n                    <h2>{t('group_label') + ' ' + t('not_selected_label')}</h2>\n                </div>\n            )}\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({ lesson: state.lesson.lesson });\n\nLessonForm = reduxForm({\n    form: LESSON_FORM\n})(LessonForm);\n\nexport default connect(mapStateToProps)(LessonForm);\n","import React from 'react';\n\nimport Card from '../../share/Card/Card';\n\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { MdContentCopy } from 'react-icons/all';\n\nconst LessonsList = props => {\n    const lessons = props.lessons;\n\n    const t = props.translation;\n\n    const firstStringLetterCapitalHandle = str => {\n        return str.replace(/^\\w/, c => c.toUpperCase());\n    };\n\n    return (\n        <div>\n            <section className=\"container-flex-wrap\">\n                {lessons.map(lesson => (\n                    <Card class=\"done-card\" key={lesson.id}>\n                        <div className=\"cards-btns\">\n                            <MdContentCopy\n                                title={t('copy_lesson')}\n                                className=\"svg-btn copy-btn\"\n                                onClick={() => props.onCopyLesson(lesson)}\n                            />\n                            <FaEdit\n                                title={t('delete_lesson')}\n                                className=\"svg-btn edit-btn\"\n                                onClick={() => props.onSelectLesson(lesson.id)}\n                            />\n                            <MdDelete\n                                title={t('edit_lesson')}\n                                className=\"svg-btn delete-btn\"\n                                onClick={() => props.onClickOpen(lesson.id)}\n                            />\n                        </div>\n                        <p>\n                            {firstStringLetterCapitalHandle(\n                                lesson.subjectForSite\n                            )}\n                            {' '}(\n                            {t(\n                                `formElements:lesson_type_${lesson.lessonType.toLowerCase()}_label`\n                            )}\n                            )\n                        </p>\n                        <p>{lesson.teacherForSite}</p>\n                        <p>\n                            {' '}\n                            <b>{lesson.hours}</b>{' '}\n                            {t('formElements:hours_label')}\n                        </p>\n                    </Card>\n                ))}\n            </section>\n        </div>\n    );\n};\n\nexport default LessonsList;\n","import { store } from '../index';\nimport { reset } from 'redux-form';\nimport {\n    DISABLED_TEACHERS_URL,\n    TEACHER_URL,\n    TEACHERS_WITHOUT_ACCOUNT_URL\n} from '../constants/axios';\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport { TEACHER_FORM } from '../constants/reduxForms';\n\nimport axios from '../helper/axios';\n\nimport i18n from '../helper/i18n';\n\nimport {\n    addTeacher,\n    deleteTeacher,\n    selectTeacherCard,\n    setDisabledTeachers,\n    showAllTeachers,\n    updateTeacherCard\n} from '../redux/actions';\nimport { errorHandler } from '../helper/handlerAxios';\n\nconst resetForm = form => {\n    store.dispatch(reset(form));\n};\n\nexport const showAllTeachersService = () => {\n    axios\n        .get(TEACHER_URL)\n        .then(response => {\n            store.dispatch(showAllTeachers(response.data));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const getTeachersWithoutAccount = () => {\n    axios\n        .get(TEACHERS_WITHOUT_ACCOUNT_URL)\n        .then(response => {\n            store.dispatch(showAllTeachers(response.data));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const createTeacherService = values => {\n    values.wish = [];\n    axios\n        .post(TEACHER_URL, values)\n        .then(response => {\n            store.dispatch(addTeacher(response.data));\n            resetForm(TEACHER_FORM);\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_a_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nconst cardTeacher = teacher => {\n    return {\n        teacher: {\n            id: teacher.id,\n            name: teacher.name,\n            surname: teacher.surname,\n            patronymic: teacher.patronymic,\n            position: teacher.position\n        }\n    };\n};\n\nexport const updateTeacherService = data => {\n    return axios\n        .put(TEACHER_URL, data.teacher)\n        .then(response => {\n            store.dispatch(updateTeacherCard(response.data));\n            if (response.data.disable) {\n                store.dispatch(deleteTeacher(response.data.id));\n            }\n            showAllTeachersService();\n            getDisabledTeachersService();\n\n            selectTeacherCardService(null);\n            resetForm(TEACHER_FORM);\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_a_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const handleTeacherService = values => {\n    const teacher = cardTeacher(values);\n\n    if (values.id) {\n        updateTeacherService(teacher);\n    } else {\n        createTeacherService(values);\n    }\n};\n\nexport const removeTeacherCardService = id => {\n    axios\n        .delete(TEACHER_URL + `/${id}`)\n        .then(response => {\n            store.dispatch(deleteTeacher(id));\n            getDisabledTeachersService();\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_a_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const selectTeacherCardService = teacherCardId => {\n    store.dispatch(selectTeacherCard(teacherCardId));\n};\n\nexport const getDisabledTeachersService = () => {\n    axios\n        .get(DISABLED_TEACHERS_URL)\n        .then(res => {\n            store.dispatch(setDisabledTeachers(res.data));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const setDisabledTeachersService = teacher => {\n    teacher.disable = true;\n    updateTeacherService({ teacher });\n};\n\nexport const setEnabledTeachersService = teacher => {\n    teacher.disable = false;\n    updateTeacherService({ teacher });\n};\n","import { reset } from 'redux-form';\n\nimport { store } from '../index';\nimport axios from '../helper/axios';\nimport { DISABLED_SUBJECTS_URL, SUBJECT_URL } from '../constants/axios';\nimport { cardType } from '../constants/cardType';\nimport { actionType } from '../constants/actionTypes';\nimport { SUBJECT_FORM } from '../constants/reduxForms';\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { snackbarMessage } from '../constants/snackbarMessages';\nimport {\n    addSubject,\n    clearSubject,\n    deleteSubject,\n    selectSubject,\n    setDisabledSubjects,\n    showAllSubjects,\n    updateSubject\n} from '../redux/actions/index';\nimport i18n from '../helper/i18n';\n\nconst resetForm = form => store.dispatch(reset(form));\n\nexport const selectSubjectService = subjectId =>\n    store.dispatch(selectSubject(subjectId));\n\nexport const handleSubjectService = values =>\n    values.id ? updateSubjectService(values) : createSubjectService(values);\n\nexport const clearSubjectService = () => {\n    store.dispatch(clearSubject());\n    resetForm(SUBJECT_FORM);\n};\n\nexport const showAllSubjectsService = () => {\n    axios\n        .get(SUBJECT_URL)\n        .then(response => {\n            store.dispatch(showAllSubjects(response.data));\n        })\n        .catch(error =>\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                `${error.response.data.message}`\n            )\n        );\n};\n\nexport const removeSubjectCardService = subjectId => {\n    axios\n        .delete(SUBJECT_URL + `/${subjectId}`)\n        .then(response => {\n            store.dispatch(deleteSubject(subjectId));\n            getDisabledSubjectsService();\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                snackbarMessage(cardType.SUBJECT, actionType.DELETED)\n            );\n        })\n        .catch(error =>\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                `${error.response.data.message}`\n            )\n        );\n};\n\nexport const createSubjectService = data => {\n    axios\n        .post(SUBJECT_URL, data)\n        .then(response => {\n            store.dispatch(addSubject(response.data));\n            resetForm(SUBJECT_FORM);\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                snackbarMessage(cardType.SUBJECT, actionType.CREATED)\n            );\n        })\n        .catch(error =>\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                `${error.response.data.message}`\n            )\n        );\n};\n\nexport const updateSubjectService = data => {\n    return axios\n        .put(SUBJECT_URL, data)\n        .then(response => {\n            store.dispatch(updateSubject(response.data));\n            selectSubjectService(null);\n            showAllSubjectsService();\n            getDisabledSubjectsService();\n            resetForm(SUBJECT_FORM);\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                snackbarMessage(cardType.SUBJECT, actionType.UPDATED)\n            );\n        })\n        .catch(error =>\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                `${error.response.data.message}`\n            )\n        );\n};\n\nexport const getDisabledSubjectsService = () => {\n    axios\n        .get(DISABLED_SUBJECTS_URL)\n        .then(res => {\n            store.dispatch(setDisabledSubjects(res.data));\n        })\n        .catch(error => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t(error.response.data.message, error.response.data.message)\n            );\n        });\n};\n\nexport const setDisabledSubjectsService = subject => {\n    subject.disable = true;\n    updateSubjectService(subject);\n};\n\nexport const setEnabledSubjectsService = subject => {\n    subject.disable = false;\n    updateSubjectService(subject);\n};\n","import * as actionTypes from './actionsType';\n\nexport const showAllSubjects = res => {\n    return {\n        type: actionTypes.SHOW_ALL_SUBJECTS,\n        result: res\n    };\n};\n\nexport const setDisabledSubjects = res => {\n    return {\n        type: actionTypes.SET_DISABLED_SUBJECTS,\n        result: res\n    };\n};\n\nexport const addSubject = res => {\n    return {\n        type: actionTypes.ADD_SUBJECT,\n        result: res\n    };\n};\n\nexport const deleteSubject = res => {\n    return {\n        type: actionTypes.DELETE_SUBJECT,\n        result: res\n    };\n};\n\nexport const selectSubject = res => {\n    return {\n        type: actionTypes.SELECT_SUBJECT,\n        result: res\n    };\n};\n\nexport const updateSubject = res => {\n    return {\n        type: actionTypes.UPDATE_SUBJECT,\n        result: res\n    };\n};\n\nexport const clearSubject = () => ({\n    type: actionTypes.CLEAR_SUBJECT\n});\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport Card from '../../share/Card/Card';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport CopyLessonDialog from '../../share/modals/chooseGroupDialog/CopyLessonDialog';\n\nimport LessonForm from '../../components/LessonForm/LessonForm';\nimport LessonsList from '../../components/LessonsList/LessonsList';\n\nimport {\n    copyLessonCardService,\n    getLessonsByGroupService,\n    getLessonTypesService,\n    handleLessonCardService,\n    removeLessonCardService,\n    selectGroupIdService,\n    selectLessonCardService\n} from '../../services/lessonService';\nimport { showAllTeachersService } from '../../services/teacherService';\nimport { showAllGroupsService } from '../../services/groupService';\nimport { setLoadingService } from '../../services/loadingService';\nimport { showAllSubjectsService } from '../../services/subjectService';\n\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { styled } from '@material-ui/core/styles';\n\nimport { cardType } from '../../constants/cardType';\n\nimport './LessonPage.scss';\n\n\nconst GroupField = styled(TextField)({\n    display: 'inline-block',\n    width: '150px'\n});\n\nconst LessonPage = props => {\n    const { t } = useTranslation('common');\n\n    const [open, setOpen] = useState(false);\n    const [openCopyLessonDialog, setOpenCopyLessonDialog] = useState(false);\n    const [lessonId, setLessonId] = React.useState(-1);\n    const [copiedLesson, setCopiedLesson] = React.useState(-1);\n\n    const teachers = props.teachers;\n\n    const isUniqueError = props.isUniqueError;\n\n    const lessons = props.lessons;\n    const lessonLength = lessons.length;\n\n    const isLoading = props.loading;\n\n    const { groups, groupId } = props;\n\n    const subjects = props.subjects;\n\n    useEffect(() => {\n        if (groupId) {\n            setLoadingService(true);\n            getLessonsByGroupService(groupId);\n        }\n    }, [groupId]);\n    useEffect(() => showAllTeachersService(), []);\n    useEffect(() => getLessonTypesService(), []);\n    useEffect(() => showAllGroupsService(), []);\n    useEffect(() => {\n        showAllSubjectsService();\n    }, []);\n\n    const createLessonCardHandler = card => {\n        if (Object.keys(card).length === 0 && card.constructor === Object)\n            return;\n\n        handleLessonCardService(card, groupId);\n    };\n\n    const selectLessonCardHandler = lessonCardId => {\n        selectLessonCardService(lessonCardId);\n    };\n\n    const groupTitleHandle = (groups, groupId) => {\n        return groups.find(group => group.id === +groupId).title;\n    };\n\n    const groupHandle = (groups, groupId) => {\n        return groups.find(group => group.id === +groupId);\n    };\n\n    const handleClickOpen = lessonId => {\n        setLessonId(lessonId);\n        setOpen(true);\n    };\n\n    const handleClose = lessonId => {\n        setOpen(false);\n        if (!lessonId) return;\n\n        removeLessonCardService(lessonId);\n    };\n\n    const openCopyLessonDialogHandle = lesson => {\n        setCopiedLesson(lesson);\n        setOpenCopyLessonDialog(true);\n    };\n\n    const closeCopyLessonDialogHandle = lessonGroupObj => {\n        setOpenCopyLessonDialog(false);\n\n        if (!lessonGroupObj) return;\n\n        copyLessonCardService(lessonGroupObj);\n    };\n\n    const defaultProps = {\n        options: groups,\n        getOptionLabel: option => (option ? option.title : '')\n    };\n\n    const handleGroupSelect = group => {\n        if (group) selectGroupIdService(group.id);\n    };\n\n    const groupFinderHandle = groupId => {\n        if (groupId) return groups.find(group => group.id === groupId);\n        else return '';\n    };\n\n    let cardsContainer = (\n        <>\n            {lessonLength > 0 ? (\n                <LessonsList\n                    lessons={lessons}\n                    onClickOpen={handleClickOpen}\n                    onSelectLesson={selectLessonCardHandler}\n                    onCopyLesson={openCopyLessonDialogHandle}\n                    translation={t}\n                />\n            ) : (\n                <section className=\"centered-container\">\n                    <h2>\n                        {groupHandle(groups, groupId)\n                            ? t('lesson_no_lesson_for_group_label') +\n                              groupTitleHandle(groups, groupId)\n                            : ''}\n                    </h2>\n                </section>\n            )}\n        </>\n    );\n\n    if (isLoading) {\n        cardsContainer = (\n            <section className=\"centered-container\">\n                <CircularProgress />\n            </section>\n        );\n    }\n\n    return (\n        <>\n            <Card class=\"card-title lesson-card\">\n                <CopyLessonDialog\n                    open={openCopyLessonDialog}\n                    onClose={closeCopyLessonDialogHandle}\n                    groupId={groupId}\n                    lesson={copiedLesson}\n                    groups={groups}\n                    translation={t}\n                />\n                <ConfirmDialog\n                    cardId={lessonId}\n                    whatDelete={cardType.LESSON.toLowerCase()}\n                    open={open}\n                    onClose={handleClose}\n                />\n                <div className=\"lesson-page-title\">\n                    <h1 className=\"lesson-page-h\">\n                        {t('lesson_for_group_title')}\n                    </h1>\n                    <Autocomplete\n                        {...defaultProps}\n                        id=\"group\"\n                        clearOnEscape\n                        openOnFocus\n                        value={groupFinderHandle(groupId)}\n                        onChange={(event, newValue) => {\n                            handleGroupSelect(newValue);\n                        }}\n                        renderInput={params => (\n                            <GroupField\n                                {...params}\n                                label={t('formElements:group_label')}\n                                margin=\"normal\"\n                            />\n                        )}\n                    />\n                </div>\n            </Card>\n            <div className=\"cards-container\">\n                <LessonForm\n                    lessonTypes={props.lessonTypes}\n                    isUniqueError={isUniqueError}\n                    groupId={groupId}\n                    subjects={subjects}\n                    teachers={teachers}\n                    onSubmit={createLessonCardHandler}\n                    onSetSelectedCard={selectLessonCardHandler}\n                />\n                {cardsContainer}\n            </div>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    lessons: state.lesson.lessons,\n    lessonTypes: state.lesson.lessonTypes,\n    groupId: state.lesson.groupId,\n    isUniqueError: state.lesson.uniqueError,\n    teachers: state.teachers.teachers,\n    groups: state.groups.groups,\n    subjects: state.subjects.subjects,\n    loading: state.loadingIndicator.loading\n});\n\nexport default connect(mapStateToProps)(LessonPage);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport { required } from '../../validation/validateFields';\n\nimport Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/core/styles';\n\nimport Card from '../../share/Card/Card';\n\nimport { TEACHER_FORM } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\n\nimport './AddTeacherForm.scss';\n\nconst CreateBtn = styled(Button)({\n    marginTop: '20px'\n});\n\nlet AddTeacher = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, submitting, reset } = props;\n\n    const teacher = props.teacher;\n    const teacherId = teacher.id;\n\n    useEffect(() => {\n        if (teacherId) {\n            initializeFormHandler(teacher);\n        } else {\n            props.initialize();\n        }\n    }, [teacherId]);\n\n    const initializeFormHandler = teacher => {\n        props.initialize({\n            id: teacher.id,\n            surname: teacher.surname,\n            name: teacher.name,\n            patronymic: teacher.patronymic,\n            position: teacher.position\n        });\n    };\n\n    return (\n        <Card class=\"form-card teacher-form\">\n            <form className=\"createTeacherForm w-100\" onSubmit={handleSubmit}>\n                <h2 className=\"form-title\">\n                    {teacherId ? t('edit_title') : t('create_title')}{' '}\n                    {t('teacher_a_label')}\n                </h2>\n\n                <Field\n                    className=\"form-field\"\n                    name=\"surname\"\n                    id=\"surname\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_surname')}\n                    label={t('teacher_surname')}\n                    validate={[required]}\n                />\n\n                <Field\n                    className=\"form-field\"\n                    name=\"name\"\n                    id=\"name\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_first_name')}\n                    label={t('teacher_first_name')}\n                    validate={[required]}\n                />\n\n                <Field\n                    className=\"form-field\"\n                    name=\"patronymic\"\n                    id=\"patronymic\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_patronymic')}\n                    label={t('teacher_patronymic')}\n                    validate={[required]}\n                />\n\n                <Field\n                    className=\"form-field\"\n                    name=\"position\"\n                    id=\"position\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_position')}\n                    label={t('teacher_position')}\n                    validate={[required]}\n                />\n\n                <div className=\"form-buttons-container\">\n                    <CreateBtn\n                        className=\"buttons-style\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                        type=\"submit\"\n                    >\n                        {t('save_button_label')}\n                    </CreateBtn>\n                    <CreateBtn\n                        className=\"buttons-style\"\n                        variant=\"contained\"\n                        disabled={pristine || submitting}\n                        onClick={() => {\n                            reset();\n                            props.onSetSelectedCard(null);\n                        }}\n                    >\n                        {t('clear_button_label')}\n                    </CreateBtn>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({ teacher: state.teachers.teacher });\n\nAddTeacher = reduxForm({\n    form: TEACHER_FORM\n})(AddTeacher);\n\nexport default connect(mapStateToProps)(AddTeacher);\n","export const search = (items, term, arr) => {\n\n    if (term.length === 0) return items;\n    \n    return items.filter( item => {\n        for (let i = 0; i < arr.length; i++) {\n            if (String(item[arr[i]]).toLowerCase().indexOf(term.toLowerCase()) > -1) return true;\n        }\n        return false\n    })\n}","import React, { useState } from 'react';\nimport { FaSearch } from 'react-icons/fa';\nimport { TextField } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport './SearchPanel.scss';\nimport Card from '../../share/Card/Card';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nconst SearchPanel = ({ SearchChange, showDisabled }) => {\n    const { t } = useTranslation('formElements');\n    const [term, setTerm] = useState('');\n\n    const [state, setState] = React.useState({\n        checkedB: false\n    });\n\n    const handleChange = event => {\n        setState({ ...state, [event.target.name]: event.target.checked });\n        showDisabled();\n    };\n\n    const onSearchChange = e => {\n        const term = e.target.value;\n        setTerm(term);\n        SearchChange(term);\n    };\n\n    return (\n        <Card class=\"search-group\">\n            <FormControlLabel\n                control={\n                    <Switch\n                        checked={state.checkedB}\n                        onChange={handleChange}\n                        name=\"checkedB\"\n                        color=\"primary\"\n                    />\n                }\n                label={\n                    !state.checkedB\n                        ? t('common:show_disabled')\n                        : t('common:show_enabled')\n                }\n            />\n            <TextField\n                className=\"form-field\"\n                label={<FaSearch />}\n                placeholder={t('type_to_search')}\n                value={term}\n                onChange={onSearchChange}\n            />\n        </Card>\n    );\n};\n\nexport default SearchPanel;\n","import React from 'react'\nimport { FaSadCry } from 'react-icons/fa'\nimport { useTranslation } from 'react-i18next'\n\nimport './NotFound.scss'\n\nconst NotFound = ({name}) => {\n    const {t} = useTranslation('formElements')\n\n    return (\n        <div className='not-found__wrapper'>\n            <div>\n                <FaSadCry className='not-found__icon'/>\n            </div>\n            <p className='not-found__text'>{t('there_is_no')} {name}</p>\n        </div>\n    )\n}\n\nexport default NotFound\n","import React, { useEffect, useState } from 'react';\n\nimport AddTeacherForm from '../../components/AddTeacherForm/AddTeacherForm';\nimport Card from '../../share/Card/Card';\nimport WishModal from '../WishModal/WishModal';\n\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\n\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport Button from '@material-ui/core/Button';\nimport { showTeacherWish } from '../../services/teacherWishService';\n\nimport './TeachersList.scss';\n\nimport { connect } from 'react-redux';\n\nimport {\n    getDisabledTeachersService,\n    handleTeacherService,\n    removeTeacherCardService,\n    selectTeacherCardService,\n    setDisabledTeachersService,\n    setEnabledTeachersService,\n    showAllTeachersService\n} from '../../services/teacherService';\n\nimport { useTranslation } from 'react-i18next';\nimport { search } from '../../helper/search';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport NotFound from '../../share/NotFound/NotFound';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { getPublicClassScheduleListService } from '../../services/classService';\n\nconst TeacherList = props => {\n    const { t } = useTranslation('common');\n\n    const [open, setOpen] = useState(false);\n    const [teacherCardId, setTeacherId] = useState();\n    const [term, setTerm] = useState('');\n    const [disabled, setDisabled] = useState(false);\n    const [hideDialog, setHideDialog] = useState(null);\n\n    useEffect(() => showAllTeachersService(), []);\n    useEffect(() => getDisabledTeachersService(), []);\n    useEffect(() => getPublicClassScheduleListService(), []);\n\n    const teachers = props.teachers;\n    const disabledTeachers = props.disabledTeachers;\n    const teacherLength = disabled ? disabledTeachers.length : teachers.length;\n\n    const teacherSubmit = values => {\n        handleTeacherService(values);\n    };\n\n    const selectTeacherCard = teacherCardId => {\n        selectTeacherCardService(teacherCardId);\n    };\n\n    const removeTeacherCard = id => {\n        removeTeacherCardService(id);\n    };\n\n    const handleClickOpen = teacherCardId => {\n        setTeacherId(teacherCardId);\n        setOpen(true);\n    };\n\n    const handleClose = teacherCardId => {\n        setOpen(false);\n        if (!teacherCardId) {\n            return;\n        }\n        if (hideDialog) {\n            if (disabled) {\n                const teacher = disabledTeachers.find(\n                    teacher => teacher.id === teacherCardId\n                );\n                setEnabledTeachersService(teacher);\n            } else {\n                const teacher = teachers.find(\n                    teacher => teacher.id === teacherCardId\n                );\n                setDisabledTeachersService(teacher);\n            }\n        } else {\n            removeTeacherCard(teacherCardId);\n        }\n        setHideDialog(null);\n    };\n\n    const [openWish, setOpenWish] = useState(false);\n    const [teacher, setTeacher] = useState(0);\n\n    const handleClickOpenWish = teacher => {\n        setTeacher(teacher);\n        showTeacherWish(teacher.id);\n        setOpenWish(true);\n    };\n\n    const handleCloseWish = value => {\n        setOpenWish(false);\n    };\n\n    const visibleItems = disabled\n        ? search(disabledTeachers, term, ['name', 'surname', 'patronymic'])\n        : search(teachers, term, ['name', 'surname', 'patronymic']);\n\n    const SearchChange = term => {\n        setTerm(term);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    const handleToUpperCase = str => {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    };\n\n    return (\n        <div className=\"cards-container\">\n            <ConfirmDialog\n                cardId={teacherCardId}\n                whatDelete={cardType.TEACHER}\n                open={open}\n                isHide={hideDialog}\n                onClose={handleClose}\n            />\n\n            <WishModal\n                openWish={openWish}\n                onCloseWish={handleCloseWish}\n                teacher={teacher}\n                teacherWishes={props.teacherWishes}\n                classScheduler={props.classScheduler}\n            />\n\n            <aside className=\"form-with-search-panel\">\n                <SearchPanel\n                    SearchChange={SearchChange}\n                    showDisabled={showDisabledHandle}\n                />\n                {disabled ? (\n                    ''\n                ) : (\n                    <AddTeacherForm\n                        teachers={teachers}\n                        onSubmit={teacherSubmit}\n                        onSetSelectedCard={selectTeacherCard}\n                    />\n                )}\n            </aside>\n\n            <section className=\"container-flex-wrap\">\n                {visibleItems.length === 0 && (\n                    <NotFound name={t('formElements:teacher_a_label')} />\n                )}\n                {teacherLength > 0 ? (\n                    visibleItems.map((teacher, index) => (\n                        <Card\n                            key={index}\n                            {...teacher}\n                            class=\"teacher-card done-card\"\n                        >\n                            <div className=\"cards-btns\">\n                                {!disabled ? (\n                                    <>\n                                        <GiSightDisabled\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_disabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.HIDE\n                                                );\n                                                handleClickOpen(teacher.id);\n                                            }}\n                                        />\n                                        <FaEdit\n                                            className=\"svg-btn edit-btn\"\n                                            title={t('common:edit_hover_title')}\n                                            onClick={() =>\n                                                selectTeacherCard(teacher.id)\n                                            }\n                                        />\n                                    </>\n                                ) : (\n                                    <IoMdEye\n                                        className=\"svg-btn copy-btn\"\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(teacher.id);\n                                        }}\n                                    />\n                                )}\n                                <MdDelete\n                                    className=\"svg-btn delete-btn\"\n                                    title={t('common:delete_hover_title')}\n                                    onClick={() => handleClickOpen(teacher.id)}\n                                />\n                            </div>\n\n                            <p className=\"teacher-subtitle\">\n                                {t('teacher_card_fullName')}\n                            </p>\n                            <h2 className=\"teacher-card-name\">\n                                {handleToUpperCase(teacher.surname)}{' '}\n                                {handleToUpperCase(teacher.name)}{' '}\n                                {handleToUpperCase(teacher.patronymic)}\n                            </h2>\n                            <p className=\"teacher-subtitle\">\n                                {t('teacher_card_position')}\n                            </p>\n                            <p className=\"teacher-card-title\">\n                                {teacher.position}\n                            </p>\n                            <div className=\"teacher-wish-block\">\n                                <Button\n                                    className=\"wish-button\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => {\n                                        handleClickOpenWish(teacher);\n                                    }}\n                                >\n                                    {t('teacher_card_wish')}\n                                </Button>\n                            </div>\n                        </Card>\n                    ))\n                ) : (\n                    <h2>{t('teacher_card_no_cards')}</h2>\n                )}\n            </section>\n        </div>\n    );\n};\nconst mapStateToProps = state => ({\n    teachers: state.teachers.teachers,\n    disabledTeachers: state.teachers.disabledTeachers,\n    classScheduler: state.classActions.classScheduler,\n    teacherWishes: state.teachersWish.wishes\n});\n\nexport default connect(mapStateToProps, {})(TeacherList);\n","import React from \"react\";\nimport MomentUtils from \"@date-io/moment\";\nimport * as moment from \"moment\";\nimport { TimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\n\nconst renderTimePicker = ({\n  label,\n  input: { value, ...inputProps },\n  meta: { touched, invalid, error },\n  ...custom\n}) => {\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <TimePicker\n        clearable\n        ampm={false}\n        value={value ? moment(value, \"HH:mm\").toDate() : null}\n        error={touched && invalid}\n        helperText={touched && error ? touched && error : label}\n        format=\"HH:mm\"\n        {...inputProps}\n        {...custom}\n      />\n    </MuiPickersUtilsProvider>\n  );\n};\n\nexport default renderTimePicker;\n","import React, { useEffect } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport '../LessonForm/LessonForm';\nimport './ClassForm.scss';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport renderTimePicker from '../../share/renderedFields/time';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport {\n    required,\n    greaterThanTime,\n    lessThanTime,\n    uniqueClassName,\n    timeIntersect\n} from '../../validation/validateFields';\n\nimport { CLASS_FORM } from '../../constants/reduxForms';\nimport * as moment from 'moment';\nimport { CLASS_DURATION } from '../../constants/common';\nimport { useTranslation } from 'react-i18next';\n\nconst useStyles = makeStyles(theme => ({\n    rootInput: {\n        width: '20em'\n    }\n}));\n\nlet ClassFormFunc = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting } = props;\n    const classes = useStyles();\n\n    useEffect(() => {\n        let initialValues = {};\n        if (props.classScheduleOne) {\n            initialValues = props.classScheduleOne;\n        }\n        props.initialize(initialValues);\n    }, [props.classScheduleOne]);\n\n    const setEndTime = startTime =>\n        props.change(\n            'endTime',\n            moment(startTime, 'HH:mm').add(CLASS_DURATION, 'h').format('HH:mm')\n        );\n\n    return (\n        <Card class=\"form-card\">\n            <h2 className=\"form-title\">\n                {props.classScheduleOne.id\n                    ? t('edit_title')\n                    : t('create_title')}{' '}\n                {t('class_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    component={renderTextField}\n                    className=\"form-field\"\n                    name=\"class_name\"\n                    id=\"class_name\"\n                    label={t('class_label')}\n                    type=\"text\"\n                    validate={[required, uniqueClassName]}\n                />\n                <div className=\"form-time-block\">\n                    <Field\n                        component={renderTimePicker}\n                        className=\"time-input\"\n                        name=\"startTime\"\n                        label={t('class_from_label')}\n                        type=\"time\"\n                        validate={[required, lessThanTime, timeIntersect]}\n                        onChange={(event, value) => {\n                            if (value) {\n                                setEndTime(value);\n                            }\n                        }}\n                    />\n                    <Field\n                        component={renderTimePicker}\n                        className=\"time-input\"\n                        name=\"endTime\"\n                        label={t('class_to_label')}\n                        type=\"time\"\n                        validate={[required, greaterThanTime, timeIntersect]}\n                    />\n                </div>\n\n                <div className=\"form-buttons-container\">\n                    <Button\n                        className=\"buttons-style\"\n                        type=\"submit\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        className=\"buttons-style\"\n                        type=\"button\"\n                        variant=\"contained\"\n                        disabled={pristine || submitting}\n                        onClick={onReset}\n                    >\n                        {t('clear_button_label')}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: CLASS_FORM\n    })(ClassFormFunc)\n);\n","export const CLASS_DURATION = \"1.3333333333333333333333333333\";\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\n\nimport ClassForm from '../../components/ClassForm/ClassForm';\nimport Card from '../../share/Card/Card';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\n\nimport {\n    getClassScheduleListService,\n    addClassScheduleOneService,\n    getClassScheduleOneService,\n    deleteClassScheduleOneService,\n    clearClassScheduleOneService\n} from '../../services/classService';\nimport { useTranslation } from 'react-i18next';\n\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\n\nexport const ClassSchedule = props => {\n    const { t } = useTranslation('formElements');\n    const [open, setOpen] = useState(false);\n    const [classId, setClassId] = React.useState(-1);\n    useEffect(() => getClassScheduleListService(), []);\n\n    const submit = values => {\n        if (!values.id && props.classScheduler.length >= 7)\n            return handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                t('max_count_classes_reached')\n            );\n        addClassScheduleOneService(values);\n    };\n\n    const handleEdit = classId => {\n        getClassScheduleOneService(classId);\n    };\n\n    const handleFormReset = () => {\n        clearClassScheduleOneService();\n    };\n\n    const handleClickOpen = classId => {\n        setClassId(classId);\n        setOpen(true);\n    };\n\n    const handleClose = classId => {\n        setOpen(false);\n        if (!classId) {\n            return;\n        }\n        deleteClassScheduleOneService(classId);\n    };\n\n    return (\n        <div className=\"cards-container\">\n            <ConfirmDialog\n                selectedValue={''}\n                cardId={classId}\n                whatDelete={cardType.CLASS.toLowerCase()}\n                open={open}\n                onClose={handleClose}\n            />\n            <ClassForm onSubmit={submit} onReset={handleFormReset} />\n            <section className=\"container-flex-wrap\">\n                {props.classScheduler.map(schedule => (\n                    <Card class=\"class-card-width\" key={schedule.id}>\n                        <div className=\"cards-btns\">\n                            <FaEdit\n                                className=\"svg-btn\"\n                                title={t('common:edit_hover_title')}\n                                onClick={() => handleEdit(schedule.id)}\n                            />\n                            <MdDelete\n                                className=\"svg-btn\"\n                                title={t('common:delete_hover_title')}\n                                onClick={() => handleClickOpen(schedule.id)}\n                            />\n                        </div>\n                        <p>\n                            {t('class_label')}: {schedule.class_name}\n                        </p>\n                        <p>\n                            {t('class_from_label')} - {t('class_to_label')}\n                        </p>\n                        <p>\n                            {schedule.startTime} - {schedule.endTime}\n                        </p>\n                    </Card>\n                ))}\n            </section>\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    ClassScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps, {})(ClassSchedule);\n","import { connect } from 'react-redux'\nimport React, { useEffect } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport Button from '@material-ui/core/Button'\nimport { useTranslation } from 'react-i18next'\n\nimport './AddGroupForms.scss'\nimport Card from '../../share/Card/Card'\nimport { GROUP_FORM } from '../../constants/reduxForms'\nimport renderTextField from '../../share/renderedFields/input'\nimport { required, uniqueGroup, minLengthValue } from '../../validation/validateFields'\n\nlet AddGroup = props => {\n  const { t } = useTranslation('formElements');\n  const { handleSubmit, pristine, onReset, submitting } = props;\n\n  useEffect(() => {\n    if (props.group) {\n      if (props.group.id) {\n        props.initialize({\n          id: props.group.id,\n          title: props.group.title\n        });\n      } else {\n        props.initialize();\n      }\n    }\n  }, [props.group])\n\n  return (\n    <Card class='form-card group-form'>\n      <h2 className='group-form__title'>\n        {props.group.id ? t('edit_title') : t('create_title')}\n        {t('group_y_label')}\n      </h2>\n      <form onSubmit={handleSubmit}>\n        <Field\n          className='form-field'\n          name='title'\n          id='title'\n          label={t('group_label')+':'}\n          component={renderTextField}\n          validate={[required, minLengthValue, uniqueGroup]}\n        />\n        <div className='form-buttons-container group-btns'>\n        <Button\n          variant='contained'\n          className='buttons-style '\n          color='primary'\n          disabled={pristine || submitting}\n          type='submit'>\n          {t('save_button_label')}\n        </Button>\n        <Button\n            type='button'\n            className='buttons-style'\n            variant='contained'\n            disabled={pristine || submitting}\n            onClick={onReset}>\n          {t('clear_button_label')}\n        </Button>\n        </div>\n      </form>\n    </Card>\n  )\n}\n\nconst mapStateToProps = state => ({\n  group: state.groups.group\n})\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n      form: GROUP_FORM\n    })(AddGroup)\n)\n","import React from 'react';\n\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\n\n\nconst Alert = props => {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n};\n\nconst SnackbarComponent = props => {\n  const message = props.message;\n  const type = props.type;\n  const isOpen = props.isOpen;\n  const handleSnackbarClose = props.handleSnackbarClose;\n\n  return (\n      <Snackbar\n          open={isOpen}\n          autoHideDuration={3000}\n          onClose={handleSnackbarClose}\n      >\n        <Alert onClose={handleSnackbarClose} severity={type}>\n          {message}\n        </Alert>\n      </Snackbar>\n  );\n};\n\nexport default SnackbarComponent;\n","import { connect } from 'react-redux';\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\n\nimport './GroupList.scss';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport AddGroup from '../../components/AddGroupForm/AddGroupForm';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport {\n    clearGroupService,\n    getDisabledGroupsService,\n    handleGroupService,\n    removeGroupCardService,\n    selectGroupService,\n    setDisabledGroupService,\n    setDisabledGroupsService,\n    setEnabledGroupService,\n    showAllGroupsService\n} from '../../services/groupService';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\nimport {\n    setDisabledTeachersService,\n    setEnabledTeachersService\n} from '../../services/teacherService';\nimport { disabledCard } from '../../constants/disabledCard';\n\nlet GroupList = props => {\n    useEffect(() => showAllGroupsService(), [props.groups]);\n    useEffect(() => getDisabledGroupsService(), []);\n\n    const { isSnackbarOpen, snackbarType, snackbarMessage } = props;\n    const { t } = useTranslation('formElements');\n\n    const [open, setOpen] = useState(false);\n    const [groupId, setGroupId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n\n    const [disabled, setDisabled] = useState(false);\n\n    const SearchChange = setTerm;\n    const handleFormReset = () => clearGroupService();\n    const submit = values => handleGroupService(values);\n    const handleEdit = groupId => selectGroupService(groupId);\n    const visibleGroups = disabled\n        ? search(props.disabledGroups, term, ['title'])\n        : search(props.groups, term, ['title']);\n\n    const handleClickOpen = groupId => {\n        setGroupId(groupId);\n        setOpen(true);\n    };\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n\n    const handleClose = groupId => {\n        setOpen(false);\n        if (!groupId) return;\n        if (hideDialog) {\n            if (disabled) {\n                const group = props.disabledGroups.find(\n                    group => group.id === groupId\n                );\n                setEnabledGroupService(group);\n            } else {\n                const group = props.groups.find(group => group.id === groupId);\n                setDisabledGroupService(group);\n            }\n        } else {\n            removeGroupCardService(groupId);\n        }\n        setHideDialog(null);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    return (\n        <>\n            <ConfirmDialog\n                isHide={hideDialog}\n                cardId={groupId}\n                whatDelete={'group'}\n                open={open}\n                onClose={handleClose}\n            />\n            <div className=\"cards-container\">\n                <aside className=\"search-list__panel\">\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    {disabled ? (\n                        ''\n                    ) : (\n                        <AddGroup\n                            className=\"form\"\n                            onSubmit={submit}\n                            onReset={handleFormReset}\n                        />\n                    )}\n                </aside>\n                <div className=\"group-wrapper group-list\">\n                    {visibleGroups.length === 0 && (\n                        <NotFound name={t('group_y_label')} />\n                    )}\n                    {visibleGroups.map(group => (\n                        <section key={group.id} className=\"group-card\">\n                            <div className=\"group__buttons-wrapper\">\n                                {!disabled ? (\n                                    <>\n                                        <GiSightDisabled\n                                            className=\"group__buttons-hide\"\n                                            title={t('common:set_disabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.HIDE\n                                                );\n                                                handleClickOpen(group.id);\n                                            }}\n                                        />\n                                        <FaEdit\n                                            className=\"group__buttons-edit\"\n                                            title={t('edit_title')}\n                                            onClick={() => handleEdit(group.id)}\n                                        />\n                                    </>\n                                ) : (\n                                    <IoMdEye\n                                        className=\"group__buttons-hide\"\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(group.id);\n                                        }}\n                                    />\n                                )}\n                                <MdDelete\n                                    className=\"group__buttons-delete\"\n                                    title={t('delete_title')}\n                                    onClick={() => handleClickOpen(group.id)}\n                                />\n                            </div>\n                            <p className=\"group-card__description\">\n                                {t('group_label') + ':'}\n                            </p>\n                            <h1 className=\"group-card__number\">\n                                {group.title}\n                            </h1>\n                        </section>\n                    ))}\n                </div>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    groups: state.groups.groups,\n    disabledGroups: state.groups.disabledGroups,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message\n});\n\nexport default connect(mapStateToProps, {})(GroupList);\n","import React, {useEffect} from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport renderTextField from '../../share/renderedFields/input';\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport { ROOM_FORM } from '../../constants/reduxForms';\n\nimport { required, uniqueRoomName } from '../../validation/validateFields';\nimport Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\nimport Card from '../../share/Card/Card';\n\nimport './AddRoomForm.scss';\n\nconst CreateBtn = styled(Button)({\n    marginTop: '20px'\n});\n\nlet AddRoom = props => {\n    const { t } = useTranslation('formElements')\n    const { handleSubmit, pristine, submitting, onReset } = props;\n\n    useEffect(() => {\n        if (props.oneRoom) {\n            if (props.oneRoom.id) {\n                props.initialize({\n                    name: props.oneRoom.name,\n                    type: props.oneRoom.type.id,\n                    id: props.oneRoom.id\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [props.oneRoom]);\n\n\n\n\n    return (\n        <Card class='form-card room-form'>\n            <form className='createGroupForm w-100' onSubmit={handleSubmit}>\n                <h2 className='form-title'>\n                    {props.oneRoom.id\n                        ? t('edit_title')\n                        : t('create_title')\n                    }{' '}\n                    {t('room_y_label')}\n                </h2>\n                <Field\n                    type='text'\n                    name='name'\n                    component={renderTextField}\n                    placeholder={t('number_label')}\n                    className='form-field'\n                    label={t('room_label')}\n                    validate={[required, uniqueRoomName]}\n                />\n                <Field\n                    className='form-field'\n                    component={renderSelectField}\n                    name='type'\n                    label={t('type_label')}\n                    validate={[required]}>\n                    <option value={''}></option>\n                    {props.roomTypes.map(roomType => (\n                        <option key={roomType.id} value={roomType.id}>\n                            {roomType.description}\n                        </option>\n                    ))}\n                </Field>\n                <div className='form-buttons-container'>\n                    <CreateBtn\n                        className='buttons-style'\n                        variant='contained'\n                        color='primary'\n                        disabled={pristine || submitting}\n                        type='submit'>\n                        {t('save_button_label')}\n                    </CreateBtn>\n                    <CreateBtn\n                        className='buttons-style'\n                        variant='contained'\n                        disabled={pristine || submitting}\n                        onClick={onReset}>\n                        {t('clear_button_label')}\n                    </CreateBtn>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    oneRoom: state.rooms.oneRoom,\n    roomTypes: state.roomTypes.roomTypes\n});\n\nAddRoom = reduxForm({\n    form: ROOM_FORM\n})(AddRoom);\n\nexport default connect(mapStateToProps)(AddRoom);\n","import { store } from '../index';\nimport { reset } from 'redux-form';\nimport { ROOM_FORM_TYPE } from '../constants/reduxForms';\nimport { ROOM_TYPES_URL } from '../constants/axios';\nimport axios from '../helper/axios';\nimport { cardType } from '../constants/cardType';\n\nimport { getAllRoomTypes, deleteType, updateOneType, postOneType, getOneNewType } from '../redux/actions/roomTypes';\n\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport { snackbarMessage } from '../constants/snackbarMessages';\nimport { actionType } from '../constants/actionTypes';\n\nimport i18n from '../helper/i18n';\nimport { errorHandler } from '../helper/handlerAxios';\n\nconst resetFormHandler = form => {\n    store.dispatch(reset(form));\n};\n\nexport const getAllRoomTypesService = () => {\n    axios\n        .get(ROOM_TYPES_URL)\n        .then(res => {\n            store.dispatch(getAllRoomTypes(res.data));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const deleteTypeService = roomTypeId => {\n    axios\n        .delete(ROOM_TYPES_URL + `/${roomTypeId}`)\n        .then(response => {\n            store.dispatch(deleteType(roomTypeId));\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                snackbarMessage(cardType.TYPE, actionType.DELETED)\n            );\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const addNewTypeService = values => {\n    if (values.id) {\n        putNewType(values);\n    } else {\n        postNewType(values);\n    }\n};\n\nexport const putNewType = values => {\n    axios\n        .put(ROOM_TYPES_URL, values)\n        .then(response => {\n            store.dispatch(updateOneType(response.data));\n            resetFormHandler(ROOM_FORM_TYPE);\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:type_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const postNewType = values => {\n    axios\n        .post(ROOM_TYPES_URL, values)\n        .then(response => {\n            store.dispatch(postOneType(response.data));\n            resetFormHandler(ROOM_FORM_TYPE);\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:type_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t(error.response.data.message, error.response.data.message)\n            );\n        });\n};\n\nexport const getOneNewTypeService = roomId => {\n    store.dispatch(getOneNewType(roomId));\n}\n\n\n","import * as actionsType from './actionsType';\nimport roomTypes from '../reducers/roomTypes';\nimport actions from 'redux-form/lib/actions';\n\nexport const postOneType = roomType => {\n    return {\n        type: actionsType.POST_NEW_TYPE,\n        result: roomType\n    };\n};\n\nexport const getAllRoomTypes = roomType => {\n    return {\n        type: actionsType.GET_ALL_ROOM_TYPES,\n        result: roomType\n    };\n};\n\nexport const deleteType = roomType => {\n    return {\n        type: actionsType.DELETE_TYPE,\n        result: roomType\n    };\n\n\n};\n\nexport const updateOneType = roomType => {\n    return {\n        type: actionsType.UPDATE_ONE_TYPE,\n        result: roomType\n    };\n};\n\nexport const getOneNewType = roomType => {\n    return {\n        type: actionsType.GET_ONE_NEW_TYPE,\n        result: roomType\n    }\n}\n\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { ROOM_FORM_TYPE } from '../../constants/reduxForms';\n\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\nimport Card from '../../share/Card/Card';\nimport { useTranslation } from 'react-i18next';\nimport renderTextField from '../../share/renderedFields/input';\nimport Button from '@material-ui/core/Button';\nimport { MdDelete } from 'react-icons/md';\nimport { FaEdit } from 'react-icons/fa';\nimport {\n    deleteTypeService,\n    getOneNewTypeService\n} from '../../services/roomTypesService';\nimport './AddNewRoomType.scss';\n\nlet NewRoomType = props => {\n    const { handleSubmit, pristine, submitting, roomTypes } = props;\n   \n\n    const [open, setOpen] = useState(false);\n    const [typeId, setTypeId] = useState(-1);\n\n    useEffect(() => {\n        let defaultValue = {};\n        if (props.oneType.id) {\n            defaultValue={ description: props.oneType.description,\n                id: props.oneType.id};\n        }\n        props.initialize(defaultValue);\n\n    }, [props.oneType]);   \n\n    const { t } = useTranslation('formElements');\n\n    const handleClickOpen = typeId => {\n        setTypeId(typeId);\n        setOpen(true);\n    };\n\n    const handleClose = typeId => {\n        setOpen(false);\n        if (!typeId) {\n            return;\n        }\n        deleteTypeService(typeId);\n    };\n\n    const handleEdit = roomId => {\n        getOneNewTypeService(roomId);\n    };\n\n    return (\n        <>\n            <ConfirmDialog\n                selectedValue={''}\n                cardId={typeId}\n                whatDelete={cardType.TYPE.toLowerCase()}\n                open={open}\n                onClose={handleClose}\n            />\n            <Card class=\"form-card room-form\">\n                <form className=\"new-type-container\" onSubmit={handleSubmit}>\n                    <Field\n                        type=\"text\"\n                        name=\"description\"\n                        component={renderTextField}\n                        placeholder={t('add_type_label')}\n                        label={t('new_type_label')}\n                        className=\"form-field\"\n                        variant=\"outlined\"\n                    />\n                    <div className='btn-style-wrapper'>\n                        <Button\n                            color=\"primary\"\n                            className=\"btn-style\"\n                            disabled={pristine || submitting}\n                            variant=\"contained\"\n                            type=\"submit\"\n                        >\n                            {t('save_button_label')}\n                        </Button>\n                    </div>\n                </form>\n\n                <ul className=\"new-types\">\n                    {roomTypes.map(roomType => (\n                        <li\n                            key={roomType.id}\n                            value={roomType.description}\n                            className=\"new-types-list\"\n                        >\n                            <span className=\"typeDescription\">\n                                {roomType.description}\n                            </span>\n                            <span className=\"buttons\">\n                                <FaEdit\n                                    className=\"btn edit\"\n                                    onClick={() => handleEdit(roomType.id)}\n                                />\n                                <MdDelete\n                                    className=\"btn delete\"\n                                    onClick={() => handleClickOpen(roomType.id)}\n                                />\n                            </span>\n                        </li>\n                    ))}\n                </ul>\n            </Card>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    oneType: state.roomTypes.oneType,\n    roomTypes: state.roomTypes.roomTypes\n});\n\nNewRoomType = reduxForm({\n    form: ROOM_FORM_TYPE\n})(NewRoomType);\n\nexport default connect(mapStateToProps)(NewRoomType);\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\nimport FreeRooms from '../FreeRooms/freeRooms';\nimport AddRoom from '../../components/AddRoomForm/AddRoomForm';\nimport NewRoomType from '../../components/AddNewRoomType/AddNewRoomType';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport Card from '../../share/Card/Card';\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport './RoomList.scss';\nimport { useTranslation } from 'react-i18next';\nimport { search } from '../../helper/search';\n\nimport {\n    createRoomService,\n    showListOfRoomsService,\n    deleteRoomCardService,\n    selectOneRoomService,\n    clearRoomOneService,\n    getDisabledRoomsService,\n    setDisabledRoomsService,\n    setEnabledRoomsService\n} from '../../services/roomService';\n\nimport {\n    getAllRoomTypesService,\n    addNewTypeService\n} from '../../services/roomTypesService';\n\nimport NotFound from '../../share/NotFound/NotFound';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\n\nimport { disabledCard } from '../../constants/disabledCard';\n\nconst RoomList = props => {\n    const { rooms } = props;\n\n    useEffect(() => {\n        showListOfRoomsService();\n    }, []);\n\n    useEffect(() => {\n        getAllRoomTypesService();\n    }, []);\n\n    useEffect(() => {\n        getDisabledRoomsService();\n    }, []);\n\n    const { t } = useTranslation('formElements');\n    const [open, setOpen] = useState(false);\n    const [roomId, setRoomId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n\n    const [disabled, setDisabled] = useState(false);\n\n    const createRoom = values => {\n        const description = props.roomTypes.find(\n            type => type.id == values.type\n        );\n        values.typeDescription = description.description;\n        createRoomService(values);\n    };\n\n    const editHandler = roomId => {\n        selectOneRoomService(roomId);\n    };\n\n    const handleFormReset = () => {\n        clearRoomOneService();\n    };\n\n    const handleClickOpen = roomId => {\n        setRoomId(roomId);\n        setOpen(true);\n    };\n\n    const handleClose = roomId => {\n        setOpen(false);\n        if (!roomId) {\n            return;\n        }\n        if (hideDialog) {\n            if (disabled) {\n                const room = props.disabledRooms.find(\n                    room => room.id === roomId\n                );\n                setEnabledRoomsService(room);\n            } else {\n                const room = props.rooms.find(room => room.id === roomId);\n                setDisabledRoomsService(room);\n            }\n        } else {\n            deleteRoomCardService(roomId);\n        }\n        setHideDialog(null);\n    };\n\n    const submitType = values => {\n        addNewTypeService(values);\n    };\n\n    const visibleItems = disabled\n        ? search(props.disabledRooms, term, ['name'])\n        : search(rooms, term, ['name']);\n\n    const SearchChange = term => {\n        setTerm(term);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    return (\n        <>\n            <ConfirmDialog\n                cardId={roomId}\n                whatDelete={cardType.ROOM.toLowerCase()}\n                open={open}\n                isHide={hideDialog}\n                onClose={handleClose}\n            />\n            <div className=\"cards-container\">\n                <aside className=\"search-list__panel\">\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    {disabled ? (\n                        ''\n                    ) : (\n                        <>\n                            <AddRoom\n                                onSubmit={createRoom}\n                                onReset={handleFormReset}\n                            />\n                            <NewRoomType\n                                className=\"new-type\"\n                                onSubmit={submitType}\n                            />\n                        </>\n                    )}\n                </aside>\n                <section className=\"container-flex-wrap wrapper\">\n                    {visibleItems.length === 0 && (\n                        <NotFound name={t('room_y_label')} />\n                    )}\n                    {visibleItems.map((room, index) => (\n                        <Card key={index} {...room} class=\"room-card done-card\">\n                            <div className=\"cards-btns\">\n                                {!disabled ? (\n                                    <>\n                                        <GiSightDisabled\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_disabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.HIDE\n                                                );\n                                                handleClickOpen(room.id);\n                                            }}\n                                        />\n                                        <FaEdit\n                                            className=\"svg-btn\"\n                                            onClick={() => editHandler(room.id)}\n                                        />\n                                    </>\n                                ) : (\n                                    <IoMdEye\n                                        className=\"svg-btn copy-btn\"\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(room.id);\n                                        }}\n                                    />\n                                )}\n\n                                <MdDelete\n                                    className=\"svg-btn\"\n                                    onClick={() => handleClickOpen(room.id)}\n                                />\n                            </div>\n                            <span> {t('room_label') + ':'} </span>\n                            <h2 className=\"room-card__number\">{room.name}</h2>\n                            <span>{t('type_label') + ':'}</span>\n                            <h2 className=\"room-card__number\">\n                                {room.type.description}\n                            </h2>\n                        </Card>\n                    ))}\n                </section>\n            </div>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    rooms: state.rooms.rooms,\n    disabledRooms: state.rooms.disabledRooms,\n    oneRoom: state.rooms.oneRoom,\n    roomTypes: state.roomTypes.roomTypes,\n    oneType: state.roomTypes.oneType\n});\n\nexport default connect(mapStateToProps, {})(RoomList);\n","import { connect } from 'react-redux'\nimport React, { useEffect } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport Button from '@material-ui/core/Button'\nimport { useTranslation}  from 'react-i18next'\n\nimport './AddSubjectForm.scss'\nimport Card from '../../share/Card/Card'\nimport { SUBJECT_FORM } from '../../constants/reduxForms'\nimport renderTextField from '../../share/renderedFields/input'\nimport { required, uniqueSubject, maxLengthValue} from '../../validation/validateFields'\n\nlet AddSubject = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting } = props;\n\n    useEffect(() => {\n        if (props.subject) {\n            if (props.subject.id) {\n                props.initialize({\n                    id: props.subject.id,\n                    name: props.subject.name\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [props.subject]);\n\n    return (\n        <Card class='form-card subject-form'>\n            <h2 style={{ textAlign: 'center' }}>\n                {props.subject.id ? t('edit_title') : t('create_title')}\n                {t('subject_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    className='form-field'\n                    name='name'\n                    component={renderTextField}\n                    label={t('subject_label')+':'}\n                    validate={[required, uniqueSubject, maxLengthValue]}\n                />\n                <div className='form-buttons-container subject-btns'>\n                <Button\n                    variant='contained'\n                    color='primary'\n                    className='buttons-style '\n                    disabled={pristine || submitting}\n                    type='submit'>\n                    {t('save_button_label')}\n                </Button>\n                <Button\n                    type='button'\n                    variant='contained'\n                    className='buttons-style'\n                    disabled={pristine || submitting}\n                    onClick={onReset}>\n                    {t('clear_button_label')}\n                </Button>\n                </div>\n            </form>\n        </Card>\n    )\n}\n\nconst mapStateToProps = state => ({\n    subject: state.subjects.subject\n})\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SUBJECT_FORM\n    })(AddSubject)\n)\n","import { connect } from 'react-redux';\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\n\nimport './SubjectPage.scss';\nimport Card from '../../share/Card/Card';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport AddSubject from '../../components/AddSubjectForm/AddSubjectForm';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport {\n    showAllSubjectsService,\n    removeSubjectCardService,\n    handleSubjectService,\n    selectSubjectService,\n    clearSubjectService,\n    setEnabledSubjectsService,\n    setDisabledSubjectsService,\n    getDisabledSubjectsService\n} from '../../services/subjectService';\nimport {\n    removeGroupCardService,\n    setDisabledGroupService,\n    setEnabledGroupService\n} from '../../services/groupService';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\n\nconst SubjectPage = props => {\n    const { t } = useTranslation('formElements');\n    const { isSnackbarOpen, snackbarType, snackbarMessage } = props;\n\n    const [open, setOpen] = useState(false);\n    const [subjectId, setSubjectId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n\n    const [disabled, setDisabled] = useState(false);\n\n    useEffect(() => showAllSubjectsService(), []);\n    useEffect(() => getDisabledSubjectsService(), []);\n\n    const submit = values => handleSubjectService(values);\n    const handleEdit = subjectId => selectSubjectService(subjectId);\n    const handleFormReset = () => clearSubjectService();\n    const visibleSubjects = disabled\n        ? search(props.disabledSubjects, term, ['name'])\n        : search(props.subjects, term, ['name']);\n    const SearchChange = setTerm;\n\n    const handleClickOpen = subjectId => {\n        setSubjectId(subjectId);\n        setOpen(true);\n    };\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n\n    const handleClose = subjectId => {\n        setOpen(false);\n        if (!subjectId) return;\n        if (hideDialog) {\n            if (disabled) {\n                const group = props.disabledSubjects.find(\n                    subject => subject.id === subjectId\n                );\n                setEnabledSubjectsService(group);\n            } else {\n                const group = props.subjects.find(\n                    subject => subject.id === subjectId\n                );\n                setDisabledSubjectsService(group);\n            }\n        } else {\n            removeSubjectCardService(subjectId);\n        }\n        setHideDialog(null);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    return (\n        <>\n            <ConfirmDialog\n                isHide={hideDialog}\n                cardId={subjectId}\n                whatDelete={'subject'}\n                open={open}\n                onClose={handleClose}\n            />\n            <div className=\"cards-container\">\n                <aside className=\"search-list__panel\">\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    {disabled ? (\n                        ''\n                    ) : (\n                        <AddSubject\n                            className=\"form\"\n                            onSubmit={submit}\n                            onReset={handleFormReset}\n                        />\n                    )}\n                </aside>\n                <section className=\"container-flex-wrap wrapper\">\n                    {visibleSubjects.length === 0 && (\n                        <NotFound name={t('subject_y_label')} />\n                    )}\n                    {visibleSubjects.map(subject => (\n                        <Card key={subject.id} class=\"subject-card done-card\">\n                            <div className=\"cards-btns\">\n                                {disabled ? (\n                                    <IoMdEye\n                                        className=\"svg-btn copy-btn\"\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(subject.id);\n                                        }}\n                                    />\n                                ) : (\n                                    <>\n                                        <GiSightDisabled\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_disabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.HIDE\n                                                );\n                                                handleClickOpen(subject.id);\n                                            }}\n                                        />\n                                        <FaEdit\n                                            className=\"svg-btn edit-btn\"\n                                            title={t('edit_title')}\n                                            onClick={() =>\n                                                handleEdit(subject.id)\n                                            }\n                                        />\n                                    </>\n                                )}\n\n                                <MdDelete\n                                    className=\"svg-btn delete-btn\"\n                                    title={t('delete_title')}\n                                    onClick={() => handleClickOpen(subject.id)}\n                                />\n                            </div>\n                            <p className=\"subject-card__description\">\n                                {t('subject_label') + ':'}{' '}\n                            </p>\n                            <h2 className=\"subject-card__name\">\n                                {subject.name}\n                            </h2>\n                        </Card>\n                    ))}\n                </section>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    subjects: state.subjects.subjects,\n    disabledSubjects: state.subjects.disabledSubjects,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message\n});\n\nexport default connect(mapStateToProps, {})(SubjectPage);\n","import React, { useEffect, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport Card from '../../share/Card/Card';\nimport './BusyRooms.scss';\nimport { useTranslation } from 'react-i18next';\nimport { getScheduleItemsService } from '../../services/scheduleService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { CircularProgress } from '@material-ui/core';\nimport { setLoadingService } from '../../services/loadingService';\n\nconst BusyRooms = props => {\n    const { t } = useTranslation('common');\n\n    useEffect(() => getScheduleItemsService(), []);\n    useEffect(() => {\n        getClassScheduleListService();\n        setLoadingService(true);\n    }, []);\n\n    const busyRooms = props.busyRooms[0];\n\n    const isLoading = props.loading;\n\n    let moreThen = 'more-then-one';\n\n    let busyRoomsLength;\n\n    if (busyRooms !== undefined) {\n        busyRoomsLength = busyRooms.length;\n    }\n\n    return (\n        <div className=\"busy-rooms-container\">\n            {isLoading ? (\n                <h2 className=\"busy-heading\">\n                    <CircularProgress />\n                </h2>\n            ) : (\n                <>\n                    {busyRoomsLength > 0 ? (\n                        <>\n                            <h2 className=\"busy-heading\">\n                                {t('busy_rooms_heading')}\n                            </h2>\n                            <section className=\"view-rooms\">\n                                {busyRooms.map(busyRoom => (\n                                    <Card\n                                        class=\"busy-room\"\n                                        key={busyRoom.room_id}\n                                    >\n                                        <h3 className=\"room-heading\">\n                                            <span className=\"room-name\">\n                                                {busyRoom.room_name}\n                                            </span>\n                                            <span className=\"room-type\">\n                                                {busyRoom.room_type}\n                                            </span>\n                                        </h3>\n\n                                        {busyRoom.schedules.map(\n                                            (schedule, index) => {\n                                                if (\n                                                    props.currentSemester.semester_days.includes(\n                                                        schedule.day\n                                                    )\n                                                )\n                                                    return (\n                                                        <section\n                                                            className=\"room-day\"\n                                                            key={\n                                                                index +\n                                                                schedule.day\n                                                            }\n                                                        >\n                                                            <h3 className=\"room-heading\">\n                                                                {t(\n                                                                    `day_of_week_${schedule.day}`\n                                                                )}\n                                                            </h3>\n\n                                                            <section>\n                                                                <Fragment\n                                                                    key={index}\n                                                                >\n                                                                    <div className=\"even-odd-week\">\n                                                                        <span className=\"even-odd-heading\">\n                                                                            {t(\n                                                                                'week_even_title'\n                                                                            )}\n                                                                        </span>\n                                                                        {props.currentSemester.semester_classes.map(\n                                                                            scheduleClass => {\n                                                                                const in_arrayIndex = schedule.classes[0].even.findIndex(\n                                                                                    evenItem =>\n                                                                                        evenItem.class_id ===\n                                                                                        scheduleClass.id\n                                                                                );\n                                                                                let evenOne = schedule.classes[0].even.find(\n                                                                                    evenItem =>\n                                                                                        evenItem.class_id ===\n                                                                                        scheduleClass.id\n                                                                                );\n\n                                                                                if (\n                                                                                    in_arrayIndex <\n                                                                                    0\n                                                                                ) {\n                                                                                    return (\n                                                                                        <div\n                                                                                            className=\"class-info\"\n                                                                                            key={\n                                                                                                index +\n                                                                                                scheduleClass.class_name\n                                                                                            }\n                                                                                        >\n                                                                                            <div className=\"class-info-data\">\n                                                                                                {' '}\n                                                                                                {\n                                                                                                    scheduleClass.class_name\n                                                                                                }\n                                                                                            </div>\n\n                                                                                            <div className=\"class-info-data\">\n                                                                                                <div className=\"green-free\"></div>\n                                                                                            </div>\n                                                                                        </div>\n                                                                                    );\n                                                                                } else {\n                                                                                    evenOne.groups = [];\n                                                                                    schedule.classes[0].even.map(\n                                                                                        evenItemMap => {\n                                                                                            if (\n                                                                                                evenOne.class_id ===\n                                                                                                evenItemMap.class_id\n                                                                                            ) {\n                                                                                                evenOne.groups.push(\n                                                                                                    evenItemMap.group_name\n                                                                                                );\n                                                                                            }\n                                                                                        }\n                                                                                    );\n\n                                                                                    return (\n                                                                                        <div\n                                                                                            className=\"class-info\"\n                                                                                            key={\n                                                                                                index +\n                                                                                                evenOne.class_name +\n                                                                                                evenOne.group_name\n                                                                                            }\n                                                                                        >\n                                                                                            <div className=\"class-info-data\">\n                                                                                                {\n                                                                                                    evenOne.class_name\n                                                                                                }\n                                                                                            </div>\n                                                                                            {evenOne\n                                                                                                .groups\n                                                                                                .length >\n                                                                                            1 ? (\n                                                                                                <div\n                                                                                                    className={`class-info-data group-height ${moreThen}`}\n                                                                                                >\n                                                                                                    {evenOne.groups.join(\n                                                                                                        ', '\n                                                                                                    )}\n                                                                                                </div>\n                                                                                            ) : (\n                                                                                                <div className=\"class-info-data group-height\">\n                                                                                                    {evenOne.groups.join(\n                                                                                                        ', '\n                                                                                                    )}\n                                                                                                </div>\n                                                                                            )}\n                                                                                        </div>\n                                                                                    );\n                                                                                }\n                                                                            }\n                                                                        )}\n                                                                    </div>\n\n                                                                    <div className=\"even-odd-week\">\n                                                                        <span className=\"even-odd-heading\">\n                                                                            {t(\n                                                                                'week_odd_title'\n                                                                            )}\n                                                                        </span>\n                                                                        {props.currentSemester.semester_classes.map(\n                                                                            scheduleClass => {\n                                                                                const in_arrayIndex = schedule.classes[0].odd.findIndex(\n                                                                                    oddItem =>\n                                                                                        oddItem.class_id ===\n                                                                                        scheduleClass.id\n                                                                                );\n                                                                                let oddOne = schedule.classes[0].odd.find(\n                                                                                    oddItem =>\n                                                                                        oddItem.class_id ===\n                                                                                        scheduleClass.id\n                                                                                );\n\n                                                                                if (\n                                                                                    in_arrayIndex <\n                                                                                    0\n                                                                                ) {\n                                                                                    return (\n                                                                                        <div\n                                                                                            className=\"class-info\"\n                                                                                            key={\n                                                                                                index +\n                                                                                                scheduleClass.class_name\n                                                                                            }\n                                                                                        >\n                                                                                            <div className=\"class-info-data\">\n                                                                                                {' '}\n                                                                                                {\n                                                                                                    scheduleClass.class_name\n                                                                                                }\n                                                                                            </div>\n\n                                                                                            <div className=\"class-info-data\">\n                                                                                                <div className=\"green-free\"></div>\n                                                                                            </div>\n                                                                                        </div>\n                                                                                    );\n                                                                                } else {\n                                                                                    oddOne.groups = [];\n                                                                                    schedule.classes[0].odd.map(\n                                                                                        oddItemMap => {\n                                                                                            if (\n                                                                                                oddOne.class_id ===\n                                                                                                oddItemMap.class_id\n                                                                                            ) {\n                                                                                                oddOne.groups.push(\n                                                                                                    oddItemMap.group_name\n                                                                                                );\n                                                                                            }\n                                                                                        }\n                                                                                    );\n\n                                                                                    return (\n                                                                                        <div\n                                                                                            className=\"class-info\"\n                                                                                            key={\n                                                                                                index +\n                                                                                                oddOne.class_name +\n                                                                                                oddOne.group_name\n                                                                                            }\n                                                                                        >\n                                                                                            <div className=\"class-info-data\">\n                                                                                                {\n                                                                                                    oddOne.class_name\n                                                                                                }\n                                                                                            </div>\n                                                                                            {oddOne\n                                                                                                .groups\n                                                                                                .length >\n                                                                                            1 ? (\n                                                                                                <div\n                                                                                                    className={`class-info-data group-height ${moreThen}`}\n                                                                                                >\n                                                                                                    {oddOne.groups.join(\n                                                                                                        ', '\n                                                                                                    )}\n                                                                                                </div>\n                                                                                            ) : (\n                                                                                                <div className=\"class-info-data group-height\">\n                                                                                                    {oddOne.groups.join(\n                                                                                                        ', '\n                                                                                                    )}\n                                                                                                </div>\n                                                                                            )}\n                                                                                        </div>\n                                                                                    );\n                                                                                }\n                                                                            }\n                                                                        )}\n                                                                    </div>\n                                                                </Fragment>\n                                                            </section>\n                                                        </section>\n                                                    );\n                                            }\n                                        )}\n                                    </Card>\n                                ))}\n                            </section>\n                        </>\n                    ) : (\n                        <>\n                            <h2 className=\"busy-heading\">\n                                <CircularProgress />\n                            </h2>\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    busyRooms: state.busyRooms.busyRooms,\n    loading: state.loadingIndicator.loading,\n    currentSemester: state.schedule.currentSemester\n});\n\nexport default connect(mapStateToProps, {})(BusyRooms);\n","import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst renderCheckboxField = ({\n    custom,\n    input,\n    label,\n    name,\n    labelPlacement,\n    checked\n}) => {\n    return (\n        <FormControlLabel\n            labelPlacement={labelPlacement}\n            label={label}\n            name={name}\n            checked={checked}\n            control={<Checkbox color=\"primary\" {...custom} {...input} />}\n        />\n    );\n};\n\nexport default renderCheckboxField;\n","import React from 'react';\nimport MomentUtils from \"@date-io/moment\";\nimport * as moment from \"moment\";\nimport {\n  MuiPickersUtilsProvider,\n DatePicker,\n} from '@material-ui/pickers';\n\n    const renderMounthPicker = ({\n        label,\n        input: { value, ...inputProps },\n        meta: { touched, invalid, error },\n        ...custom\n      }) => {\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n        <DatePicker\n          clearable\n          ampm={false}\n          value={value ? moment(value, \"DD/MM/YYYY\").toDate() : null}\n          format=\"DD/MM/YYYY\"\n          error={touched && invalid}\n          helperText={touched && error ? touched && error : label}\n          {...inputProps}\n          {...custom}\n        />\n    </MuiPickersUtilsProvider>\n  );\n        };\nexport default renderMounthPicker;\n","import * as moment from 'moment';\nimport { connect } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Field, reduxForm } from 'redux-form';\nimport Button from '@material-ui/core/Button';\n\nimport './SemesterForm.scss';\nimport Card from '../../share/Card/Card';\nimport renderCheckboxField from '../../share/renderedFields/checkbox';\nimport { SEMESTER_FORM } from '../../constants/reduxForms';\nimport renderTextField from '../../share/renderedFields/input';\nimport renderMonthPicker from '../../share/renderedFields/timeSemester';\nimport {\n    required,\n    minYearValue,\n    lessThanDate,\n    greaterThanDate\n} from '../../validation/validateFields';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { daysUppercase } from '../../constants/schedule/days';\n\nlet AddSemesterForm = props => {\n    const clearCheckboxes = () => {\n        setChecked(false);\n        setCheckedDates({\n            MONDAY: false,\n            TUESDAY: false,\n            WEDNESDAY: false,\n            THURSDAY: false,\n            FRIDAY: false,\n            SATURDAY: false,\n            SUNDAY: false\n        });\n    };\n    useEffect(() => getClassScheduleListService(), []);\n\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting } = props;\n\n    let prepSetCheckedClasses = {};\n    useEffect(() => {\n        props.classScheduler.forEach(classItem => {\n            prepSetCheckedClasses[`${classItem.id}`] = false;\n        });\n        setCheckedClasses({ ...prepSetCheckedClasses });\n        clearCheckboxes();\n    }, [props.classScheduler, props.semester.id]);\n\n    const [checked, setChecked] = React.useState(false);\n\n    const [checkedDates, setCheckedDates] = React.useState({\n        MONDAY: false,\n        TUESDAY: false,\n        WEDNESDAY: false,\n        THURSDAY: false,\n        FRIDAY: false,\n        SATURDAY: false,\n        SUNDAY: false\n    });\n\n    const [checkedClasses, setCheckedClasses] = React.useState(\n        prepSetCheckedClasses\n    );\n\n    const handleChange = event => setChecked(event.target.checked);\n\n    const setEndTime = startTime =>\n        props.change(\n            'endDay',\n            moment(startTime, 'DD/MM/YYYY').add(7, 'd').format('DD/MM/YYYY')\n        );\n\n    const setCheckedDaysHandler = React.useCallback(\n        day => {\n            return function (event) {\n                let changedDay = { [day]: event.target.checked };\n                setCheckedDates({\n                    ...checkedDates,\n                    ...changedDay\n                });\n            };\n        },\n        [checkedDates]\n    );\n    const setCheckedClassesHandler = React.useCallback(\n        classid => {\n            return function (event) {\n                let changedClass = { [classid]: event.target.checked };\n                setCheckedClasses({\n                    ...checkedClasses,\n                    ...changedClass\n                });\n            };\n        },\n        [checkedClasses]\n    );\n\n    const setSemesterClasses = () => {\n        const classes = Object.keys(checkedClasses);\n        return classes.map(classItem => {\n            const scheduleItem = props.classScheduler.find(\n                schedule => schedule.id === +classItem\n            );\n            return (\n                <Field\n                    key={props.semester.id + classItem}\n                    name={`semester_classes_markup_${classItem}`}\n                    label={\n                        scheduleItem.class_name +\n                        ' (' +\n                        scheduleItem.startTime +\n                        '-' +\n                        scheduleItem.endTime +\n                        ')'\n                    }\n                    labelPlacement=\"end\"\n                    component={renderCheckboxField}\n                    defaultValue={checkedClasses[classItem]}\n                    checked={checkedClasses[classItem]}\n                    onChange={setCheckedClassesHandler(classItem)}\n                    color=\"primary\"\n                />\n            );\n        });\n    };\n    const setSemesterDays = () => {\n        const days = Object.keys(checkedDates);\n        return days.map(semesterDay => {\n            return (\n                <Field\n                    key={props.semester.id + semesterDay}\n                    name={`semester_days_markup_${semesterDay}`}\n                    label={t(`common:day_of_week_${semesterDay}`)}\n                    labelPlacement=\"end\"\n                    defaultValue={checkedDates[semesterDay]}\n                    component={renderCheckboxField}\n                    checked={checkedDates[semesterDay]}\n                    onChange={setCheckedDaysHandler(semesterDay)}\n                    color=\"primary\"\n                />\n            );\n        });\n    };\n\n    useEffect(() => {\n        let semesterItem = {};\n        clearCheckboxes();\n\n        if (props.semester) {\n            if (props.semester.id) {\n                semesterItem = {\n                    id: props.semester.id,\n                    year: props.semester.year,\n                    description: props.semester.description,\n                    startDay: props.semester.startDay,\n                    endDay: props.semester.endDay,\n                    currentSemester: props.semester.currentSemester,\n                    semester_days: props.semester.semester_days,\n                    semester_classes: props.semester.semester_classes\n                };\n\n                daysUppercase.forEach(dayItem => {\n                    if (props.semester.semester_days.includes(dayItem)) {\n                        semesterItem[`semester_days_markup_${dayItem}`] = true;\n                    }\n                });\n                const newDays = props.semester.semester_days.reduce(\n                    (result, day) => {\n                        result[day] = true;\n                        return result;\n                    },\n                    {}\n                );\n\n                if (props.classScheduler) {\n                    props.classScheduler.forEach(classFullItem => {\n                        if (\n                            props.semester.semester_classes.findIndex(\n                                classItem => {\n                                    return classFullItem.id === classItem.id;\n                                }\n                            ) >= 0\n                        ) {\n                            semesterItem[\n                                `semester_classes_markup_${classFullItem.id}`\n                            ] = true;\n                        }\n                    });\n                }\n\n                const newClasses = props.semester.semester_classes.reduce(\n                    (result, classItem) => {\n                        result[classItem.id] = true;\n                        return result;\n                    },\n                    {}\n                );\n\n                setChecked(props.semester.currentSemester);\n\n                setCheckedDates({\n                    MONDAY: false,\n                    TUESDAY: false,\n                    WEDNESDAY: false,\n                    THURSDAY: false,\n                    FRIDAY: false,\n                    SATURDAY: false,\n                    SUNDAY: false,\n                    ...newDays\n                });\n\n                let prepSetCheckedClasses = {};\n                if (props.classScheduler) {\n                    props.classScheduler.forEach(classItem => {\n                        prepSetCheckedClasses[`${classItem.id}`] = false;\n                    });\n                }\n                setCheckedClasses({\n                    ...prepSetCheckedClasses,\n                    ...newClasses\n                });\n            }\n        }\n        props.initialize(semesterItem);\n    }, [props.semester.id]);\n\n    return (\n        <Card class=\"form-card semester-form\">\n            <h2 style={{ textAlign: 'center' }}>\n                {props.semester.id ? t('edit_title') : t('create_title')}\n                {t('semestry_label')}\n            </h2>\n\n            <form onSubmit={handleSubmit}>\n                <div className=\"semester-checkbox\">\n                    <Field\n                        name=\"currentSemester\"\n                        label={t('common:current_label')}\n                        labelPlacement=\"start\"\n                        component={renderCheckboxField}\n                        checked={checked}\n                        onChange={handleChange}\n                        color=\"primary\"\n                    />\n                </div>\n                <Field\n                    className=\"form-field\"\n                    name=\"year\"\n                    type=\"number\"\n                    component={renderTextField}\n                    label={t('year_label') + ':'}\n                    validate={[required, minYearValue]}\n                />\n                <Field\n                    className=\"form-field\"\n                    name=\"description\"\n                    component={renderTextField}\n                    label={t('semester_label') + ':'}\n                    validate={[required]}\n                />\n                <div className=\"form-time-block\">\n                    <Field\n                        className=\"time-input\"\n                        name=\"startDay\"\n                        component={renderMonthPicker}\n                        label={t('class_from_label') + ':'}\n                        validate={[required, lessThanDate]}\n                        onChange={(event, value) => {\n                            if (value) {\n                                setEndTime(value);\n                            }\n                        }}\n                    />\n                    <Field\n                        className=\"time-input\"\n                        name=\"endDay\"\n                        component={renderMonthPicker}\n                        label={t('class_to_label') + ':'}\n                        validate={[required, greaterThanDate]}\n                    />\n                </div>\n                <div className=\"\">\n                    <p>{t('common:days_label') + ': '}</p>\n                    {setSemesterDays()}\n                </div>\n                <div className=\"\">\n                    <p>{t('common:ClassSchedule_management_title') + ': '}</p>\n                    {setSemesterClasses()}\n                </div>\n                <div className=\"form-buttons-container semester-btns\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className=\"buttons-style \"\n                        disabled={pristine || submitting}\n                        type=\"submit\"\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        type=\"button\"\n                        variant=\"contained\"\n                        className=\"buttons-style\"\n                        disabled={pristine || submitting}\n                        onClick={onReset}\n                    >\n                        {t('clear_button_label')}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    semester: state.semesters.semester,\n    classScheduler: state.classActions.classScheduler\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SEMESTER_FORM\n    })(AddSemesterForm)\n);\n","import { connect } from 'react-redux';\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\n\nimport './SemesterPage.scss';\nimport Card from '../../share/Card/Card';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport SemesterForm from '../../components/SemesterForm/SemesterForm';\nimport {\n    clearSemesterService,\n    getDisabledSemestersService,\n    handleSemesterService,\n    removeSemesterCardService,\n    selectSemesterService,\n    setDisabledSemestersService,\n    setEnabledSemestersService,\n    showAllSemestersService\n} from '../../services/semesterService';\nimport {\n    deleteRoomCardService,\n    setDisabledRoomsService,\n    setEnabledRoomsService\n} from '../../services/roomService';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\n\nconst SemesterPage = props => {\n    const { t } = useTranslation('formElements');\n    const [open, setOpen] = useState(false);\n    const [semesterId, setSemesterId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const { isSnackbarOpen, snackbarType, snackbarMessage } = props;\n\n    useEffect(() => showAllSemestersService(), []);\n    useEffect(() => {\n        getDisabledSemestersService();\n    }, []);\n\n    const [hideDialog, setHideDialog] = useState(null);\n    const [disabled, setDisabled] = useState(false);\n\n    const SearchChange = setTerm;\n    const handleFormReset = () => clearSemesterService();\n    const submit = values => handleSemesterService(values);\n    const handleEdit = semesterId => selectSemesterService(semesterId);\n\n    const searchArr = ['year', 'description', 'startDay', 'endDay'];\n    const visibleItems = disabled\n        ? search(props.disabledSemesters, term, searchArr)\n        : search(props.semesters, term, searchArr);\n\n    const handleClickOpen = semesterId => {\n        setSemesterId(semesterId);\n        setOpen(true);\n    };\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n\n    const handleClose = semesterId => {\n        setOpen(false);\n        if (!semesterId) return;\n        if (hideDialog) {\n            if (disabled) {\n                const semester = props.disabledSemesters.find(\n                    semester => semester.id === semesterId\n                );\n                setEnabledSemestersService(semester);\n            } else {\n                const semester = props.semesters.find(\n                    semester => semester.id === semesterId\n                );\n                setDisabledSemestersService(semester);\n            }\n        } else {\n            removeSemesterCardService(semesterId);\n        }\n        setHideDialog(null);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    return (\n        <>\n            <ConfirmDialog\n                cardId={semesterId}\n                whatDelete={'semester'}\n                isHide={hideDialog}\n                open={open}\n                onClose={handleClose}\n            />\n            <div className=\"cards-container\">\n                <aside className=\"search-list__panel\">\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    {disabled ? (\n                        ''\n                    ) : (\n                        <SemesterForm\n                            className=\"form\"\n                            onSubmit={submit}\n                            onReset={handleFormReset}\n                        />\n                    )}\n                </aside>\n                <section className=\"container-flex-wrap wrapper\">\n                    {visibleItems.length === 0 && (\n                        <NotFound name={t('semestry_label')} />\n                    )}\n                    {visibleItems.map((semester, index) => {\n                        const sem_days = [];\n                        semester.semester_days.forEach(day =>\n                            sem_days.push(t(`common:day_of_week_${day}`))\n                        );\n                        return (\n                            <Card\n                                key={index}\n                                class={`semester-card done-card ${\n                                    semester.currentSemester ? 'current' : ''\n                                }`}\n                            >\n                                <div className=\"cards-btns\">\n                                    {!disabled ? (\n                                        <>\n                                            <GiSightDisabled\n                                                className=\"svg-btn copy-btn\"\n                                                title={t('common:set_disabled')}\n                                                onClick={() => {\n                                                    setHideDialog(\n                                                        disabledCard.HIDE\n                                                    );\n                                                    handleClickOpen(\n                                                        semester.id\n                                                    );\n                                                }}\n                                            />\n                                            <FaEdit\n                                                className=\"svg-btn edit-btn\"\n                                                title={t('edit_title')}\n                                                onClick={() =>\n                                                    handleEdit(semester.id)\n                                                }\n                                            />\n                                        </>\n                                    ) : (\n                                        <IoMdEye\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_enabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.SHOW\n                                                );\n                                                handleClickOpen(semester.id);\n                                            }}\n                                        />\n                                    )}\n                                    <MdDelete\n                                        className=\"svg-btn delete-btn\"\n                                        title={t('delete_title')}\n                                        onClick={() =>\n                                            handleClickOpen(semester.id)\n                                        }\n                                    />\n                                </div>\n\n                                <p className=\"semester-card__description\">\n                                    <small>{t('semester_label') + ':'}</small>\n                                    <b>{semester.description}</b>\n                                    {' ( ' + semester.year + ' )'}\n                                </p>\n                                <p className=\"semester-card__description\">\n                                    <b>\n                                        {semester.startDay} - {semester.endDay}\n                                    </b>\n                                </p>\n                                <p className=\"semester-card__description\">\n                                    {t('common:days_label') + ': '}\n                                    {sem_days.join(', ')}\n                                </p>\n                                <p className=\"semester-card__description\">\n                                    {t(\n                                        'common:ClassSchedule_management_title'\n                                    ) + ': '}\n                                    {semester.semester_classes\n                                        .map(classItem => {\n                                            return classItem.class_name;\n                                        })\n                                        .join(', ')}\n                                </p>\n                            </Card>\n                        );\n                    })}\n                </section>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    semesters: state.semesters.semesters,\n    disabledSemesters: state.semesters.disabledSemesters,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message\n});\n\nexport default connect(mapStateToProps, {})(SemesterPage);\n","import axios from '../helper/axios';\nimport { store } from '../index';\n\nimport { MERGE_USER_AND_TEACHER_URL, USERS_URL } from '../constants/axios';\n\nimport { handleSnackbarOpenService } from './snackbarService';\n\nimport { setUsers } from '../redux/actions/index';\n\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport i18n from '../helper/i18n';\nimport { setLoadingService } from './loadingService';\nimport { getTeachersWithoutAccount } from './teacherService';\n\nexport const getUsersService = () => {\n    axios\n        .get(USERS_URL)\n        .then(response => {\n            store.dispatch(setUsers(response.data));\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                err.response.data.message\n            );\n        });\n};\n\nexport const mergeUserAndTeacherService = mergeObj => {\n    axios\n        .put(MERGE_USER_AND_TEACHER_URL, mergeObj)\n        .then(response => {\n            getTeachersWithoutAccount();\n            getUsersService();\n            setLoadingService(false);\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.SUCCESS,\n                i18n.t('serviceMessages:successfully_merged')\n            );\n        })\n        .catch(err => {\n            setLoadingService(false);\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                err.response.data.message\n            );\n        });\n};\n","import * as actionTypes from './actionsType';\n\nexport const setUsers = res => {\n    return {\n        type: actionTypes.SET_USERS,\n        result: res\n    };\n};\n\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    getUsersService,\n    mergeUserAndTeacherService\n} from '../../services/userService';\nimport { getTeachersWithoutAccount } from '../../services/teacherService';\nimport { setLoadingService } from '../../services/loadingService';\n\n\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from '@material-ui/core';\n\nimport Card from '../../share/Card/Card';\n\nimport './MergeRolePage.scss';\n\nconst useStyles = makeStyles(() => ({\n    autoCompleteField: {\n        '&': {\n            display: 'inline-block',\n            margin: '0 10px 10px 0',\n            width: 200\n        }\n    }\n}));\n\nconst MergeRolePage = props => {\n    const { t } = useTranslation('common');\n\n    const [teacher, setTeacher] = useState(null);\n    const [user, setUser] = useState(null);\n\n    const classes = useStyles();\n\n    const teachers = props.teachers;\n    const users = props.users;\n\n    useEffect(() => getTeachersWithoutAccount(), []);\n    useEffect(() => getUsersService(), []);\n\n    const defaultPropsTeachers = {\n        options: teachers,\n        getOptionLabel: option =>\n            option\n                ? option.position +\n                  ' ' +\n                  option.surname +\n                  ' ' +\n                  option.name +\n                  ' ' +\n                  option.patronymic\n                : ''\n    };\n\n    const defaultPropsUsers = {\n        options: users,\n        getOptionLabel: option => (option ? option.email : '')\n    };\n\n    const mergeUserAndTeacherHandle = () => {\n        if (!user || !teacher) return;\n        mergeUserAndTeacherService({ teacherId: teacher.id, userId: user.id });\n        setUser(null);\n        setTeacher(null);\n        setLoadingService(true);\n    };\n\n    return (\n        <>\n            <div className=\"merge-role-form\">\n                <Card class=\"merge-role-card\">\n                    <h2 className=\"under-line\">{t('merge_header')}</h2>\n                    {props.loading ? (\n                        <CircularProgress />\n                    ) : (\n                        <>\n                            <div className=\"autocomplete-group\">\n                                <Autocomplete\n                                    {...defaultPropsTeachers}\n                                    clearOnEscape\n                                    openOnFocus\n                                    className={classes.autoCompleteField}\n                                    onChange={(event, newValue) => {\n                                        setTeacher(newValue);\n                                    }}\n                                    renderInput={params => (\n                                        <TextField\n                                            {...params}\n                                            label={t(\n                                                'formElements:teacher_label'\n                                            )}\n                                            margin=\"normal\"\n                                        />\n                                    )}\n                                />\n                                <Autocomplete\n                                    {...defaultPropsUsers}\n                                    clearOnEscape\n                                    openOnFocus\n                                    className={classes.autoCompleteField}\n                                    onChange={(event, newValue) => {\n                                        setUser(newValue);\n                                    }}\n                                    renderInput={params => (\n                                        <TextField\n                                            {...params}\n                                            label={t('formElements:user_label')}\n                                            margin=\"normal\"\n                                        />\n                                    )}\n                                />\n                            </div>\n                            <Button\n                                className=\"merge-btn\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => mergeUserAndTeacherHandle()}\n                            >\n                                {t('formElements:merge_button')}\n                            </Button>\n                        </>\n                    )}\n                </Card>\n            </div>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    teachers: state.teachers.teachers,\n    users: state.users.users,\n    loading: state.loadingIndicator.loading\n});\n\nexport default connect(mapStateToProps)(MergeRolePage);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport LessonPage from '../LessonPage/LessonPage';\nimport TeacherList from '../TeachersList/TeachersList';\nimport ClassSchedule from '../ClassSchedule/ClassSchedule';\nimport GroupList from '../GroupList/GroupList';\nimport RoomList from '../RoomList/RoomList';\nimport SubjectPage from '../SubjectPage/SubjectPage';\nimport BusyRooms from '../BusyRooms/BusyRooms';\nimport SemesterPage from '../SemesterPage/SemesterPage';\n\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport MergeRolePage from '../MergeRolePage/MergeRolePage';\nimport { setCurrentSemester } from '../../redux/actions';\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper\n    },\n    header: {\n        backgroundColor: theme.palette.info.dark\n    }\n}));\n\nconst SimpleTabs = props => {\n    const { t } = useTranslation('common');\n    const classes = useStyles();\n    const [value, setValue] = useState(0);\n\n    useEffect(() => {\n        setCurrentSemester();\n    });\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    let document_title = title => {\n        document.title = t(`${title}_management_title`);\n    };\n\n    const tabs_components = [\n        { name: 'LessonPage', component: <LessonPage /> },\n        { name: 'TeacherList', component: <TeacherList /> },\n        { name: 'GroupList', component: <GroupList /> },\n        { name: 'ClassSchedule', component: <ClassSchedule /> },\n        { name: 'RoomList', component: <RoomList /> },\n        { name: 'SubjectPage', component: <SubjectPage /> },\n        { name: 'BusyRooms', component: <BusyRooms /> },\n        { name: 'SemesterPage', component: <SemesterPage /> },\n        { name: 'MergeRolePage', component: <MergeRolePage /> }\n    ];\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    aria-label=\"simple tabs example\"\n                    indicatorColor=\"primary\"\n                    variant=\"scrollable\"\n                    scrollButtons=\"on\"\n                    className={classes.header}\n                >\n                    {tabs_components.map((tab_one, index) => (\n                        <Tab\n                            key={index + tab_one}\n                            className={classes.tabLink}\n                            onClick={() => document_title(tab_one.name)}\n                            label={t(`${tab_one.name}_management_title`)}\n                            {...a11yProps(index)}\n                        />\n                    ))}\n                </Tabs>\n            </AppBar>\n\n            {tabs_components.map((component, index) => (\n                <TabPanel key={index} value={value} index={index}>\n                    {component.component}\n                </TabPanel>\n            ))}\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    ClassScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps, {})(SimpleTabs);\n","import React, { useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { logout } from '../../../redux/actions/index';\n\nconst Logout = props => {\n\n    useEffect(() => {\n        props.onLogout();\n    }, []);\n\n    return <Redirect to=\"/\" />;\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(logout())\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(Logout);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { activateUser } from '../../redux/actions';\n\nimport { links } from '../../constants/links';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\n\nimport { CircularProgress } from '@material-ui/core';\n\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\n\nimport './ActivationPage.scss';\n\nconst ActivationPage = props => {\n    const { t } = useTranslation('common');\n\n    const params = new URLSearchParams(props.location.search);\n    const token = params.get('token');\n\n    const error = props.error;\n\n    const response = props.response;\n    let redirect = null;\n\n    if (response && response.data.hasOwnProperty('message')) {\n        redirect = <Redirect to={links.AUTH} />;\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.SUCCESS,\n            response.data.message\n        );\n    }\n\n    let main = (\n        <>\n            <h2>{t('verifying_token')}</h2>\n            <CircularProgress />\n        </>\n    );\n\n    if (error) {\n        main = (\n            <>\n                <h2>{t('token_error')}</h2>\n                <p>{error}</p>\n            </>\n        );\n    }\n\n    useEffect(() => {\n        if (token) {\n            props.onActivate(token);\n        }\n    }, [token]);\n\n    return (\n        <>\n            <section className=\"activation-page-container\">\n                {redirect}\n                <section className=\"card activation-section\">{main}</section>\n            </section>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    response: state.auth.response,\n    error: state.auth.activationError\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onActivate: data => dispatch(activateUser(data))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivationPage);\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Redirect,\n    Route,\n    Switch\n} from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Header from '../components/Header/Header';\n\nimport HomePage from '../containers/Home/Home';\nimport Auth from '../containers/Auth/Auth';\nimport SchedulePage from '../containers/SchedulePage/SchedulePage';\nimport AdminPage from '../containers/AdminPage/AdminPage';\nimport Logout from '../containers/Auth/Logout/Logout';\nimport ActivationPage from '../containers/ActivationPage/ActivationPage';\nimport { links } from '../constants/links';\nimport { userRoles } from '../constants/userRoles';\n\nconst Routers = props => {\n    const userRole = props.userRole;\n\n    let routes = (\n        <Switch>\n            <Route path={links.HOME_PAGE} exact component={HomePage} />\n            <Route path={links.SCHEDULE_PAGE}>\n                <Redirect to={links.AUTH} />\n            </Route>\n            <Route path={links.ADMIN_PAGE}>\n                <Redirect to={links.AUTH} />\n            </Route>\n            <Route path={links.AUTH} component={Auth} />\n            <Route path={links.ACTIVATION_PAGE} component={ActivationPage} />\n        </Switch>\n    );\n\n    if (userRole === userRoles.MANAGER) {\n        routes = (\n            <Switch>\n                <Route path={links.HOME_PAGE} exact component={HomePage} />\n                <Route path={links.SCHEDULE_PAGE} component={SchedulePage} />\n                <Route path={links.ACTIVATION_PAGE}>\n                    <Redirect to={links.ADMIN_PAGE} />\n                </Route>\n                <Route path={links.AUTH} component={Auth} />\n\n                <Route path={links.ADMIN_PAGE} component={AdminPage} />\n                <Route path={links.LOGOUT} component={Logout} />\n            </Switch>\n        );\n    } else if (userRole) {\n        routes = (\n            <Switch>\n                <Route path={links.HOME_PAGE} exact component={HomePage} />\n                <Route path={links.SCHEDULE_PAGE}>\n                    <Redirect to={links.AUTH} />\n                </Route>\n                <Route path={links.ADMIN_PAGE}>\n                    <Redirect to={links.AUTH} />\n                </Route>\n                <Route path={links.AUTH} component={Auth} />\n                <Route path={links.ACTIVATION_PAGE}>\n                    <Redirect to={links.HOME_PAGE} />\n                </Route>\n                <Route path={links.LOGOUT} component={Logout} />\n            </Switch>\n        );\n    }\n    return (\n        <Router>\n            <Header userRole={userRole} roles={userRoles} />\n            {routes}\n        </Router>\n    );\n};\n\nconst mapStateToProps = state => ({ userRole: state.auth.role });\n\nexport default connect(mapStateToProps)(Routers);\n","import React, { Suspense, useEffect } from 'react';\nimport './App.scss';\nimport Routers from './router/Routers';\nimport './helper/i18n';\nimport { connect } from 'react-redux';\n\nimport { authCheckState } from './redux/actions/index';\nimport { handleSnackbarCloseService } from './services/snackbarService';\nimport SnackbarComponent from './share/Snackbar/SnackbarComponent';\n\nconst App = props => {\n    const { isSnackbarOpen, snackbarType, snackbarMessage } = props;\n    const handleSnackbarClose = (event, reason) => {\n        if (!reason === 'clickaway') {\n            return;\n        }\n\n        handleSnackbarCloseService();\n    };\n\n    useEffect(() => {\n        props.onTryAutoLogin();\n    }, [props]);\n\n    return (\n        <Suspense fallback={null}>\n            <div className=\"container\">\n                <Routers />\n                <SnackbarComponent\n                    message={snackbarMessage}\n                    type={snackbarType}\n                    isOpen={isSnackbarOpen}\n                    handleSnackbarClose={handleSnackbarClose}\n                />\n            </div>\n        </Suspense>\n    );\n};\n\nconst mapStateToProps = state => ({\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onTryAutoLogin: () => dispatch(authCheckState()),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './redux/reducers/index';\nimport rootSaga from './sagas';\n\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers =\n    (process.env.NODE_ENV === 'development'\n        ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n        : null) || compose;\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}