{"version":3,"sources":["redux/reducers/teachers.js","redux/actions/actionsType.js","redux/utility.js","redux/reducers/lesson.js","redux/reducers/temporarySchedule.js","redux/reducers/snackbar.js","helper/axios.js","constants/tokenBegin.js","redux/reducers/auth.js","redux/reducers/loadingIndicator.js","redux/reducers/schedule.js","redux/reducers/class.js","redux/reducers/subjects.js","redux/reducers/groups.js","redux/reducers/rooms.js","redux/reducers/roomTypes.js","redux/reducers/teachersWish.js","redux/reducers/busyRooms.js","redux/reducers/semesters.js","redux/reducers/users.js","redux/reducers/freeRooms.js","redux/reducers/departments.js","redux/reducers/students.js","redux/reducers/index.js","services/authService.js","constants/axios.js","helper/i18n.js","sagas/authSaga.js","sagas/logoutSaga.js","sagas/checkAuthTimeoutSaga.js","sagas/checkAuthStateSaga.js","sagas/registrationSaga.js","sagas/activateUserSaga.js","sagas/resetUserPasswordSaga.js","sagas/watchers.js","sagas/index.js","validation/validateFields.js","constants/links.js","components/LanguageSelector/LanguageSelector.js","constants/schedule/colors.js","redux/actions/snackbar.js","redux/actions/users.js","redux/actions/loadingIndicator.js","redux/actions/schedule.js","redux/actions/teachers.js","redux/actions/teachersWish.js","redux/actions/class.js","redux/actions/groups.js","redux/actions/semesters.js","services/snackbarService.js","constants/snackbarTypes.js","helper/handlerAxios.js","helper/formHelper.js","services/teacherWishService.js","services/loadingService.js","services/scheduleService.js","services/busyRooms.js","redux/actions/busyRooms.js","constants/schedule/cssClasses.js","share/Card/Card.js","validation/storeValidation.js","constants/validation.js","share/renderedFields/select.js","share/renderedFields/error.js","components/AddTeacherWishForm/WishForm.js","constants/reduxForms.js","services/classService.js","constants/userRoles.js","helper/renderTeacher.js","containers/WishModal/WishModal.js","services/semesterService.js","constants/schedule/days.js","components/FreeRoomForm/freeRoomForm.js","containers/FreeRooms/freeRooms.js","services/freeRoomsService.js","redux/actions/freeRooms.js","components/Header/Header.js","helper/prepareSchedule.js","constants/disabledCard.js","share/modals/modal/linkToMeetingDialog.js","components/LinkToMeeting/LinkToMeeting.js","constants/places.js","helper/renderScheduleTable.js","components/GroupSchedulePageTop/GroupSchedulePageTop.js","components/GroupSchedulePage/GroupSchedulePage.js","containers/Home/Home.js","share/renderedFields/timeSemester.js","components/TeacherScheduleForm/TeacherScheduleForm.js","components/TeacherSchedule/TeacherSchedule.js","services/groupService.js","services/teacherService.js","services/lessonService.js","redux/actions/lesson.js","services/roomService.js","redux/actions/rooms.js","components/Board/Board.js","components/ScheduleItem/ScheduleItem.js","helper/strings.js","components/ScheduleLessonsList/ScheduleLessonsList.js","components/ScheduleDialog/ScheduleDialog.js","components/Schedule/Schedule.js","containers/SchedulePage/SchedulePage.js","share/renderedFields/input.js","redux/actions/departments.js","services/departmentService.js","helper/disableComponent.js","components/AddTeacherForm/AddTeacherForm.js","share/modals/dialog.js","constants/cardType.js","helper/search.js","share/SearchPanel/SearchPanel.js","share/NotFound/NotFound.js","components/AddGroupForm/AddGroupForm.js","share/Snackbar/SnackbarComponent.js","services/subjectService.js","redux/actions/subjects.js","services/studentService.js","redux/actions/students.js","helper/pageRedirection.js","share/modals/modal/AddStudentDialog.js","helper/renderStudentTable.js","helper/ObjectRevision.js","components/UploadFile/UploadFile.js","services/uploadFile.js","share/modals/modal/showStudentsDialog.js","containers/GroupList/GroupList.js","components/AddRoomForm/AddRoomForm.js","services/roomTypesService.js","redux/actions/roomTypes.js","components/AddNewRoomType/AddNewRoomType.js","containers/RoomList/RoomList.js","components/AddSubjectForm/AddSubjectForm.js","containers/SubjectPage/SubjectPage.js","share/modals/modal/modal.js","share/renderedFields/checkbox.js","components/SemesterForm/SemesterForm.js","components/SemesterCopyForm/SemesterCopyForm.js","share/modals/modal/setDefaultDialog.js","containers/SemesterPage/SemesterPage.js","services/userService.js","containers/MergeRolePage/MergeRolePage.js","components/ChangePasswordForm/ChangePasswordForm.js","containers/BusyRooms/BusyRooms.js","constants/navigation.js","helper/multiselect.js","containers/TeachersList/TeachersList.js","components/LessonForm/LessonForm.js","helper/reduxFormHelper.js","share/renderedFields/time.js","components/ClassForm/ClassForm.js","constants/common.js","containers/ClassSchedule/ClassSchedule.js","components/AddDepartmentForm/AddDepartmentForm.js","helper/renderTeacherTable.js","share/modals/modal/showDataDialog.js","containers/DepartmentPage/DepartmentPage.js","constants/navigationComponents.js","components/Navigation/NavigationPage.js","share/modals/chooseGroupDialog/CopyLessonDialog.js","components/LessonsList/LessonsList.js","components/CopyLessonsFromSemesterForm/CopyLessonsFromSemesterForm.js","containers/LessonPage/LessonPage.js","containers/AdminPage/AdminPage.js","containers/Auth/Logout/Logout.js","redux/actions/auth.js","containers/ActivationPage/ActivationPage.js","containers/ProfilePage/ProfilePage.js","constants/auth.js","components/LoginForm/LoginForm.js","components/RegistrationForm/RegistrationForm.js","components/ResetPasswordForm/ResetPasswordForm.js","containers/Auth/Auth.js","components/Register/Register.js","components/ResetPassword/ResetPassword.js","components/Login/Login.js","router/Routers.js","App.js","serviceWorker.js","index.js"],"names":["compare","a","b","comparison","surname","teachers","state","teacher","disabledTeachers","action","type","result","sort","filter","id","updatedTeacher","forEach","push","updateObject","oldObject","updatedValues","initialState","lessons","lessonTypes","lesson","groupId","uniqueError","reducer","concat","updatedLessons","temporarySchedules","temporarySchedule","vacation","schedulesAndTemporarySchedules","teacherId","changedScheduleId","isSnackbarOpen","snackbarType","message","isOpen","REACT_APP_API_BASE_URL","undefined","process","trim","instance","axios","create","baseURL","token","localStorage","getItem","includes","defaults","headers","common","Authorization","role","error","activationError","response","login","removeItem","registration","reg","resetPasswordResponse","loading","scheduleLoading","semesterLoading","items","availability","itemsIds","fullSchedule","groupSchedule","scheduleType","scheduleGroupId","currentSemester","defaultSemester","viewTeacherScheduleResults","itemArr","index","findIndex","item","splice","newType","itemGroupId","scheduleTeacherId","newArr","teacherSchedule","semesters","scheduleSemesterId","semesterId","teacherRangeSchedule","classActions","classScheduler","classScheduleOne","classSchedulOne","one","classScheduleItem","classSchedulerstate","classItem","subjects","subject","disabledSubjects","updatedSubjects","groups","group","disabledGroups","Number","updatedGroups","name","rooms","oneRoom","disabledRooms","roomItem","roomState","roomTypes","oneType","updateTypeState","typeItem","roomTypeItem","teachersWish","wishes","wish","myWishes","find","day_of_week","busyRooms","semester","disabledSemesters","archivedSemesters","updatedSemesters","archivedSemester","users","user","freeRooms","freeRoom","departments","department","disabledDepartments","disable","updatedDepartments","updatedDefaultDepartments","students","student","updatedStudents","rootReducer","combineReducers","auth","snackbar","schedule","loadingIndicator","form","formReducer","authUserService","request","hasOwnProperty","authType","data","email","post","then","registerUserService","resetUserPasswordService","put","activateUserService","logoutUserService","userLang","navigator","language","userLanguage","slice","lang","i","i18n","use","LanguageDetector","initReactI18next","Backend","init","lng","backend","loadPath","fallbackLng","debug","ns","defaultNS","keySeparator","useDataAttrOptions","interpolation","escapeValue","formatSeparator","react","wait","authSaga","payload","call","jwtDecode","require","decodedJWT","expirationDate","Date","exp","setItem","roles","sub","expirationTime","getTime","t","logoutSaga","checkAuthTimeoutSaga","delay","checkAuthStateSaga","registrationSaga","activateUserSaga","resetUserPasswordSaga","watchUserAuthentication","takeLatest","takeEvery","startForman","fork","min","max","links","HOME_PAGE","ADMIN_PAGE","SCHEDULE_PAGE","LOGIN","ACTIVATION_PAGE","LOGOUT","WISHES","TEACHER_SCHEDULE","MY_PROFILE","LessonPage","TeacherList","GroupList","Group","Student","Edit","Delete","AddStudent","SetDisable","ShowStudents","IdParam","IdStudentParam","ClassScheduleTitle","RoomList","SubjectPage","BusyRooms","SemesterPage","MergeRolePage","Changes","ScheduleFor","Registration","RESET_PASSWORD","Departments","LanguageSelector","props","useTranslation","radioLangClasses","languages","changeLanguage","event","target","value","RadioGroup","row","aria-label","className","img","title","map","langItem","FormControlLabel","key","control","Radio","color","onChange","src","alt","renderLangControls","colors","setOpenSnackbar","res","setUser","setLoading","setCurrentSemester","setDefaultSemester","checkAvailabilitySchedule","setFullSchedule","setScheduleType","setTeacher","deleteTeacher","showAllTeachers","showAllWishes","setClassScheduleList","showAllGroups","updateSemester","handleSnackbarOpenService","store","dispatch","handleSnackbarCloseService","snackbarStore","getState","snackbarTypes","errorHandler","successHandler","resetFormHandler","formName","reset","teacherWithWish","getMyTeacherWishesService","get","teacherWishesList","catch","setLoadingService","isLoading","setScheduleLoadingService","setSemesterLoadingService","getCurrentSemesterService","err","getDefaultSemesterService","getScheduleItemsService","getScheduleItemsServiceBySemester","BUSY_ROOMS","deleteItemFromScheduleService","itemId","delete","setScheduleGroupIdService","setScheduleGroupId","setScheduleTypeService","getFullSchedule","getGroupSchedule","getTeacherSchedule","setScheduleTeacherIdService","setScheduleTeacherId","showAllPublicSemestersService","setScheduleSemesterIdService","setScheduleSemesterId","showAllPublicGroupsService","length","cardType","actionType","showAllPublicTeachersByDepartmentService","departmentId","filtered","setTeacherServiceViewType","setTeacherViewType","cssClasses","Card","class","card","children","dragItemNode","useRef","dragItem","draggable","handleDragEnd","e","JSON","parse","childNodes","groupTitleEl","document","getElementById","allBoards","getElementsByClassName","groupTitles","boards","style","backgroundColor","board","background","display","current","removeEventListener","onDragStart","groupTitle","setTimeout","classList","contains","setItemGroupIdService","addEventListener","dataTransfer","setData","checkUniqSemester","storeSemester","year","description","toUpperCase","validation","EMAIL","PASSWORD","required","lessThanZero","minLengthValue","maxLengthValue","lessThanTime","previousValue","allValues","values","moment","toDate","field","greaterThanTime","uniqueClassName","classId","some","_arr","class_name","checkUniqClassName","uniqueGroup","checkUniqueGroup","uniqueSubject","subjectTitle","checkUniqueSubject","uniqueDepartment","departmentTitle","checkUniqueDepartment","timeIntersect","startTime","endTime","extendMoment","Moment","incomeRange","range","intersect","timeIntersectService","uniqueRoomName","roomName","roomdId","checkUniqueRoomName","test","password","minYearValue","minYear","getFullYear","lessThanDate","greaterThanDate","renderSelectField","input","label","meta","touched","custom","FormControl","InputLabel","htmlFor","Select","native","FormHelperText","renderFromHelper","WishForm","handleSubmit","pristine","submitting","class_on_day","classSchedulerOne","wishOne","wishDays","useEffect","initializeFormWish","initialize","evenOdd","classStats","class_status","classStatus","change","status","onSubmit","Field","component","validate","disabled","class_number","Button","variant","onClick","reduxForm","connect","getClassScheduleListService","bufferArray","results","getPublicClassScheduleListService","putAddClassScheduleOneService","postAddClassScheduleOneService","userRoles","USER","MANAGER","TEACHER","getFirstLetter","word","charAt","getTeacherFullName","patronymic","getTeacherForSite","position","WishModal","onCloseWish","teacherWishes","openWish","useState","showForm","setShowForm","class_names","teacherWishList","selectWishCard","day","wishDay","Dialog","onClose","open","maxWidth","teacherName","teacherWishId","someWish","new_class_status","updatedWish","updatatTeacherWishes","updateTeacherWishService","teacherWish","selectSemesterService","showAllSemestersService","reverse","switchSaveActions","putSemester","postSemester","handleSemesterService","isUniqueError","semester_days","semester_classes","prop","Object","prototype","indexOf","substring","startDay","endDay","cardSemester","checkSemesterYears","currentScheduleOld","findCurrentSemester","dateEndYear","dateStartYear","conf","window","confirm","getDisabledSemestersService","getArchivedSemestersService","semesterItem","setDisabledSemesters","daysUppercase","FreeRoomForm","onReset","week","toLowerCase","classNum","setOpen","aria-labelledby","elem","FREE_ROOMS_URL","dayOfWeek","StyledMenu","withStyles","paper","border","Menu","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuItem","theme","root","palette","primary","main","white","MenuItem","React","anchorEl","setAnchorEl","handleClick","currentTarget","handleClose","anchorElUser","setAnchorElUser","handleClickUserMenu","handleCloseUserMenu","setOpenWish","userRole","handleClickOpenWish","leftLinks","menu","userMenu","to","aria-controls","aria-haspopup","ListItemIcon","fontSize","keepMounted","Boolean","textDecoration","getUserMenu","CircularProgress","size","makeFullSchedule","groupsCount","groupList","groupListId","Map","daysPrepArrayFull","done","set","prep_schedule_array","oddArray","evenArray","groupItem","groupIndex","classFull","groupFullIterate","days","dayFullIterate","classes","dayFullIterable","weeks","odd","even","cards","resultArray","disabledCard","LinkToMeetingDialog","cardId","isHide","linkToMeeting","disableBackdropClick","DialogTitle","href","LinkToMeeting","openDialog","setOpenDialog","focus","places","TOGETHER","AUDITORY","ONLINE","shortid","currentDay","now","getDay","matchDayNumberSysytemToDayName","setLink","place","getHref","printWeekNumber","startScheduleDate","date","parsed","Array","from","numberOfDays","Math","floor","ceil","getWeekNumber","isOddFunction","num","currentWeekType","renderClassCell","prepareLessonCardCell","inner","subjectForSite","prepareLessonSubCardCell","room","i18next","lessonType","link","prepareLessonTemporaryCardCell","temporary_schedule","prepareTeacherCardRegularCell","buildLessonWithRoom","prepareTeacherCardCell","renderScheduleGroupHeader","TableHead","TableRow","TableCell","generate","renderGroupTable","isOdd","TableContainer","Table","TableBody","classDay","classIndex","isOddWeek","entries","renderGroupDayClass","renderGroupCells","isCurrentDay","colspan","rowspan","classname","skip_render","weekly_render","colSpan","rowSpan","renderDay","dayName","dayItem","semesterClassesCount","cardIndex","prepareForRender","day_name","classesCount","dayClassName","oddWeekClass","evenWeekClass","Fragment","renderFirstDayFirstClassFirstCardLine","renderFirstDayOtherClassFirstCardLine","renderFullSchedule","fullResultSchedule","scheduleTitle","renderScheduleDays","renderTeacherClassCell","teacherLessonAddCellClass","buildGroupNumber","prepareTeacherTemporaryCardCell","renderWeekTable","scheduleRow","clas","renderClassRow","renderTeacherRangeSchedule","dayIndex","renderTeacherRangeDay","renderFirstLineTable","lessonItem","subject_for_site","group_name","lessonClassName","lessonIndex","renderLessonsRestLines","useStyles","makeStyles","margin","spacing","initialValues","groupDisabled","setGroupDisabled","setSemesterId","loadingContainer","renderSemesterList","labelId","setPlace","history","useHistory","location","useLocation","emptySchedule","renderDownloadLink","entity","entityId","languageToRequest","PUBLIC_DOWNLOAD_GROUP_SCHEDULE_URL","PUBLIC_DOWNLOAD_TEACHER_SCHEDULE_URL","rel","download","renderSchedule","resultArrays","evenDaysPrepArray","oddDaysPrepArray","evenDayPrep","oddDayPrep","oddDay","oddClas","clasIndex","dayArr","evenDay","evenClas","makeGroupSchedule","renderGroupScheduleTitle","oddDays","evenDays","oddClasses","evenClasses","dayTeacher","oddClass","evenClass","makeTeacherSchedule","getTeacherWithPosition","renderTeacherScheduleTitle","archive","groupPath","teacherPath","submitSearchSchedule","changePlace","pathname","params","URLSearchParams","search","getSchedule","renderMounthPicker","inputProps","invalid","utils","MomentUtils","DatePicker","clearable","format","helperText","add","renderMonthPicker","FOR_TEACHER_SCHEDULE_URL","replace","getTeacherScheduleService","selectGroupService","showAllGroupsService","createGroupService","updateGroupService","getDisabledGroupsService","setDisabledGroups","showAllTeachersService","getTeachersWithoutAccount","updateTeacherService","getDisabledTeachersService","selectTeacherCardService","handleTeacherService","cardTeacher","createTeacherService","teacherCardId","getLessonsByGroupService","handleLessonCardService","isCopy","cardObj","lessonCardId","hours","grouped","cardObjectHandler","storeLesson","checkUniqLesson","setUniqueErrorService","selectLessonCardService","selectGroupIdService","showListOfRoomsService","getDisabledRoomsService","createRoomService","newValue","typeDescription","Board","onDrop","preventDefault","card_id","getData","arr","split","obj","lessonId","periodId","SCHEDULE_CHECK_AVAILABILITY_URL","checkAvailabilityScheduleService","setModalData","onDragOver","onDragLeave","parent","parentNode","ScheduleItem","translation","fStrLetterCapital","addition","itemNodeId","deleteNodeId","isGroupped","stringify","inBoard","deleteItem","editItem","teacherForSite","firstStringLetterCapital","str","c","GroupField","styled","TextField","width","ScheduleLessonsList","defaultProps","options","getOptionLabel","option","firstStringLetterCapitalHandle","Autocomplete","clearOnEscape","openOnFocus","groupFinderHandle","renderInput","els","hoursInSchedule","lessonItems","roomField","ScheduleDialog","itemData","setRoom","sure","setSure","x","y","available","classSuitsToTeacher","teacherAvailable","Schedule","setItemData","setNewItemHandle","addItemToScheduleService","roomId","setEditItemHandle","SCHEDULE_ITEM_ROOM_CHANGE","handleClickOpen","dayContainerHeight","elClasses","dayContainer","height","maxHeight","deleteItemFromScheduleHandler","editItemOnScheduleHandler","period","ROOMS_AVAILABILITY","checkAvailabilityChangeRoomScheduleService","conditionFunc","classNumber","addDeleteBtnToItem","itemNode","deleteNode","allLessons","el","scrollIntoView","itemInBoard","scheduleItems","handleClearSchedule","CLEAR_SCHEDULE_URL","renderTextField","placeholder","setEnabledDepartment","getAllDepartmentsService","setDisabledDepartmentService","getDepartmentByIdService","setDisableButton","getClearOrCancelTitle","AddTeacher","initializeFormHandler","onSetSelectedCard","ConfirmDialog","whatDelete","LESSON","CLASS","GROUP","ROOM","TYPE","TEMPORARY_SCHEDULE","SUBJECT","WISH","SEMESTER","term","String","SearchPanel","SearchChange","showDisabled","showArchived","setTerm","checkedB","checkedArchived","setState","handleChange","checked","Switch","NotFound","match","url","Alert","SnackbarComponent","handleSnackbarClose","Snackbar","autoHideDuration","severity","selectSubjectService","subjectId","showAllSubjectsService","createSubjectService","updateSubjectService","getDisabledSubjectsService","setDisabledSubjects","getAllStudentsByGroupId","updateStudentService","selectStudentService","prevGroup","studentId","goToGroupPage","AddStudentDialog","useStyles1","flexShrink","marginLeft","RenderStudentTableActions","useTheme","count","page","rowsPerPage","onPageChange","IconButton","direction","useStyles2","table","minWidth","StyledTableCell","head","black","body","StyledTableRow","hover","RenderStudentTable","onDeleteStudent","checkBoxStudents","handleCheckElement","handleAllChecked","handleAllClear","handleChangeCheckedAllBtn","handleClearCheckedAllBtn","checkedAllBtn","handleAllCheckedBtn","setPage","setRowsPerPage","openDeleteDialog","setOpenDeleteDialog","openEditDialog","setOpenEditDialog","path","handleEdit","emptyRows","deleteStudent","handleCloseEditDialog","sendObject","getCorrectRowCount","pageItemsCount","resRows","detectCheckingCheckAllBtn","rowsCount","handleCheckElem","Paper","scope","align","mailto","sendMail","selectedValue","TableFooter","TablePagination","labelRowsPerPage","rowsPerPageOptions","SelectProps","newPage","onRowsPerPageChange","parseInt","ActionsComponent","isObjectEmpty","object","toString","UploadFile","selectedFile","setSelectedFile","fileInputRef","handleCloseDialogFile","accept","files","ref","lastModifiedDate","toLocaleDateString","file","formData","FormData","append","alert","uploadStudentsToGroupFile","ShowStudentsDialog","setCheckBoxStudents","checkedAll","setCheckedAll","openUploadFile","setOpenUploadFile","groupOption","setGroupOption","defaultGroup","setDefaultGroup","parseStudentToCheckBox","groupsOption","setSelectDisabled","resChecked","changeStudentItem","resData","defaultValue","isOptionDisabled","studentsTmp","prevState","start","finish","currentStudents","resItem","snackbarMessage","setGroupId","hideDialog","setHideDialog","addStudentDialog","setAddStudentDialog","setDisabled","showStudents","setShowStudents","handleAddUser","handleSetDisable","onShowStudentByGroup","idStudent","visibleGroups","studentSubmit","sendData","createStudentService","navigationNames","GROUP_LIST","val","navigation","GROUPS","setEnabledGroupService","setDisabledGroupService","removeGroupCardService","deleteStudentService","handleGroupService","getGroupTitle","reason","AddRoom","roomType","putNewType","postNewType","NewRoomType","typeId","setTypeId","getOneNewTypeService","roomTypeId","setRoomId","editHandler","selectOneRoomService","visibleItems","ROOM_LIST","ROOMS","setEnabledRoomsService","setDisabledRoomsService","deleteRoom","addNewTypeService","textAlign","setSubjectId","visibleSubjects","SUBJECT_PAGE","SUBJECTS","setDisabledSubjectsService","removeSubjectCardService","handleSubjectService","ModalWindow","windowTitle","isOkButton","isNoButton","okButtonLabel","renderOkButton","noButtonLabel","renderNoButton","renderModalButtons","renderCheckboxField","labelPlacement","Checkbox","clearCheckboxes","setCurrent","setByDefault","setCheckedDates","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY","prepSetCheckedClasses","setCheckedClasses","getToday","byDefault","tomorrow","setDate","getDate","getTomorrow","finishTime","setFinishTime","startValue","setStartValue","finishValue","setFinishValue","disabledFinishDate","setDisabledFinishDate","checkedDates","checkedClasses","setMinFinishDate","time","new_date","setCheckedDaysHandler","useCallback","changedDay","setCheckedClassesHandler","classid","changedClass","newDays","reduce","classFullItem","newClasses","minDate","isSameOrBefore","setEndTime","keys","semesterDay","scheduleItem","available_semesters_for_copy","submitButtonLabel","SetChangeDialog","openDefault","setOpenDefault","openModal","setOpenModal","hideDialogModal","setHideDialogModal","archived","setArchived","handleCreateArchive","CREATE_ARCHIVE_SEMESTER","createArchiveSemesterService","searchArr","setDelete","setDefault","dataId","setEnabledSemestersService","setDisabledSemestersService","removeSemesterCardService","handleSemesterArchivedPreview","viewArchivedSemester","setClassNameForDefaultSemester","SEMESTER_PAGE","SEMESTERS","SEMESTER_COPY_URL","fromSemesterId","toSemesterId","semesterCopy","sem_days","handleClickOpenModal","handleClickOpenDefault","join","getUsersService","autoCompleteField","defaultPropsTeachers","defaultPropsUsers","mergeUserAndTeacherHandle","mergeObj","userId","USERS","CHANGES","busyRoomsLength","renderWeekRoomInfo","scheduleClass","in_arrayIndex","class_id","classOne","intersectClass","grouppedLessonClass","lessonOne","hoverInfo","teacher_for_site","busyRoom","room_id","room_name","room_type","schedules","renderRoomDay","TEACHER_LIST","CLASS_SCHEDULE_TITLE","DEPARTMENTS","LESSON_PAGE","MERGE_ROLE_PAGE","GENERAL","MultiSelect","valueRef","selectAllOption","isSelectAllSelected","isOptionSelected","actionMeta","removedValue","hideSelectedOptions","closeMenuOnSelect","isMulti","onChangeSemesterValue","onCancel","onSentTeachers","isEnabledSentBtn","setTeacherId","openSelect","setOpenSelect","teacherLength","selected","setSelected","selectedSemester","setSelectedSemester","semesterOptions","departmentOptions","selectTeacherCard","removeTeacherCard","removeTeacherCardService","wishId","teacherWishOne","handleToUpperCase","closeSelectionDialog","clearSelection","TEACHERS","setEnabledTeachersService","setDisabledTeachersService","teachersId","supQuery","console","log","sendTeachersScheduleService","notSelected","LessonForm","setChecked","handleTeacherInfo","setValue","setValueToSubjectForSiteHandler","rowsMax","multiline","renderTimePicker","TimePicker","ampm","rootInput","ClassScheduleOne","setClassId","getClassScheduleOneService","BELLS","deleteClassScheduleOneService","addClassScheduleOneService","clear","editDepartment","RenderTeacherTableActions","RenderTeacherTable","isDisabled","setIsDisabled","deleteDialog","setDeleteDialog","setDepartmentId","setDepartment","teacherDialog","setTeacherDialog","setEditDepartment","clearDepartmentForm","visibleDepartments","deleteDepartment","setDepartmentIntoForm","deleteDepartmentsService","prev","createDepartmentService","updateDepartmentService","general","tabs_components","a11yProps","flexGrow","header","info","dark","nav","select","btn","gen","setGen","document_title","AppBar","Tabs","indicatorColor","scrollButtons","tab_one","Tab","groupField","CopyLessonDialog","setGroup","setError","multiple","LessonsList","getUkWordHours","number","getHour","getEnHour","lastChar","getUkHour","onCopyLesson","onSelectLesson","onClickOpen","getTeacherName","openCopyLessonDialog","setOpenCopyLessonDialog","setLessonId","copiedLesson","setCopiedLesson","lessonLength","selectLessonCardHandler","submitCopy","LESSONS_FROM_SEMESTER_COPY_URL","CopyLessonsFromSemesterService","cardsContainer","groupHandle","groupTitleHandle","lessonGroupObj","copyLessonCardService","deleteLessonCard","constructor","renderCopyLessonsForm","LESSONS","onLogout","onActivate","redirect","AUTH","submitTeacherChange","teacher_name","teacher_surname","teacher_patronymic","teacher_position","updateUserTeacher","handlePasswordFormReset","handleTeacherFormReset","new_password","confirm_password","current_password","updateUserPassword","passwords","renderTeacherdataForm","authTypes","LoginForm","loginError","switchAuthMode","RegistrationForm","registrationError","emailValidate","emailErrorCondition","emailAdvancedValidate","passwordValidate","passwordsCondition","passwordValidateAdvanced","retypePasswordValidate","retypePasswordValidateAdvanced","ResetPasswordForm","resetPasswordError","onAuth","onRegister","onResetPassword","setAuthType","parser","URL","social","isToken","param","splitedParam","replaceState","isSuccess","loginHandler","loginData","commonCondition","authRedirect","authPage","switchAuthModeHandler","registrationData","retypePassword","resetPasswordData","Register","ResetPassword","Login","routes","exact","HomePage","GroupSchedulePage","ActivationPage","ProfilePage","SchedulePage","DepartmentPage","AdminPage","ClassSchedule","ChangePasswordForm","Logout","TeacherSchedule","onTryAutoLogin","authCheckState","fallback","hostname","sagaMiddleware","createSagaMiddleware","composeEnhancers","compose","createStore","applyMiddleware","run","rootSaga","ReactDOM","render","serviceWorker","ready","unregister"],"mappings":"yyCACA,SAASA,EAAQC,EAAGC,GAChB,IAAIC,EAAa,EAMjB,OALIF,EAAEG,QAAUF,EAAEE,QACdD,EAAa,EACNF,EAAEG,QAAUF,EAAEE,UACrBD,GAAc,GAEXA,EAGX,IA6EeE,EA7EE,WAOX,IANFC,EAMC,uDANO,CACJD,SAAU,GACVE,QAAS,GACTC,iBAAkB,IAEtBC,EACC,uCACD,OAAQA,EAAOC,MACX,ICoCmB,cDnCf,OAAO,2BACAJ,GADP,IAEID,SAAU,sBAAIC,EAAMD,UAAV,CAAoBI,EAAOE,SAAQC,KAAKZ,KAG1D,ICkCsB,iBDjClB,OAAO,2BACAM,GADP,IAEID,SAAS,YACFC,EAAMD,SAASQ,QACd,SAAAR,GAAQ,OAAIA,EAASS,KAAOL,EAAOE,aAKnD,ICsBmB,cDrBf,OAAO,2BACAL,GADP,IAEIC,QAASE,EAAOE,SAExB,ICgBsB,iBDflB,IAAIJ,EAAUD,EAAMD,SAASQ,QACzB,SAAAN,GAAO,OAAIA,EAAQO,KAAOL,EAAOE,UACnC,GAIF,OAHKJ,IACDA,EAAU,CAAEO,GAAI,OAEb,2BACAR,GADP,IAEIC,QAASA,IAGjB,ICMsB,iBDLlB,IAAMQ,EAAiB,GAOvB,OANAT,EAAMD,SAASW,SAAQ,SAAAT,GACfA,EAAQO,KAAOL,EAAOE,OAAOG,KAC7BP,EAAO,2BAAQA,GAAYE,EAAOE,SAEtCI,EAAeE,KAAKV,MAEjB,2BACAD,GADP,IAEIC,QAAS,GACTF,SAAUU,IAGlB,ICNgB,WDOZ,OAAO,2BACAT,GADP,IAEID,SAAS,YAAKI,EAAOE,UAE7B,ICgE6B,wBD/DzB,OAAO,2BACAL,GADP,IAEIE,iBAAiB,YAAKC,EAAOE,UAErC,ICfgC,6BDgB5B,OAAO,2BACJL,GADH,IAEAD,SAAS,YAAKI,EAAOE,UAGzB,QACI,OAAOL,IEpFNY,EAAe,SAACC,EAAWC,GACtC,OAAO,2BACFD,GACAC,ICADC,EAAe,CACjBC,QAAS,GACTC,YAAa,GACbC,OAAQ,GACRC,QAAS,KACTC,aAAa,GA4DFC,EAzDC,WAAmC,IAAlCrB,EAAiC,uDAAzBe,EAAcZ,EAAW,uCAC9C,OAAQA,EAAOC,MACX,IFbuB,kBEcnB,OAAOQ,EAAaZ,EAAO,CACvBgB,QAAShB,EAAMgB,QAAQM,OAAOnB,EAAOE,UAE7C,IFhByB,oBEiBrB,OAAOO,EAAaZ,EAAO,CACvBgB,QAASb,EAAOE,SAExB,IFnBwB,mBEoBpB,OAAOO,EAAaZ,EAAO,CACvBiB,YAAad,EAAOE,SAE5B,IFtB0B,qBE0BtB,OAHAL,EAAMgB,QAAUhB,EAAMgB,QAAQT,QAC1B,SAAAW,GAAM,OAAIA,EAAOV,KAAOL,EAAOE,UAE5BO,EAAaZ,EAAO,CACvBgB,QAAShB,EAAMgB,UAEvB,IF5B0B,qBE6BtB,IAAIE,EAASlB,EAAMgB,QAAQT,QACvB,SAAAW,GAAM,OAAIA,EAAOV,KAAOL,EAAOE,UACjC,GAIF,OAHKa,IACDA,EAAS,CAAEV,GAAI,OAEZI,EAAaZ,EAAO,CACvBkB,OAAQA,IAEhB,IFrC0B,qBEsCtB,IAAMK,EAAiB,GAOvB,OANAvB,EAAMgB,QAAQN,SAAQ,SAAAQ,GACdA,EAAOV,KAAOL,EAAOE,OAAOG,KAC5BU,EAAM,2BAAQA,GAAWf,EAAOE,SAEpCkB,EAAeZ,KAAKO,MAEjBN,EAAaZ,EAAO,CACvBgB,QAASO,EACTL,OAAQ,KAEhB,IFhDuB,kBEiDnB,OAAON,EAAaZ,EAAO,CACvBkB,OAAQ,GACRC,QAAShB,EAAOE,SAExB,IFpDwB,mBEqDpB,OAAOO,EAAaZ,EAAO,CACvBoB,YAAajB,EAAOE,SAE5B,QACI,OAAOL,IC7Dbe,EAAe,CACjBS,mBAAoB,GACpBC,kBAAmB,GACnBC,SAAU,GACVC,+BAAgC,GAChCC,UAAW,KACXC,kBAAmB,MA8BRR,EA3BC,WAAmC,IAAlCrB,EAAiC,uDAAzBe,EAAcZ,EAAW,uCAC9C,OAAQA,EAAOC,MACX,IHL+B,0BGM3B,OAAOQ,EAAaZ,EAAO,CACvBwB,mBAAoBrB,EAAOE,SAEnC,IHR6C,wCGSzC,OAAOO,EAAaZ,EAAO,CACvB2B,+BAAgCxB,EAAOE,SAE/C,IHXiC,4BGY7B,OAAOO,EAAaZ,EAAO,CACvByB,kBAAmBtB,EAAOE,SAElC,IHduB,kBGenB,OAAOO,EAAaZ,EAAO,CACvB0B,SAAUvB,EAAOE,SAEzB,IHjByB,oBGkBrB,OAAOO,EAAaZ,EAAO,CACvB4B,UAAWzB,EAAOE,SAE1B,QACI,OAAOL,IChCbe,EAAe,CACjBe,gBAAgB,EAChBC,aAAc,KACdC,QAAS,MAkBEX,EAfC,WAAmC,IAAlCrB,EAAiC,uDAAzBe,EAAcZ,EAAW,uCAC9C,OAAQA,EAAOC,MACX,IJIyB,oBIHrB,IAAIA,EAAOD,EAAOE,OAAOD,KACrB4B,EAAU7B,EAAOE,OAAO2B,QAC5B,OAAOpB,EAAaZ,EAAO,CACvB8B,eAAgB3B,EAAOE,OAAO4B,OAC9BF,aAAc3B,EACd4B,QAASA,IAEjB,QACI,OAAOhC,I,kBCjBfkC,EAAyB,SACaC,IAAvCC,mHAAYF,yBACXA,EAAyBE,mHAAYF,uBAAuBG,QAEhE,IAAMC,EAAWC,IAAMC,OAAO,CAC1BC,QAASP,IAGPQ,EAAQC,aAAaC,QAAQ,SAC/BF,GAASA,EAAMG,SCZO,aDatBP,EAASQ,SAASC,QAAQC,OAAOC,cAAgBP,GAGtCJ,QEZTvB,EAAe,CACjB2B,MAAO,KACPQ,KAAM,KACNC,MAAO,KACPC,gBAAiB,MA+DN/B,EA5DC,WAAmC,IAAlCrB,EAAiC,uDAAzBe,EAAcZ,EAAW,uCACxCkD,EAAWlD,EAAOkD,SAExB,OAAQlD,EAAOC,MACX,IPMyB,oBOLrB,OAAOQ,EAAaZ,EAAO,CACvB0C,MAAOW,EAASX,MAChBQ,KAAMG,EAASH,KACfC,MAAO,OAEf,IPCuB,kBOAnB,OAAOvC,EAAaZ,EAAO,CACvBqD,WACAF,MAAO,CAAEG,MAAOnD,EAAOgD,SAE/B,IPFwB,mBOQpB,cALOZ,EAAMO,SAASC,QAAQC,OAAOC,cAErCN,aAAaY,WAAW,SACxBZ,aAAaY,WAAW,kBACxBZ,aAAaY,WAAW,YACjB3C,EAAaZ,EAAO,CACvBqD,SAAU,KACVX,MAAO,KACPS,MAAO,KACPD,KAAM,OAEd,IPR6B,wBOSzB,OAAOtC,EAAaZ,EAAO,CACvBqD,aAER,IPX2B,sBOYvB,OAAOzC,EAAaZ,EAAO,CACvBmD,MAAO,CAAEK,aAAc,CAAEC,IAAKtD,EAAOgD,UAE7C,IPZmC,8BOa/B,OAAOvC,EAAaZ,EAAO,CACvB0D,sBAAuBL,IAE/B,IPfiC,4BOgB7B,OAAOzC,EAAaZ,EAAO,CACvBmD,MAAOhD,EAAOgD,QAEtB,IPhB6B,wBOiBzB,OAAOvC,EAAaZ,EAAO,CACvBqD,aAER,IPnB2B,sBOoBvB,OAAOzC,EAAaZ,EAAO,CACvBoD,gBAAiBjD,EAAOgD,QAEhC,IPnCsB,iBOoClB,OAAOvC,EAAaZ,EAAO,CACvBmD,MAAOhD,EAAOE,SAEtB,QACI,OAAOL,IChEbe,EAAe,CACjB4C,SAAS,EACTC,iBAAiB,EACjBC,iBAAiB,GAsBNxC,EAnBC,WAAmC,IAAlCrB,EAAiC,uDAAzBe,EAAcZ,EAAW,uCAC9C,OAAQA,EAAOC,MACX,IR8B6B,wBQ7BzB,OAAOQ,EAAaZ,EAAO,CACvB2D,QAASxD,EAAOE,SAExB,IR2BsC,iCQ1BlC,OAAOO,EAAaZ,EAAO,CACvB4D,gBAAiBzD,EAAOE,SAEhC,IRwBsC,iCQvBlC,OAAOO,EAAaZ,EAAO,CACvB6D,gBAAiB1D,EAAOE,SAEhC,QACI,OAAOL,ICrBbe,EAAe,CACjB+C,MAAO,GACPC,aAAc,GACdC,SAAU,GACVC,aAAc,GACdC,cAAe,GACfC,aAAc,GACdC,gBAAiB,EACjBC,gBAAiB,GACjBC,gBAAgB,GAChBC,2BAA4B,cAkIjBlD,EA/HC,WAAmC,IAAlCrB,EAAiC,uDAAzBe,EAAcZ,EAAW,uCAC9C,OAAQA,EAAOC,MACX,IT2B0B,qBS1BtB,OAAOQ,EAAaZ,EAAO,CACvB8D,MAAO3D,EAAOE,SAEtB,ITwB4B,uBSvBxB,OAAOO,EAAaZ,EAAO,CACvBqE,gBAAiBlE,EAAOE,SAEhC,ITqB4B,uBSpBxB,OAAOO,EAAaZ,EAAO,CACvBsE,gBAAiBnE,EAAOE,SAEhC,ITmBmC,8BSlB/B,OAAOO,EAAaZ,EAAO,CACvB+D,aAAc5D,EAAOE,SAE7B,ITc4B,uBSbxB,IACImE,EADEhE,EAAKL,EAAOE,OAAOG,GAEzB,GAAIA,EAAI,CACJ,IAAMiE,EAAQzE,EAAM8D,MAAMY,WAAU,SAAAC,GAChC,OAAOA,EAAKnE,KAAOA,KAEnBiE,EAAQ,EACRD,EAAUxE,EAAM8D,MAAMxC,OAAOnB,EAAOE,SAEpCL,EAAM8D,MAAMc,OAAOH,EAAO,EAAGtE,EAAOE,QACpCmE,EAAUxE,EAAM8D,YAGpBU,EAAUxE,EAAM8D,MAAMxC,OAAOnB,EAAOE,QAExC,OAAOO,EAAaZ,EAAO,CACvB8D,MAAOU,IAEf,ITDyB,oBSErB,OAAO5D,EAAaZ,EAAO,CACvBkE,cAAe,GACfD,aAAc,GACdE,aAAchE,EAAO0E,UAE7B,ITTyB,oBScrB,OAJAjE,EAAaZ,EAAO,CAChBiE,aAAc,GACdC,cAAe,KAEZtD,EAAaZ,EAAO,CACvBiE,aAAc9D,EAAOE,SAE7B,IThB0B,qBSiBtB,OAAOO,EAAaZ,EAAO,CACvBkE,cAAe/D,EAAOE,OACtB4D,aAAc,KAGtB,ITnByB,oBSoBrB,OAAOrD,EAAaZ,EAAO,CACvB8E,YAAa3E,EAAOE,SAE5B,IT+C6B,wBS9CzB,OAAOO,EAAaZ,EAAO,CACvBoE,gBAAiBjE,EAAOgB,QACxB4D,kBAAmB,KACnBd,aAAc,GACdC,cAAe,KAEvB,IT/BiC,4BSgC7B,IAAMO,EAAQzE,EAAM8D,MAAMY,WACtB,SAAAC,GAAI,OAAIA,EAAKnE,KAAOL,EAAOE,UAE/BL,EAAM8D,MAAMc,OAAOH,EAAO,GAC1B,IAAMO,EAAShF,EAAM8D,MACrB,OAAOlD,EAAaZ,EAAO,CACvB8D,MAAOkB,IAGf,IT+C+B,0BS9C3B,OAAOpE,EAAaZ,EAAO,CACvBoE,gBAAiB,KACjBW,kBAAmB5E,EAAOyB,UAC1BqC,aAAc,GACdC,cAAe,KAEvB,ITyC4B,uBSxCxB,OAAOtD,EAAaZ,EAAO,CACvBoE,gBAAiB,KACjBa,gBAAiB9E,EAAOE,OACxB0E,kBAAkB,GAAD,OAAI5E,EAAOE,OAAOJ,QAAQO,IAC3C0D,cAAe,GACfD,aAAc,KAEtB,ITkCyB,oBSjCrB,OAAOrD,EAAaZ,EAAO,CACvBoE,gBAAiB,KACjBW,kBAAmB,KACnBE,gBAAiB,GACjBf,cAAe,GACfD,aAAc,GACdiB,UAAW/E,EAAOE,SAE1B,IT0BgC,2BSzB5B,OAAOO,EAAaZ,EAAO,CACvBoE,gBAAiB,KACjBW,kBAAmB,KACnBI,mBAAoBhF,EAAOiF,WAC3BnB,aAAc,GACdC,cAAe,KAEvB,ITmBkC,6BSlB9B,OAAOtD,EAAaZ,EAAO,CACvBqF,qBAAsBlF,EAAOE,OAC7B+D,gBAAiB,KACjBa,gBAAiB,GACjBf,cAAe,GACfD,aAAc,KAEtB,ITY6B,wBSXzB,OAAOrD,EAAaZ,EAAO,CACvBuE,2BAA4BpE,EAAOE,SAE3C,QACI,OAAOL,ICjFJsF,EAzDM,WAMf,IALJtF,EAKG,uDALK,CACNuF,eAAgB,GAChBC,iBAAkB,IAEpBrF,EACG,uCACH,OAAQA,EAAOC,MACb,IV6DmC,0BU5DjC,OAAO,2BACFJ,GADL,IAEEuF,eAAe,YAAKpF,EAAOoF,kBAE/B,IVyDkC,yBUxDhC,OAAO,2BACFvF,GADL,IAEEwF,iBAAkB,GAClBD,eAAe,GAAD,mBAAMvF,EAAMuF,gBAAZ,CAA4BpF,EAAOsF,oBAErD,IVoDmC,0BUnDjC,OAAOzF,EACT,IVmDkC,yBUlDhC,IAAM0F,EAAM1F,EAAMuF,eAAehF,QAC/B,SAAAoF,GAAiB,OAAIA,EAAkBnF,KAAOL,EAAOsF,mBAEvD,OAAO,2BACFzF,GADL,IAEEwF,iBAAkBE,EAAI,KAE1B,IV4CqC,4BU3CnC,OAAO,2BACF1F,GADL,IAEEuF,eAAgBvF,EAAMuF,eAAehF,QACnC,SAAAoF,GAAiB,OAAIA,EAAkBnF,KAAOL,EAAOsF,qBAG3D,IVsCqC,4BUrCnC,IAAIG,EAAmB,YAAO5F,EAAMuF,gBAMpC,OALAK,EACEA,EAAoBlB,WAClB,SAAAmB,GAAS,OAAIA,EAAUrF,KAAOL,EAAOsF,gBAAgBjF,OAErDL,EAAOsF,gBACJ,2BACFzF,GADL,IAEEwF,iBAAkB,GAClBD,eAAe,YAAKK,KAExB,IV2BoC,2BU1BlC,OAAO,2BACF5F,GADL,IAEEwF,iBAAkB,KAEtB,QACE,OAAOxF,ICpDPe,EAAe,CACjB+E,SAAU,GACVC,QAAS,GACTC,iBAAkB,IAmEPF,EAhEE,WAAmC,IAAlC9F,EAAiC,uDAAzBe,EAAcZ,EAAW,uCAC/C,OAAQA,EAAOC,MACX,IXgGmB,cW/Ff,OAAOQ,EAAaZ,EAAO,CACvB8F,SAAU9F,EAAM8F,SAASxE,OAAOnB,EAAOE,QACvC0F,QAAS/F,EAAM+F,UAGvB,IX2FsB,iBWvFlB,OAHA/F,EAAM8F,SAAW9F,EAAM8F,SAASvF,QAC5B,SAAAwF,GAAO,OAAIA,EAAQvF,KAAOL,EAAOE,UAE9BO,EAAaZ,EAAO,CACvB8F,SAAU9F,EAAM8F,SAChBC,QAAS/F,EAAM+F,UAGvB,IXmFyB,mBWlFrB,OAAOnF,EAAaZ,EAAO,CACvB8F,SAAU3F,EAAOE,OACjB0F,QAAS/F,EAAM+F,UAGvB,IX2G6B,wBW1GzB,OAAOnF,EAAaZ,EAAO,CACvBgG,iBAAkB7F,EAAOE,SAGjC,IXyEsB,iBWxElB,IAAI0F,EAAU/F,EAAM8F,SAASvF,QACzB,SAAAwF,GAAO,OAAIA,EAAQvF,KAAOL,EAAOE,UACnC,GAIF,OAHK0F,IACDA,EAAU,CAAEvF,GAAI,OAEbI,EAAaZ,EAAO,CACvB8F,SAAU9F,EAAM8F,SAChBC,QAASA,IAGjB,IX8DsB,iBW7DlB,IAAME,EAAkB,GAOxB,OANAjG,EAAM8F,SAASpF,SAAQ,SAAAqF,GACfA,EAAQvF,KAAOL,EAAOE,OAAOG,KAC7BuF,EAAO,2BAAQA,GAAY5F,EAAOE,SAEtC4F,EAAgBtF,KAAKoF,MAElBnF,EAAaZ,EAAO,CACvB8F,SAAUG,EACVF,QAAS,KAGjB,IXkDqB,gBWjDjB,OAAO,2BACA/F,GADP,IAEI+F,QAAS,KAGjB,QACI,OAAO/F,IClEbe,EAAe,CACjBmF,OAAQ,GACRC,MAAO,GACPC,eAAgB,IAoELF,EAjEA,WAAmC,IAAlClG,EAAiC,uDAAzBe,EAAcZ,EAAW,uCAC7C,OAAQA,EAAOC,MACX,IZmEiB,YYlEb,OAAOQ,EAAaZ,EAAO,CACvBkG,OAAQlG,EAAMkG,OAAO5E,OAAOnB,EAAOE,QACnC8F,MAAOnG,EAAMmG,QAGrB,IZ8DoB,eY1DhB,OAHAnG,EAAMkG,OAASlG,EAAMkG,OAAO3F,QACxB,SAAA4F,GAAK,OAAIA,EAAM3F,KAAOL,EAAOE,UAE1BO,EAAaZ,EAAO,CACvBkG,OAAQlG,EAAMkG,OACdC,MAAOnG,EAAMmG,QAGrB,IZsDuB,kBYrDnB,OAAOvF,EAAaZ,EAAD,YAAC,eACbA,GADY,IAEfkG,OAAQ/F,EAAOE,UAEvB,IZ0G2B,sBYzGvB,OAAOO,EAAaZ,EAAD,YAAC,eACbA,GADY,IAEfoG,eAAgBjG,EAAOE,UAG/B,IZ4CoB,eY3ChB,IAAI8F,EAAQnG,EAAMkG,OAAO3F,QACrB,SAAA4F,GAAK,OAAIA,EAAM3F,KAAO6F,OAAOlG,EAAOE,WACtC,GAKF,OAHK8F,IACDA,EAAQ,CAAE3F,GAAI,OAEXI,EAAaZ,EAAO,CACvBkG,OAAQlG,EAAMkG,OACdC,MAAOA,IAGf,IZgCoB,eY/BhB,IAAMG,EAAgB,GAOtB,OANAtG,EAAMkG,OAAOxF,SAAQ,SAAAyF,GACbA,EAAM3F,KAAOL,EAAOE,OAAOG,KAC3B2F,EAAK,2BAAQA,GAAUhG,EAAOE,SAElCiG,EAAc3F,KAAKwF,MAEhBvF,EAAaZ,EAAO,CACvBkG,OAAQI,EACRH,MAAO,KAGf,IZoBmB,cYnBf,OAAO,2BACAnG,GADP,IAEImG,MAAO,KAGf,QACI,OAAOnG,ICrEnB,SAASN,EAAQC,EAAGC,GAChB,IAAIC,EAAa,EAMjB,OALIF,EAAE4G,KAAO3G,EAAE2G,KACX1G,EAAa,EACNF,EAAE4G,KAAO3G,EAAE2G,OAClB1G,GAAc,GAEXA,EAEX,IAiEe2G,EAjED,WAOR,IANFxG,EAMC,uDANO,CACJwG,MAAO,GACPC,QAAS,GACTC,cAAe,IAEnBvG,EACC,uCACD,OAAQA,EAAOC,MACX,IbyEgB,WaxEZ,OAAO,2BACAJ,GADP,IAEIyG,QAAS,GACTD,MAAO,sBAAIxG,EAAMwG,OAAV,CAAiBrG,EAAOE,SAAQC,KAAKZ,KAEpD,IboEmB,canEf,OAAO,2BACAM,GADP,IAEIyG,QAAS,GACTD,MAAM,YACCxG,EAAMwG,MAAMjG,QAAO,SAAAiG,GAAK,OAAIA,EAAMhG,KAAOL,EAAOE,aAI/D,Ib4D0B,qBa3DtB,OAAO,2BACAL,GADP,IAEIwG,MAAM,YAAKrG,EAAOE,UAE1B,IbgG0B,qBa/FtB,OAAO,2BACAL,GADP,IAEI0G,cAAc,YAAKvG,EAAOE,UAElC,IbmDuB,kBalDnB,IAAMqF,EAAM1F,EAAMwG,MAAMjG,QACpB,SAAAoG,GAAQ,OAAIA,EAASnG,KAAOL,EAAOE,UAEvC,OAAO,2BACAL,GADP,IAEIyG,QAASf,EAAI,KAErB,Ib4CuB,kBa3CnB,IAAIkB,EAAS,YAAO5G,EAAMwG,OAM1B,OALAI,EACIA,EAAUlC,WACN,SAAAiC,GAAQ,OAAIA,EAASnG,KAAOL,EAAOE,OAAOG,OAE9CL,EAAOE,OACJ,2BACAL,GADP,IAEIyG,QAAS,GACTD,MAAM,YAAKI,KAEnB,IbiCsB,iBahClB,OAAO,2BACA5G,GADP,IAEIyG,QAAS,KAGjB,QACI,OAAOzG,ICbJ6G,EAtDG,WAMZ,IALF7G,EAKC,uDALO,CACJ6G,UAAW,GACXC,QAAS,IAEb3G,EACC,uCACD,OAAQA,EAAOC,MACX,IduFqB,gBctFjB,OAAO,2BACAJ,GADP,IAEI6G,UAAU,GAAD,mBAAM7G,EAAM6G,WAAZ,CAAuB1G,EAAOE,WAG/C,IdgF0B,qBc/EtB,OAAO,2BACAL,GADP,IAEI6G,UAAU,YAAK1G,EAAOE,UAE9B,Id6EmB,cc5Ef,OAAO,2BACAL,GADP,IAEI6G,UAAU,YACH7G,EAAM6G,UAAUtG,QACf,SAAAsG,GAAS,OAAIA,EAAUrG,KAAOL,EAAOE,aAKjD,IdqEmB,kBcpEf,IAAI0G,EAAe,YAAO/G,EAAM6G,WAMhC,OALAE,EACIA,EAAgBrC,WACZ,SAAAsC,GAAQ,OAAIA,EAASxG,KAAOL,EAAOE,OAAOG,OAE9CL,EAAOE,OACJ,2BACAL,GADP,IAEI8G,QAAS,GACTD,UAAU,YAAKE,KAEnB,IdwDgB,mBcvDZ,IAAMrB,EAAM1F,EAAM6G,UAAUtG,QACxB,SAAA0G,GAAY,OAAIA,EAAazG,KAAOL,EAAOE,UAE/C,OAAO,2BACAL,GADP,IAEI8G,QAASpB,EAAI,KAE7B,QACI,OAAO1F,ICXJkH,EAzCM,WAOf,IANFlH,EAMC,uDANO,CACJmH,OAAQ,GACRC,KAAM,GACNC,SAAU,IAEdlH,EACC,uCACD,OAAQA,EAAOC,MACX,IfqDmB,cepDf,IAAIgH,EAAOpH,EAAMmH,OAAO,GAAGG,MACvB,SAAAF,GAAI,OAAIA,EAAKG,cAAgBpH,EAAOE,UAMxC,OAHK+G,IACDA,EAAO,CAAEG,YAAa,OAEnB,2BACAvH,GADP,IAEImH,OAAQnH,EAAMmH,OACdC,KAAMA,IAGd,IfwCqB,gBevCjB,OAAO,2BACApH,GADP,IAEImH,OAAQ,CAAChH,EAAOE,QAChB+G,KAAM,KAEd,IfmC6B,wBelCzB,OAAO,2BACApH,GADP,IAEIoH,KAAM,GACNC,SAAUlH,EAAOE,SAGzB,QACI,OAAOL,ICnBJwH,EAlBG,WAKZ,IAJFxH,EAIC,uDAJO,CACJwH,UAAW,IAEfrH,EACC,uCACD,OAAQA,EAAOC,MACX,IhB2D2B,sBgB1DvB,OAAO,2BACAJ,GADP,IAEIwH,UAAW,CAACrH,EAAOE,UAG3B,QACI,OAAOL,ICbbe,EAAe,CACjBmE,UAAW,GACXuC,SAAU,GACVC,kBAAmB,GACnBC,kBAAmB,IAwFRzC,EArFG,WAAmC,IAAlClF,EAAiC,uDAAzBe,EAAcZ,EAAW,uCAChD,OAAQA,EAAOC,MACX,IjBkHoB,eiBjHhB,OAAOQ,EAAaZ,EAAO,CACvBkF,UAAWlF,EAAMkF,UAAU5D,OAAOnB,EAAOE,QACzCoH,SAAUzH,EAAMyH,WAGxB,IjB6GuB,kBiBzGnB,OAHAzH,EAAMkF,UAAYlF,EAAMkF,UAAU3E,QAC9B,SAAAkH,GAAQ,OAAIA,EAASjH,KAAOL,EAAOE,UAEhCO,EAAaZ,EAAO,CACvBkF,UAAWlF,EAAMkF,UACjBuC,SAAUzH,EAAMyH,WAGxB,IjBqG0B,oBiBpGtB,OAAO7G,EAAaZ,EAAO,CACvBkF,UAAW/E,EAAOE,OAClBoH,SAAUzH,EAAMyH,WAExB,IjB0G8B,yBiBzG1B,OAAO7G,EAAaZ,EAAO,CACvB0H,kBAAmBvH,EAAOE,SAElC,IjBiG8B,yBiBhG1B,OAAOO,EAAaZ,EAAO,CACvB2H,kBAAmBxH,EAAOE,SAGlC,IjBwFuB,kBiBvFnB,IAAIoH,EAAWzH,EAAMkF,UAAU3E,QAC3B,SAAAkH,GAAQ,OAAIA,EAASjH,KAAOL,EAAOE,UACrC,GAIF,OAHKoH,IACDA,EAAW,CAAEjH,GAAI,OAEdI,EAAaZ,EAAO,CACvBkF,UAAWlF,EAAMkF,UACjBuC,SAAUA,IAGlB,IjB6EuB,kBiB5EnB,IAAMG,EAAmB,GAOzB,OANA5H,EAAMkF,UAAUxE,SAAQ,SAAA+G,GAChBA,EAASjH,KAAOL,EAAOE,OAAOG,KAC9BiH,EAAQ,2BAAQA,GAAatH,EAAOE,SAExCuH,EAAiBjH,KAAK8G,MAEnB7G,EAAaZ,EAAO,CACvBkF,UAAW0C,EACXH,SAAU,KAGlB,IjBiFgC,2BiBhF5B,IAAMI,EAAmB7H,EAAMkF,UAAUoC,MACrC,SAAAG,GAAQ,OAAIA,EAASjH,KAAOL,EAAOE,UAKvC,OAHAL,EAAMkF,UAAYlF,EAAMkF,UAAU3E,QAC9B,SAAAkH,GAAQ,OAAIA,EAASjH,KAAOL,EAAOE,UAEhCO,EAAaZ,EAAO,CACvBkF,UAAWlF,EAAMkF,UACjByC,kBAAkB,GAAD,mBACV3H,EAAM2H,mBADI,CAEbE,MAGZ,IjBmDsB,iBiBlDlB,OAAO,2BACA7H,GADP,IAEIyH,SAAU,KAElB,IjB+CiB,YiB9Cb,OAAO7G,EAAaZ,EAAO,CACvBoB,YAAajB,EAAOE,SAG5B,QACI,OAAOL,ICxFbe,EAAe,CACjB+G,MAAO,GACPC,KAAM,IAkBK1G,EAfC,WAAmC,IAAlCrB,EAAiC,uDAAzBe,EAAcZ,EAAW,uCAC9C,OAAQA,EAAOC,MACX,IlBOiB,YkBNb,OAAOQ,EAAaZ,EAAO,CACvB8H,MAAO3H,EAAOE,SAEtB,IlBIgB,WkBHZ,OAAOO,EAAaZ,EAAO,CACvB+H,KAAM5H,EAAOE,SAErB,QACI,OAAOL,ICOJgI,EAvBG,WAMZ,IALFhI,EAKC,uDALO,CACJgI,UAAY,GACZC,SAAW,IAEf9H,EACC,uCACD,OAAOA,EAAOC,MACV,InB6FuB,kBmB5FnB,OAAO,2BACAJ,GADP,IAEIgI,UAAW7H,EAAOE,SAE1B,InByFuB,kBmBxFnB,OAAO,2BACAL,GADP,IAEIiI,SAAU,KAElB,QACI,OAAOjI,ICnBbe,EAAe,CACjBmH,YAAa,GACbC,WAAY,GACZC,oBAAqB,IAuGVF,EApGK,WAAmC,IAAlClI,EAAiC,uDAAzBe,EAAcZ,EAAW,uCAClD,OAAQA,EAAOC,MACX,IpBuGoB,iBoBtGhB,OAAOQ,EAAaZ,EAAO,CACvBkI,YAAalI,EAAMkI,YAAY5G,OAAOnB,EAAOE,QAC7C8H,WAAYnI,EAAMmI,aAE1B,IpBmGyB,sBoBlGrB,IAAID,EAAc/H,EAAOE,OAAOE,QAC5B,SAAA4H,GAAU,OAA0B,IAAtBA,EAAWE,WAEzBD,EAAsBjI,EAAOE,OAAOE,QACpC,SAAA4H,GAAU,OAA0B,IAAtBA,EAAWE,WAE7B,OAAOzH,EAAaZ,EAAO,CACvBkI,YAAaA,EACbC,WAAYnI,EAAMmI,WAClBC,oBAAqBA,IAE7B,IpBwF2B,wBoBvFvB,OAAO,2BACApI,GADP,IAEImI,WAAY,KAEpB,IpBoFuB,oBoB7EnB,OANAnI,EAAMkI,YAAclI,EAAMkI,YAAY3H,QAClC,SAAA4H,GAAU,OAAIA,EAAW3H,KAAOL,EAAOE,OAAOG,MAElDR,EAAMoI,oBAAsBpI,EAAMoI,oBAAoB7H,QAClD,SAAA4H,GAAU,OAAIA,EAAW3H,KAAOL,EAAOE,OAAOG,MAE3CI,EAAaZ,EAAO,CACvBkI,YAAalI,EAAMkI,YACnBC,WAAYnI,EAAMmI,WAClBC,oBAAqBpI,EAAMoI,sBAEnC,IpByE8B,2BoBxE1B,OAAOxH,EAAaZ,EAAO,CACvBkI,YAAalI,EAAMkI,YACnBC,WAAYnI,EAAMmI,WAClBC,oBAAqBjI,EAAOE,SAEpC,IpBoE6B,0BoB/DzB,OAJAL,EAAMkI,YAAclI,EAAMkI,YAAY3H,QAClC,SAAA4H,GAAU,OAAIA,EAAW3H,KAAOL,EAAOE,OAAOG,MAElDR,EAAMoI,oBAAoBzH,KAAKR,EAAOE,QAC/BO,EAAaZ,EAAO,CACvBkI,YAAalI,EAAMkI,YACnBC,WAAYnI,EAAMmI,WAClBC,oBAAqBpI,EAAMoI,sBAEnC,IpB2D4B,yBoBtDxB,OAJApI,EAAMoI,oBAAsBpI,EAAMoI,oBAAoB7H,QAClD,SAAA4H,GAAU,OAAIA,EAAW3H,KAAOL,EAAOE,OAAOG,MAElDR,EAAMkI,YAAYvH,KAAKR,EAAOE,QACvBO,EAAaZ,EAAO,CACvBkI,YAAalI,EAAMkI,YACnBC,WAAYnI,EAAMmI,WAClBC,oBAAqBpI,EAAMoI,sBAEnC,IpBkD0B,uBoBjDtB,IAAID,EAAanI,EAAMkI,YAAY3H,QAC/B,SAAA4H,GAAU,OAAIA,EAAW3H,KAAOL,EAAOE,UACzC,GAIF,OAHK8H,IACDA,EAAa,CAAE3H,GAAI,OAEhBI,EAAaZ,EAAO,CACvBkI,YAAalI,EAAMkI,YACnBC,WAAYA,IAEpB,IpBwCuB,oBoBvCnB,IAAIG,EAAqB,GACzBtI,EAAMkI,YAAYxH,SAAQ,SAAAyH,GAClBA,EAAW3H,KAAOL,EAAOE,OAAOG,KAChC2H,EAAU,2BAAQA,GAAehI,EAAOE,SAE5CiI,EAAmB3H,KAAKwH,MAE5B,IAAII,EAA4B,GAQhC,OAPAvI,EAAMoI,oBAAoB1H,SAAQ,SAAAyH,GAC1BA,EAAW3H,KAAOL,EAAOE,OAAOG,KAChC2H,EAAU,2BAAQA,GAAehI,EAAOE,SAE5CkI,EAA0B5H,KAAKwH,MAG5BvH,EAAaZ,EAAO,CACvBkI,YAAYI,EACZF,oBAAoBG,EACpBJ,WAAY,KAGpB,QACI,OAAOnI,ICtGbe,EAAe,CACjByH,SAAU,GACVC,QAAS,IAyDED,EAtDE,WAAmC,IAAlCxI,EAAiC,uDAAzBe,EAAcZ,EAAW,uCAC/C,OAAQA,EAAOC,MACX,IrB2EiB,cqB1Eb,OAAOQ,EAAaZ,EAAO,CACvBwI,SAAUxI,EAAMwI,SAASlH,OAAOnB,EAAOE,QACvCoI,QAASzI,EAAMyI,UAEvB,IrBuEmC,gCqBlEnC,IrBmEuB,oBqBlEnB,OAAO7H,EAAaZ,EAAD,YAAC,eACbA,GADY,IAEfwI,SAAUrI,EAAOE,UAEzB,IrB+DoB,iBqB3DhB,OAHAL,EAAMwI,SAAWxI,EAAMwI,SAASjI,QAC5B,SAAAkI,GAAO,OAAIA,EAAQjI,KAAOL,EAAOE,UAE9BO,EAAaZ,EAAO,CACvBwI,SAAUxI,EAAMwI,SAChBC,QAASzI,EAAMyI,UAEvB,IrBwDiB,cqBvDb,IAAIA,EAAUzI,EAAMwI,SAASjI,QACzB,SAAAkI,GAAO,OAAIA,EAAQjI,KAAO6F,OAAOlG,EAAOE,WAC1C,GAKF,OAHKoI,IACDA,EAAU,CAAEjI,GAAI,OAEbI,EAAaZ,EAAO,CACvBwI,SAAUxI,EAAMwI,SAChBC,QAASA,IAEjB,IrB6CoB,iBqB5ChB,IAAMC,EAAkB,GAOxB,OANA1I,EAAMwI,SAAS9H,SAAQ,SAAA+H,GACfA,EAAQjI,KAAOL,EAAOE,OAAOG,KAC7BiI,EAAO,2BAAQA,GAAYtI,EAAOE,SAEtCqI,EAAgB/H,KAAK8H,MAElB7H,EAAaZ,EAAO,CACvBwI,SAAUE,EACVD,QAAS,KAEjB,QACI,OAAOzI,ICXJ2I,EAxBKC,YAAgB,CAChC1H,SACAO,oBACAoH,OACAC,WACAC,WACAjB,QACAkB,mBACA1D,eACAvF,WACA+F,WACAI,SACAM,QACAK,YACAK,eACAM,YACAtC,YACA8C,YACAE,cACAM,WAEAS,KAAMC,M,2BClCGC,GAAkB,SAAAC,GAC3B,OACIA,EAAQ/I,OAAOgJ,eAAe,aACF,WAA5BD,EAAQ/I,OAAOiJ,SAEE,CAAEC,KAAM,CAAE7G,MAAO0G,EAAQ/I,OAAOqC,MAAO8G,MAAO,KAG5DjH,EAAMkH,KCdQ,eDcQL,EAAQ/I,QAAQqJ,MAAK,SAAArG,GAC9C,OAAOA,MAIFsG,GAAsB,SAAAP,GAC/B,OAAO7G,EAAMkH,KCjBe,eDiBQL,EAAQ/I,QAAQqJ,MAAK,SAAArG,GACrD,OAAOA,MAIFuG,GAA2B,SAAAR,GACpC,OAAO7G,EACFsH,IADE,UCtBuB,sBDsBvB,kBAEgCT,EAAQ/I,OAAOmJ,OAC9CJ,EAAQ/I,QAEXqJ,MAAK,SAAArG,GACF,OAAOA,MAINyG,GAAsB,SAAAV,GAC/B,OAAO7G,EACFsH,IADE,UChCyB,0BDgCzB,kBACmCT,EAAQ/I,SAC7CqJ,MAAK,SAAArG,GAAQ,OAAIA,MAGb0G,GAAoB,WAC7B,OAAOxH,EAAMkH,KCzCS,iBDyCQC,MAAK,SAAArG,GAAQ,OAAIA,M,uCEzC/C2G,IAAYC,UAAUC,UAAYD,UAAUE,cAAcC,MAAM,EAAG,GAC1DC,GAFQ,CAAC,KAAM,MAEO/C,MAAK,SAAAgD,GAAC,OAAIA,IAAMN,OAAa,KAEhEO,KAAKC,IAAIC,MACJD,IAAIE,MACJF,IAAIG,MACJC,KAAK,CACFC,IAAKR,GACLS,QAAS,CACLC,SAAU,iDAEdC,YAAa,KACbC,OAAO,EACPC,GAAI,CAAC,eAAgB,qBAAsB,SAAU,mBACrDC,UAAW,SACXC,cAAc,EACdC,oBAAoB,EACpBC,cAAe,CACXC,aAAa,EACbC,gBAAiB,KAErBC,MAAO,CACHC,MAAM,KAIHnB,UAAf,E,aCtBiBoB,IAAV,SAAUA,GAASC,GAAnB,kFAEkB,OAFlB,kBAEwBC,aAAK1C,GAAiByC,GAF9C,OAYC,OAVMvI,EAFP,OAIOyI,EAAYC,EAAQ,KACpBrJ,EAAQW,EAASkG,KAAK7G,MACtB8G,EAAQnG,EAASkG,KAAKC,MACtBwC,EAAaF,EAAUpJ,GACvBuJ,EAAiB,IAAIC,KAAsB,IAAjBF,EAAWG,KAE3C5J,EAAMO,SAASC,QAAQC,OAAOC,cpBpBZ,UoBoB0CP,EAV7D,UAYOC,aAAayJ,QAAQ,QpBtBT,UoBsBgC1J,GAZnD,QAaC,OAbD,UAaOC,aAAayJ,QAAQ,iBAAkBH,GAb9C,QAcC,OAdD,UAcOtJ,aAAayJ,QAAQ,WAAYJ,EAAWK,OAdnD,QAeC,OAfD,UAeO1J,aAAayJ,QAAQ,QAAS5C,GAAgBwC,EAAWM,KAfhE,QAiBC,OAjBD,UAiBOzC,aAAI,CACNzJ,K1BPqB,oB0BQrBiD,SAAU,CAAEX,QAAOQ,KAAM8I,EAAWK,MAAO7C,WAnBhD,QAsBC,OAtBD,UAsBOK,aAAI,CAAEzJ,K1BSiB,wB0BTwBC,QAAQ,IAtB9D,QAwBC,OAxBD,UAwBOwJ,aAAI,CACNzJ,K1BVyB,wB0BWzBmM,eAAiC,IAAjBP,EAAWG,KAAa,IAAID,MAAOM,YA1BxD,gCA6BC,OA7BD,oCA6BO3C,aAAI,CACNzJ,K1BlBmB,kB0BmBnB+C,MAAO,KAAME,SACP,KAAMA,SAASkG,KAAKvH,QACpBuI,GAAKkC,EAAE,0BAjClB,QAmCC,OAnCD,UAmCO5C,aAAI,CAAEzJ,K1BJiB,wB0BIwBC,QAAQ,IAnC9D,uD,iBCHUqM,IAAV,SAAUA,GAAWd,GAArB,kEAEC,OAFD,kBAEOC,aAAK9B,GAAmB6B,GAF/B,OAGC,OAHD,SAGO/B,aAAI,CACNzJ,K3BaoB,qB2BjBzB,8BAOC,OAPD,mCAOOyJ,aAAI,CACNzJ,K3BOmB,kB2BNnB+C,MAAO,KAAME,SACP,KAAMA,SAASkG,KAAKvH,QACpBuI,GAAKkC,EAAE,0BAXlB,sD,iBCHUE,IAAV,SAAUA,GAAqBxM,GAA/B,kEACH,OADG,SACGyM,aAAMzM,EAAOoM,gBADhB,OAEH,OAFG,SAEGV,aAAKa,IAFR,wC,iBCAUG,IAAV,SAAUA,GAAmBjB,GAA7B,qEACEA,EAAQlJ,MADV,gBAEC,OAFD,SAEOmH,aAAI,CAAEzJ,K7BkBY,qB6BpBzB,mCAIwB,IAAI8L,KAAKvJ,aAAaC,QAAQ,oBAC/B,IAAIsJ,MAL3B,iBAMK,OANL,SAMWrC,aAAI,CAAEzJ,K7BcQ,qB6BpBzB,+BAQK,OARL,UAQWyJ,aAAI,CACNzJ,K7BQiB,oB6BPjBiD,SAAU,CACNX,MAAOkJ,EAAQlJ,MACfQ,KAAM0I,EAAQ1I,QAZ3B,yC,iBCGU4J,IAAV,SAAUA,GAAiBlB,GAA3B,wEAEkB,OAFlB,kBAEwBC,aAAKlC,GAAqBiC,GAFlD,OAGC,OADMvI,EAFP,gBAGOwG,aAAI,CAAEzJ,K9BoBiB,wB8BpBwBiD,aAHtD,OAIC,OAJD,SAIOwG,aAAI,CAAEzJ,K9B8BiB,wB8B9BwBC,QAAQ,IAJ9D,+BAMC,OAND,oCAMOwJ,aAAI,CACNzJ,K9BiBuB,sB8BhBvB+C,MAAO,KAAME,SACP,KAAMA,SAASkG,KAAKvH,QACpBuI,GAAKkC,EAAE,0BAVlB,QAYC,OAZD,UAYO5C,aAAI,CAAEzJ,K9BsBiB,wB8BtBwBC,QAAQ,IAZ9D,uD,iBCAU0M,IAAV,SAAUA,GAAiBnB,GAA3B,wEAEkB,OAFlB,kBAEwBC,aAAK/B,GAAqB8B,GAFlD,OAGC,OADMvI,EAFP,gBAGOwG,aAAI,CAAEzJ,K/B4BiB,wB+B5BwBiD,aAHtD,OAIC,OAJD,SAIOwG,aAAI,CAAEzJ,K/B8BiB,wB+B9BwBC,QAAQ,IAJ9D,+BAMC,OAND,oCAMOwJ,aAAI,CACNzJ,K/ByBuB,sB+BxBvB+C,MAAO,KAAME,SACP,KAAMA,SAASkG,KAAKvH,QACpBuI,GAAKkC,EAAE,0BAVlB,QAYC,OAZD,UAYO5C,aAAI,CAAEzJ,K/BsBiB,wB+BtBwBC,QAAQ,IAZ9D,uD,iBCAU2M,IAAV,SAAUA,GAAsBpB,GAAhC,wEAEkB,OAFlB,kBAEwBC,aAAKjC,GAA0BgC,GAFvD,OAGC,OADMvI,EAFP,gBAGOwG,aAAI,CAAEzJ,KhCwBuB,8BgCxBwBiD,aAH5D,OAIC,OAJD,SAIOwG,aAAI,CAAEzJ,KhC8BiB,wBgC9BwBC,QAAQ,IAJ9D,+BAMC,OAND,oCAMOwJ,aAAI,CACNzJ,KhCqB6B,4BgCpB7B+C,MAAO,KAAME,SACP,KAAMA,SAASkG,KAAKvH,QACpBuI,GAAKkC,EAAE,0BAVlB,QAYC,OAZD,UAYO5C,aAAI,CAAEzJ,KhCsBiB,wBgCtBwBC,QAAQ,IAZ9D,uD,iBCKkB4M,IAAV,SAAUA,KAAV,kEACX,OADW,SACLC,ajCgBmB,gBiChBmBJ,IADjC,OAEX,OAFW,SAELI,ajCuBmB,gBiCvBmBH,IAFjC,OAGX,OAHW,SAGLG,ajCkByB,sBiClBmBF,IAHvC,OAIX,OAJW,SAILE,ajCIe,YiCJmBvB,IAJ7B,OAKX,OALW,UAKLwB,ajCS2B,wBiCTkBN,IALxC,QAMX,OANW,UAMLM,ajCO2B,wBiCPkBR,IANxC,QAOX,OAPW,UAOLO,ajCI+B,4BiCJmBR,IAP7C,yC,iBCTUU,IAAV,SAAUA,KAAV,kEACb,OADa,SACPC,aAAKJ,IADE,wC,ICkBGK,GAOAC,G,sHC5BLC,I,OAAQ,CACjBC,UAAW,IACXC,WAAY,SACZC,cAAe,aACfC,MAAO,SACPC,gBAAiB,mBACjBC,OAAQ,UACRC,OAAQ,UACRC,iBAAkB,oBAClBC,WAAY,cACZC,WAAY,WACZC,YAAa,YACbC,UAAW,UACXC,MAAM,SACNC,QAAQ,WACRC,KAAK,QACLC,OAAO,UACPC,WAAW,eACXC,WAAW,eACXC,aAAa,iBACbC,QAAQ,OACRC,eAAe,cACfC,mBAAoB,SACpBC,SAAU,SACVC,YAAa,YACbC,UAAW,cACXC,aAAc,aACdC,cAAe,SACfC,QAAS,WACTC,YAAY,YACZC,aAAa,gBACbC,eAAe,kBACfC,YAAY,iB,8BCmCDC,I,OA5DU,SAAAC,GACrB,IAAQnF,EAASoF,eAATpF,KAaJqF,EAAmB,GACvBrF,EAAKsF,UAAUnP,SAAQ,SAAA2J,GACnBuF,EAAiBvF,GAAQ,mBAE7BuF,EAAiBrF,EAAKL,WAAa,kBAEnC,IAAM4F,EAAiB,SAAAC,GACnBH,EAAiBrF,EAAKL,UAAY,gBAClC0F,EAAiBG,EAAMC,OAAOC,QAAU,kBACxC1F,EAAKuF,eAAeC,EAAMC,OAAOC,QAwBrC,OACI,kBAACC,GAAA,EAAD,CACIC,KAAG,EACHC,aAAW,OACX7J,KAAK,OACL0J,MAAO1F,EAAKL,SACZmG,UAAU,iBAnDA,CACd,CACIhG,KAAM,KACNiG,IAAK,sDACLC,MAAO,WAEX,CACIlG,KAAM,KACNiG,IAAK,sDACLC,MAAO,iEA4CIC,KAAI,SAAAC,GAAQ,OA9BJ,SAAAA,GAAQ,OAC/B,kBAACC,GAAA,EAAD,CACIC,IAAKF,EAASpG,KACduG,QACI,oCACI,kBAACC,GAAA,EAAD,CACIC,MAAM,UACNb,MAAOQ,EAASpG,KAChB0G,SAAUjB,IAEd,yBACIO,UAAU,gBACVW,IAAKP,EAASH,IACdW,IAAKR,EAASpG,KACdkG,MAAOE,EAASF,SAI5BF,UAAWT,EAAiBa,EAASpG,QAYV6G,CAAmBT,SC9D7CU,GACI,UADJA,GAED,UAFCA,GAGF,UAHEA,GAIA,OAJAA,GAKD,UCHCC,GAAkB,SAAAC,GAC7B,MAAO,CACLjR,KvCW6B,oBuCV7BC,OAAQgR,ICGCC,GAAU,SAAAD,GACnB,MAAO,CACHjR,KxCQgB,WwCPhBC,OAAQgR,ICTHE,GAAa,SAAAF,GACtB,MAAO,CACHjR,KzCqC6B,wByCpC7BC,OAAQgR,ICIHG,GAAqB,SAAAH,GAC9B,MAAO,CACHjR,K1CmC4B,uB0ClC5BC,OAAQgR,IAGHI,GAAqB,SAAAJ,GAC9B,MAAO,CACHjR,K1C8B4B,uB0C7B5BC,OAAQgR,IAWHK,GAA4B,SAAAL,GACrC,MAAO,CACHjR,K1CkBmC,8B0CjBnCC,OAAQgR,IAIHM,GAAkB,SAAAtR,GAC3B,MAAO,CACHD,K1CYyB,oB0CXzBC,OAAQA,IAuBHuR,GAAkB,SAAAvR,GAC3B,MAAO,CACHD,K1CZyB,oB0CazByE,QAASxE,ICxDJwR,GAAa,SAAA5R,GACtB,MAAO,CACHG,K3C+CmB,c2C9CnBC,OAAQJ,IAIH6R,GAAgB,SAAAtR,GACzB,MAAO,CACHJ,K3C0CsB,iB2CzCtBC,OAAQG,IAkBHuR,GAAkB,SAAAhS,GAC3B,MAAO,CACHK,K3CsBgB,W2CrBhBC,OAAQN,ICxBHiS,GAAgB,SAAAzI,GACzB,MAAO,CACHnJ,K5C+CqB,gB4C9CrBC,OAAQkJ,ICjBH0I,GAAuB,SAAA1M,GAAc,MAAK,CACrDnF,K7CmEqC,0B6ClErCmF,mBCFW2M,GAAgB,SAAAb,GACzB,MAAO,CACHjR,K9C4EuB,kB8C3EvBC,OAAQgR,ICwCHc,GAAiB,SAAAd,GAC1B,MAAO,CACHjR,K/CmFuB,kB+ClFvBC,OAAQgR,IC5CHe,GAA4B,SAACnQ,EAAQ7B,EAAM4B,GACpDqQ,GAAMC,SACFlB,GAAgB,CACZnP,OAAQA,EACR7B,KAAMA,EACN4B,QAASA,MAKRuQ,GAA6B,WACtC,IAAMC,EAAgBH,GAAMI,WAAW3J,SACvCuJ,GAAMC,SACFlB,GAAgB,CACZnP,QAAQ,EACR7B,KAAMoS,EAAczQ,aACpBC,QAAS,SCpBR0Q,GACF,QADEA,GAGH,OAHGA,GAIA,UCAAC,GAAe,SAAAxP,GACxBiP,IACI,EACAM,GACAvP,EAAME,SACAkH,GAAKkC,EAAEtJ,EAAME,SAASkG,KAAKvH,QAASmB,EAAME,SAASkG,KAAKvH,SACxD,UAID4Q,GAAiB,SAAA5Q,GAC1BoQ,IAA0B,EAAMM,GAAuB1Q,I,SCZ9C6Q,GAAmB,SAAAC,GAC5BT,GAAMC,SAASS,aAAMD,KCYrBE,GAAkB,GAmDTC,GAA4B,WACrC1Q,EACK2Q,I5BnB4B,4B4BoB5BxJ,MAAK,SAAArG,GACFgP,GAAMC,SR7DP,CACHlS,K5CuD6B,wB4CtD7BC,OQ2DsCgD,EAASkG,OAC3C8I,GAAMC,SAASN,GAAc3O,EAASkG,KAAK,GAAG4J,oBAC9CH,GAAkB,CAAExS,GAAI6C,EAASkG,KAAK,GAAGtJ,QAAQO,OAEpD4S,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,O,oBCnExBkQ,I,OAAoB,SAAAC,GAC7BjB,GAAMC,SAASf,GAAW+B,MAGjBC,GAA4B,SAAAD,GACrCjB,GAAMC,SZHC,CACHlS,KzC+BsC,iCyC9BtCC,OYC8BiT,KAGzBE,GAA4B,SAAAF,GACrCjB,GAAMC,SZAC,CACHlS,KzCyBsC,iCyCxBtCC,OYF8BiT,KC4CzBG,GAA4B,WACrClR,EACK2Q,I9BzC2B,qB8B0C3BxJ,MAAK,SAAArG,GACFmQ,IAA0B,GAC1BnB,GAAMC,SAASd,GAAmBnO,EAASkG,UAE9C6J,OAAM,SAAAM,GACHtB,IACI,EACAM,GACAnI,GAAKkC,EAAE,qCAEX+G,IAA0B,OAGzBG,GAA4B,WACrCpR,EACK2Q,I9BxD2B,qB8ByD3BxJ,MAAK,SAAArG,GACFmQ,IAA0B,GAC1BnB,GAAMC,SAASb,GAAmBpO,EAASkG,UAE9C6J,OAAM,SAAAM,GACHtB,IACI,EACAM,GACAnI,GAAKkC,EAAE,qCAEX+G,IAA0B,OAQzBI,GAA0B,WACnCrR,EACK2Q,I9B9E2B,qB8B+E3BxJ,MAAK,SAAArG,GC7Fe,IAAA+B,ED8FjBiN,GAAMC,SAASd,GAAmBnO,EAASkG,OAC3CsK,GAAkCxQ,EAASkG,KAAK/I,IC/F/B4E,EDgGH/B,EAASkG,KAAK/I,GC/FpC+B,EACK2Q,IAAIY,mCAA8B1O,GAClCsE,MAAK,SAAArG,GACFgP,GAAMC,SCTP,CACHlS,KxDgE2B,sBwD/D3BC,ODOoCgD,EAASkG,UAE5C6J,OAAM,SAAAjQ,GACHwP,GAAaxP,SD2FhBiQ,OAAM,SAAAM,GACHtB,IACI,EACAM,GACAnI,GAAKkC,EAAE,qCAEX4G,IAAkB,OAIxBQ,GAAoC,SAAAzO,GACtC7C,EACK2Q,IADL,U9BjGuC,qB8BiGvC,uBACsD9N,IACjDsE,MAAK,SAAArG,GACFgP,GAAMC,SZrHP,CACHlS,K1CyC0B,qB0CxC1BC,OYmHoCgD,EAASkG,OACzCgK,IAA0B,MAE7BH,OAAM,SAAAM,GACHf,GAAae,GACbL,IAAkB,OAoFjBU,GAAgC,SAAAC,GACzCzR,EACK0R,OADL,U9B7L8B,Y8B6L9B,YACqCD,IAChCtK,MAAK,SAAArG,GACFgP,GAAMC,SZ7JP,CACHlS,K1CJiC,4B0CKjCC,OY2J0C2T,IACtCJ,QAEHR,OAAM,SAAAM,GACHf,GAAae,GACbL,IAAkB,OAsEjBa,GAA4B,SAAA/S,GAErCkR,GAAMC,SZ7NwB,SAAAnR,GAC9B,MAAO,CACHf,K1CqD6B,wB0CpD7Be,QAASA,GY0NEgT,CAAmBhT,KAGzBiT,GAAyB,SAAAzP,GAClC0N,GAAMC,SAASV,GAAgBjN,KAItB0P,GAAkB,SAAAjP,QACXjD,IAAbiD,GACH7C,EACK2Q,I9B5RwB,sC8B4RA9N,GACxBsE,MAAK,SAAArG,GACFgP,GAAMC,SAASX,GAAgBtO,EAASkG,UAE3C6J,OAAM,SAAAM,GAAG,OAAIf,GAAae,OAKtBY,GAAmB,SAACnT,EAASiE,GAClCjE,EAAU,GACVoB,EACK2Q,I9BvSqB,oC8BuSI9N,EAAa,YAAcjE,GACpDuI,MAAK,SAAArG,GACFgP,GAAMC,SZzQX,CACHlS,K1CA0B,qB0CC1BC,OYuQwCgD,EAASkG,UAE5C6J,OAAM,SAAAM,GAAG,OAAIf,GAAae,OAK1Ba,GAAqB,SAAC3S,EAAWwD,GACtCxD,EAAY,GACZW,EACK2Q,I9BjSuB,sC8BiSI9N,EAAa,cAAgBxD,GACxD8H,MAAK,SAAArG,GACFgP,GAAMC,SZpPX,CACHlS,K1C0D4B,uB0CzD5BC,OYkP0CgD,EAASkG,UAE9C6J,OAAM,SAAAM,GAAG,OAAIf,GAAae,OAG1Bc,GAA8B,SAAA5S,GACvCyQ,GAAMC,SZjQ0B,SAAA1Q,GAChC,MAAO,CACHxB,K1C+D+B,0B0C9D/BwB,UAAWA,GY8PA6S,CAAqB7S,KAG3B8S,GAAgC,WACzCnS,EACK2Q,I9B3R2B,oB8B4R3BxJ,MAAK,SAAArG,GACFgP,GAAMC,SZ1PP,CACHlS,K1CoDyB,oB0CnDzBC,OYwPmCgD,EAASkG,UAE3C6J,OAAM,SAAAM,GAAG,OAAIf,GAAae,OAEtBiB,GAA+B,SAAAvP,GACxCiN,GAAMC,SZ1P2B,SAAAlN,GACjC,MAAO,CACHhF,K1C+CgC,2B0C9ChCgF,WAAYA,GYuPDwP,CAAsBxP,KAG5ByP,GAA6B,SAACrU,GAC/B,OAALA,QAAgB2B,IAAL3B,GACd+B,EACK2Q,IADL,W9B5TyB,Y8B4TzB,YAC8B1S,EAD9B,Y9B3TsB,W8B6TjBkJ,MAAK,SAAArG,GJ9Ua,IAAArB,EI+UfqQ,GAAMC,SAASJ,GAAc7O,EAASkG,KAAKjJ,MAAK,SAACX,EAAGC,GAAJ,OAAUD,EAAIC,OACpC,IAAvByD,EAASkG,KAAKuL,SJhVF9S,EIkVPuI,GAAKkC,EAAE,iDAAkD,CACrDsI,SAAUxK,GAAKkC,EAAE,sCACjBuI,WAAYzK,GAAKkC,EAAE,iCJnVvC2F,IAA0B,EAAMM,GAAoB1Q,OIwV/CoR,OAAM,SAAAM,GAAG,OAAIf,GAAae,OAWtBuB,GAA2C,SAACC,GA8HrD,IAAIC,EA7HO,CAEP,CACI,WAAc,CACV,GAAM,GACN,KAAQ,cACR,SAAW,GAEf,GAAM,GACN,KAAQ,WACR,QAAW,mDACX,WAAc,+DACd,SAAY,uCACZ,SAAW,EACX,MAAS,mBAGb,CACI,WAAa,CACT,GAAM,GACN,KAAQ,cACR,SAAW,GAEf,GAAM,GACN,KAAQ,OACR,QAAW,yDACX,WAAc,+DACd,SAAY,uCACZ,SAAW,EACX,MAAQ,mBAGZ,CACI,WAAa,CACT,GAAM,GACN,KAAQ,cACR,SAAW,GAEf,GAAM,GACN,KAAQ,2BACR,QAAW,2BACX,WAAc,mDACd,SAAY,uCACZ,SAAW,EACX,MAAQ,mBAGZ,CACI,WAAa,CACT,GAAM,GACN,KAAQ,oBACR,SAAW,GAEf,GAAM,GACN,KAAQ,iCACR,QAAW,yDACX,WAAc,iFACd,SAAY,uCACZ,SAAW,EACX,MAAQ,mBAEZ,CACI,WAAc,CACV,GAAM,GACN,KAAQ,cACR,SAAW,GAEf,GAAM,GACN,KAAQ,mDACR,QAAW,mDACX,WAAc,+DACd,SAAY,uCACZ,SAAW,EACX,MAAS,mBAGb,CACI,WAAa,CACT,GAAM,GACN,KAAQ,cACR,SAAW,GAEf,GAAM,GACN,KAAQ,6CACR,QAAW,yDACX,WAAc,+DACd,SAAY,uCACZ,SAAW,EACX,MAAQ,mBAGZ,CACI,WAAa,CACT,GAAM,GACN,KAAQ,cACR,SAAW,GAEf,GAAM,GACN,KAAQ,2BACR,QAAW,2BACX,WAAc,mDACd,SAAY,uCACZ,SAAW,EACX,MAAQ,mBAGZ,CACI,WAAa,CACT,GAAM,GACN,KAAQ,oBACR,SAAW,GAEf,GAAM,GACN,KAAQ,iCACR,QAAW,yDACX,WAAc,iFACd,SAAY,uCACZ,SAAW,EACX,MAAQ,oBAOI5U,QAAO,gBAAE4H,EAAF,EAAEA,WAAF,OAA6BA,EAAW3H,KAH/C0U,KAIpB7C,GAAMC,SXzcA,CACFlS,K3CiBgC,6B2ChBhCC,OWucwC8U,KAiDnCC,GAA4B,SAAAhV,GACrCiS,GAAMC,SZ1bwB,SAAAlS,GAC9B,MAAO,CACHA,K1CmC6B,wB0ClC7BC,OAAQD,GYubGiV,CAAmBjV,KGviBzBkV,GACO,iBADPA,GAES,mBAFTA,GAGM,gBAHNA,GAIE,YC8FAC,GA1FF,SAAA7F,GACT,IAAIW,EAAY,OACZX,EAAM8F,QACNnF,EAAYA,EAAU/O,OAAO,IAAMoO,EAAM8F,QAG7C,IAAIC,EAAO,yBAAKpF,UAAWA,GAAYX,EAAMgG,UAEvCC,EAAeC,mBACfC,EAAWD,mBAEjB,GAAIlG,EAAMoG,UAAW,CACjB,IA+BMC,EAAgB,SAAhBA,EAAgBC,GAClB,IAAM7U,GAAW8U,KAAKC,MAAMF,EAAEhG,OAAOmG,WAAW,GAAGlG,OAAO/O,OACrDiF,MAAM3F,GACL4V,EAAeC,SAASC,eAAT,gBAAiCnV,IAEhDoV,EAAYF,SAASG,uBAAuB,kBAC5CC,EAAcJ,SAASG,uBAAuB,eAE9CE,EAASL,SAASG,uBAAT,gBAAyCrV,IAEpDiV,IACAA,EAAaO,MAAMC,gBAAkBzF,IAXlB,qBAaHuF,GAbG,IAavB,2BAA4B,CAAC,IAAlBG,EAAiB,QACpBA,IACAA,EAAMF,MAAMG,WAAa3F,KAfV,mDAmBLoF,GAnBK,IAmBvB,2BAA6B,SACnBI,MAAMI,QAAU,QApBH,mDAuBEN,GAvBF,IAuBvB,2BAAsC,SACvBE,MAAMI,QAAU,QAxBR,8BA2BvBlB,EAASmB,QAAU,KACnBrB,EAAaqB,QAAQC,oBAAoB,UAAWlB,GACpDJ,EAAaqB,QAAU,MAG3BvB,EACI,yBACIjV,GAAIkP,EAAMlP,GACV6P,UAAWA,EACX6G,YAnEU,SAAAlB,GACd,IACM7U,EADO8U,KAAKC,MAAMF,EAAEhG,OAAOmG,WAAW,GAAGlG,OAC1B/O,OAAOiF,MAAM3F,GAC5B2W,EAAad,SAASC,eAAT,gBAAiCnV,IACpDgW,EAAWR,MAAMC,gBAAkBzF,GACnC,IAAMuF,EAASL,SAASG,uBAAT,gBAAyCrV,IAExDiW,YAAW,WACPD,EAAWR,MAAMI,QAAU,OADd,qBAGOL,GAHP,IAGb,2BAA4B,CAAC,IAAlBG,EAAiB,QACxBA,EAAMF,MAAMI,QAAU,OAElBF,EAAMV,WAAW,GAAGkB,UAAUC,SAC1BhC,MAEHuB,EAAMV,WAAW,KAElBU,EAAMF,MAAMG,WAAa3F,KAXpB,iCAcd,IJmPsB,SAAAhQ,GACjCkR,GAAMC,SZlPC,CACHlS,K1CUyB,oB0CTzBC,OYgP0Bc,IIlPtBoW,CAAsBpW,GAEtBwU,EAAaqB,QAAUhB,EAAEhG,OACzB2F,EAAaqB,QAAQQ,iBAAiB,UAAWzB,GAEjDC,EAAEyB,aAAaC,QAAQ,UAAW/B,EAAaqB,QAAQxW,KAwCnDsV,UAAWpG,EAAMoG,WAEhBpG,EAAMgG,UAKnB,OAAO,oCAAGD,I,kDCuEDkC,GAAoB,SAAAlQ,GAC7B,IAAMvC,EAAYmN,GAAMI,WAAWvN,UAAUA,UAiB7C,QAfKuC,EAASjH,KAOM0E,EAAUoC,MACtB,SAAAsQ,GAAa,OACbA,EAAcC,QAASpQ,EAASoQ,MAChCD,EAAcE,YAAYC,cAAc1V,SAAWoF,EAASqQ,YAAYC,cAAc1V,QACtFuV,EAAcpX,MAAQiH,EAASjH,QAVnB0E,EAAUoC,MACtB,SAAAsQ,GAAa,OACTA,EAAcC,QAAUpQ,EAASoQ,MACjCD,EAAcE,YAAYC,cAAc1V,SAAWoF,EAASqQ,YAAYC,cAAc1V,YC7KzF2V,GAAa,CACtBC,MAAO,4CACPC,SAAU,2EzBWDC,GAAW,SAAAlI,GAAK,OACzBA,OAAQ9N,EAAYoI,GAAKkC,EAAE,wCAElB2L,GAAe,SAAAnI,GAAK,OAC7BA,EAAQ,OACF9N,EACAoI,GAAKkC,EAAE,gDAOJ4L,IALK/K,GAKsB,EALf,SAAA2C,GAAK,OAC1BA,GAASA,EAAM6E,OAASxH,GAClB/C,GAAKkC,EAAE,8CAA+C,CAAEa,IAAKA,UAC7DnL,IAWGmW,IAPK/K,GAOsB,GAPf,SAAA0C,GAAK,OAC1BA,GAASA,EAAM6E,OAASvH,GAClBhD,GAAKkC,EAAE,4CAA6C,CAChDc,IAAKA,UAETpL,IAIGoW,GAAe,SAACtI,EAAOuI,EAAeC,GAE/C,QAAqCtW,IAAjCsW,EAAUC,OAAV,QACJ,OAAOC,GAAO1I,EAAO,SAAS2I,UAC1BD,GAAOF,EAAUC,OAAV,QAA8B,SAASE,eACbzW,IAAjCsW,EAAUC,OAAV,aACEvW,EACAoI,GAAKkC,EAAE,6CAA8C,CACjDoM,MAAOtO,GAAKkC,EAAE,kCAIfqM,GAAkB,SAAC7I,EAAOuI,EAAeC,GAElD,QAAqCtW,IAAjCsW,EAAUC,OAAV,UACJ,OAAOC,GAAO1I,EAAO,SAAS2I,UAC1BD,GAAOF,EAAUC,OAAV,UAA8B,SAASE,cAC5CzW,EACAoI,GAAKkC,EAAE,+CAAgD,CACnDoM,MAAOtO,GAAKkC,EAAE,oCAIfsM,GAAkB,SAAA9I,GAC3B,OwBvD8B,SAAAI,GAC9B,IAAM2I,EAAU3G,GAAMI,WAAWnN,aAAaE,iBAAiBhF,GAe/D,OAbIwY,EACO3G,GACFI,WACAnN,aAAaC,eAAe0T,MAAK,SAAUhJ,EAAOxL,EAAOyU,GACtD,OAAOjJ,EAAMkJ,aAAe9I,GAAaJ,EAAMzP,KAAOwY,KAGvD3G,GACFI,WACAnN,aAAaC,eAAe0T,MAAK,SAAUhJ,EAAOxL,EAAOyU,GACtD,OAAOjJ,EAAMkJ,aAAe9I,MAG1B9F,GAAKkC,EAAE,gDAA6CtK,ExBuC3DiX,CAAmBnJ,IAGjBoJ,GAAc,SAAApJ,GACvB,OwBmD4B,SAAAkH,GAC5B,GAAKA,EAQL,OALa9E,GAAMI,WAAWvM,OAAOA,OAAO+S,MAAK,SAAUhJ,GACvD,OACIA,EAAMM,MAAMwH,cAAc1V,SAAW8U,EAAWY,cAAc1V,UAGxDkI,GAAKkC,EAAE,gDAA6CtK,ExB5D3DmX,CAAiBrJ,IAGfsJ,GAAgB,SAAAtJ,GACzB,OwB2D8B,SAAAuJ,GAC9B,GAAKA,EASL,OANanH,GAAMI,WAAW3M,SAASA,SAASmT,MAAK,SAAUhJ,GAC3D,OACIA,EAAM1J,KAAKwR,cAAc1V,SACzBmX,EAAazB,cAAc1V,UAGrBkI,GAAKkC,EAAE,gDAA6CtK,ExBrE3DsX,CAAmBxJ,IAEjByJ,GAAmB,SAAAzJ,GAC5B,OwBoEiC,SAAA0J,GACjC,GAAKA,EASL,OANatH,GAAMI,WAAWvK,YAAYA,YAAY+Q,MAAK,SAAUhJ,GACjE,OACIA,EAAM1J,KAAKwR,cAAc1V,SACzBsX,EAAgB5B,cAAc1V,UAGxBkI,GAAKkC,EAAE,gDAA6CtK,ExB9E3DyX,CAAsB3J,IAEpB4J,GAAgB,SAAC5J,EAAOuI,EAAeC,GAChD,OwBlDgC,SAACqB,EAAWC,GAC5C,IAAMf,EAAU3G,GAAMI,WAAWnN,aAAaE,iBAAiBhF,GACzDmY,EAASqB,wBAAaC,MACxB3S,GAAO,EACX,GAAIwS,GAAaC,EAAS,CACtB,IAAMG,EAAcvB,EAAOwB,MACvBxB,EAAOmB,EAAW,SAASlB,SAC3BD,EAAOoB,EAAS,SAASnB,UAGzBtR,EADA0R,EACO3G,GACFI,WACAnN,aAAaC,eAAe0T,MAAK,SAC9BhJ,EACAxL,EACAyU,GAEA,OAMU,OALNgB,EAAYE,UACRzB,EAAOwB,MACHxB,EAAO1I,EAAM6J,UAAW,SAASlB,SACjCD,EAAO1I,EAAM8J,QAAS,SAASnB,YAEzB3I,EAAMzP,KAAOwY,KAIhC3G,GACFI,WACAnN,aAAaC,eAAe0T,MAAK,SAC9BhJ,EACAxL,EACAyU,GAEA,OAMU,OALNgB,EAAYE,UACRzB,EAAOwB,MACHxB,EAAO1I,EAAM6J,UAAW,SAASlB,SACjCD,EAAO1I,EAAM8J,QAAS,SAASnB,cAO3D,OAAOtR,EACDiD,GAAKkC,EAAE,wDACPtK,ExBGCkY,CACH5B,EAAUC,OAAV,UACAD,EAAUC,OAAV,UAIK4B,GAAiB,SAAArK,GAC1B,OwBe+B,SAAAsK,GAC/B,IAAMC,EAAUnI,GAAMI,WAAWjM,MAAMC,QAAQjG,GAe/C,OAbIga,EACOnI,GACNI,WACAjM,MAAMA,MAAMyS,MAAK,SAAUhJ,EAAOxL,EAAOyU,GACtC,OAAOjJ,EAAM1J,KAAKwR,gBAAkBwC,EAASxC,eAAiB9H,EAAMzP,KAAOga,KAG3EnI,GACHI,WACAjM,MAAMA,MAAMyS,MAAK,SAAUhJ,EAAOxL,EAAOyU,GACtC,OAAOjJ,EAAM1J,KAAKwR,gBAAkBwC,EAASxC,kBAGvCxN,GAAKkC,EAAE,gDAA6CtK,ExB/B3DsY,CAAoBxK,IAOlBzG,GAAQ,SAAAyG,GAAK,OACtBA,IAAU+H,GAAWC,MAAMyC,KAAKzK,GAC1B1F,GAAKkC,EAAE,iCACPtK,GAEGwY,GAAW,SAAA1K,GAAK,OACzBA,IAAU+H,GAAWE,SAASwC,KAAKzK,GAC7B1F,GAAKkC,EAAE,oCACPtK,GAUGyY,GARG,SAAAtN,GAAG,OAAI,SAAA2C,GAAK,OACxBA,EAAQ3C,EACF/C,GAAKkC,EAAE,mDAAoD,CACvDa,IAAKA,SAETnL,GAGkB0Y,EAFhB,IAAI3O,MACC4O,eAGJC,GAAe,SAAC9K,EAAOuI,EAAeC,GAE/C,QAAqCtW,IAAjCsW,EAAUC,OAAV,OACJ,OAAOC,GAAO1I,EAAO,cAAc2I,UAC/BD,GAAOF,EAAUC,OAAV,OAA8B,cAAcE,eAClBzW,IAAjCsW,EAAUC,OAAV,YACEvW,EACAoI,GAAKkC,EAAE,6CAA8C,CACjDoM,MAAOtO,GAAKkC,EAAE,kCAIfuO,GAAkB,SAAC/K,EAAOuI,EAAeC,GAElD,QAAqCtW,IAAjCsW,EAAUC,OAAV,SACJ,OAAOC,GAAO1I,EAAO,cAAc2I,UAC/BD,GAAOF,EAAUC,OAAV,SAA8B,cAAcE,cACjDzW,EACAoI,GAAKkC,EAAE,+CAAgD,CACnDoM,MAAOtO,GAAKkC,EAAE,oC,oG0BhGbwO,GAxBW,SAAC,GAAD,IACxBC,EADwB,EACxBA,MACAC,EAFwB,EAExBA,MACA5U,EAHwB,EAGxBA,KACA/F,EAJwB,EAIxBA,GAJwB,IAKxB4a,KAAQC,EALgB,EAKhBA,QAASlY,EALO,EAKPA,MACjBuS,EANwB,EAMxBA,SACG4F,EAPqB,0BASxB,kBAACC,GAAA,EAAD,CAAapY,MAAOkY,KAAalY,GAC/B,kBAACqY,GAAA,EAAD,CAAYC,QAASjb,GAAK2a,GAC1B,kBAACO,GAAA,EAAD,eACEC,QAAM,GACFT,EACAI,EAHN,CAIE/U,KAAMA,EACN/F,GAAIA,IAEHkV,GCtByB,SAAC,GAAwB,IAAtB2F,EAAqB,EAArBA,QAASlY,EAAY,EAAZA,MAC1C,OAAMkY,GAAWlY,EAGR,kBAACyY,GAAA,EAAD,KAAiBP,GAAWlY,QAFnC,EDsBC0Y,CAAiB,CAAER,UAASlY,YEnB7B2Y,GAAW,SAAApM,GACX,IAAQjD,EAAMkD,aAAe,gBAArBlD,EAEAsP,EAA8DrM,EAA9DqM,aAAcxW,EAAgDmK,EAAhDnK,eAAgByW,EAAgCtM,EAAhCsM,SAAUC,EAAsBvM,EAAtBuM,WAAYlJ,EAAUrD,EAAVqD,MAEtDmJ,EAAe,GAEjB3W,EAAeuP,OAAS,GACxBvP,EAAeiL,KAAI,SAAA2L,GACfD,EAAavb,KAAKwb,EAAkBhD,eAI5C,IAUMiD,EAAU1M,EAAMtI,KAChBiV,EAAWD,EAAQ7U,YAEzB+U,qBAAU,WACFD,EACAE,EAAmBH,GAEnB1M,EAAM8M,eAEX,CAACH,IAEJ,IAAME,EAAqB,SAAAH,GACvB1M,EAAM8M,WAAW,CACbjV,YAAa6U,EAAQ7U,YACrBkV,QAASL,EAAQK,UAGrB,IAAMC,EAAa,GACnBN,EAAQO,aAAanM,KAAI,SAAAoM,GACrBF,EAAW/b,KAAKic,MAGpB,IAAK,IAAItS,EAAI,EAAGA,EAAIoS,EAAW5H,OAAQxK,IACnCoF,EAAMmN,OAAN,sBACmBH,EAAWpS,GAAG6O,YADjC,UAEOuD,EAAWpS,GAAGwS,UAK7B,OACI,0BAAMzM,UAAU,YAAY0M,SAAUhB,GAClC,kBAACiB,GAAA,EAAD,CACIzW,KAAK,cACL8J,UAAU,YACV4M,UAAWhC,GACXE,MAAO1O,EAAE,oBACTrM,KAAK,OACL8c,SAAU,CAAC/E,IACXgF,UAAQ,GAER,iCAnDS,CACjB,SACA,UACA,YACA,WACA,SACA,WACA,UA6CsB3M,KAAI,SAACjJ,EAAa9C,GAAd,OACd,4BAAQkM,IAAKlM,EAAOwL,MAAK,UAAK1I,IACzBkF,EAAE,sBAAD,OAAuBlF,SAIpC2U,EAAa1L,KAAI,SAAA4M,GAAY,OAC1B,kBAACJ,GAAA,EAAD,CACIrM,IAAKyM,EACL7W,KAAI,sBAAiB6W,GACrBH,UAAWhC,GACXiC,SAAU,CAAC/E,IACXgD,MAAK,UAAK1O,EACN,6BADC,aAEC2Q,IAEN,iCACA,4BAAQnN,MAAO,MACVxD,EAAE,wCAEP,4BAAQwD,MAAO,QACVxD,EAAE,0CAEP,4BAAQwD,MAAO,OACVxD,EAAE,6CAIf,yBAAK4D,UAAU,0CACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRxM,MAAM,UACN1Q,KAAK,SACL+c,SAAUnB,GAAYC,GAErBxP,EAAE,sBAEP,kBAAC4Q,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRld,KAAK,SACL+c,SAAUnB,GAAYC,EACtBsB,QAAS,WACLxK,MAGHtG,EAAE,0BAQvBqP,GAAW0B,aAAU,CACjBvU,KCnH6B,eDkHtBuU,CAER1B,IAEY2B,qBANS,SAAAzd,GAAK,MAAK,CAAEoH,KAAMpH,EAAMkH,aAAaE,QAM9CqW,CAAyB3B,IEjH3B4B,GAA8B,SAAApL,GACvC/P,EACK2Q,IzCtBgB,WyCuBhBxJ,MAAK,SAAArG,GACF,IAAIsa,EAAc,GACZC,EAAUva,EAASkG,KACzB,IAAK,IAAMoH,KAAOiN,EACdD,EAAYhd,KAAZ,aACIH,GAAImQ,GACDiN,EAAQjN,KAGnB0B,GAAMC,SAASL,GAAqB0L,IACpCtK,IAAkB,MAErBD,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAGxB0a,GAAoC,SAAAvL,GAC7C/P,EACK2Q,IzCYyB,kByCXzBxJ,MAAK,SAAArG,GACF,IAAIsa,EAAc,GACZC,EAAUva,EAASkG,KACzB,IAAK,IAAMoH,KAAOiN,EACdD,EAAYhd,KAAZ,aACIH,GAAImQ,GACDiN,EAAQjN,KAGnB0B,GAAMC,SAASL,GAAqB0L,OAEvCvK,OAAM,SAAAjQ,GACHwP,GAAaxP,GACbkQ,IAAkB,OAYjByK,GAAgC,SAAApF,GACzCnW,EACKsH,IzCpEgB,UyCoED6O,GACfhP,MAAK,SAAArG,GACFgP,GAAMC,SpB5CwC,CACxDlS,K7CgDuC,4B6C/CvCqF,gBoB0CgDpC,EAASkG,OAC/CsJ,GD9Dc,aC+DdD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,4BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAGxB4a,GAAiC,SAAArF,GAC1CnW,EACKkH,KzCpFgB,UyCoFAiP,GAChBhP,MAAK,SAAArG,GACFgP,GAAMC,SpB/EqC,CACrDlS,K7C+DoC,yB6C9DpCqF,gBoB6E6CpC,EAASkG,OAC5CsJ,GD9Ec,aC+EdD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,4BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OC/FxB6a,I,OAAY,CACrBC,KAAM,YACNC,QAAS,eACTC,QAAS,iBCHAC,GAAe,SAACC,GACzB,OAAc,OAAPA,EAAA,UAAeA,EAAKC,OAAO,GAA3B,KAAiC,IAO/BC,GAAmB,SAAEte,GAC9B,IAAOsG,EAAyBtG,EAAzBsG,KAAKzG,EAAoBG,EAApBH,QAAQ0e,EAAYve,EAAZue,WACpB,MAAM,GAAN,OAAU1e,EAAV,YAAqByG,EAArB,YAA6BiY,IAGpBC,GAAkB,SAACxe,GAC5B,IAAOsG,EAAkCtG,EAAlCsG,KAAKzG,EAA6BG,EAA7BH,QAAQ0e,EAAqBve,EAArBue,WAAWE,EAAUze,EAAVye,SAC/B,MAAM,GAAN,OAAUA,EAAV,YAAsB5e,EAAtB,YAAiCse,GAAe7X,GAAhD,YAAyD6X,GAAeI,GAAxE,OCyJWG,GAlJG,SAAAjP,GACd,IAAQjD,EAAMkD,aAAe,UAArBlD,EAEJmS,EAKAlP,EALAkP,YACA3e,EAIAyP,EAJAzP,QACAsF,EAGAmK,EAHAnK,eACAsZ,EAEAnP,EAFAmP,cACAC,EACApP,EADAoP,SAGJ,EAAgCC,oBAAS,GAAzC,oBAAOC,EAAP,KAAiBC,EAAjB,KAEA3C,qBAAU,kBAAMuB,KAAmC,IAEnD,IAAMqB,EAAc,GAEhB3Z,EAAeuP,OAAS,EAAI,GAC5BvP,EAAeiL,KAAI,SAAA2L,GACf+C,EAAYve,KAAKwb,EAAkBhD,eAI3C,IAAIgG,EAAkB,QAEGhd,IAArB0c,EAAc,GACdA,EAAcrO,KAAI,SAAArJ,GACd,IAAK,IAAImD,EAAI,EAAGA,EAAInD,EAAO2N,OAAQxK,IAC/B6U,EAAgBxe,KAAKwG,EAAOmD,OAIpC6U,OAAkBhd,EAGtB,IAAMid,EAAiB,SAAAC,GhBOa,IAAAC,IgBNPD,EhBO7BhN,GAAMC,SR7DC,CACHlS,K5C4DmB,c4C3DnBC,OQ2D0Bif,KgBoB9B,OACI,kBAACC,GAAA,EAAD,CAAQC,QANQ,WAChBZ,IACAK,GAAaD,IAIiBS,KAAMX,EAAUY,SAAS,MACnD,wBAAIrP,UAAU,uBACT5D,EAAE,uBAAwB,CACvBkT,YAAapB,GAAmBte,MAIxC,yBAAKoQ,UAAU,mBACX,kBAAC,GAAD,CAAMmF,MAAM,cACPwJ,EACG,kBAAC,GAAD,CACIY,cAAe3f,EAAQO,GACvB+E,eAAgBA,EAChBwX,SAtCE,SAAArE,GAOtB,IANA,IAAMmH,EAAW,CACbtY,YAAamR,EAAOnR,YACpBkV,QAAS/D,EAAO+D,QAChBE,aAAc,IAGTrS,EAAI,EAAGA,GAAK/E,EAAeuP,OAAS,EAAGxK,IAAK,CACjD,IAAIwV,EAAmB,CACnB3G,WAAY+F,EAAY5U,GACxBwS,OAAQpE,EAAO,eAAD,OAAgBwG,EAAY5U,MAG9CuV,EAASlD,aAAahc,KAAKmf,IhBxCC,SAACvW,EAAM4V,GAC3C,IAAIY,EAAc,GAElBZ,EAAgB,GAAGze,SAAQ,SAAA0G,GACnBA,EAAKG,cAAgBgC,EAAKhC,cAC1BH,EAAI,2BAAQA,GAASmC,IAEzBwW,EAAYpf,KAAKyG,MAGrB,IAAM4Y,EAAuB,CACzBxf,GAAIwS,GAAgBxS,GACpB2S,kBAAmB4M,GAGhBxd,EACFsH,I5B9BqB,iB4B8BDmW,GACpBtW,MAAK,SAAArG,GACFgP,GAAMC,SAASN,GAAc3O,EAASkG,KAAK4J,oBAC3CN,GYrCqB,eZsCrBD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,2BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,MgBgB7B8c,CAAyBJ,EAAUnQ,EAAMmP,gBAuBrBM,gBAAiBA,EACjBC,eAAgBA,IAGpB,oCAAG3S,EAAE,4BAIb,6BAAS4D,UAAU,4BACMlO,IAApBgd,EACG,yBAAK9O,UAAU,aACV8O,EAAgB3O,KAAI,SAAC0P,EAAazb,GAAd,OACjB,kBAAC,GAAD,CAAM+Q,MAAM,kBAAkB7E,IAAKlM,GAC/B,yBAAK4L,UAAU,cACX,kBAAC,KAAD,CACIA,UAAU,mBACVE,MAAO9D,EAAE,oBACT8Q,QAAS,WACL6B,EACIc,EAAY3Y,aAEhB0X,GAAY,OAIxB,wBAAI5O,UAAU,kBACT5D,EAAE,eAAD,OACiByT,EAAY3Y,eAGlC2Y,EAAYvD,aAAanM,KACtB,SAACmM,EAAclY,GAAf,OACI,yBACI4L,UAAU,qBACVM,IAAKlM,GAEL,8BACKgI,EAAE,sBAAuB,IACzBkQ,EAAaxD,YAElB,0BACI9I,UAAS,WAAMsM,EAAaG,SAE3BrQ,EAAE,6BAAD,OAC+BkQ,EAAaG,mBAU1E,kBAAC,GAAD,CAAMtH,MAAM,0BACR,2BAAI/I,EAAE,8BC1HrB0T,GAAwB,SAAA/a,GAAU,OAC3CiN,GAAMC,StBMC,CACHlS,K/CyFuB,kB+CxFvBC,OsBR0B+E,KAUrBgb,GAA0B,WAgGnC7d,EACK2Q,I7C1GoB,a6C2GpBxJ,MAAK,SAAArG,GACFgP,GAAMC,StB1IP,CACHlS,K/C2H0B,oB+C1H1BC,OsB0IYgD,EAASkG,KACJjJ,MAAK,SAACX,EAAGC,GAAJ,OAAWD,EAAEkY,KAAOjY,EAAEiY,KAAO,GAAK,KACvCwI,eAIhBjN,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAuE/Bmd,GAAoB,SAAA7Y,GAClBA,EAASjH,GACT+f,GAAY9Y,GAEZ+Y,GAAa/Y,IAIRgZ,GAAwB,SAAA/H,GACjC,IAnMiCgI,EAmM7BjZ,EA5Ea,SAAAA,GACjB,IAAMkZ,EAAgB,GAChBC,EAAmB,GAFI,WAGpBC,GACDC,OAAOC,UAAU1X,eAAewC,KAAKpE,EAAUoZ,IAE3CA,EAAKG,QAAQ,0BAA4B,IACtB,IAAnBvZ,EAASoZ,IAETF,EAAchgB,KAAKkgB,EAAKI,UAAU,KAGtCH,OAAOC,UAAU1X,eAAewC,KAAKpE,EAAUoZ,IAE3CA,EAAKG,QAAQ,6BAA+B,IACzB,IAAnBvZ,EAASoZ,IAETD,EAAiBjgB,KACb0R,GACKI,WACAnN,aAAaC,eAAe+B,MACzB,SAAAyB,GAAQ,OAAIA,EAASvI,MAAQqgB,EAAKI,UAAU,SAlBpE,IAAK,IAAIJ,KAAQpZ,EAAW,EAAnBoZ,GAyBT,MAAO,CACHrgB,GAAIiH,EAASjH,GACbqX,MAAOpQ,EAASoQ,KAChBC,YAAarQ,EAASqQ,YACtBoJ,SAAUzZ,EAASyZ,SACnBC,OAAQ1Z,EAAS0Z,OACjB9c,gBAAiBoD,EAASpD,gBAC1BC,gBAAiBmD,EAASnD,gBAC1Bqc,cAAeA,EACfC,iBAAkBA,GAuCPQ,CAAa1I,GAC5B,IAAKf,GAAkBlQ,GAOnB,OANA2K,IACI,EACAM,GACAnI,GAAKkC,EAAE,0CAxMkBiU,GA0MP,OAzM1BrO,GAAMC,StB4BC,CACHlS,K/CmEiB,Y+ClEjBC,OsB9BoBqgB,IA4MxB,GAAKW,GAAmB5Z,EAAS0Z,OAAQ1Z,EAASyZ,SAAUzZ,EAASoQ,MAGrE,GAAIpQ,EAASpD,gBAAiB,CAC1B,IAAMid,EAAqBC,GAAoB9Z,EAASjH,IACpD8gB,GACAA,EAAmBjd,iBAAkB,EACrC9B,EACKsH,I7CtNY,Y6CsNOyX,GACnB5X,MAAK,SAAArG,GACFgP,GAAMC,SAASH,GAAe9O,EAASkG,OACvC+W,GAAkB7Y,MAErB2L,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAEjCmd,GAAkB7Y,QAGtB6Y,GAAkB7Y,IAIpB4Z,GAAqB,SAACF,EAAQD,EAAUrJ,GAC1C,IAAM2J,GAAeL,EAAOF,UAAUE,EAAOrM,OAAS,GAChD2M,GAAiBP,EAASD,UAAUC,EAASpM,OAAS,GACxD4M,GAAO,EAMX,OALI7J,IAAS2J,GAAe3J,IAAS4J,IACjCC,EAAOC,OAAOC,QACVrX,GAAKkC,EAAE,0DAGRiV,GAsBLnB,GAAc,SAAAhX,GACfhH,EACAsH,I7CrQwB,Y6CqQLN,GACfG,MAAK,SAAArG,GACHgP,GAAMC,SAASH,GAAe9O,EAASkG,OACtC4W,GAAsB,MACrB0B,KACDC,KACC1B,KACAvN,GL9RgB,eK+RhBD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,+BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI/B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAE/Bqd,GAAe,SAAAjX,GACjBhH,EACKkH,K7CxRoB,Y6CwRAF,GACpBG,MAAK,SAAArG,GACFgP,GAAMC,StBpSP,CACHlS,K/CqGoB,e+CpGpBC,OsBkS+BgD,EAASkG,OACpCsJ,GL7SiB,eK8SjBD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,+BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAE/Boe,GAAsB,SAAAnc,GACxB,OAAOiN,GACFI,WACAvN,UAAUA,UAAUoC,MACjB,SAAAya,GAAY,OACyB,IAAjCA,EAAa1d,iBACb0d,EAAavhB,KAAO4E,MAYvByc,GAA8B,WACvCtf,EACK2Q,I7ClT6B,sB6CmT7BxJ,MAAK,SAAA2H,GACFgB,GAAMC,StBnVkB,SAAAjB,GAChC,MAAO,CACHjR,K/C8H8B,yB+C7H9BC,OAAQgR,GsBgVW2Q,CAAqB3Q,EAAI9H,UAE3C6J,OAAM,SAAAM,GAAG,OAAIf,GAAae,OAoEtBoO,GAA8B,WACvCvf,EACK2Q,I7C9V6B,0B6C+V7BxJ,MAAK,SAAArG,GACFgP,GAAMC,StBtZP,CACHlS,K/CmH8B,yB+ClH9BC,OsBoZwCgD,EAASkG,UAEhD6J,OAAM,SAAAM,GAAG,OAAIf,GAAae,OC/ZtBuO,I,OAAgB,IAVT,CAChB,SACA,UACA,YACA,WACA,SACA,WACA,UAICzR,KAAI,SAAA6O,GAAG,OAAI4C,GAActhB,KAAK0e,EAAItH,kBCCvC,IAAImK,GAAe,SAAAxS,GAEf,IAAQjD,EAAMkD,aAAe,gBAArBlD,EAIR6P,qBAAU,kBAAM8D,OAA2B,IAE3C,IACIrE,EAKArM,EALAqM,aACAxW,EAIAmK,EAJAnK,eACAyW,EAGAtM,EAHAsM,SACAC,EAEAvM,EAFAuM,WACAkG,EACAzS,EADAyS,QAGEjD,EAAc,GAQpB,OANI3Z,EAAeuP,OAAS,EAAI,GAC5BvP,EAAeiL,KAAI,SAAA2L,GACf+C,EAAYve,KAAKwb,EAAkBhD,eAKvC,oCACI,0BAAM9I,UAAU,iBAAiB0M,SAAUhB,GACvC,yBAAK1L,UAAU,cACX,kBAAC2M,GAAA,EAAD,CACIzW,KAAK,aACL0W,UAAWhC,GACXE,MAAO1O,EAAE,oCACTrM,KAAK,OACLiQ,UAAU,gBACV6M,SAAU,CAAC/E,KAEX,4BAAQlI,MAAO,KACdP,EAAMxK,UAAUsL,KAAI,SAACtL,EAAWT,GAAZ,OACjB,4BAAQkM,IAAKlM,EAAOwL,MAAO/K,EAAU1E,IAChC0E,EAAU4S,iBAIvB,kBAACkF,GAAA,EAAD,CACIzW,KAAK,UACL0W,UAAWhC,GACXE,MAAO1O,EAAE,gCACTrM,KAAK,OACLiQ,UAAU,gBACV6M,SAAU,CAAC/E,KAEX,4BAAQlI,MAAO,KA/CrB,CAAC,MAAO,OAAQ,UAgDHO,KAAI,SAAC4R,EAAM3d,GAAP,OACP,4BAAQkM,IAAKlM,EAAOwL,MAAK,UAAKmS,IACzB3V,EAAE,UAAD,OAAW2V,EAAKC,cAAhB,eAId,kBAACrF,GAAA,EAAD,CACIzW,KAAK,YACL0W,UAAWhC,GACXE,MAAO1O,EAAE,+BACTrM,KAAK,OACLiQ,UAAU,gBACV6M,SAAU,CAAC/E,KAEX,4BAAQlI,MAAO,KACdgS,GAAczR,KAAI,SAAC6O,EAAK5a,GAAN,OACf,4BAAQkM,IAAKlM,EAAOwL,MAAK,UAAKoP,IACzB5S,EAAE,sBAAD,OAAuB4S,SAIrC,kBAACrC,GAAA,EAAD,CACIzW,KAAK,QACL0W,UAAWhC,GACXE,MAAO1O,EAAE,iCACTrM,KAAK,OACLiQ,UAAU,gBACV6M,SAAU,CAAC/E,KAEX,4BAAQlI,MAAO,KACdiP,EAAY1O,KAAI,SAAC8R,EAAU7d,GAAX,OACb,4BAAQkM,IAAKlM,EAAOwL,MAAK,UAAKqS,IACzBA,QAKjB,yBAAKjS,UAAU,2CACX,kBAACgN,GAAA,EAAD,CACIC,QAAQ,YACRxM,MAAM,UACNqM,SAAUnB,GAAYC,EACtB5L,UAAU,gBACVjQ,KAAK,UAEJqM,EAAE,qCAEP,kBAAC4Q,GAAA,EAAD,CACIC,QAAQ,YACRH,SAAUnB,GAAYC,EACtB5L,UAAU,gBACVkN,QAAS4E,GAER1V,EAAE,wCAa3ByV,GAAe1E,aAAU,CACrBvU,KP7HsB,cO4HXuU,CAEZ0E,IAEYzE,qBATS,SAAAzd,GAAK,MAAK,CAC9BgI,UAAWhI,EAAMgI,UAAUA,UAC3B9C,UAAWlF,EAAMkF,UAAUA,aAOhBuY,CAAyByE,ICzCzBzE,I,OAAAA,cAJS,SAAAzd,GAAK,MAAK,CAC9BgI,UAAWhI,EAAMgI,UAAUA,aAGhByV,EA9EG,SAAA/N,GACd,IAAQjD,EAAMkD,aAAe,gBAArBlD,EAER,EAAwBsS,oBAAS,GAAjC,oBAAOU,EAAP,KAAa8C,EAAb,KAEQhd,EAAmBmK,EAAnBnK,eAER+W,qBAAU,kBAAMoB,OAA+B,IAkB/C,OACI,oCACI,0BAAMrN,UAAU,WAAWkN,QAlBX,WACpBgF,GAAQ,KAkBC9V,EAAE,mBAGP,kBAAC8S,GAAA,EAAD,CACIE,KAAMA,EACND,QApBQ,WAChB+C,GAAQ,IAoBA7C,SAAS,KACT8C,kBAAgB,qBAEhB,yBAAKnS,UAAU,oBACX,2BAAOA,UAAU,qBACb,kBAAC,GAAD,CAAMA,UAAU,mCACZ,yBAAKA,UAAU,iBACX,wBAAI7P,GAAG,qBACFiM,EAAE,mBAEP,kBAAC,GAAD,CACIlH,eAAgBA,EAChB4c,QA7BR,WCQxB9P,GAAMC,SC/B2B,CACjClS,K1E+F2B,oByEhE3ByS,GTnCsB,eQwDUkK,SA1BjB,SAAArE,GC1BiB,IAAA+J,ID2BP/J,EC1BzBnW,EACK2Q,IACGwP,wBAEID,EAAKE,UACL,YACAF,EAAKhG,QACL,YACAgG,EAAKjN,MACL,eACAiN,EAAKrd,YAEZsE,MAAK,SAAArG,GACF,IAAIsa,EAAc,GACZC,EAAUva,EAASkG,KACzB,IAAK,IAAMoH,KAAOiN,EACdD,EAAYhd,KAAZ,aACIH,GAAImQ,GACDiN,EAAQjN,KAGnB0B,GAAMC,SC7BP,CACHlS,K1EoGuB,kB0EnGvBC,OD2BiCsd,OAEhCvK,OAAM,SAAAjQ,GACHwP,GAAaxP,YDgCL,6BAASkN,UAAU,+BACdX,EAAM1H,UAAUwI,KAAI,SAAAvI,GAAQ,OACzB,kBAAC,GAAD,CAAM0I,IAAK1I,EAASzH,GAAI6P,UAAU,aAC9B,yBAAKA,UAAU,gBACX,kCAAQ5D,EAAE,cAAgB,IAA1B,KACA,wBAAI4D,UAAU,qBACTpI,EAAS1B,MAEd,8BAAOkG,EAAE,cAAgB,KACzB,wBAAI4D,UAAU,qBACTpI,EAAS7H,KAAK0X,0B,UG1CjD8K,GAAaC,aAAW,CAC1BC,MAAO,CACHC,OAAO,aAAD,OAAe5R,MAFV0R,EAIhB,SAAAnT,GAAK,OACJ,kBAACsT,GAAA,EAAD,eACIC,UAAW,EACXC,mBAAoB,KACpBC,aAAc,CACVC,SAAU,SACVC,WAAY,UAEhBC,gBAAiB,CACbF,SAAU,SACVC,WAAY,WAEZ3T,OAIN6T,GAAiBV,cAAW,SAAAW,GAAK,MAAK,CACxCC,KAAM,CACF,UAAW,CACP7M,gBAAiB4M,EAAME,QAAQC,QAAQC,KACvC9S,MAAO0S,EAAME,QAAQ1gB,OAAO6gB,WAJjBhB,CAOnBiB,MAgiBWrG,iBARS,SAAAzd,GAAK,MAAK,CAC9BqH,SAAUrH,EAAMkH,aAAaG,SAC7B9B,eAAgBvF,EAAMsF,aAAaC,eACnClB,gBAAiBrE,EAAM+I,SAAS1E,gBAChCwa,cAAe7e,EAAMkH,aAAaC,OAClCxD,QAAS3D,EAAMgJ,iBAAiBnF,mBAGI,GAAzB4Z,EA9hBA,SAAA/N,GACX,MAAgCqU,IAAMhF,SAAS,MAA/C,oBAAOiF,EAAP,KAAiBC,EAAjB,KACMC,EAAc,SAAAnU,GAAK,OAAIkU,EAAYlU,EAAMoU,gBACzCC,EAAc,kBAAMH,EAAY,OAEtC,EAAwCF,IAAMhF,SAAS,MAAvD,oBAAOsF,EAAP,KAAqBC,EAArB,KACMC,EAAsB,SAAAxU,GAAK,OAAIuU,EAAgBvU,EAAMoU,gBACrDK,EAAsB,kBAAMF,EAAgB,OAE1C7X,EAAMkD,aAAe,UAArBlD,EAER,EAAgCsS,oBAAS,GAAzC,oBAAOD,EAAP,KAAiB2F,EAAjB,KACA,EAA8B1F,mBAAS,GAAvC,oBAAO9e,EAAP,KAAgB4R,EAAhB,KAEAyK,qBAAU,WACF5M,EAAMgV,WAAarY,EAAM6R,UACzB1K,IAA0B,GAC1BC,QAEL,CAAC/D,EAAMgV,WAEV,IAAMC,EAAsB,SAAA1kB,GACxB4R,EAAW5R,GACXwkB,GAAY,IAsOVpY,EAAQqD,EAAMrD,MAEhBuY,EAAY,KACZC,EAAO,KACPC,EApOgB,SAAAJ,GAChB,IAAII,EAAW,KACf,GAAiB,OAAbJ,QAAkCviB,IAAbuiB,EACrB,OACI,kBAAC,KAAD,CAAMK,GAAIvX,GAAMI,MAAOyC,UAAU,YAC5B5D,EAAE,gBAIf,OAAQiY,GACJ,KAAKrY,EAAM6R,QACP4G,EACI,yBAAKzU,UAAU,aACX,kBAACgN,GAAA,EAAD,CACI2H,gBAAc,kBACdC,gBAAc,OACd3H,QAAQ,YACRxM,MAAM,UACNyM,QAASgH,GAER5hB,aAAaC,QAAQ,SACtB,kBAACsiB,GAAA,EAAD,KACI,kBAAC,KAAD,CAAaC,SAAS,cAG9B,kBAACvC,GAAD,CACIpiB,GAAG,kBACHwjB,SAAUK,EACVe,aAAW,EACX3F,KAAM4F,QAAQhB,GACd7E,QAASgF,GAET,kBAAC,KAAD,CACIO,GAAIvX,GAAME,WACV2C,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAASiH,GAET,kBAACjB,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAQC,SAAS,aAEpB1Y,EAAE,iBAGX,kBAAC,KAAD,CACIsY,GAAIvX,GAAMG,cACV0C,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAASiH,GAET,kBAACjB,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAASC,SAAS,YAErB1Y,EAAE,oBAGX,0BACI4D,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAASiH,GAET,kBAACjB,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAYC,SAAS,YAEzB,kBAAC,GAAD,CACI5f,eAAgBmK,EAAMnK,mBAIlC,kBAAC,KAAD,CACIwf,GAAIvX,GAAMS,WACVoC,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAASiH,GAET,kBAACjB,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAQC,SAAS,YAEpB1Y,EAAE,gBAGX,kBAAC,KAAD,CACIsY,GAAIvX,GAAMM,OACVuC,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAASiH,GAET,kBAACjB,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAcC,SAAS,YAE1B1Y,EAAE,oBAMvB,MACJ,KAAKJ,EAAM8R,QACP2G,EACI,yBAAKzU,UAAU,aACX,kBAACgN,GAAA,EAAD,CACI2H,gBAAc,kBACdC,gBAAc,OACd3H,QAAQ,YACRxM,MAAM,UACNyM,QAASgH,GAER5hB,aAAaC,QAAQ,SACtB,kBAACsiB,GAAA,EAAD,KACI,kBAAC,KAAD,CAAaC,SAAS,aAG9B,kBAACvC,GAAD,CACIpiB,GAAG,kBACHwjB,SAAUK,EACVe,aAAW,EACX3F,KAAM4F,QAAQhB,GACd7E,QAASgF,GAET,kBAAC,KAAD,CACIO,GAAIvX,GAAMQ,iBACVqC,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAASiH,GAET,kBAACjB,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAASC,SAAS,YAErB1Y,EAAE,oBAGX,0BACI4D,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAAS,WACLoH,EACIjV,EAAMrI,SAAS,GAAGpH,SAEtBgT,KACAuR,MAGJ,kBAACjB,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAiBC,SAAS,YAE7B1Y,EAAE,kBAGX,kBAAC,KAAD,CACIsY,GAAIvX,GAAMS,WACVoC,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAASiH,GAET,kBAACjB,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAQC,SAAS,YAEpB1Y,EAAE,gBAGX,kBAAC,KAAD,CACIsY,GAAIvX,GAAMM,OACVuC,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAASiH,GAET,kBAACjB,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAcC,SAAS,YAE1B1Y,EAAE,oBAMvB,MACJ,QACIqY,EACI,yBAAKzU,UAAU,aACX,kBAACgN,GAAA,EAAD,CACI2H,gBAAc,kBACdC,gBAAc,OACd3H,QAAQ,YACRxM,MAAM,UACNyM,QAASgH,GAER5hB,aAAaC,QAAQ,UAE1B,kBAACggB,GAAD,CACIpiB,GAAG,kBACHwjB,SAAUK,EACVe,aAAW,EACX3F,KAAM4F,QAAQhB,GACd7E,QAASgF,GAET,kBAAC,KAAD,CACIO,GAAIvX,GAAMM,OACVuC,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAASiH,GAET,kBAACjB,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAcC,SAAS,YAE1B1Y,EAAE,oBAO/B,OAAOqY,EAOIS,CAAY7V,EAAMgV,UAkPjC,OAjPIhV,EAAMgV,WAAarY,EAAM6R,SACzB0G,EACI,oCACKlV,EAAM/L,QACH,0BAAM0M,UAAU,yBACZ,kBAACmV,GAAA,EAAD,CAAkBC,KAAM,MAG5B,0BAAMpV,UAAU,yBACX5D,EAAE,+BADP,IACwC,IACnCiD,EAAMrL,gBAAgByT,cAKvC+M,EACI,yBAAKxU,UAAU,QACX,kBAACgN,GAAA,EAAD,CACI2H,gBAAc,kBACdC,gBAAc,OACd3H,QAAQ,YACRxM,MAAM,UACNyM,QAAS2G,GAERzX,EAAE,gBAGP,kBAACmW,GAAD,CACIpiB,GAAG,kBACHwjB,SAAUA,EACVoB,aAAW,EACX3F,KAAM4F,QAAQrB,GACdxE,QAAS4E,GAET,0BAAM/T,UAAU,0BACXX,EAAMrL,gBAAgByT,aAE3B,kBAAC,KAAD,CACIiN,GAAIvX,GAAMC,UACV4C,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAAS6G,GAET,kBAACb,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAQC,SAAS,aAEpB1Y,EAAE,gBAIX,kBAAC,KAAD,CACIsY,GAAIvX,GAAMG,cACV0C,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAAS6G,GAET,kBAACb,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAASC,SAAS,aAErB1Y,EAAE,oBAIX,kBAAC,KAAD,CACIsY,GAAIvX,GAAME,WACV2C,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAAS6G,GAET,kBAACb,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAQC,SAAS,aAEpB1Y,EAAE,iBAIX,0BACI4D,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAAS6G,GAET,kBAACb,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAYC,SAAS,aAEzB,kBAAC,GAAD,CAAW5f,eAAgBmK,EAAMnK,mBAIzC,kBAAC,KAAD,CACIwf,GAAIvX,GAAMM,OACVuC,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAAS6G,GAET,kBAACb,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAcC,SAAS,aAE1B1Y,EAAE,qBAMhBiD,EAAMgV,WAAarY,EAAM8R,QAChC0G,EACI,yBAAKxU,UAAU,QACX,kBAACgN,GAAA,EAAD,CACI2H,gBAAc,kBACdC,gBAAc,OACd3H,QAAQ,YACRxM,MAAM,UACNyM,QAAS2G,GAERzX,EAAE,gBAGP,kBAACmW,GAAD,CACIpiB,GAAG,kBACHwjB,SAAUA,EACVoB,aAAW,EACX3F,KAAM4F,QAAQrB,GACdxE,QAAS4E,GAET,kBAAC,KAAD,CACIW,GAAIvX,GAAMC,UACV4C,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAAS6G,GAET,kBAACb,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAQC,SAAS,aAEpB1Y,EAAE,gBAGX,kBAAC8W,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAiBC,SAAS,aAE9B,0BACI9U,UAAU,WACVkN,QAAS,WACLoH,EAAoBjV,EAAMrI,SAAS,GAAGpH,SACtCgT,KACAmR,MAGH3X,EAAE,kBAIX,kBAAC,KAAD,CACIsY,GAAIvX,GAAMQ,iBACVqC,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAAS6G,GAET,kBAACb,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAASC,SAAS,aAErB1Y,EAAE,oBAIX,kBAAC,KAAD,CACIsY,GAAIvX,GAAMM,OACVuC,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAAS6G,GAET,kBAACb,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAcC,SAAS,aAE1B1Y,EAAE,oBAMG,OAAnBiD,EAAMgV,eAAwCviB,IAAnBuN,EAAMgV,WACxCG,EACI,yBAAKxU,UAAU,QACX,kBAACgN,GAAA,EAAD,CACI2H,gBAAc,kBACdC,gBAAc,OACd3H,QAAQ,YACRxM,MAAM,UACNyM,QAAS2G,GAERzX,EAAE,gBAEP,kBAACmW,GAAD,CACIpiB,GAAG,kBACHwjB,SAAUA,EACVoB,aAAW,EACX3F,KAAM4F,QAAQrB,GACdxE,QAAS4E,GAET,kBAAC,KAAD,CACIW,GAAIvX,GAAMC,UACV4C,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAAU,WACN0G,EAAY,QAIhB,kBAACV,GAAD,KAEI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAQC,SAAS,aAEpB1Y,EAAE,gBAGX,kBAAC,KAAD,CACIsY,GAAIvX,GAAMI,MACVyC,UAAU,WACVsG,MAAO,CAAE2O,eAAgB,QACzB/H,QAAS6G,GAET,kBAACb,GAAD,KACI,kBAAC2B,GAAA,EAAD,KACI,kBAAC,KAAD,CAAWC,SAAS,aAEvB1Y,EAAE,oBASvB,oCACKiD,EAAMgV,WAAarY,EAAM8R,QACtB,oCACI,kBAAC,GAAD,CACIW,SAAUA,EACVF,YA/dI,SAAA3O,GACpBwU,GAAY,IA+dIxkB,QAASA,EACT4e,cAAenP,EAAMmP,cACrBtZ,eAAgBmK,EAAMnK,kBAI9B,GAEJ,4BAAQ8K,UAAU,UACbwU,EACD,yBAAKxU,UAAU,mCACX,kBAAC,KAAD,CAAM0U,GAAIvX,GAAMC,UAAW4C,UAAU,YAEhC5D,EAAE,eAENmY,GAEL,yBAAKvU,UAAU,mCACVyU,GAEL,yBAAKzU,UAAU,qCACX,kBAAC,GAAD,Y,kBCtePqV,GAAmB,SAAAzhB,GAC5B,IAAI0hB,EAAc,EACdC,EAAY,GACZC,EAAc,IAAIC,IAAI,IACtBC,EAAoB,GACpBC,GAAO,EACPrF,EAAgB,GAChBC,EAAmB,GAmDvB,OAjDI3c,EAAa8E,WACb4c,EAAc1hB,EAAa8E,SAAS+L,OACpC6L,EAAgB1c,EAAawD,SAASkZ,cACtCC,EAAmB3c,EAAawD,SAASmZ,iBAEzC3c,EAAa8E,SAASyH,KAAI,SAAArK,GACtByf,EAAUjlB,KAAKwF,EAAMA,OACrB0f,EAAYI,IAAI9f,EAAMA,MAAM3F,GAAI,OAEpColB,EAAYA,EAAUtlB,MAAK,SAACX,EAAGC,GAAJ,OACvBD,EAAE4Q,MAAQ3Q,EAAE2Q,MAAQ,EAAI3Q,EAAE2Q,MAAQ5Q,EAAE4Q,OAAS,EAAI,KAGrDtM,EAAawD,SAASkZ,cAAcnQ,KAAI,SAAA6O,GACpC,IAAI6G,EAAsB,GAC1BjiB,EAAawD,SAASmZ,iBAAiBpQ,KAAI,SAAA3K,GACvC,IAAMsgB,EAAW,GACXC,EAAY,GAClBR,EAAUllB,SAAQ,SAAC2lB,EAAWC,GAC1B,IAOMC,EAPYtiB,EAAa8E,SAASzB,MACpC,SAAAkf,GAAgB,OACZA,EAAiBrgB,MAAM3F,KAAO6lB,EAAU7lB,MAEtBimB,KAAKnf,MAC3B,SAAAof,GAAc,OAAIA,EAAerH,MAAQA,KAEnBsH,QAAQrf,MAC9B,SAAAsf,GAAe,OACXA,EAAgBpR,MAAMhV,KAAOqF,EAAUrF,MAE/C2lB,EAASxlB,KAAK,CACVwF,MAAOkgB,EACP5Q,KAAM8Q,EAAUM,MAAMC,MAE1BV,EAAUzlB,KAAK,CACXwF,MAAOkgB,EACP5Q,KAAM8Q,EAAUM,MAAME,UAG9Bb,EAAoBvlB,KAAK,CACrB6U,MAAO3P,EACPmhB,MAAO,CAAEF,IAAKX,EAAUY,KAAMX,QAGtCL,EAAkBplB,KAAK,CAAE0e,MAAKsH,QAAST,OAE3CF,GAAO,GAGJ,CACHve,SAAUxD,EAAawD,SACvBsB,SAAU9E,EAAa8E,SACvB6X,mBACAD,gBACAgF,YAAaA,EACbC,UAAWA,EACXqB,YAAalB,EACbC,S,gFC3KKkB,I,OACH,QADGA,GAEH,OC8EKC,I,OAnEoB,SAAAzX,GAC/B,IAAQ8P,EAA+C9P,EAA/C8P,QAAS4H,EAAsC1X,EAAtC0X,OAAQC,EAA8B3X,EAA9B2X,OAAQ5H,EAAsB/P,EAAtB+P,KAAK6H,EAAiB5X,EAAjB4X,cAMtC,OACI,kBAAC/H,GAAA,EAAD,CAAQ/e,GAAG,YAEP+mB,sBAAsB,EACtB/H,QARY,WAChBA,EAAQ4H,IAQJ5E,kBAAgB,uBAChB/C,KAAMA,GAEN,kBAAC+H,GAAA,EAAD,CAAahnB,GAAG,uBAAuB6P,UAAU,kBAC7C,oCACKgX,EACG,oCACKA,IAAWH,GACR,oCAAG3c,KAAKkC,EAAE,gCAEV,oCAAGlC,KAAKkC,EAAE,8BAIlB,oCACKlC,KAAKkC,EAAE,uBAAwB,IAChC,8BACI,uBAAG4D,UAAU,gBAAgBoX,KAAMH,EAAetX,OAAO,SAASO,MAAO+W,GACpE/c,KAAKkC,EAAL,+BAED,KAIflC,KAAKkC,EAAE,2BAA4B,CAChCsI,SAAUxK,KAAKkC,EAAL,sCAItB,yBAAK4D,UAAU,qBACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRxM,MAAM,UACNyM,QAAS,kBAAMiC,EAAQ4H,KAEtB7c,KAAKkC,EAAE,4BAEZ,kBAAC4Q,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRC,QAAS,kBAAMiC,EAAQ,MAEtBjV,KAAKkC,EAAE,+BChEtBib,I,OAAc,SAAChY,GAClB,IAAO4X,EAAe5X,EAAf4X,cACP,EAAiCvI,oBAAS,GAA1C,oBAAO4I,EAAP,KAAkBC,EAAlB,KAYC,OAAQ,oCACQ,kBAAC,KAAD,CACI9W,MAAO,OACPT,UAAU,wBACVkN,QAAS,WACLqK,GAAc,IAElBrX,MAAO+W,IAGf,kBAAC,GAAD,CACIF,OAAQ,EACRC,QAAQ,EACR5H,KAAMkI,EACNnI,QArBI,SAAApa,GAChBwiB,GAAc,GACK,KAAfxiB,GALIuc,OAAOlC,KAAK6H,EAAe,UAChCO,SAwBSP,cAAeA,OCjCtBQ,GAAO,CAChBC,SAAS,kBACTC,SAAS,WACTC,OAAO,UCeLC,I,OAAUnc,EAAQ,MAMlBoc,GAJiC,WACnC,IAAIC,EAAM,IAAIlc,KACd,OAAO+V,GAAcmG,EAAIC,SAAW,GAErBC,GACbC,GAAQ,SAAC9S,EAAK+S,GAChB,OAAGA,IAAQV,GAAOC,SACP,kBAAC,GAAkBtS,GAEtB+S,IAAQV,GAAOG,OACZQ,GAAQhT,EAAK6R,eAEjB,MAsBLoB,GAAkB,SAAAC,GAGpB,OAtBkB,SAACA,EAAmBC,GACtC,IAAMC,EAASC,MAAMC,KAAKJ,GAEpBzH,EAAW,IAAIhV,KACjB2c,EAAO,GACHA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,IAGTG,EAAeC,KAAKC,OAAON,EAAO1H,GAAR,OAChC,OAAO+H,KAAKE,MAAMP,EAAKP,SAAW,EAAIW,GAAgB,GAIzCI,CAAcT,EADhB,IAAIzc,OAInB,SAASmd,GAAcC,GACnB,OAAOA,EAAM,EAEjB,IAAIC,GAAkB,EAEhBC,GAAkB,SAAA3jB,GACrB,OAAQA,EAAUsT,WACjB,WACAtT,EAAUiU,UACV,MACAjU,EAAUkU,SAGD0P,GAAwB,SAAAhU,GACjC,IAAIiU,EAAQ,GAIZ,YAHavnB,IAATsT,GAA+B,OAATA,IACtBiU,EAAQjL,GAAkBhJ,EAAKxV,SAAW,KAAOwV,EAAKkU,eAAe,MAElED,GAEEE,GAA2B,SAACnU,EAAK+S,GAC1C,IAAMqB,EAAKrB,IAAQV,GAAOG,OAAOxS,EAAKoU,KAAK,GACvCH,EAAQ,GAUZ,YATavnB,IAATsT,GAA+B,OAATA,IACtBiU,EACII,GAAQrd,EAAR,mCACgCgJ,EAAKsU,WAAW1H,cADhD,WAGO,KAAPwH,IACAH,EAAM,IAAD,OAAKA,EAAL,aAAejU,EAAKoU,KAAKtjB,KAAzB,OAGNmjB,GAELjB,GAAQ,SAACuB,GACX,OAAQ,uBAAGzZ,MAAOyZ,EAAM3Z,UAAU,kBAAkBoX,KAAMuC,EAAMha,OAAO,UAAUzF,KAAKkC,EAAL,iCAGxEwd,GAAiC,SAACxU,EAAK+S,GAChD,IAAIkB,EAAQ,GACZ,QAAavnB,IAATsT,GAA+B,OAATA,EAAe,CACrC,GAAIA,EAAKyU,mBAAoB,EACgB,IAArCzU,EAAKyU,mBAAmBxoB,SACxBgoB,GACIjU,EAAKyU,mBAAmBtB,KACxB,OACAkB,GAAQrd,EAAR,0BAEJid,GACIjU,EAAKyU,mBAAmBtB,KACxB,OACAnK,GAAkBhJ,EAAKyU,oBACvB,KACAzU,EAAKyU,mBAAmBP,eACxBlU,EAAKyU,mBAAmBL,OACxBH,GAAS,KAAOjU,EAAKyU,mBAAmBL,KAAKtjB,KAAO,OAG5D,IAAIgK,EACAuZ,GAAQrd,EAAR,+BACA,KACAgd,GAAsBhU,GACtB,KACAmU,GAAyBnU,EAAM+S,GAC/B,KAEJ,OAAOkB,EAAM5U,OAAS,EAClB,oCACI,uBAAGzE,UAAU,kBAAkBE,MAAOA,GACjCmZ,GAEJnB,GAAQ9S,EAAK+S,IAIlB,GAGJ,OACI,oCACI,2BAAIiB,GAAsBhU,IAC1B,2BAAImU,GAAyBnU,EAAK+S,IACjCD,GAAQ9S,EAAK+S,IAK1B,MAAO,IAYF2B,GAAgC,SAAC1U,EAAK+S,GAC/C,IAAIkB,EAAMU,GAAoB3U,EAAK+S,GAGnC,OAFAkB,GAAO,KACHjU,EAAKtP,MAAMoK,MAAM,MAKZ6Z,GAAsB,SAAC3U,EAAK+S,GACrC,IAAMqB,EAAKrB,IAAQV,GAAOG,OAAOxS,EAAKoU,KAAK,GACvCH,EAAM,GAcV,OAbAA,GAnBkC,SAAAjU,GAClC,IAAIiU,EAAQ,GAIZ,YAHavnB,IAATsT,GAA+B,OAATA,IACtBiU,EAAQjU,EAAKkU,gBAEVD,EAcGW,CAAuB5U,GAC7B,KAGAiU,GADO,KAAPG,EACO,IAAF,OAAOC,GAAQrd,EAAR,mCACoBgJ,EAAKsU,WAAW1H,cADpC,WAAP,aAEC5M,EAAKoU,KAFN,OAKGC,GAAQrd,EAAR,mCAC4BgJ,EAAKsU,WAAW1H,cAD5C,WAEF,MA0IDiI,GAA4B,SAAArI,GAAa,OAClD,kBAACsI,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAWpa,UAAU,mBACpB4R,EAAczR,KAAI,SAAA6O,GAAG,OAClB,kBAACoL,GAAA,EAAD,CAAW9Z,IAAKuX,GAAQwC,YACnBZ,GAAQrd,EAAR,sBAAyB4S,WAOjCsL,GAAmB,SAAChE,EAASiE,EAAOnjB,EAAS+gB,GAKtD,OAJI/gB,IACA8hB,GAAkBF,GAAcX,GAAgBjhB,EAASyZ,YAIzD,kBAAC2J,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAO1a,aAAW,gBACbka,GAA0BrI,IAC3B,kBAAC8I,GAAA,EAAD,KACKpE,EAAQnW,KAAI,SAACwa,EAAUC,GACpB,GAAID,EACA,OAtDO,SAACA,EAAUE,EAAU1C,GAEpD,IADA,IAAInX,EAAM,GACV,MAAyByP,OAAOqK,QAAQH,EAAShE,OAAjD,eAAyD,CAApD,2BAAKrW,EAAL,KAAUV,EAAV,KACDA,EAAMoP,IAAM1O,EACZU,EAAI1Q,KAAKsP,GAEb,OACI,kBAACua,GAAA,EAAD,CAAU7Z,IAAKuX,GAAQwC,YACnB,kBAACD,GAAA,EAAD,CAAWpa,UAAU,0BAChBmZ,GAAgBwB,EAASxV,QAE7BnE,EAAIb,KAAI,SAAA6O,GACL,IAAIhP,EAAY,UAIhB,OAHI8X,KAAe9I,EAAIA,KAAOkK,KAAoB2B,IAC9C7a,GAAa,eAGb,kBAACoa,GAAA,EAAD,CAAW9Z,IAAKuX,GAAQwC,WAAYra,UAAWA,GAG1C4Z,GAA+B5K,EAAI5J,KAAK+S,QAkC9B4C,CAAoBJ,EAAUJ,EAAMpC,UAS1D6C,GAAmB,SAC5BnlB,EACAsiB,GAKE,IAJFoC,EAIC,uDAJO,EACRrB,EAGC,uDAHiB,EAClB+B,EAEC,uDAFc,EAGf,OAAOplB,EAAOsK,KAAI,SAACrK,EAAOmgB,GACtB,IAAIiF,EAAU,EACVC,EAAU,EACVC,EAAY,SAKhB,GAHIlC,IAAoBqB,GAASU,IAC7BG,GAAa,eAEE,OAAftlB,EAAMsP,MAA4C,IAA3BtP,EAAMsP,KAAKiW,YAAtC,CAGmB,OAAfvlB,EAAMsP,MAA8C,IAA7BtP,EAAMsP,KAAKkW,gBAClCH,EAAU,EACVC,GAAa,WAEjB,IAAK,IAAInhB,EAAIgc,EAAW,EAAGhc,EAAIpE,EAAO4O,SAE9B3O,GACAD,EAAOoE,IACQ,OAAfnE,EAAMsP,MACa,OAAnBvP,EAAOoE,GAAGmL,QAINtP,EAAMsP,KAAKxV,SACXkG,EAAMsP,KAAKxV,QAAQH,UACnBoG,EAAOoE,GAAGmL,KAAK3V,SACfqG,EAAMsP,KAAKxV,QAAQsG,OACnBL,EAAOoE,GAAGmL,KAAKlP,MACfJ,EAAMsP,KAAKkU,iBACXzjB,EAAOoE,GAAGmL,KAAKkU,gBACfxjB,EAAMsP,KAAKoU,KAAKrpB,KAAO0F,EAAOoE,GAAGmL,KAAKoU,KAAKrpB,IAE3C2F,EAAMsP,KAAKkW,gBACXzlB,EAAOoE,GAAGmL,KAAKkW,eAnBmBrhB,IAwBlCpE,EAAOoE,GAAGmL,KAAKiW,YAAc,EAC7BH,IACAE,GAAa,WASzB,OAEI,kBAAChB,GAAA,EAAD,CAEI9Z,IAAKuX,GAAQwC,WACbkB,QAASL,EACTM,QAASL,EACTnb,UAAWob,GAEVxB,GAA+B9jB,EAAMsP,KAAK+S,SA2J9CsD,GAAY,SAACC,EAASC,EAASC,EAAqBzD,GAG7D,OAAOwD,EAAQxb,KAAI,SAAC3K,EAAWolB,IArCV,SAAAplB,GACjBA,EAAUmhB,OACVnhB,EAAUmhB,MAAMF,IAAIpmB,SAAQ,SAAC+U,EAAMyW,EAAW1b,GAEtC3K,EAAUmhB,MAAMD,KAAKmF,IACrBzW,EAAKtP,MAAM3F,KAAOqF,EAAUmhB,MAAMD,KAAKmF,GAAW/lB,MAAM3F,IAGtC,OAAdiV,EAAKA,MACoC,OAAzC5P,EAAUmhB,MAAMD,KAAKmF,GAAWzW,MAG5BA,EAAKA,KAAKxV,QAAQsG,OACdV,EAAUmhB,MAAMD,KAAKmF,GAAWzW,KAC3BxV,QAAQsG,MACjBkP,EAAKA,KAAKxV,QAAQH,UAClB+F,EAAUmhB,MAAMD,KAAKmF,GAAWzW,KAC3BxV,QAAQH,SACb2V,EAAKA,KAAKkU,iBACN9jB,EAAUmhB,MAAMD,KAAKmF,GAAWzW,KAC3BkU,gBACTlU,EAAKA,KAAKoU,KAAKrpB,KACXqF,EAAUmhB,MAAMD,KAAKmF,GAAWzW,KAAKoU,KAAKrpB,KAE9CqF,EAAUmhB,MAAMF,IAAIoF,GAAWzW,KAAKkW,cAAgB,EACpD9lB,EAAUmhB,MAAMD,KAAKmF,GAAWzW,KAAKiW,YAAc,MAa5DS,CAAiBtmB,GACxB,OAAmB,IAAfolB,EA7IyC,SAEjDmB,EACAvmB,EACAK,EACAmmB,EACA7D,GAEA,IAAI8D,EAAe,eAGfC,EAAe,GACfC,EAAgB,GAepB,OAdIrE,KAAeiE,IACfE,GAAgB,cAEQ,IAApB/C,GACAgD,EAAe,cAEfC,EAAgB,gBAIpBtmB,EAAO6gB,KAAKjS,QAAU,GAAK5O,EAAO4gB,IAAIhS,QAAU,KAChDwX,GAAgB,oBAIhB,kBAAC,IAAMG,SAAP,CAAgB9b,IAAKuX,GAAQwC,YACzB,kBAACF,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAWoB,QAAwB,EAAfQ,EAAkBhc,UAAWic,GAC7C,0BAAMjc,UAAU,WACZ,2BAAIyZ,GAAQrd,EAAR,6BAAgC2f,OAG5C,kBAAC3B,GAAA,EAAD,CAAWpa,UA1BF,iBA0B6Bwb,QAAS,GAC1CrC,GAAgB3jB,IAGrB,kBAAC4kB,GAAA,EAAD,CACIpa,UA/BK,iBA+BuBkc,EAAe,iBAD/C,KAKClB,GAAiBnlB,EAAO4gB,IAAI0B,IAEjC,kBAACgC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACIpa,UAvCK,iBAuCuBmc,EAAgB,iBADhD,KAKCnB,GAAiBnlB,EAAO6gB,KAAKyB,KA0F3BkE,CACHX,EACAlmB,EAAU2P,MACV3P,EAAUmhB,MACViF,EACAzD,GAzFqC,SACjD4D,EACAvmB,EACAK,EACAsiB,GAGA,IACI+D,EAAe,GACfC,EAAgB,GAUpB,OARIrE,KAAeiE,IACS,IAApB7C,GACAgD,EAAe,cAEfC,EAAgB,eAKpB,kBAAC,IAAMC,SAAP,CAAgB9b,IAAKuX,GAAQwC,YACzB,kBAACF,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAWpa,UAfF,iBAe6Bwb,QAAS,GAC1CrC,GAAgB3jB,IAErB,kBAAC4kB,GAAA,EAAD,CACIpa,UAnBK,iBAmBuBkc,EAAe,iBAD/C,KAKClB,GAAiBnlB,EAAO4gB,IAAK0B,EAAM,IAExC,kBAACgC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACIpa,UA3BK,iBA2BuBmc,EAAgB,iBADhD,KAKCnB,GAAiBnlB,EAAO6gB,KAAMyB,EAAM,KAsDlCmE,CACHZ,EACAlmB,EAAU2P,MACV3P,EAAUmhB,MACVwB,OAgCHoE,GAAqB,SAACC,EAAmBrE,GAClDe,GAAkBF,GACdX,GAAgBmE,EAAmBplB,SAASyZ,WAEhD,IA9BoC0E,EA8BhCkH,EAAgB,GAWpB,OAVID,EAAmBplB,WACnBqlB,EACID,EAAmBplB,SAASqQ,YAC5B,KACA+U,EAAmBplB,SAASyZ,SAC5B,IACA2L,EAAmBplB,SAAS0Z,OAC5B,KAIJ,oCACI,4BAAK2L,GACL,kBAACjC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAO1a,aAAW,iBA7CMwV,EA8CMiH,EAAmBjH,UA7C7D,kBAAC2E,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAWmB,QAAS,GACf9B,GAAQrd,EAAE,6BAEdmZ,EAAUpV,KAAI,SAAArK,GAAK,OAChB,kBAACskB,GAAA,EAAD,CAAW9Z,IAAKuX,GAAQwC,WAAYra,UAAU,kBACzClK,EAAMoK,aAuCP,kBAACwa,GAAA,EAAD,KAhCO,SAAC8B,EAAmBrE,GAC5C,OAAQqE,EAAmB5F,YAAYzW,KAAI,SAACwb,EAASD,GAChD,OAAOD,GACHE,EAAQ3M,IACR2M,EAAQrF,QACRkG,EAAmBjM,iBAAiB9L,OACpC0T,MA2BauE,CAAmBF,EAAmBrE,QAyBzDwE,GAAyB,SAAChG,EAAMwB,GAClC,IAAIyE,EAA4B,GAchC,YAZc9qB,IAAV6kB,GACIA,EAAMA,MAAMlS,OAAS,GACrBkS,EAAMA,MAAMxW,KAAI,SAACiF,EAAMyW,GAEflF,EAAMA,MAAMkF,EAAY,IACxBzW,EAAKoU,OAAS7C,EAAMA,MAAMkF,EAAY,GAAGrC,OAEzCoD,GAA6B,+BAMzC,kBAACxC,GAAA,EAAD,CACI9Z,IAAKuX,GAAQwC,WACbra,UAAS,iBAAY4c,IAjfc,SAACjG,EAAMwB,GAElD,IAAIkB,EAAQ,GACRnZ,EAAQ,GACZ,IAAKyW,EACD,MAAO,GAGX,GAAqB,IAAjBA,EAAMlS,OAAc,CACpB,QAAiB3S,IAAb6kB,EAAM,IAAiC,OAAbA,EAAM,GAChC,MAAO,GAEX,IAAMvR,EAAOuR,EAAM,GAEnB,OAAKvR,EAAKyU,qBAO+B,IAArCzU,EAAKyU,mBAAmBxoB,SACxBgoB,GACIjU,EAAKyU,mBAAmBtB,KACxB,KACAkB,GAAQrd,EAAR,0BAGJid,GACIjU,EAAKyU,mBAAmBtB,KACxB,KACAnT,EAAKyU,mBAAmBL,KACxBH,GAAK,WAAOjU,EAAKyU,mBAAmBP,eAA/B,aAAkDlU,EAAKyU,mBAAmBL,KAAKtjB,KAA/E,OAGLmjB,GAAOjU,EAAKyU,mBAAmBP,eAAe,MAGtDpZ,EACIuZ,GAAQrd,EAAR,+BACA,KACA0d,GAA8B1U,EAAK+S,GAChCkB,EAAM5U,OAAS,EAClB,uBAAGzE,UAAU,kBAAkBE,MAAOA,GACjCmZ,EACAnB,GAAQ9S,EAAK+S,IAGlB,IAjCO,oCACF2B,GAA8B1U,EAAK+S,GACnCD,GAAQ9S,EAAK+S,IAkC1B,IAAI/S,EAAKuR,EAAM,GAoCf,OAlCA0C,GAAOU,GAAoB3U,EAAK+S,GAChCxB,EAAMxW,KAAI,SAAAiF,GACDA,EAAKyU,oBAKmC,IAArCzU,EAAKyU,mBAAmBxoB,SAE5BgoB,GACIjU,EAAKyU,mBAAmBtB,KACxB,KACAkB,GAAQrd,EAAR,yBACA,MAEJid,GACIjU,EAAKyU,mBAAmBtB,KACxB,KACArK,GAAmB9I,EAAKyU,mBAAmBjqB,SAC3C,KACAwV,EAAKyU,mBAAmBL,KACxBH,GAAK,UAAMjU,EAAKyU,mBAAmBP,eAA9B,aAAiDlU,EAAKyU,mBAAmBL,KAAKtjB,KAA9E,MAGLmjB,GAAOjU,EAAKyU,mBAAmBP,eAAe,MArBlDD,GA7DoB,SAAAjU,GAE5B,OAAUA,EAAKtP,MAAMoK,MAAM,KA4DhB2c,CAAiBzX,GAuBxBlF,GACIuZ,GAAQrd,EAAR,+BACA,KACA0d,GAA8B1U,EAAK+S,GACnC,QAGDkB,EAAM5U,OAAS,EAClB,uBAAGzE,UAAU,kBAAkBE,MAAOA,GACjCmZ,EACAnB,GAAQ9S,EAAK+S,IAGlB,GAuZK2E,CAAgCnG,GAASA,EAAMA,MAAMwB,KAIrD4E,GAAkB,SAACrkB,EAAU6hB,EAAMpC,GAC5C,GAAIzf,EACA,OACI,kBAAC8hB,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAO1a,aAAW,gBACbka,GAA0BvhB,EAAS0d,MACpC,kBAACsE,GAAA,EAAD,KACKhiB,EAAS4d,QAAQnW,KAAI,SAAA3K,GAClB,OAlDL,SAACA,EAAW4gB,EAAM4G,EAAY7E,GAA9B,OAEnB,kBAACgC,GAAA,EAAD,CAAU7Z,IAAKuX,GAAQwC,YACnB,kBAACD,GAAA,EAAD,CAAWpa,UAAU,yBAEhBmZ,GAAgB3jB,IAEpB4gB,EAAKjW,KAAI,SAAAub,GAEN,GAAIsB,EACA,OAAOL,GACHK,EAAY/lB,MAAK,SAAAgmB,GAAI,OAAIA,EAAKjO,MAAQ0M,KAASvD,OAuChC+E,CACH1nB,EACAkD,EAAS0d,KACT1d,EAASie,MAAMnhB,EAAUrF,IACzBgoB,UAUnBgF,GAA6B,SACtCzkB,EACAxE,GAEA,QAAiBpC,IAAb4G,EACJ,OAAIA,EACwB,IAApBA,EAAS+L,OACFgV,GAAQrd,EAAE,kBAEd1D,EAASyH,KAAI,SAACwb,EAASyB,GAC1B,IAAM5E,EAASC,MAAMC,KAAKiD,EAAQpD,MAE5B1H,EAAW,IAAIhV,KACjB2c,EAAO,GACHA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,IAEf,OACI,kBAAC,GAAD,CACIrT,MACIjR,yCAIJoM,IAAKuX,GAAQwC,YAEb,4BACKsB,EAAQpD,KACL,MACAkB,GAAQrd,EAAR,sBAAyByU,EAASmH,SAAW,IAC7C,MAEPqF,GAAsB1B,EAAQjjB,mBAlC/C,GAkFE4kB,GAAuB,SAAA9nB,GACzB,OACI,kBAAC2kB,GAAA,EAAD,CAAU7Z,IAAKuX,GAAQwC,YACnB,kBAACD,GAAA,EAAD,CAAWoB,QAAShmB,EAAU7E,QAAQ8T,QACjCjP,EAAU2P,MAAM2D,WACb,MACAtT,EAAU2P,MAAMsE,UAChB,MACAjU,EAAU2P,MAAMuE,QAChB,MAlDW6T,EAoDK/nB,EAAU7E,QAAQ,GAlD9C,oCACI,kBAACypB,GAAA,EAAD,KAAYmD,EAAW1sB,OAAO2sB,kBAC9B,kBAACpD,GAAA,EAAD,KAAYmD,EAAW1sB,OAAO4sB,YAC9B,kBAACrD,GAAA,EAAD,KAAYmD,EAAW1sB,OAAO2oB,KAAKtjB,SALhB,IAAAqnB,GAyDlBF,GAAwB,SAAA3kB,GACjC,GAAIA,EACA,OACI,kBAAC8hB,GAAA,EAAD,CAAgBla,IAAKuX,GAAQwC,YACzB,kBAACI,GAAA,EAAD,CAAO1a,aAAW,gBACd,kBAAC2a,GAAA,EAAD,KACKhiB,EAASyH,KAAI,SAAA3K,GACV,OACI,kBAAC,IAAM4mB,SAAP,CAAgB9b,IAAKuX,GAAQwC,YACxBiD,GAAqB9nB,GAxD3B,SAAA7E,GAC3B,GAAuB,IAAnBA,EAAQ8T,OAAZ,CAGA,IAAIiZ,EAAkB,GAatB,OAZAA,EAAkB,WAClB/sB,EAAQN,SAAQ,SAACktB,EAAYI,IAErBhtB,EAAQgtB,EAAc,IACrBJ,EAAW1sB,OAAO2sB,mBACf7sB,EAAQgtB,EAAc,GAAG9sB,OAAO2sB,kBAChCD,EAAW1sB,OAAO2oB,KAAKrpB,KACnBQ,EAAQgtB,EAAc,GAAG9sB,OAAO2oB,KAAKrpB,KAE7CutB,EAAkB,cAGnB/sB,EAAQwP,KAAI,SAACod,EAAYI,GAC5B,GAAoB,IAAhBA,EAGJ,OACI,kBAACxD,GAAA,EAAD,CAAUna,UAAW0d,EAAiBpd,IAAKuX,GAAQwC,YAC/C,kBAACD,GAAA,EAAD,KAAYmD,EAAW1sB,OAAO2sB,kBAC9B,kBAACpD,GAAA,EAAD,KAAYmD,EAAW1sB,OAAO4sB,YAC9B,kBAACrD,GAAA,EAAD,KAAYmD,EAAW1sB,OAAO2oB,KAAKtjB,WAgCd0nB,CAAuBpoB,EAAU7E,iB,SCpyBhEknB,I,OAAUnc,EAAQ,MAElBmiB,GAAYC,cAAW,SAAA3K,GAAK,MAAK,CACnCC,KAAM,CACF,QAAS,CACL2K,OAAQ5K,EAAM6K,QAAQ,SA4LnB5Q,iBARS,SAAAzd,GAAK,MAAK,CAC9BkG,OAAQlG,EAAMkG,OAAOA,OACrBnG,SAAUC,EAAMD,SAASA,SACzBmF,UAAWlF,EAAM+I,SAAS7D,UAC1BvB,QAAS3D,EAAMgJ,iBAAiBrF,QAChC2qB,cAAc,CAAC7mB,SAAUzH,EAAM+I,SAAS5D,mBAAmBgB,MAAOnG,EAAM+I,SAAS3E,gBAAgBnE,QAASD,EAAM+I,SAAShE,sBAG9G0Y,CACXD,aAAU,CACNvU,KlB5M4B,wBkB2MhCuU,EAxLyB,SAAA9N,GACzB,MAAuCqP,oBAAS,GAAhD,oBAAOwP,EAAP,KAAqBC,EAArB,KACM7H,EAAUuH,KACRzhB,EAAMkD,aAAe,UAArBlD,EAEJvG,EAMAwJ,EANAxJ,OACAnG,EAKA2P,EALA3P,SACAmF,EAIAwK,EAJAxK,UACA6W,EAGArM,EAHAqM,aACAC,EAEAtM,EAFAsM,SACAC,EACAvM,EADAuM,WAEE3I,EAAY5D,EAAM/L,QACxB,EAAiCob,mBAASrP,EAAM4e,cAAc7mB,UAA9D,oBAAOrC,EAAP,KAAkBqpB,EAAlB,KACIC,EAAmB,GACnBpb,IACAob,EACI,6BAASre,UAAU,sBACf,kBAACmV,GAAA,EAAD,QAIZlJ,qBAAU,kBAAMzH,GAA2BzP,KAAa,CAACA,IACzDkX,qBAAU,W5BmTV/Z,EACK2Q,I9B1TyB,mB8B2TzBxJ,MAAK,SAAArG,GACFgP,GAAMC,SAASP,GAAgB1O,EAASkG,UAE3C6J,OAAM,SAAAM,GAAG,OAAIf,GAAae,Q4BxTiB,IAChD4I,qBAAU,kBAAM5H,OAAiC,IACjD4H,qBAAU,WACa,IAAhBpW,EAAO4O,OACN0Z,GAAiB,GAGjBA,GAAiB,KAEtB,CAACtoB,IA0FJ,OATAoW,qBAAU,WAEN5M,EAAM8M,WAAW,CACb/U,SAASiI,EAAM4e,cAAc7mB,SAC7BtB,MAAOuJ,EAAM4e,cAAcnoB,MAC3BlG,QAAQyP,EAAM4e,cAAcruB,YAElC,IAGE,6BAASoQ,UAAWsW,EAAQlD,MACxB,2BAAIhX,EAAE,+BACN,2BAAIA,EAAE,oCACN,6BAAS4D,UAAU,8BACf,kBAAC,GAAD,CAAMmF,MAAM,wBACR,0BAAMuH,SAAUhB,GA/FL,WACvB,GAAI7W,EAAW,CACX,GAAIA,EAAU4P,OAAS,EAEnB,OACI,kBAACkI,GAAA,EAAD,CACIxc,GAAG,WACH+F,KAAK,WACL0W,UAAWhC,GACXE,MAAO1O,EAAE,+BACTrM,KAAK,OACL8c,SAAU,CAAC/E,IACXpH,SAAU,SAACiF,GAAD,OAAKyY,EAAczY,EAAEhG,OAAOC,SAEtC,iCACC/K,EAAUsL,KAAI,SAAC/I,EAAUhD,GAAX,OAEX,4BACIkM,IAAKuX,GAAQwC,WACbza,MAAOxI,EAASjH,IAGfiH,EAASqQ,iBAOzB,GAAyB,IAArB5S,EAAU4P,OAEf,OADAiH,EAAa,CAAEtU,SAAUvC,EAAU,GAAG1E,KAC/B,2BAAI0E,EAAU,GAAG4S,cAiEf6W,GAvCV,kBAAC3R,GAAA,EAAD,CACHG,SAAUoR,EACV/tB,GAAG,QACH+F,KAAK,QACL0W,UAAWhC,GACXE,MAAO1O,EAAE,4BACTrM,KAAK,OACL2Q,SAAU,WACNrB,EAAMmN,OAAO,UAAW,KAG5B,iCACC3W,EAAOsK,KAAI,SAACrK,EAAO1B,GAAR,OACR,4BACIkM,IAAKuX,GAAQwC,WACbza,MAAO9J,EAAM3F,IAEZ2F,EAAMoK,WAtCZ,kBAACyM,GAAA,EAAD,CACHxc,GAAG,UACH+F,KAAK,UACL0W,UAAWhC,GACXE,MAAO1O,EAAE,8BACTrM,KAAK,OACL2Q,SAAU,kBAAMrB,EAAMmN,OAAO,QAAS,KAGtC,iCACC9c,EAASyQ,KAAI,SAACvQ,EAASwE,GAAV,OACV,4BACIkM,IAAKuX,GAAQwC,WACbza,MAAOhQ,EAAQO,IAEd+d,GAAmBte,QAiDhB,kBAACod,GAAA,EAAD,CACIC,QAAQ,YACRxM,MAAM,UACN1Q,KAAK,SACL+c,SAAUnB,GAAYC,GAItB,kBAAC,KAAD,CACI1L,MAAO9D,EAAE,0BACT4D,UAAU,eAO1B,0BAAM7P,GAAG,gBACL,2BAAOib,QAAS,+BAAgChP,EAAE,0BACtD,kBAACiP,GAAA,EAAD,CAAQrL,UAAU,QACVue,QAAQ,oCACRpuB,GAAG,8BACHyP,MAAOP,EAAM8Y,MACbzX,SAAUrB,EAAMqB,UAKhB+P,OAAOqK,QAAQrD,IAAQtX,KAAI,SAASjH,EAAM9E,GACtC,OAAO,kBAACqf,GAAA,EAAD,CAAU7T,MAAO1G,EAAK,GAAIoH,IAAKpH,EAAK,IAAKkD,EAAE,GAAD,OAAIlD,EAAK,GAAT,mB,MAQhEmlB,OCiJEjR,iBAdS,SAAAzd,GAAK,MAAK,CAC9BmE,aAAcnE,EAAM+I,SAAS5E,aAC7BD,cAAelE,EAAM+I,SAAS7E,cAC9BD,aAAcjE,EAAM+I,SAAS9E,aAC7BgB,gBAAiBjF,EAAM+I,SAAS9D,gBAChC9D,QAASnB,EAAM+I,SAAS3E,gBACxBxC,UAAW5B,EAAM+I,SAAShE,kBAC1BK,WAAYpF,EAAM+I,SAAS5D,mBAC3BxB,QAAS3D,EAAMgJ,iBAAiBrF,QAChCW,gBAAiBtE,EAAM+I,SAASzE,gBAChCY,UAAWlF,EAAM+I,SAAS7D,aAIfuY,EAtTW,SAAA/N,GAEtB,MAAuBqP,mBAAS+I,GAAOC,UAAvC,oBAAOS,EAAP,KAAaqG,EAAb,KACK1qB,EAA8HuL,EAA9HvL,aAAcD,EAAgHwL,EAAhHxL,cAAeD,EAAiGyL,EAAjGzL,aAAcgB,EAAmFyK,EAAnFzK,gBAAgB9D,EAAmEuO,EAAnEvO,QAAQS,EAA2D8N,EAA3D9N,UAAWwD,EAAgDsK,EAAhDtK,WAC/E0pB,GAD+Hpf,EAArC/L,QAAqC+L,EAA7BpL,gBAA6BoL,EAAbxK,UACxG6pB,yBAERC,EAAWC,yBACXC,EAAgB,kBAClB,uBAAG7e,UAAU,kBAAkB5D,EAAE,2BAE7BA,EAAMkD,aAAe,UAArBlD,EACF0iB,EAAqB,SAACC,EAAQhqB,EAAYiqB,GAC5C,IAAIrF,EAAO,GACJ9f,EAAUK,KAAVL,SACDolB,EAAkB,aAAD,OAAcplB,GACrC,GAAI9E,GAAciqB,EAAU,CACxB,OAAQD,GACJ,IAAK,QACDpF,EACIuF,+CAEAF,EACA,eACAjqB,EACAkqB,EACJ,MACJ,IAAK,UACDtF,EACIwF,mDAEAH,EACA,eACAjqB,EACAkqB,EAKZ,OACI,uBACI7H,KAAMuC,EACNha,OAAO,SACPyf,IAAI,sBACJnS,QAAQ,YACRxM,MAAM,UACNT,UAAU,WACVqf,UAAQ,GAER,kBAAC,KAAD,CAAgBrf,UAAU,YACzB5D,EAAE,0BAwCbkjB,EAAiB,WACnB,OAAQjgB,EAAMvL,cACV,IAAK,QACD,KACMD,GACGA,EAAc6E,UACuB,IAAlC7E,EAAc6E,SAAS+L,UAC9BpF,EAAM/L,QAEP,OAAOurB,IAGX,IAAMU,EP7IW,SAAA1rB,GAC7B,IAAIkiB,EAAY,GACZD,EAAW,GACXhgB,EAAQ,GAGN0pB,EAAoB,CACtB,CAAExQ,IAAK,SAAU7J,MAAO,IACxB,CAAE6J,IAAK,UAAW7J,MAAO,IACzB,CAAE6J,IAAK,YAAa7J,MAAO,IAC3B,CAAE6J,IAAK,WAAY7J,MAAO,IAC1B,CAAE6J,IAAK,SAAU7J,MAAO,IACxB,CAAE6J,IAAK,WAAY7J,MAAO,IAC1B,CAAE6J,IAAK,SAAU7J,MAAO,KAEtBsa,EAAmB,CACrB,CAAEzQ,IAAK,SAAU7J,MAAO,IACxB,CAAE6J,IAAK,UAAW7J,MAAO,IACzB,CAAE6J,IAAK,YAAa7J,MAAO,IAC3B,CAAE6J,IAAK,WAAY7J,MAAO,IAC1B,CAAE6J,IAAK,SAAU7J,MAAO,IACxB,CAAE6J,IAAK,WAAY7J,MAAO,IAC1B,CAAE6J,IAAK,SAAU7J,MAAO,KAwE5B,OArEItR,EAAc6E,UAAY7E,EAAc6E,SAAS+L,OAAS,IAC1D3O,EAAQjC,EAAc6E,SAAS,GAAG5C,MAClCjC,EAAc6E,SAAS,GAAG0d,KAAKjW,KAAI,SAAA6O,GAC/BA,EAAIsH,QAAQnW,KAAI,SAAA3K,GACZgqB,EAAkBrf,KAAI,SAAAuf,GACdA,EAAY1Q,MAAQA,EAAIA,MACxB0Q,EAAYva,MAAM3P,EAAU2P,MAAMhV,IAAM,CACpCgV,MAAO3P,EAAU2P,MACjBC,KAAM5P,EAAUghB,MAAME,UAKlC+I,EAAiBtf,KAAI,SAAAwf,GACbA,EAAW3Q,MAAQA,EAAIA,MACvB2Q,EAAWxa,MAAM3P,EAAU2P,MAAMhV,IAAM,CACnCgV,MAAO3P,EAAU2P,MACjBC,KAAM5P,EAAUghB,MAAMC,gBAQ9CgJ,EAAiBtf,KAAI,SAAAyf,GACjBA,EAAOza,MAAMhF,KAAI,SAAC0f,EAASC,GAClBhK,EAAS9c,eAAe8mB,KACzBhK,EAASgK,GAAa,CAAE3a,MAAO0a,EAAQ1a,MAAOwR,MAAO,KAGzD/E,GAAczR,KAAI,SAAA4f,GACTjK,EAASgK,GAAWnJ,MAAM3d,eAAe+mB,KAC1CjK,EAASgK,GAAWnJ,MAAMoJ,GAAU,OAGvB,OAAjBF,EAAQza,WAAkCtT,IAAjB+tB,EAAQza,MAE7Bya,EAAQza,KAAKpM,eAAe,aAC5B8c,EAASgK,GAAWnJ,MAAMiJ,EAAO5Q,KAAO,CACpC5J,KAAMya,EAAQza,aAOlCoa,EAAkBrf,KAAI,SAAA6f,GAClBA,EAAQ7a,MAAMhF,KAAI,SAAC8f,EAAUH,GACpB/J,EAAU/c,eAAe8mB,KAC1B/J,EAAU+J,GAAa,CAAE3a,MAAO8a,EAAS9a,MAAOwR,MAAO,KAG3D/E,GAAczR,KAAI,SAAA4f,GACThK,EAAU+J,GAAWnJ,MAAM3d,eAAe+mB,KAC3ChK,EAAU+J,GAAWnJ,MAAMoJ,GAAU,OAGvB,OAAlBE,EAAS7a,WAAmCtT,IAAlBmuB,EAAS7a,MAE/B6a,EAAS7a,KAAKpM,eAAe,aAC7B+c,EAAU+J,GAAWnJ,MAAMqJ,EAAQhR,KAAO,CACtC5J,KAAM6a,EAAS7a,cAM5B,EACA,CACHhO,SAAUvD,EAAcuD,SACxB0e,WACAC,YACAjgB,QACA6f,MANG,GOgD0BuK,CAAkBrsB,GACvC,GAAI0rB,EAAa5J,KAEb,OADA3S,IAAkB,GAEd,oCACI,4BAnDS,SAAC5L,EAAUtB,GACxC,IAAIoK,EAAQ,GAaZ,OAZI9I,IACA8I,GACI9I,EAASqQ,YACT,KACArQ,EAASyZ,SACT,IACAzZ,EAAS0Z,OACT,QAEJhb,IACAoK,GAASpK,EAAMoK,MAAQpK,EAAMoK,MAAQ,IAElCA,EAsCkBigB,CACGZ,EAAanoB,SACbmoB,EAAazpB,OAEhBgpB,EACG,QACAzf,EAAMtK,WACNsK,EAAMvO,UAGd,4BAAKsL,EAAE,oBACNke,GACGiF,EAAazJ,SACb,EACAyJ,EAAanoB,SACb+gB,GAEJ,4BAAK/b,EAAE,qBACNke,GACGiF,EAAaxJ,UACb,EACAwJ,EAAanoB,SACb+gB,IAKXnV,IAAkB,GACvB,MACJ,IAAK,UACD,KACMpO,IACGA,EAAgBwhB,MACe,IAAhCxhB,EAAgBwhB,KAAK3R,UACxBpF,EAAM/L,QAEP,OAAOurB,IAEP,GAAGjqB,EAAiB,CAChB,IAAMhF,EPbK,SAAAgF,GAC/B,IAAIhF,EAAU,GACVmmB,EAAY,GACZD,EAAW,GACXsK,EAAU,GACVC,EAAW,GACXC,EAAa,GACbC,EAAc,GACd5K,GAAO,EAoDX,OAlDI/gB,GAAmBA,EAAgBwhB,OACnCxmB,EAAUgF,EAAgBhF,QAE1BgF,EAAgBwhB,KAAKjW,KAAI,SAAAqgB,GACrBA,EAAW/J,IAAIH,QAAQnW,KAAI,SAAA8c,GAEnBqD,EAAWjsB,WACP,SAAAosB,GAAQ,OAAIA,EAAStwB,KAAO8sB,EAAK9X,MAAMhV,MACvC,GAEJmwB,EAAWhwB,KAAK2sB,EAAK9X,OAErBib,EAAQzP,QAAQ6P,EAAWxR,KAAO,GAClCoR,EAAQ9vB,KAAKkwB,EAAWxR,KAEtBiO,EAAK9X,MAAMhV,MAAM2lB,IACnBA,EAASmH,EAAK9X,MAAMhV,IAAM,IAG9B2lB,EAASmH,EAAK9X,MAAMhV,IAAIG,KAAK,CACzB0e,IAAKwR,EAAWxR,IAChB2H,MAAOsG,EAAKtsB,aAIpB6vB,EAAW9J,KAAKJ,QAAQnW,KAAI,SAAA8c,GAEpBsD,EAAYlsB,WACR,SAAAqsB,GAAS,OAAIA,EAAUvwB,KAAO8sB,EAAK9X,MAAMhV,MACzC,GAEJowB,EAAYjwB,KAAK2sB,EAAK9X,OAEtBkb,EAAS1P,QAAQ6P,EAAWxR,KAAO,GACnCqR,EAAS/vB,KAAKkwB,EAAWxR,KAEvBiO,EAAK9X,MAAMhV,MAAM4lB,IACnBA,EAAUkH,EAAK9X,MAAMhV,IAAM,IAG/B4lB,EAAUkH,EAAK9X,MAAMhV,IAAIG,KAAK,CAC1B0e,IAAKwR,EAAWxR,IAChB2H,MAAOsG,EAAKtsB,gBAIxBglB,GAAO,GAIJ,CACHA,OACA/lB,UACAwH,SAAUxC,EAAgBwC,SAC1Bqf,IAAK,CACDL,KAAMgK,EACN9J,QAASgK,EAAWrwB,MAAK,SAACX,EAAGC,GAAJ,OACrBD,EAAEma,UAAYla,EAAEka,UACV,EACAla,EAAEka,UAAYna,EAAEma,WACf,EACD,KAEVkN,MAAOb,GAEXY,KAAM,CACFN,KAAMiK,EACN/J,QAASiK,EAAYtwB,MAAK,SAACX,EAAGC,GAAJ,OACtBD,EAAEma,UAAYla,EAAEka,UACV,EACAla,EAAEka,UAAYna,EAAEma,WACf,EACD,KAEVkN,MAAOZ,IOvEqB4K,CAAoB/rB,GACpC,GAAIhF,EAAQ+lB,KAER,OADA3S,IAAkB,GAEd,oCACI,4BAhFG,SAAC5L,EAAUxH,GAC1C,IAAIsQ,EAAQ,GAcZ,OAbI9I,IACA8I,GACI9I,EAASqQ,YACT,KACArQ,EAASyZ,SACT,IACAzZ,EAAS0Z,OACT,QAEJlhB,IACAsQ,GhBvG0B,SAACtQ,GACnC,IAAOsG,EAAkCtG,EAAlCsG,KAAKzG,EAA6BG,EAA7BH,QAAQ0e,EAAqBve,EAArBue,WAAWE,EAAUze,EAAVye,SAC/B,MAAM,GAAN,OAAUA,EAAV,YAAsB5e,EAAtB,YAAiCyG,EAAjC,YAAyCiY,GgBsG7ByS,CAAuBhxB,IAExBsQ,EAkE0B2gB,CACGjxB,EAAQwH,SACRxH,EAAQA,SAEXkvB,EACG,UACAzf,EAAMtK,WACNsK,EAAM9N,YAGd,4BAAK6K,EAAE,oBACN2gB,GAAgBntB,EAAQ6mB,IAAK,EAAE0B,GAChC,4BAAK/b,EAAE,qBACN2gB,GAAgBntB,EAAQ8mB,KAAM,EAAEyB,SAK5CnV,IAAkB,GAC3B,MACJ,IAAK,OAED,KACMpP,EAAa8E,UACsB,IAAjC9E,EAAa8E,SAAS+L,UACzBpF,EAAM/L,QAEP,OAAOurB,IAEX,IAAM7uB,EAASqlB,GAAiBzhB,GAEhC,GAAI5D,EAAOslB,aAAetlB,EAAO2lB,KAE7B,OADA3S,IAAkB,GACXuZ,GAAmBvsB,EAAOmoB,GAEhCnV,IAAkB,GACvB,MACJ,IAAK,WACD,KACMpP,EAAa8E,UACsB,IAAjC9E,EAAa8E,SAAS+L,UACzBpF,EAAM/L,QAEP,MAAO,GAEX,IAAMwtB,EAAUzL,GAAiBzhB,GACjC,GAAIktB,EAAQxL,aAAewL,EAAQnL,KAE/B,OADA3S,IAAkB,GACXuZ,GAAmBuE,EAAQ3I,GAEjCnV,IAAkB,GACvB,MAGJ,QACI,SAIN0I,EAAe,SAAArD,GACjB,IAAOjR,EAAwBiR,EAAxBjR,SAAStB,EAAeuS,EAAfvS,MAAMlG,EAASyY,EAATzY,QAChBmxB,EAAUjrB,EAAM,UAAUA,EAAM,GAChCkrB,EAAYpxB,EAAQ,YAAYA,EAAQ,GAC9CoT,GAAkB,Q7BnCU,SAAAqF,GAEhC/D,GAA6B+D,EAAOjR,UAEhCiR,EAAOrP,eAAe,WAAaqP,EAAOvS,MAAQ,GAClDiO,GAAuB,SACvBF,GAA0BwE,EAAOvS,OACjCmO,GAAiBoE,EAAOvS,MAAOuS,EAAOjR,WAItCiR,EAAOrP,eAAe,aAAeqP,EAAOzY,QAAU,GACtDmU,GAAuB,WAEvBI,GAA4BkE,EAAOzY,SACnCsU,GAAmBmE,EAAOzY,QAASyY,EAAOjR,aAIxCiR,EAAOrP,eAAe,WACnBqP,EAAOrP,eAAe,YAC1BqP,EAAOrP,eAAe,WAClBqP,EAAOrP,eAAe,YACL,KAAjBqP,EAAOvS,QACVuS,EAAOrP,eAAe,UACpBqP,EAAOrP,eAAe,YACF,KAAnBqP,EAAOzY,SACXyY,EAAOrP,eAAe,UACnBqP,EAAOrP,eAAe,YACF,KAAnBqP,EAAOzY,SACU,KAAjByY,EAAOvS,SAEZiO,GAAuB,QACvBC,GAAgBqE,EAAOjR,W6BGvB6pB,CAAqB5Y,GACrBoW,EAAQnuB,KAAK6M,GAAM6B,YAAY,aAAa5H,EAAS2pB,EAAUC,IAGnE/U,qBAAU,kBAAIjI,OAAkB,CAACmU,IAGjClM,qBAAU,WACa,UAAfnY,GACHmQ,GAAiBnT,EAASiE,KAC5B,CAACjE,IACHmb,qBAAU,WACY,YAAfnY,GACHoQ,GAAmB3S,EAAWwD,KAChC,CAACxD,IAEJ0a,qBAAU,WACa,SAAfnY,GAA6C,IAAtBF,EAAa6Q,QACpCT,QAGRiI,qBAAU,WACN3I,OACF,IAEH,IA0CO4d,EAAY,SAACvb,GACZA,EAAEhG,QACD6e,EAAS7Y,EAAEhG,OAAOC,QAI1B,OACI,oCApByB,aAAvBP,EAAMvL,aAGH,kBAAC,GAAD,CACKA,aAAcuL,EAAMvL,aACrB4Y,SAAUhB,EAAcyM,MAAOA,EAAOzX,SAAUwgB,IAMnD,KAxCO,WACd,GAAyB,KAArB7hB,EAAMvL,mBAAgDhC,IAA3BuN,EAAMpL,gBAAgB9D,GAArD,CAMA,GAAwB,KAArBkP,EAAMvL,cAAoB6qB,EAASwC,WAAWhkB,GAAMC,UAEnD,OAAOkiB,IAKX,IAAM8B,EAAS,IAAIC,gBAAgB1C,EAAS2C,QAEtClqB,EAAUgqB,EAAOve,IAAI,YACrBjT,EAAQwxB,EAAOve,IAAI,WACnB/M,EAAMsrB,EAAOve,IAAI,SAEvB,OAAc,OAAXzL,GACCsU,EAAa,CAAEtU,WAAU,MAAkB,MAATtB,EAAgBA,EAAQ,EAAG,QAAsB,MAAXlG,EAAkBA,EAAU,IAChG,MAEI,KAtBR,IAAMwH,EAAS,GAAD,OAAIiI,EAAMpL,gBAAgB9D,IACxCub,EAAa,CAAE,SAAWtU,IAgDxBmqB,OCtQEnU,iBAJS,SAAAzd,GAAK,MAAK,CAC9B0kB,SAAU1kB,EAAM6I,KAAK3F,QAGVua,EA/CE,SAAA/N,GACb,IAAQjD,EAAMkD,aAAe,UAArBlD,EAiCR,OAhCA6P,qBAAU,kBAAMuB,OAAqC,IACrDlJ,GAA6B,MAC7BP,GAAuB,IAGvBkI,qBAAU,WACF5M,EAAMgV,WAGX,IACHpI,qBAAU,WACiB,OAAnB5M,EAAMgV,WAEN/Q,KACAS,GAAuB,OAE5B,IACHkI,qBAAU,WACF5M,EAAMgV,WAAa1G,GAAUG,UAE7BxK,KACAS,GAAuB,OAE5B,IACHkI,qBAAU,WACF5M,EAAMgV,WAAa1G,GAAUE,UAE7BvK,KACAS,GAAuB,OAE5B,IAIC,kBAAC,WAAD,KACI,4BAAK3H,EAAE,eACP,kBAAC,GAAD,CAAmBtI,aAAa,gB,sFCtC7B0tB,GApBY,SAAC,GAKrB,IAJH1W,EAIE,EAJFA,MAIE,IAHFD,MAASjL,EAGP,EAHOA,MAAU6hB,EAGjB,uBAFF1W,KAAQC,EAEN,EAFMA,QAAS0W,EAEf,EAFeA,QAAS5uB,EAExB,EAFwBA,MACvBmY,EACD,mBACF,OACI,kBAAC,KAAD,CAAyB0W,MAAOC,MAC5B,kBAACC,GAAA,EAAD,eACIC,WAAS,EACTliB,MAAOA,EAAQ0I,GAAO1I,EAAO,cAAc2I,SAAW,KACtDwZ,OAAO,aACPjvB,MAAOkY,GAAW0W,EAClBM,WAAYhX,GAAWlY,EAAQkY,GAAWlY,EAAQgY,GAC9C2W,EACAxW,MCmFLmC,iBAJS,SAAAzd,GAAK,MAAK,CAC9BwF,iBAAkBxF,EAAMsF,aAAaE,oBAG1BiY,CACXD,aAAU,CACNvU,KtBxF6B,uBsBuFjCuU,EAhFsB,SAAA9N,GACtB,IAAQjD,EAAMkD,aAAe,gBAArBlD,EACAsP,EAAiBrM,EAAjBqM,aAWR,OARAO,qBAAU,WACN5M,EAAM8M,WAAW,CACb0E,SAAUvI,GAAO,IAAIzM,KAAQ,cAAckmB,OAAO,cAClDjR,OAAQxI,GAAO,IAAIzM,KAAQ,cACtBomB,IAAI,EAAG,KACPF,OAAO,kBAEjB,EATgB,IAWf,kBAAC,GAAD,CAAM5c,MAAO,mCACT,0BAAMuH,SAAUhB,GACZ,yBAAK1L,UAAU,mBACX,wBAAIA,UAAU,cACT5D,EAAE,6CAEP,kBAACuQ,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,WACL0W,UAAWsV,GACXpX,MAAO1O,EAAE,oBAAsB,IAC/ByQ,SAAU,CAAC/E,GAAU4C,MAEzB,kBAACiC,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,SACL0W,UAAWsV,GACXpX,MAAO1O,EAAE,kBAAoB,IAC7ByQ,SAAU,CAAC/E,GAAU6C,MAEzB,yBAAK3K,UAAU,0BACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,gBACVjQ,KAAK,SACLkd,QAAQ,YACRxM,MAAM,WAEN,kBAAC,KAAD,CACIP,MAAO9D,EAAE,uBACT4D,UAAU,aAGlB,kBAACgN,GAAA,EAAD,CACIhN,UAAU,wCACViN,QAAQ,YACRxM,MAAM,YACNP,MAAO9D,EAAE,qBACT8Q,QAAS,kBACLnI,GAA0B,iBAG9B,kBAAC,KAAD,CAAc/E,UAAU,aAE5B,kBAACgN,GAAA,EAAD,CACIhN,UAAU,iBACViN,QAAQ,YACRxM,MAAM,YACNP,MAAO9D,EAAE,oBACT8Q,QAAS,kBACLnI,GAA0B,eAG9B,kBAAC,KAAD,CAAgB/E,UAAU,qBC9CvCoN,iBALS,SAAAzd,GAAK,MAAK,CAC9B2D,QAAS3D,EAAMgJ,iBAAiBrF,QAChCoF,SAAU/I,EAAM+I,SAAS1D,qBACzBd,2BAA4BvE,EAAM+I,SAASxE,8BAEhCkZ,EAhCS,SAAA/N,GAepB,OAPA4M,qBAAU,WACNkR,GACI9d,EAAM3G,SACN2G,EAAMnL,8BAEX,CAACmL,EAAMnL,6BAGN,oCACI,kBAAC,GAAD,CAAqBwY,SAbd,SAAArE,IjCkfsB,SAAAA,GACrCnW,EACK2Q,IACGsf,0BAEI9Z,EAAOwI,SAASuR,QAAQ,MAAO,KAC/B,OACA/Z,EAAOyI,OAAOsR,QAAQ,MAAO,MAEpC/oB,MAAK,SAAArG,GACFgQ,IAAkB,GAClBhB,GAAMC,SZtaP,CACHlS,K1CyCkC,6B0CxClCC,OYoa2CgD,EAASkG,UAEnD6J,OAAM,SAAAM,GACHf,GAAae,GACbL,IAAkB,MiChgBtBqf,CAA0Bha,IAYiByJ,QAhBvB,WjCkfxBtP,GU9eiC,0BuBazB,iCACK2a,GACG9d,EAAM3G,SACN2G,EAAMnL,iCCdbouB,GAAqB,SAAAxxB,GAC9BkR,GAAMC,S1CWC,CACHlS,K9CiDoB,e8ChDpBC,O0CbuBc,KAWlByxB,GAAuB,WAChCrwB,EACK2Q,IhEhCgB,UgEiChBxJ,MAAK,SAAArG,GACFgP,GAAMC,SAASJ,GAAc7O,EAASkG,KAAKjJ,MAAK,SAACX,EAAGC,GAAJ,OAAUD,EAAIC,UAEjEwT,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAmBxB0vB,GAAqB,SAAAtpB,GAC9BhH,EACKkH,KhEzDgB,SgEyDAF,GAChBG,MAAK,SAAArG,GACFgP,GAAMC,S1C3CP,CACHlS,K9C4DiB,Y8C3DjBC,O0CyC4BgD,EAASkG,OACjCsJ,GxB1Dc,YwB2DdD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,4BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAGxB2vB,GAAqB,SAAAvpB,GAC9B,OAAOhH,EACFsH,IhEzEgB,SgEyEDN,GACfG,MAAK,SAAArG,GACFgP,GAAMC,S1CtCP,CACHlS,K9C2CoB,e8C1CpBC,O0CoC+BgD,EAASkG,OACpCopB,GAAmB,MACnBI,KACAH,KACA/f,GxB7Ec,YwB8EdD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,4BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAGxB4vB,GAA2B,WACpCxwB,EACK2Q,IhErD0B,mBgEsD1BxJ,MAAK,SAAA2H,GACFgB,GAAMC,S1CtFe,SAAAjB,GAC7B,MAAO,CACHjR,K9C8H2B,sB8C7H3BC,OAAQgR,G0CmFW2hB,CAAkB3hB,EAAI9H,UAExC6J,OAAM,SAAAjQ,GACHwP,GAAaxP,OC1EZ8vB,GAAyB,WA8DlC5gB,GAAMC,SAASP,GA7DJ,CACP,CACI,WAAc,CACV,GAAM,GACN,KAAQ,cACR,SAAW,GAEf,GAAM,GACN,KAAQ,mDACR,QAAW,mDACX,WAAc,+DACd,SAAY,uCACZ,SAAW,EACX,MAAS,mBAGb,CACI,WAAa,CACT,GAAM,GACN,KAAQ,cACR,SAAW,GAEf,GAAM,GACN,KAAQ,6CACR,QAAW,yDACX,WAAc,+DACd,SAAY,uCACZ,SAAW,EACX,MAAQ,mBAGZ,CACI,WAAa,CACT,GAAM,GACN,KAAQ,cACR,SAAW,GAEf,GAAM,GACN,KAAQ,2BACR,QAAW,2BACX,WAAc,mDACd,SAAY,uCACZ,SAAW,EACX,MAAQ,mBAGZ,CACI,WAAa,CACT,GAAM,GACN,KAAQ,oBACR,SAAW,GAEf,GAAM,GACN,KAAQ,iCACR,QAAW,yDACX,WAAc,iFACd,SAAY,uCACZ,SAAW,EACX,MAAQ,sBAIRsB,IAAkB,IAYjB6f,GAA4B,WACrC3wB,EACK2Q,IjEtDmC,2BiEuDnCxJ,MAAK,SAAArG,GACFgP,GAAMC,SAASP,GAAgB1O,EAASkG,UAE3C6J,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAkCxBgwB,GAAuB,SAAA5pB,GAChC,OAAOhH,EACFsH,IjEnIkB,WiEmIDN,EAAKtJ,SACtByJ,MAAK,SAAArG,GACFgP,GAAMC,S9ChHP,CACHlS,K3C2BsB,iB2C1BtBC,O8C8GqCgD,EAASkG,OACtClG,EAASkG,KAAKlB,SACdgK,GAAMC,SAASR,GAAczO,EAASkG,KAAK/I,KAE/CyyB,KACAG,KAEAC,GAAyB,MACzBxgB,GzBhJgB,cyBiJhBD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,gCACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAGxBmwB,GAAuB,SAAA5a,GAChC,IAAMzY,EAtCU,SAAAA,GAChB,MAAO,CACHA,QAAS,CACLO,GAAIP,EAAQO,GACZ+F,KAAMtG,EAAQsG,KACdzG,QAASG,EAAQH,QACjB0e,WAAYve,EAAQue,WACpBE,SAAUze,EAAQye,SAClBlV,MAAMvJ,EAAQuJ,MACdrB,WAAYlI,EAAQkI,aA6BZorB,CAAY7a,GAExBA,EAAOlY,GACP2yB,GAAqBlzB,GA1DO,SAAAyY,GAChCA,EAAOtR,KAAO,GACd7E,EACKkH,KjErGkB,WiEqGAiP,GAClBhP,MAAK,SAAArG,GACFgP,GAAMC,S9C9GP,CACHlS,K3CoDmB,c2CnDnBC,O8C4G8BgD,EAASkG,OACnCsJ,GzB3GgB,cyB4GhBD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,gCACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,MA8C7BqwB,CAAqB9a,IAoBhB2a,GAA2B,SAAAI,GACpCphB,GAAMC,S9CrKC,CACHlS,K3CgCsB,iB2C/BtBC,O8CmK6BozB,KAGxBL,GAA6B,WACtC7wB,EACK2Q,IjE3J4B,qBiE4J5BxJ,MAAK,SAAA2H,GACFgB,GAAMC,S9CjJP,CACHlS,K3CoF6B,wB2CnF7BC,O8C+IuCgR,EAAI9H,UAE1C6J,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OCtKxBuwB,GAA2B,SAAAvyB,GACpCoB,EACK2Q,IlEhCiB,UkEgCH,mBAAe/R,IAC7BuI,MAAK,SAAArG,GACFgP,GAAMC,SC1BP,CACHlS,K3FVyB,oB2FWzBC,ODwBmCgD,EAASkG,OACxC8J,IAAkB,MAErBD,OAAM,SAAAM,GACHf,GAAae,GACbL,IAAkB,OAyEjBsgB,GAA0B,SAACle,EAAMtU,GAE1C,IAvByBoI,EAAMqqB,EAuB3BC,EA7DkB,SAACpe,EAAMtU,GAC7B,MAAO,CACHX,GAAIiV,EAAKqe,aACT3tB,MAAO,CACH3F,GAAIW,GAER4yB,MAAOte,EAAKse,MACZhuB,QAAS,CACLvF,GAAIiV,EAAK1P,SAEbgkB,WAAYtU,EAAKrV,KACjBupB,eAAgBlU,EAAKkU,eACrB1pB,QAAS,CAAEO,GAAIiV,EAAKxV,SACpBqnB,cAAc7R,EAAK6R,cACnB0M,QAASve,EAAKue,SA+CJC,CAAkBxe,EAAMtU,GACtC,I/B1C2B,SAAAD,GAC3B,IAAMF,EAAUqR,GAAMI,WAAWvR,OAAOF,QAkBxC,QAhBKE,EAAOV,KAQQQ,EAAQsG,MACpB,SAAA4sB,GAAW,OACPA,EAAYnuB,QAAQvF,MAAQU,EAAO6E,QAAQvF,IAC3C0zB,EAAYj0B,QAAQO,MAAQU,EAAOjB,QAAQO,IAC3C0zB,EAAYnK,aAAe7oB,EAAO6oB,YAClCmK,EAAY1zB,MAAQU,EAAOV,QAZnBQ,EAAQsG,MACpB,SAAA4sB,GAAW,OACPA,EAAYnuB,QAAQvF,MAAQU,EAAO6E,QAAQvF,IAC3C0zB,EAAYj0B,QAAQO,MAAQU,EAAOjB,QAAQO,IAC3C0zB,EAAYnK,aAAe7oB,EAAO6oB,e+BkCzCoK,CAAgBN,GAOjB,OANAzhB,IACI,EACAM,GACAnI,GAAKkC,EAAE,6CAEX2nB,IAAsB,GAGtBP,EAAQrzB,GACR+B,EACK2Q,IADL,mBACqB2gB,EAAQ5zB,QAAQO,KAChCkJ,MAAK,SAAA2H,GAxDU,IAAA9H,EAyDZsqB,EAAQ,2BAAIA,GAAL,IAAa5zB,QAASoR,EAAI9H,OAzDrBA,EA0DQsqB,EAzDzBtxB,EACFsH,IlEzEiB,UkEyEDN,GAChBG,MAAK,SAAArG,GACFgP,GAAMC,SCvCP,CACHlS,K3FlC0B,qB2FmC1BC,ODqCoCgD,EAASkG,OACzC8qB,GAAwB,MACxBxhB,G1B/Ee,c0BiFfD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,6BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAM,GACHf,GAAae,SA4CZN,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAxCZoG,EA2CDsqB,EA3COD,GA2CE,EA1C1BrxB,EACFkH,KlE7FiB,UkE6FAF,GACjBG,MAAK,SAAArG,GACGuwB,GACDvhB,GAAMC,SC/FX,CACHlS,K3FJuB,kB2FKvBC,OD6FuCgD,EAASkG,OAE5CsJ,G1BpGe,c0BsGfD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,6BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAM,GACHf,GAAae,QA8CZ2gB,GAA0B,SAAAP,GACnCzhB,GAAMC,SC9HC,CACHlS,K3F5B0B,qB2F6B1BC,OD4H4ByzB,KAwBvBQ,GAAuB,SAAAnzB,GAChCkR,GAAMC,SCzIC,CACHlS,K3FxCuB,kB2FyCvBC,ODuIyBc,KAGpBizB,GAAwB,SAAA1T,GACjCrO,GAAMC,SCtIC,CACHlS,K3F9CwB,mB2F+CxBC,ODoI0BqgB,KEtKrB6T,GAAyB,WAClChyB,EACK2Q,IpEXe,SoEYfxJ,MAAK,SAAArG,GACF,IAAIsa,EAAc,GACZC,EAAUva,EAASkG,KACzB,IAAK,IAAMoH,KAAOiN,EACdD,EAAYhd,KAAZ,aACIH,GAAImQ,GACDiN,EAAQjN,KAGnB0B,GAAMC,SCfP,CACHlS,K7F4E0B,qB6F3E1BC,ODamCsd,OAElCvK,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAoBxBqxB,GAA0B,WACnCjyB,EACK2Q,IpElByB,kBoEmBzBxJ,MAAK,SAAA2H,GACFgB,GAAMC,SClCP,CACHlS,K7F8G0B,qB6F7G1BC,ODgCoCgR,EAAI9H,UAEvC6J,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAa/B0G,GAAM,SAAA6O,GACRnW,EACKsH,IpEhEe,QoEgED6O,GACdhP,MAAK,SAAArJ,GACFgS,GAAMC,SCvCP,CACHlS,K7FyDuB,kB6FxDvBC,ODqCiCA,EAAOkJ,OACpCsJ,G5B1Ea,W4B2Eb2hB,KACAD,KACA3hB,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,2BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAkBxBsxB,GAAoB,SAAA/b,GAC7B,GAAIA,EAAOlY,GAAI,CACX,IAAMk0B,EAAW,CACbl0B,GAAIkY,EAAOlY,GACX+F,KAAMmS,EAAOnS,KACbnG,KAAM,CAAEI,IAAKkY,EAAOtY,KAAM0X,YAAaY,EAAOic,kBAElD9qB,GAAI6qB,OACD,EAxBE,SAAAhc,GACTnW,EACKkH,KpEjFe,QoEiFAiP,GACfhP,MAAK,SAAA2H,GACFgB,GAAMC,SC3FP,CACHlS,K7FwFgB,W6FvFhBC,ODyF2BgR,EAAI9H,OAC3BsJ,G5B3Fa,W4B4FbD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,2BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,MAiB7BsG,CALiB,CACblD,KAAMmS,EAAOnS,KACbnG,KAAM,CAAEI,IAAKkY,EAAOtY,KAAM0X,YAAaY,EAAOic,qB,8BET3CC,GArGD,SAAAllB,GACV,IAAM5K,EAAc4K,EAAM5K,YAuF1B,OACI,yBACItE,GAAIkP,EAAMlP,GACVq0B,OAxFK,SAAA7e,GACTA,EAAE8e,iBACF,IAAMC,EAAU/e,EAAEyB,aAAaud,QAAQ,WAEjCvf,EAAOY,SAASC,eAAeye,GACjCtf,IAAMA,EAAKkB,MAAMI,QAAU,SAE/B,IAAMke,EAAMjf,EAAEhG,OAAOxP,GAAG00B,MAAM,KACxB7V,EAAM4V,EAAI,GACVjc,EAAUic,EAAI,GACd7S,EAAO6S,EAAI,GAEXtwB,EAAOsR,KAAKC,MAAMT,EAAKU,WAAW,GAAGlG,OACvC+D,EAASrP,EAAKnE,GAEd20B,EAAM,CACNC,SAAUzwB,EAAKzD,OAAOV,GACtBmiB,UAAWtD,EAAItH,cACfsd,UAAWrc,EACXyD,QAAS2F,EAAKrK,cACd3S,WAAYsK,EAAMrL,gBAAgB7D,KxCmGE,SAAAmE,GAC5CpC,EACK2Q,IACGoiB,iCAEI3wB,EAAK0wB,SACL,cACA1wB,EAAKge,UACL,YACAhe,EAAK8X,QACL,aACA9X,EAAKywB,SACL,eACAzwB,EAAKS,YAEZsE,MAAK,SAAArG,GACFgQ,IAAkB,GAClBhB,GAAMC,SAASZ,GAA0BrO,EAASkG,UAErD6J,OAAM,SAAAM,GACHf,GAAae,GACbL,IAAkB,MwCrHtBkiB,CAAiCJ,GAEjC9hB,IAAkB,GACdW,IAAQmhB,EAAG,2BAAQA,GAAR,IAAa30B,GAAIwT,KAEhCtE,EAAM8lB,aAAa,CAAE7wB,KAAMwwB,EAAKh0B,QAASwD,EAAKzD,OAAOiF,MAAM3F,KAC3DkP,EAAMiY,cA4DF8N,WAzDS,SAAAzf,GACb,IAAMhG,EAASgG,EAAEhG,OACX0F,EAAW1F,EAAOmG,YACZnG,EAAOxP,GAAG00B,MAAM,KACD,KAGLpwB,GAClBkL,EAAOqH,UAAUC,SAAShC,IAE1BtF,EAAO2G,MAAMC,gBAAkBzF,GAE/BnB,EAAOqH,UAAUC,SAAShC,KAC1BI,EAAS,IAETA,EAAS,GAAGiB,MAAMC,gBAAkBzF,GACpCnB,EAAO2G,MAAMC,gBAAkBzF,KAE9BuE,EAAS,IACV1F,EAAOqH,UAAUC,SAAShC,MAE1BtF,EAAO2G,MAAMC,gBAAkBzF,GAC/B6E,EAAE8e,mBAoCFY,YAhCU,SAAA1f,GACd,IAAMhG,EAASgG,EAAEhG,OACX0F,EAAW1F,EAAOmG,WAClBwf,EAAS3lB,EAAO4lB,YAEV5lB,EAAOxP,GAAG00B,MAAM,KACD,KAELpwB,GAAgBkL,EAAOmG,WAAW,GAGpDnG,EAAOqH,UAAUC,SAAShC,KAC1BI,EAAS,IAET1F,EAAO2G,MAAMC,gBAAkBzF,GAC/BuE,EAAS,GAAGiB,MAAMC,gBAAkBzF,IAEpCwkB,GACAA,EAAOte,UAAUC,SAAShC,KAE1BqgB,EAAOhf,MAAMC,gBAAkBzF,GAC/BwkB,EAAOC,WAAWjf,MAAMC,gBAAkBzF,IAE1CnB,EAAO2G,MAAMC,gBAAkBzF,GAd/BnB,EAAO2G,MAAMC,gBAAkBzF,IAwB/Bd,UAAWX,EAAMW,WAEhBX,EAAMgG,WChBJmgB,GAjFM,SAAAnmB,GACjB,IACIsE,EADA9S,EAASwO,EAAMxO,OAGbyD,EAAO+K,EAAM/K,MAAQ,KACrB8H,EAAIiD,EAAMomB,YACRC,EAAsBrmB,EAAtBqmB,kBAEJpxB,IACAzD,EAASyD,EAAKzD,OACd8S,EAASrP,EAAKnE,IAGlB,IAAMw1B,EAAWtmB,EAAMsmB,SAEjBC,EAAU,eAAW/0B,EAAOV,GAAlB,kBAA8BU,EAAOiF,MAAM3F,GAA3C,YAAiDw1B,GAC3DE,EAAY,iBAAah1B,EAAOV,GAApB,YAA0BU,EAAOiF,MAAM3F,GAAvC,YAA6Cw1B,GAEzDG,EAAa,SAAAnC,GAAO,OACtBA,EACI,kBAAC,KAAD,CACIzjB,MAAO9D,EAAE,8BACT4D,UAAU,yCAGd,IAGR,OACI,kBAAC,GAAD,CAAM7P,GAAIy1B,EAAYzgB,MAAO9F,EAAM8F,MAAOM,WAAW,GACjD,2BACI1V,KAAK,SACL6P,MAAOgG,KAAKmgB,UAAU,CAClBl1B,OAAQA,EACRV,GAAIwT,MAGXtE,EAAM2mB,QACH,oCACI,yBAAKhmB,UAAU,yBAAyB7P,GAAI01B,GACxC,kBAAC,KAAD,CACI3lB,MAAO9D,EAAE,+BACT4D,UAAU,qBACVkN,QAAS,kBACL7N,EAAM4mB,WAAWtiB,EAAQrP,EAAKzD,OAAOiF,MAAM3F,OAGnD,kBAAC,KAAD,CACI+P,MAAO9D,EAAE,6BACT4D,UAAU,mBACVkN,QAAS,kBAAM7N,EAAM6mB,SAAS5xB,QAK1C,GAGJ,2BACKoxB,EAAkB70B,EAAOyoB,gBAD9B,KAEKld,EAAE,4BAAD,OAC8BvL,EAAO6oB,WAAW1H,cADhD,WAFN,KAOA,2BAAInhB,EAAOs1B,gBACV9mB,EAAM2mB,QACH,2BACKF,EAAWj1B,EAAO8yB,SACnB,2BAAIrvB,EAAKklB,KAAKtjB,OAGlB,2BACK4vB,EAAWj1B,EAAO8yB,SACnB,gCAFJ,IAEcvnB,EAAE,+BChFnBgqB,GAA2B,SAAAC,GACpC,OAAOA,EAAIjE,QAAQ,OAAO,SAAAkE,GAAC,OAAIA,EAAE5e,kBCY/B6e,GAAaC,aAAOC,KAAPD,CAAkB,CACjCE,MAAO,UA4FIC,GAzFa,SAAAtnB,GACxB,IAAQxJ,EAAoBwJ,EAApBxJ,OAAQ/E,EAAYuO,EAAZvO,QAEZH,EAAU0O,EAAM1O,QACd8C,EAAQ4L,EAAM5L,MAEd2I,EAAIiD,EAAMomB,YAWVmB,EAAe,CACjBC,QAAShxB,EACTixB,eAAgB,SAAAC,GAAM,OAAKA,EAASA,EAAO7mB,MAAQ,KAGjD8mB,EAAiC,SAAAX,GACnC,OAAOD,GAAyBC,IAiCpC,OACI,oCACKjqB,EAAE,gCACH,kBAAC6qB,GAAA,EAAD,iBACQL,EADR,CAEIz2B,GAAG,QACH+2B,eAAa,EACbC,aAAW,EACXvnB,MApDc,SAAA9O,GACtB,OAAIA,EAAgB+E,EAAOoB,MAAK,SAAAnB,GAAK,OAAIA,EAAM3F,KAAOW,KAC1C,GAkDGs2B,CAAkBt2B,GACzB4P,SAAU,SAAChB,EAAO2kB,GAzDJ,IAAAvuB,KA0DQuuB,IAzDnBJ,GAAqBnuB,EAAM3F,KA2D9Bk3B,YAAa,SAAAjG,GAAM,OACf,kBAACmF,GAAD,iBACQnF,EADR,CAEItW,MAAO1O,EAAE,4BACT2hB,OAAO,gBAIlBptB,EAAQ8T,OAAS,EACd,kBAAC,GAAD,CAAOzE,UAAU,sBACZrP,EAAQwP,KAAI,SAAAtP,GAAM,OApDf,SAAAA,GAChB,IAAI6yB,EAAQ7yB,EAAO6yB,MACbnG,EAAa,GACf+J,EAAM,GACNC,EAAkB,EAElB9zB,EAAMgR,OAAS,IACf6iB,EAAM7zB,EAAMvD,QAAO,SAAAoE,GAAI,OAAIA,EAAKzD,OAAOV,KAAOU,EAAOV,OAGzDm3B,EAAIj3B,SAAQ,WACRk3B,GAAmB,KAGvB,IAAK,IAAIttB,EAAI,EAAGA,EAAIypB,EAAQ6D,EAAiBttB,IACzCsjB,EAAWjtB,KACP,6BAASgQ,IAAKzP,EAAOV,GAAK8J,GACtB,kBAAC,GAAD,CACI7F,MAAO6F,EACPpJ,OAAQA,EACR60B,kBAAmBsB,EACnBvB,YAAarpB,EACblH,eAAgBmK,EAAMnK,mBAKtC,OAAOqoB,EAyB4BiK,CAAY32B,OAEvCC,EACAsL,EAAE,oCAEF,KCtFVyhB,I,OAAYC,cAAW,iBAAO,CAChC2J,UAAW,CACP,IAAK,CACD1J,OAAQ,SACR2I,MAAO,WAuMJgB,GAlMQ,SAAAroB,GACnB,IAkC4BulB,EAjCxBzV,EAOA9P,EAPA8P,QACAwY,EAMAtoB,EANAsoB,SACAvY,EAKA/P,EALA+P,KACAjZ,EAIAkJ,EAJAlJ,MACAzC,EAGA2L,EAHA3L,aACA+xB,EAEApmB,EAFAomB,YACAxiB,EACA5D,EADA4D,UAGJ,EAAwByL,mBAAS,IAAjC,oBAAO8K,EAAP,KAAaoO,EAAb,KACA,EAAwBlZ,oBAAS,GAAjC,oBAAOmZ,EAAP,KAAaC,EAAb,KAEMxR,EAAUuH,KA4BV+I,EAAe,CACjBC,QAASnzB,EAAayC,OAREyuB,EASElxB,EAAayC,MARvCyuB,EAAI30B,MAAK,SAAC83B,EAAGC,GACT,OAAOD,IAAMC,EAAI,EAAID,EAAI,GAAK,KAE3BnD,GAMDzuB,EACN2wB,eAAgB,SAAAC,GAAM,OAClBA,EACMA,EAAOkB,UACHlB,EAAO7wB,KAAP,YAAmBuvB,EAAY,oBAA/B,KACAsB,EAAO7wB,KAAP,YAAmBuvB,EAAY,sBAA/B,KACJ,KAGd,OACI,kBAACvW,GAAA,EAAD,CACIgI,sBAAsB,EACtB/H,QAzCY,WAChBA,KAyCIgD,kBAAgB,sBAChB/C,KAAMA,GAELyY,EACG,oCACK5kB,EACG,yBAAKjD,UAAU,4BACX,kBAACmV,GAAA,EAAD,OAGJ,oCACI,kBAACgC,GAAA,EAAD,CAAahnB,GAAG,uBACXs1B,EAAY,iCAEjB,yBAAKzlB,UAAU,qBACTtM,EAAaw0B,oBAOX,GANA,uBAAGloB,UAAU,wBACRylB,EACG,2CAMV/xB,EAAay0B,iBAOX,GANA,uBAAGnoB,UAAU,wBACRylB,EACG,iCACD,MAMf,kBAACwB,GAAA,EAAD,iBACQL,EADR,CAEIz2B,GAAG,QACH+2B,eAAa,EACbC,aAAW,EACXnnB,UAAWsW,EAAQmR,UACnB/mB,SAAU,SAAChB,EAAO2kB,GACduD,EAAQvD,IAEZgD,YAAa,SAAAjG,GAAM,OACf,kBAACqF,GAAA,EAAD,iBACQrF,EADR,CAEItW,MAAO2a,EACH,2BAEJ1H,OAAO,gBAInB,yBAAK/d,UAAU,qBACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRxM,MAAM,UACNyM,QAAS,WA/FhCsM,IAGAA,EAAKyO,WACLv0B,EAAay0B,kBACbz0B,EAAaw0B,qBAKlB/Y,EAAQ,CAAEwY,WAAUnO,SACpBoO,EAAQ,OAJJE,GAAQ,MA0FiBrC,EACG,qCAGR,kBAACzY,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRC,QAAS,kBAAMiC,MAEdsW,EACG,wCAQxB,oCACI,kBAACtO,GAAA,EAAD,CAAahnB,GAAG,uBACZ,uBAAG6P,UAAU,wBACPwZ,EAAKyO,UAGD,GAFAxC,EAAY,8BACZ,MAGV,uBAAGzlB,UAAU,wBACPtM,EAAay0B,iBAGT,GAFA1C,EAAY,iCACZ,MAIV,uBAAGzlB,UAAU,wBACPtM,EAAaw0B,oBAIT,GAHAzC,EACI,0CACA,MAIbA,EAAY,wBAEjB,yBAAKzlB,UAAU,qBACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRxM,MAAM,UACNyM,QAAS,WACLiC,EAAQ,CAAEwY,WAAUnO,SACpBsO,GAAQ,KAGXrC,EAAY,4BAEjB,kBAACzY,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRC,QAAS,kBAAM4a,GAAQ,KAEtBrC,EAAY,+BCuH1B2C,GArSE,SAAA/oB,GACb,IAAQxJ,EAAwBwJ,EAAxBxJ,OAAQpB,EAAgB4K,EAAhB5K,YAChB,EAAwBia,oBAAS,GAAjC,oBAAOU,EAAP,KAAa8C,EAAb,KACA,EAAgCxD,mBAAS,MAAzC,oBAAOiZ,EAAP,KAAiBU,EAAjB,KAEMC,EAAmB,SAACh0B,EAAMklB,EAAM1oB,GAClCuyB,GAAyBvyB,GACzBmzB,GAAqBnzB,GACjBwD,EAAKnE,IAAIuT,GAA8BpP,EAAKnE,I7CkJhB,SAAAmE,GACpCpC,EACKkH,K9BlKyB,Y8BkKA9E,GACzB+E,MAAK,SAAArG,GACFuQ,QAEHR,OAAM,SAAAM,GAAG,OAAIf,GAAae,M6CtJ3BklB,CAAyB,2BAAKj0B,GAAN,IAAYk0B,OAAQhP,EAAKrpB,OAG/Cs4B,EAAoB,SAAC9kB,EAAQ6kB,EAAQ13B,G7CqJF,IAAAwD,E6CpJrC+uB,GAAyBvyB,GACzBmzB,GAAqBnzB,G7CmJgBwD,E6ClJP,CAAEqP,SAAQ6kB,U7CmJ5Ct2B,EACKsH,IACGkvB,6BAEIp0B,EAAKk0B,OACL,eACAl0B,EAAKqP,QAEZtK,MAAK,SAAArG,GACFuP,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,yBACjBuI,WAAYzK,GAAKkC,EAAE,oCAG3BmH,QAEHR,OAAM,SAAAM,GAAG,OAAIf,GAAae,O6CjKzBslB,EAAkB,WACpBzW,GAAQ,IAuDNze,EAAQ4L,EAAM5L,MAEdO,EAAkBqL,EAAMrL,gBACxBoiB,EAAOpiB,EAAgBsc,cACvBgG,EAAUtiB,EAAgBuc,iBAE1BnU,EAAIiD,EAAMomB,YAEVmD,EAAsC,MAAjBtS,EAAQ7R,OAAiB,IAAM6R,EAAQ7R,OAY5DokB,EAVY/K,aAAW,CACzBgL,aAAc,CACVC,OAAQH,EACRI,UAAWJ,GAEf5Z,IAAK,CACD+Z,OAAQH,EAAqB,GAC7BI,UAAWJ,EAAoB,KAGrB/K,GAEZmJ,EAAiC,SAAAX,GACnC,OAAOD,GAAyBC,IAG9B4C,EAAgC,SAACtlB,EAAQ7S,GAC3C4S,GAA8BC,GAC9B0f,GAAyBvyB,GACzBmzB,GAAqBnzB,IAEnBo4B,EAA4B,SAAA50B,GAC9B+zB,EAAY,CAAE/zB,KAAMA,EAAMxD,QAASwD,EAAKzD,OAAOiF,MAAM3F,KACrDkzB,GAAyB/uB,EAAKzD,OAAOiF,MAAM3F,IAC3C8zB,GAAqB3vB,EAAKzD,OAAOiF,MAAM3F,IAEvC,IAAIwT,EAASrP,EAAKnE,GAEd20B,EAAM,CACNxS,UAAWhe,EAAKge,UAChB0S,UAAW1wB,EAAK60B,OAAOh5B,GACvBic,QAAS9X,EAAK8X,QACdrX,WAAYT,EAAKzD,OAAOuG,SAASjH,K7CSa,SAAAmE,GACtDpC,EACK2Q,IACGumB,2BAEI90B,EAAK0wB,SACL,cACA1wB,EAAKge,UACL,YACAhe,EAAK8X,QACL,eACA9X,EAAKS,YAEZsE,MAAK,SAAArG,GACFgQ,IAAkB,GAClBhB,GAAMC,SACFZ,GAA0B,CACtB6mB,qBAAqB,EACrBC,kBAAkB,EAClBhyB,MAAOnD,EAASkG,WAI3B6J,OAAM,SAAAM,GACHf,GAAae,GACbL,IAAkB,M6ChCtBqmB,CAA2CvE,GAC3C9hB,IAAkB,GACdW,IAAQmhB,EAAG,2BAAQA,GAAR,IAAa30B,GAAIwT,KAChCuO,GAAQ,IAGNoX,EAAgB,SAACh1B,EAAMzD,EAAQiF,GACjC,MACI,gBACIxB,EAAKzD,OAAOiF,MAAM3F,GADtB,gBAEQmE,EAAKge,UAAUN,cAFvB,kBAGI1d,EAAK60B,OAAOh5B,GAHhB,iBAISmE,EAAK8X,QAAQ4F,iBAJtB,gBAKSlc,EAAM3F,GALf,gBAKyBU,EAAOme,IAAI9Y,KALpC,kBAKkDrF,EAAO04B,YAAYp5B,GALrE,iBAKgFU,EAAOkhB,OAIzFyX,EAAqB,SAACl1B,EAAMwB,EAAOjF,GACrC,IAAM80B,EAAQ,iBAAa90B,EAAOme,IAAI9Y,KAAxB,kBAAsCrF,EAAO04B,YAAYp5B,GAAzD,iBAAoEU,EAAOkhB,MACnF6T,EAAU,eAAWtxB,EAAKzD,OAAOV,GAAvB,kBAAmC2F,EAAM3F,GAAzC,YAA+Cw1B,GACzDE,EAAY,iBAAavxB,EAAKzD,OAAOV,GAAzB,YAA+B2F,EAAM3F,GAArC,YAA2Cw1B,GAC7D5e,YAAW,WACP,IAAM0iB,EAAWzjB,SAASC,eAAe2f,GACnC8D,EAAa1jB,SAASC,eAAe4f,GACvC6D,GAAcD,IACdA,EAAStiB,iBAAiB,cAAc,WACpCuiB,EAAWpjB,MAAMI,QAAU,WAE/B+iB,EAAStiB,iBAAiB,cAAc,WACpCuiB,EAAWpjB,MAAMI,QAAU,aAGpC,MA6BDijB,EAAa,GAqBnB,OApBAvT,EAAK/lB,SAAQ,SAAA2e,GACTsH,EAAQjmB,SAAQ,SAAAk5B,GACZ,IAAK,IAAItvB,EAAI,EAAGA,EAAI,EAAGA,KACdA,EAAI,GAAK,IAAM,EAChB0vB,EAAWr5B,KAAK,CACZ0e,IAAK,CAAE9Y,KAAM8Y,EAAIgD,eACjBuX,cACAxX,KAAM,SAGV4X,EAAWr5B,KAAK,CACZ0e,IAAK,CAAE9Y,KAAM8Y,EAAIgD,eACjBuX,cACAxX,KAAM,cAQtB,6BAAS/R,UAAU,4BACf,kBAAC,GAAD,CACIylB,YAAarpB,EACburB,SAAUA,EACVxxB,MAAOkJ,EAAMlJ,MACbzC,aAAc2L,EAAM3L,aACpB0b,KAAMA,EACNnM,UAAW5D,EAAM4D,UACjBkM,QA3LQ,SAAAvP,GAEhB,GADAsS,GAAQ,GACJtS,EAAO,CACPoD,IAAkB,GAClB,IAAI4mB,EAAK,GACLhqB,EAAM+nB,SAASrzB,KAAKnE,IACpBs4B,EACI7oB,EAAM+nB,SAASrzB,KAAKnE,GACpByP,EAAM4Z,KAAKrpB,GACXyP,EAAM+nB,SAAS72B,SAGnB84B,EAAK5jB,SAASC,eACV,QACIrG,EAAM+nB,SAASrzB,KAAKzD,OAAOV,GAC3B,UACAyP,EAAM+nB,SAAS72B,QACf,WACA8O,EAAM+nB,SAASrzB,KAAKge,UAAUN,cAC9B,UACApS,EAAM+nB,SAASrzB,KAAK60B,OAAOh5B,GAC3B,SACAyP,EAAM+nB,SAASrzB,KAAK8X,QAAQ4F,iBAGpCsW,EACI1oB,EAAM+nB,SAASrzB,KACfsL,EAAM4Z,KACN5Z,EAAM+nB,SAAS72B,SAEnB84B,EAAK5jB,SAASC,eACV,SACIrG,EAAM+nB,SAAS72B,QACf,QACA8O,EAAM+nB,SAASrzB,KAAKge,UAAUN,cAC9B,UACApS,EAAM+nB,SAASrzB,KAAK0wB,SACpB,SACAplB,EAAM+nB,SAASrzB,KAAK8X,QAAQ4F,gBAGxC4X,EAAGC,iBACH9iB,YAAW,WACP6iB,EAAGtjB,MAAMC,gBAAkBzF,KAC5B,KAEHiG,YAAW,WACP6iB,EAAGtjB,MAAMC,gBAAkBzF,KAC5B,SA6IH,2BAAOd,UAAU,qBACb,6BAASA,UAAU,mBAAnB,kCACCoW,EAAKjW,KAAI,SAAA6O,GAAG,OACT,6BACIhP,UACI6oB,EAAUC,aACV,iCAEJxoB,IAAK0O,GAEL,6BACIhP,UACI6oB,EAAU7Z,IAAM,2BAGnB5S,EAAE,eAAD,OAAgB4S,KAEtB,6BAAShP,UAAU,iBACdsW,EAAQnW,KAAI,SAAAjL,GAAc,OACvB,6BACI8K,UAAU,sBACVM,IAAKpL,EAAe/E,IAEnB+E,EAAe4T,qBAOxC,6BAAS9I,UAAU,kBACdnK,EAAOsK,KAAI,SAAArK,GAAK,OACb,6BACIwK,IAAK,SAAWxK,EAAM3F,GACtB6P,UAAU,iBAEV,yBACIA,UAAU,mBACV7P,GAAE,gBAAW2F,EAAM3F,KAElB2F,EAAMoK,OAEVypB,EAAWxpB,KAAI,SAACtP,EAAQuD,GAAT,OACZ,yBACIkM,IAAKxK,EAAQ,IAAM1B,EACnB4L,UAAU,aAEV,kBAAC,GAAD,CACIhM,gBAAiBA,EACjBmxB,aAAckD,EACd/Q,WAAYqR,EACZl0B,YAAaA,EACbtE,GAAE,gBAAW2F,EAAM3F,GAAjB,gBAA2BU,EAAOme,IAAI9Y,KAAtC,kBAAoDrF,EAAO04B,YAAYp5B,GAAvE,iBAAkFU,EAAOkhB,MAC3F/R,UAAS,qBAAgBiF,GAAhB,kBAAmDnP,EAAM3F,GAAzD,oBAET,kBAAC,KAAD,CACI6P,UAAU,YACVE,MACI,UAAG9D,EAAE,iCAAL,MAGAA,EAAE,eAAD,OACkBvL,EAAOme,IAAI9Y,KAAKwR,gBACjCsK,cALF,YAMK5V,EAAE,qBANP,MAOAA,EAAE,QAAD,OAASvL,EAAOkhB,KAAhB,WAPD,YAQK3V,EAAE,kBARP,MASAvL,EAAO04B,YAAYzgB,aA7HvC,SAAChT,EAAOjF,EAAQuD,GAAW,IAAD,iBACzBX,GADyB,IAC1C,2BAAwB,CAAC,IAAhBa,EAAe,QACpB,GAAIg1B,EAAch1B,EAAMzD,EAAQiF,GAAQ,CACpC,IAAM6vB,EAAQ,iBAAa90B,EAAOme,IAAI9Y,KAAxB,kBAAsCrF,EAAO04B,YAAYp5B,GAAzD,iBAAoEU,EAAOkhB,MAEzF,OADAyX,EAAmBl1B,EAAMwB,EAAOjF,GAE5B,6BACIyP,IAAKxK,EAAM3F,GAAKiE,EAAQE,EAAKnE,GAC7B6P,UAAWiF,IAEX,kBAAC,GAAD,CACI+gB,SAAS,EACTL,SAAUA,EACVxgB,MAAOF,GACP3Q,KAAMA,EACN2xB,WAAYgD,EACZ/C,SAAUgD,EACVxD,kBAAmBsB,EACnBvB,YAAarpB,OAlBS,+BAgIb0tB,CAAYh0B,EAAOjF,EAAQuD,eClKjDgZ,I,OAAAA,cAdS,SAAAzd,GAAK,MAAK,CAC9BkG,OAAQlG,EAAMkG,OAAOA,OACrBlF,QAAShB,EAAMkB,OAAOF,QACtBG,QAASnB,EAAMkB,OAAOC,QACtBwC,QAAS3D,EAAMgJ,iBAAiBrF,QAChCC,gBAAiB5D,EAAMgJ,iBAAiBpF,gBACxCw2B,cAAep6B,EAAM+I,SAASjF,MAC9BgB,YAAa9E,EAAM+I,SAASjE,YAC5Bf,aAAc/D,EAAM+I,SAAShF,aAC7BM,gBAAiBrE,EAAM+I,SAAS1E,gBAChCoD,SAASzH,EAAM+I,SAAStB,SACxBjB,MAAOxG,EAAMwG,MAAMA,SAGRiX,EA1HM,SAAA/N,GACjB,IAAQjD,EAAMkD,aAAe,UAArBlD,EAER4J,SAAS9F,MAAQ9D,EAAE,kBAEnB,IAAQvG,EAAoBwJ,EAApBxJ,OAAQ/E,EAAYuO,EAAZvO,QAEV2D,EAAc4K,EAAM5K,YAEpBs1B,EAAgB1qB,EAAM0qB,cAExBp5B,EAAU0O,EAAM1O,QAEdsS,EAAY5D,EAAM/L,QAExB2Y,qBAAU,WACNjJ,IAAkB,GAClBE,IAA0B,GAC1BK,OACD,IAEH0I,qBAAU,WACNsW,OACD,IAEHtW,qBAAU,WACFnb,IACAkS,IAAkB,GAClBqgB,GAAyBvyB,MAE9B,CAACA,IAEJmb,qBAAU,kBAAMoB,OAA+B,IAE/CpB,qBAAU,kBAAMiY,OAA0B,IAC1C,IAAM8F,EAAsB,W9C8eH,IAAAj1B,E8C7ejBsK,EAAMrL,gBAAgB7D,K9C6eL4E,E8C5eHsK,EAAMrL,gBAAgB7D,G9C6e5C+B,EACK0R,OAAOqmB,0CAAsCl1B,GAC7CsE,MAAK,SAAArG,GACFuQ,KACAhB,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,yBACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAM,GACHf,GAAae,GACbL,IAAkB,M8CzfdlS,IACAkS,IAAkB,GAClBqgB,GAAyBvyB,MAKrC,OACI,oCAEI,6BAASkP,UAAU,iCACf,6BAASA,UAAU,iBACdX,EAAM9L,gBACH,kBAAC4hB,GAAA,EAAD,MAEA,oCACM9V,EAAMrL,gBAAgB7D,GAKpB,kBAAC,GAAD,CACI6D,gBAAiBqL,EAAMrL,gBACvB6B,OAAQA,EACRpB,YAAaA,EACbhB,MAAOs2B,EACPtE,YAAarpB,EACbjG,MAAOkJ,EAAMlJ,MACbzC,aAAc2L,EAAM3L,aACpBuP,UAAWA,IAZf,wBAAIjD,UAAU,uBACT5D,EAAE,0BAkBvB,2BAAO4D,UAAU,oBACZiD,EACG,kBAACkS,GAAA,EAAD,MAEA,oCACI,kBAACnI,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRxM,MAAM,UACNyM,QAAS,kBAAM8c,MAEd5tB,EAAE,yBAEP,kBAAC,GAAD,CACI3I,MAAOs2B,EACPl0B,OAAQA,EACRlF,QAASA,EACTG,QAASA,EACT20B,YAAarpB,EACblH,eACImK,EAAMrL,gBAAgBuc,sBAO9C,6BAASvQ,UAAU,+BACf,4BAAK5D,EAAE,iB,iFCzGR8tB,GAlBS,SAAC,GAKlB,IAJLpf,EAII,EAJJA,MACAD,EAGI,EAHJA,MAGI,IAFJE,KAAQC,EAEJ,EAFIA,QAAS0W,EAEb,EAFaA,QAAS5uB,EAEtB,EAFsBA,MACvBmY,EACC,mBACJ,OACE,kBAACwb,GAAA,EAAD,eACE3b,MAAOA,EACPqf,YAAarf,EACbhY,MAAOkY,GAAW0W,EAClBM,WAAYhX,GAAWlY,GACnB+X,EACAI,K,kBCSGmf,GAAqB,SAAAppB,GAC9B,MAAM,CACFjR,KtG4F4B,yBsG3F5BC,OAAOgR,ICGFqpB,GAA2B,WACpCn4B,EACK2Q,I/EuCmB,gB+EtCnBxJ,MAAK,SAAArG,GACFgP,GAAMC,SD3BR,CACFlS,KtGyGyB,sBsGxGzBC,OCyBqCgD,EAASkG,UAE7C6J,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAUxBw3B,GAA+B,SAACpxB,GACzChH,EACKsH,IADL,U/EwBwB,gB+EvBKN,GACxBG,MAAK,SAAArG,GACFgP,GAAMC,SD/BR,CACFlS,KtGiG6B,0BsGhG7BC,OC6ByCgD,EAASkG,UAEjD6J,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAsCxBy3B,GAAyB,SAACp6B,GACnC6R,GAAMC,SDjDC,CACHlS,KtG4E0B,uBsG3E1BC,OC+C6BgG,OAAO7F,MC7F/Bq6B,GAAmB,SAAC7e,EAASC,EAAWzb,GACjD,YAAQ2B,IAAL3B,MAGCwb,MAGAC,SAGI9Z,IAAL3B,QAAH,MAISs6B,GAAwB,SAAEt6B,EAAIiM,GACxC,OAAuBA,OAAVtK,IAAL3B,EAAiB,qBAAwB,wBCOhDu6B,GAAa,SAAArrB,GACb,IAAQjD,EAAMkD,aAAe,gBAArBlD,EACAsP,EAAkErM,EAAlEqM,aAAcC,EAAoDtM,EAApDsM,SAAUC,EAA0CvM,EAA1CuM,WAAYlJ,EAA8BrD,EAA9BqD,MAAM7K,EAAwBwH,EAAxBxH,YAAYjI,EAAYyP,EAAZzP,QAExD2B,EAAY3B,EAAQO,GAE1B8b,qBAAU,WACF1a,EACAo5B,EAAsB/6B,GAEtByP,EAAM8M,eAEX,CAAC5a,IAEJ,IAAMo5B,EAAwB,SAAA/6B,GAC1ByP,EAAM8M,WAAW,CACbhc,GAAIP,EAAQO,GACZV,QAASG,EAAQH,QACjByG,KAAMtG,EAAQsG,KACdiY,WAAYve,EAAQue,WACpBE,SAAUze,EAAQye,SAClBlV,MAAMvJ,EAAQuJ,MACdrB,WAAYlI,EAAQkI,WAAW3H,MAIvC,OACI,kBAAC,GAAD,CAAMgV,MAAM,0BACR,0BAAMnF,UAAU,0BAA0B0M,SAAUhB,GAChD,wBAAI1L,UAAU,cACG5D,EAAZ7K,EAAc,aAAkB,gBAAiB,IACjD6K,EAAE,oBAGP,kBAACuQ,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,UACL/F,GAAG,UACHyc,UAAWsd,GACXn6B,KAAK,OACLo6B,YAAa/tB,EAAE,mBACf0O,MAAO1O,EAAE,mBACTyQ,SAAU,CAAC/E,MAGf,kBAAC6E,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,OACL/F,GAAG,OACHyc,UAAWsd,GACXn6B,KAAK,OACLo6B,YAAa/tB,EAAE,sBACf0O,MAAO1O,EAAE,sBACTyQ,SAAU,CAAC/E,MAGf,kBAAC6E,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,aACL/F,GAAG,aACHyc,UAAWsd,GACXn6B,KAAK,OACLo6B,YAAa/tB,EAAE,sBACf0O,MAAO1O,EAAE,sBACTyQ,SAAU,CAAC/E,MAGf,kBAAC6E,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,WACL/F,GAAG,WACHyc,UAAWsd,GACXn6B,KAAK,OACLo6B,YAAa/tB,EAAE,oBACf0O,MAAO1O,EAAE,oBACTyQ,SAAU,CAAC/E,MAEf,kBAAC6E,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,QACL/F,GAAG,QACHyc,UAAWsd,GACXn6B,KAAK,QACLo6B,YAAa/tB,EAAE,eACf0O,MAAO1O,EAAE,eACTyQ,SAAU,CAAC/E,MAEf,kBAAC6E,GAAA,EAAD,CACIzW,KAAK,aACL8J,UAAU,YACV4M,UAAWhC,GACXE,MAAO1O,EAAE,6BACTrM,KAAK,OACL2Q,SAAU,YAAc,IAAZf,EAAW,EAAXA,OACR4qB,GAAyB5qB,EAAOC,SAGpC,iCACC/H,EAAYsI,KAAI,SAAC7L,GAAD,OACb,4BAAQgM,IAAKhM,EAAKnE,GAAIyP,MAAOtL,EAAKsL,OAC7BtL,EAAKwW,WAKlB,yBAAK9K,UAAU,0BACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRxM,MAAM,UACNqM,SAAUnB,GAAYC,EACtB7b,KAAK,UAEJqM,EAAE,sBAEP,kBAAC4Q,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRH,SAAU0d,GAAiB7e,EAASC,EAAWhc,EAAQO,IACvD+c,QAAS,WACLxK,IACArD,EAAMurB,kBAAkB,QAG3BH,GAAsB76B,EAAQO,GAAGiM,QAU1DsuB,GAAavd,aAAU,CACnBvU,KzCtJwB,cyCqJfuU,CAEVud,IAEYtd,qBANS,SAAAzd,GAAK,MAAK,CAAEC,QAASD,EAAMD,SAASE,WAM7Cwd,CAAyBsd,ICnFzBG,GAhEc,SAAAxrB,GACzB,IAAQ8P,EAA8C9P,EAA9C8P,QAAS2b,EAAqCzrB,EAArCyrB,WAAY/T,EAAyB1X,EAAzB0X,OAAQC,EAAiB3X,EAAjB2X,OAAQ5H,EAAS/P,EAAT+P,KAM7C,OACI,kBAACF,GAAA,EAAD,CACIgI,sBAAsB,EACtB/H,QAPY,WAChBA,EAAQ4H,IAOJ5E,kBAAgB,uBAChB/C,KAAMA,GAEN,kBAAC+H,GAAA,EAAD,CAAahnB,GAAG,wBACZ,oCACK6mB,EACG,oCACKA,IAAWH,GACR,oCAAG3c,GAAKkC,EAAE,gCAEV,oCAAGlC,GAAKkC,EAAE,8BAIlB,oCACKlC,GAAKkC,EAAE,uBAAwB,IAChC,0BAAM4D,UAAU,eACX9F,GAAKkC,EAAE,uBACJ,KAIflC,GAAKkC,EAAE,wBAAyB,CAC7BsI,SAAUxK,GAAKkC,EAAL,uBAAuB0uB,EAAvB,iBAItB,yBAAK9qB,UAAU,qBACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRxM,MAAM,UACNyM,QAAS,kBAAMiC,EAAQ4H,KAEtB7c,GAAKkC,EAAE,4BAEZ,kBAAC4Q,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRC,QAAS,kBAAMiC,EAAQ,MAEtBjV,GAAKkC,EAAE,8BCjEfsI,GAAW,CACpBqmB,OAAQ,SACRjd,QAAS,UACTkd,MAAO,QACPC,MAAO,QACPC,KAAM,OACNC,KAAM,OACNC,mBAAoB,qBACpBC,QAAS,UACTC,KAAM,OACNC,SAAU,YCVDjK,I,OAAS,SAAC7tB,EAAO+3B,EAAM5G,GAEhC,OAAoB,IAAhB4G,EAAK/mB,OAAqBhR,EAEvBA,EAAMvD,QAAQ,SAAAoE,GACjB,IAAK,IAAI2F,EAAI,EAAGA,EAAI2qB,EAAIngB,OAAQxK,IAC5B,GAAIwxB,OAAOn3B,EAAKswB,EAAI3qB,KAAK+X,cAAcrB,QAAQ6a,EAAKxZ,gBAAkB,EAAG,OAAO,EAEpF,OAAO,O,4BCwFA0Z,GAtFK,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,aAAcC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aACvCzvB,EAAMkD,aAAe,gBAArBlD,EACR,EAAwBsS,mBAAS,IAAjC,oBAAO8c,EAAP,KAAaM,EAAb,KAEA,EAA0BpY,IAAMhF,SAAS,CACrCqd,UAAU,EACVC,iBAAiB,IAFrB,oBAAOr8B,EAAP,KAAcs8B,EAAd,KAKMC,EAAe,SAAAxsB,GACjB,OAAQA,EAAMC,OAAOzJ,MACjB,IAAK,kBACD+1B,EAAS,2BACFt8B,GADC,iBAEJo8B,UAAU,GACTrsB,EAAMC,OAAOzJ,KAAOwJ,EAAMC,OAAOwsB,WAEtCN,IACA,MACJ,QACII,EAAS,2BACFt8B,GADC,iBAEJq8B,iBAAiB,GAChBtsB,EAAMC,OAAOzJ,KAAOwJ,EAAMC,OAAOwsB,WAK9CP,KAUJ,OACI,kBAAC,GAAD,CAAMzmB,MAAM,gBACR,kBAAC9E,GAAA,EAAD,CACIE,QACI,kBAAC6rB,GAAA,EAAD,CACID,QAASx8B,EAAMo8B,SACfrrB,SAAUwrB,EACVh2B,KAAK,WACLuK,MAAM,YAGdqK,MACKnb,EAAMo8B,SAED3vB,EAAE,uBADFA,EAAE,0BAIfyvB,EACG,kBAACxrB,GAAA,EAAD,CACIE,QACI,kBAAC6rB,GAAA,EAAD,CACID,QAASx8B,EAAMq8B,gBACftrB,SAAUwrB,EACVh2B,KAAK,kBACLuK,MAAM,cAGdqK,MACKnb,EAAMq8B,gBAED5vB,EAAE,gBADFA,EAAE,mBAKhB,GAGJ,kBAACqqB,GAAA,EAAD,CACIzmB,UAAU,aACV8K,MAAO,kBAAC,KAAD,MACPqf,YAAa/tB,EAAE,kBACfwD,MAAO4rB,EACP9qB,SAhDW,SAAAiF,GACnB,IAAM6lB,EAAO7lB,EAAEhG,OAAOC,MACtBksB,EAAQN,GACRG,EAAaH,QC1BNa,I,OAbE,SAAC,GAAY,IAAXn2B,EAAU,EAAVA,KACRkG,EAAKkD,aAAe,gBAApBlD,EAEP,OACI,yBAAK4D,UAAU,sBACX,6BACI,kBAAC,KAAD,CAAUA,UAAU,qBAExB,uBAAGA,UAAU,mBAAmB5D,EAAE,eAAlC,IAAmDlG,M,UCiEhDkX,I,cAAAA,cAJS,SAAAzd,GAAK,MAAK,CAC9BmG,MAAOnG,EAAMkG,OAAOC,SAGTsX,CACXD,aAAU,CACNvU,K/C9EkB,Y+C6EtBuU,EA9DW,SAAA9N,GACX,IAAQjD,EAAMkD,aAAe,gBAArBlD,EACAsP,EAA4DrM,EAA5DqM,aAAcC,EAA8CtM,EAA9CsM,SAAUmG,EAAoCzS,EAApCyS,QAASlG,EAA2BvM,EAA3BuM,WAAW0gB,EAAgBjtB,EAAhBitB,MAAMx2B,EAAUuJ,EAAVvJ,MAe1D,OAbAmW,qBAAU,WACFnW,GAAOw2B,EAAMC,IAAI/5B,SAAS2K,GAAMe,QAAQouB,EAAMC,IAAI/5B,SAAS2K,GAAMc,WAC7DnI,EAAM3F,GACNkP,EAAM8M,WAAW,CACbhc,GAAI2F,EAAM3F,GACV+P,MAAOpK,EAAMoK,QAGjBb,EAAM8M,gBAGf,CAACrW,EAAM3F,KAGN,kBAAC,GAAD,CAAMgV,MAAM,wBACR,wBAAInF,UAAU,qBACTlK,EAAM3F,GAAKiM,EAAE,cAAgBA,EAAE,gBAC/BA,EAAE,kBAEP,0BAAMsQ,SAAUhB,GACZ,kBAACiB,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,QACL/F,GAAG,QACH2a,MAAO1O,EAAE,eAAiB,IAC1BwQ,UAAWsd,GACXrd,SAAU,CAAC/E,GAAUE,GAAgBgB,MAEzC,yBAAKhJ,UAAU,qCACX,kBAACgN,GAAA,EAAD,CACIC,QAAQ,YACRjN,UAAU,iBACVS,MAAM,UACNqM,SAAUnB,GAAYC,EACtB7b,KAAK,UAEJqM,EAAE,sBAEP,kBAAC4Q,GAAA,EAAD,CACIjd,KAAK,SACLiQ,UAAU,gBACViN,QAAQ,YACRH,SAAU0d,GAAiB7e,EAASC,EAAW9V,EAAM3F,IACrD+c,QAAS4E,GAER2Y,GAAsB30B,EAAM3F,GAAGiM,Y,oBC9DlDowB,GAAQ,SAAAntB,GACV,OAAO,kBAAC,KAAD,eAAUuT,UAAW,EAAG3F,QAAQ,UAAa5N,KAsBzCotB,GAnBW,SAAAptB,GACtB,IAAM1N,EAAU0N,EAAM1N,QAChB5B,EAAOsP,EAAMtP,KACb6B,EAASyN,EAAMzN,OACf86B,EAAsBrtB,EAAMqtB,oBAElC,OACI,kBAACC,GAAA,EAAD,CACIvd,KAAMxd,EACNg7B,iBAAkB,IAClBzd,QAASud,GAET,kBAAC,GAAD,CAAOvd,QAASud,EAAqBG,SAAU98B,GAC1C4B,KCLJm7B,GAAuB,SAAAC,GAAS,OACzC/qB,GAAMC,SCaC,CACHlS,KlH8EsB,iBkH7EtBC,ODfyB+8B,KAUpBC,GAAyB,WAClC96B,EACK2Q,IzFhBkB,YyFiBlBxJ,MAAK,SAAArG,GACFgP,GAAMC,SC7BP,CACHlS,KlHyGyB,mBkHxGzBC,OD2BmCgD,EAASkG,UAE3C6J,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAmBxBm6B,GAAuB,SAAA/zB,GAChChH,EACKkH,KzFzCkB,WyFyCAF,GAClBG,MAAK,SAAArG,GACFgP,GAAMC,SCxCP,CACHlS,KlHyFmB,ckHxFnBC,ODsC8BgD,EAASkG,OACnCsJ,GjD7CgB,ciD8ChBD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,8BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAGxBo6B,GAAuB,SAAAh0B,GAChC,OAAOhH,EACFsH,IzFzDkB,WyFyDDN,GACjBG,MAAK,SAAArG,GACFgP,GAAMC,SCnCP,CACHlS,KlHwEsB,iBkHvEtBC,ODiCiCgD,EAASkG,OACtC4zB,GAAqB,MACrBE,KACAG,KACA3qB,GjDhEgB,ciDiEhBD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,8BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAGxBq6B,GAA6B,WACtCj7B,EACK2Q,IzFhD4B,qByFiD5BxJ,MAAK,SAAA2H,GACFgB,GAAMC,SCnFiB,SAAAjB,GAC/B,MAAO,CACHjR,KlHgI6B,wBkH/H7BC,OAAQgR,GDgFWosB,CAAoBpsB,EAAI9H,UAE1C6J,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OE7DxBu6B,GAA0B,SAAAv8B,GACnCoB,EACK2Q,I3FpBkB,Y2FqBlBxJ,MAAK,SAAArG,GACF,IAAIhD,EAAOgD,EAASkG,KAAKhJ,QAAO,qBAAG4F,MAAgB3F,KAAKW,KACxDkR,GAAMC,SCvBR,CACFlS,KpHsEmC,gCoHrEnCC,ODqB4CA,OAE3C+S,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAyBxBw6B,GAAuB,SAAAp0B,GAChC,OAAOhH,EACFsH,I3FpDkB,W2FoDDN,GACjBG,MAAK,SAAArG,GACFgP,GAAMC,SCpCP,CACHlS,KpHwDoB,iBoHvDpBC,ODkCiCgD,EAASkG,OACtCq0B,GAAqB,MACrBF,GAAwBn0B,EAAKs0B,UAAUr9B,IACvCqS,GnDhEc,cmDiEdD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,gCACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAExBy6B,GAAuB,SAAAE,GAAS,OACzCzrB,GAAMC,SCxDA,CACFlS,KpH6DiB,coH5DjBC,ODsDsBy9B,K,2KEhFfC,GAAe,SAACjP,GACvBA,EAAQnuB,KAAK6M,GAAMY,YCkBtB4vB,GAAkB,SAAEtuB,GACrB,IAAQjD,EAAMkD,aAAe,gBAArBlD,EACAsP,EAAuErM,EAAvEqM,aAAcC,EAAyDtM,EAAzDsM,SAAUC,EAA+CvM,EAA/CuM,WAAYlJ,EAAmCrD,EAAnCqD,MAAM0M,EAA6B/P,EAA7B+P,KAAKvZ,EAAwBwJ,EAAxBxJ,OAAOuC,EAAiBiH,EAAjBjH,QACxDq1B,GADyEpuB,EAATitB,MACpDl0B,EAAQjI,IACpBsuB,EAASC,wBACfzS,qBAAU,WACFwhB,EACA9C,EAAsBvyB,GAEtBiH,EAAM8M,eAEZ,CAACshB,IAGH,IAAM9C,EAAwB,SAAAvyB,GAC1BiH,EAAM8M,WAAW,CACbhc,GAAIiI,EAAQjI,GACZV,QAAS2I,EAAQ3I,QACjByG,KAAMkC,EAAQlC,KACdiY,WAAY/V,EAAQ+V,WACpBhV,MAAMf,EAAQe,MACdrD,MAAMsC,EAAQtC,MAAM3F,MAG5B,OACI,kBAAC+e,GAAA,EAAD,CACIgI,sBAAsB,EACtB/E,kBAAgB,uBAChB/C,KAAMA,GAGN,kBAAC,KAAD,CACIlP,MAAO9D,EAAE,eACT4D,UAAU,eACViN,QAAQ,YACRC,QAAS,WAEL7N,EAAMurB,kBAAkB,MACxB8C,GAAcjP,MAItB,kBAACtH,GAAA,EAAD,CAAahnB,GAAG,wBACZ,kBAAC,GAAD,CAAMgV,MAAM,0BAER,0BAAMnF,UAAU,0BAA0B0M,SAAUhB,GAEhD,wBAAI1L,UAAU,cACG5D,EAAZqxB,EAAc,aAAkB,gBAAiB,IACjDrxB,EAAE,oBAIP,kBAACuQ,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,UACL/F,GAAG,UACHyc,UAAWsd,GACXn6B,KAAK,OACLo6B,YAAa/tB,EAAE,uBACf0O,MAAO1O,EAAE,uBACTyQ,SAAU,CAAC/E,MAGf,kBAAC6E,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,OACL/F,GAAG,OACHyc,UAAWsd,GACXn6B,KAAK,OACLo6B,YAAa/tB,EAAE,oBACf0O,MAAO1O,EAAE,oBACTyQ,SAAU,CAAC/E,MAGf,kBAAC6E,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,aACL/F,GAAG,aACHyc,UAAWsd,GACXn6B,KAAK,OACLo6B,YAAa/tB,EAAE,0BACf0O,MAAO1O,EAAE,0BACTyQ,SAAU,CAAC/E,MAIf,kBAAC6E,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,QACL/F,GAAG,QACHyc,UAAWsd,GACXn6B,KAAK,QACLo6B,YAAa/tB,EAAE,eACf0O,MAAO1O,EAAE,eACTyQ,SAAU,CAAC/E,MAEd2lB,EAEG,kBAAC9gB,GAAA,EAAD,CACI3M,UAAU,aACV4M,UAAWhC,GACX1U,KAAK,QACL4U,MAAO1O,EAAE,cACTyQ,SAAU,CAAC/E,KALf,gBAMkB1P,EAAQtC,MAAM3F,GAC3B0F,EAAOsK,KAAI,SAAArK,GAAK,OACb,4BAAQwK,IAAKxK,EAAM3F,GAAIyP,MAAO9J,EAAM3F,IAC/B2F,EAAMoK,WAIlB,KAIL,yBAAKF,UAAU,0BACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRxM,MAAM,UACNqM,SAAUnB,GAAYC,EACtB7b,KAAK,UAEJqM,EAAE,sBAEP,kBAAC4Q,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRH,SAAUnB,GAAYC,EACtBsB,QAAS,WACNxK,IACAgrB,GAAcjP,KAINriB,EAAVqxB,EAAY,sBAAyB,6BAsBtEE,GAAmBxgB,aAAU,CACzBvU,KtD7KsB,csD4KPuU,CAEhBwgB,IACYvgB,qBAXS,SAAAzd,GAAK,MAAK,CAC9ByI,QAASzI,EAAMwI,SAASC,QACxBvC,OAAQlG,EAAMkG,OAAOA,OACrBC,MAAOnG,EAAMkG,OAAOC,SAQgB,GAAzBsX,CAA6BugB,ICxJtCC,I,OAAa9P,cAAW,SAAC3K,GAAD,MAAY,CACtCC,KAAM,CACFya,WAAY,EACZC,WAAY3a,EAAM6K,QAAQ,WAIlC,SAAS+P,GAA0B1uB,GAC/B,IAAMiX,EAAUsX,KACVza,EAAQ6a,eACNC,EAA2C5uB,EAA3C4uB,MAAOC,EAAoC7uB,EAApC6uB,KAAMC,EAA8B9uB,EAA9B8uB,YAAaC,EAAiB/uB,EAAjB+uB,aAkBlC,OACI,yBAAKpuB,UAAWsW,EAAQlD,MACpB,kBAACib,GAAA,EAAD,CACInhB,QAnBuB,SAACxN,GAChC0uB,EAAa1uB,EAAO,IAmBZoN,SAAmB,IAATohB,EACVnuB,aAAW,cAEU,QAApBoT,EAAMmb,UAAsB,kBAAC,KAAD,MAAmB,kBAAC,KAAD,OAEpD,kBAACD,GAAA,EAAD,CAAYnhB,QArBU,SAACxN,GAC3B0uB,EAAa1uB,EAAOwuB,EAAO,IAoBqBphB,SAAmB,IAATohB,EAAYnuB,aAAW,iBACpD,QAApBoT,EAAMmb,UAAsB,kBAAC,KAAD,MAAyB,kBAAC,KAAD,OAE1D,kBAACD,GAAA,EAAD,CACInhB,QArBkB,SAACxN,GAC3B0uB,EAAa1uB,EAAOwuB,EAAO,IAqBnBphB,SAAUohB,GAAQtV,KAAKE,KAAKmV,EAAQE,GAAe,EACnDpuB,aAAW,aAEU,QAApBoT,EAAMmb,UAAsB,kBAAC,KAAD,MAAwB,kBAAC,KAAD,OAEzD,kBAACD,GAAA,EAAD,CACInhB,QAxBsB,SAACxN,GAC/B0uB,EAAa1uB,EAAOkZ,KAAK1b,IAAI,EAAG0b,KAAKE,KAAKmV,EAAQE,GAAe,KAwBzDrhB,SAAUohB,GAAQtV,KAAKE,KAAKmV,EAAQE,GAAe,EACnDpuB,aAAW,aAEU,QAApBoT,EAAMmb,UAAsB,kBAAC,KAAD,MAAoB,kBAAC,KAAD,QAcjE,IAAMC,GAAazQ,aAAW,CAC1B0Q,MAAO,CACHC,SAAU,OAGZC,GAAkBlc,cAAW,SAACW,GAAD,MAAY,CAC3Cwb,KAAM,CACFpoB,gBAAiB4M,EAAME,QAAQ1gB,OAAO6gB,MACtC/S,MAAO0S,EAAME,QAAQ1gB,OAAOi8B,OAEhCC,KAAM,CACF/Z,SAAU,OANMtC,CAQpB4H,MAGE0U,GAAiBtc,cAAW,SAACW,GAAD,MAAY,CAC1CC,KAAM,CACF,qBAAsB,CAClB7M,gBAAiB4M,EAAME,QAAQvjB,OAAOi/B,WAH3Bvc,CAMnB2H,MAEW,SAAS6U,GAAmB3vB,GACvC,IACMiX,EAAUiY,KACTp2B,EAGyDkH,EAHzDlH,SAAS82B,EAGgD5vB,EAHhD4vB,gBAAgBviB,EAGgCrN,EAHhCqN,SAAS5W,EAGuBuJ,EAHvBvJ,MAClCw2B,EAEyDjtB,EAFzDitB,MAAMl0B,EAEmDiH,EAFnDjH,QAAQ82B,EAE2C7vB,EAF3C6vB,iBAAiBC,EAE0B9vB,EAF1B8vB,mBAC/BC,EACyD/vB,EADzD+vB,iBAAiBC,EACwChwB,EADxCgwB,eAAeC,EACyBjwB,EADzBiwB,0BACnCC,EAA4DlwB,EAA5DkwB,yBAAyBC,EAAmCnwB,EAAnCmwB,cAAcC,EAAqBpwB,EAArBowB,oBAC3C,EAAwB/b,IAAMhF,SAAS,GAAvC,oBAAOwf,EAAP,KAAawB,EAAb,KACA,EAAsChc,IAAMhF,SAAS,GAArD,oBAAOyf,EAAP,KAAoBwB,EAApB,KACA,EAA6CjhB,oBAAS,GAAtD,oBAAOkhB,EAAP,KAAwBC,EAAxB,KACA,EAAyCnhB,oBAAS,GAAlD,oBAAOohB,EAAP,KAAsBC,EAAtB,KACQ3zB,EAAMkD,aAAe,gBAArBlD,EACR6P,qBAAU,WACHqgB,EAAM0D,KAAKx9B,SAAS2K,GAAMc,UAAUquB,EAAM0D,KAAKx9B,SAAS2K,GAAMe,OAC7D+xB,EAAW73B,EAAQjI,MAEzB,CAACkP,EAAMvJ,MAAM3F,KACf8b,qBAAU,WACHqgB,EAAM0D,KAAKx9B,SAAS2K,GAAMc,UAAUquB,EAAM0D,KAAKx9B,SAAS2K,GAAMgB,SAC7D0xB,GAAoB,KAE1B,CAACxwB,EAAMvJ,MAAM3F,KAEf,IAAM+/B,EAAY/B,EAAcvV,KAAK3b,IAAIkxB,EAAah2B,EAASsM,OAASypB,EAAOC,GAgBzEgC,EAAgB,SAAC/3B,GACnBy3B,GAAoB,GACpBZ,EAAgB72B,IAEd63B,EAAW,SAACxC,GACdsC,GAAkB,GAClBxC,GAAqBE,IAEnB2C,EAAsB,WACxBL,GAAkB,GAClBxC,GAAqB,OAEnB7hB,EAAa,SAACxS,GAChB62B,GAAkB,GAClB,IAAMM,EAAW,2BAAIn3B,GAAL,IAAUs0B,UAAU13B,IACpC4W,EAAS2jB,IAEPC,EAAqB,SAACC,GACxB,IAAMC,EAAQtB,EAAiBzqB,OAAO8rB,EAAerC,EACtD,OAAKqC,EAAeC,IAzDR,IAyDiBD,EAClBC,EAEJD,GAOJE,EAA0B,WAC5B,IAAMC,EAAUJ,EAAmBnC,GACnCsB,EAAqBiB,EAAUxC,EAAKC,IAOlCwC,EAAkB,SAACjxB,GACrByvB,EAAmBzvB,GACnB+wB,KAQJ,OANAxkB,qBAAU,WACNwkB,MACF,CAACvC,IAKC,kBAAC1T,GAAA,EAAD,CAAgB5N,UAAWgkB,MACvB,kBAACnW,GAAA,EAAD,CAAOza,UAAWsW,EAAQkY,MAAOzuB,aAAW,2BAExC,kBAACma,GAAA,EAAD,KAEI,kBAACC,GAAA,EAAD,KACI,kBAACuU,GAAD,CAAiB1uB,UAAU,aACvB,0BAAMA,UAAW,eACjB,2BACI7P,GAAI,oBACJJ,KAAK,WACLo8B,QAASqD,EACTtiB,QArCH,SAACxN,GACtB,IAAMgxB,EAAUJ,EAAmBnC,GACnCmB,IACAF,EAAiB1vB,EAAMgxB,EAAUxC,EAAKC,IAmCdvuB,MAAM,aACNM,MAAK,UAAK9D,EAAE,mBAIpB,kBAACsyB,GAAD,KAAkBtyB,EAAE,kBACpB,kBAACsyB,GAAD,KACI,kBAAC,KAAD,CACI1uB,UAAU,uBACVE,MAAK,UAAK9D,EAAE,yBAGpB,kBAACsyB,GAAD,KAAkBtyB,EAAE,sBAI5B,kBAACse,GAAA,EAAD,MACMyT,EAAc,EACNe,EAAiBn1B,MAAMm0B,EAAOC,EAAaD,EAAOC,EAAcA,GAChEe,GACR/uB,KAAI,SAAC/H,GAAD,OACF,kBAAC02B,GAAD,CAAgBxuB,IAAKlI,EAAQjI,IACzB,kBAACu+B,GAAD,CAAiB9hB,UAAU,KAAKikB,MAAM,MAAMC,MAAM,UAC9C,2BACIxwB,IAAKlI,EAAQjI,GACb+c,QAASyjB,EACT5gC,KAAK,WACLo8B,QAAS/zB,EAAQ+zB,QACjBvsB,MAAOxH,EAAQjI,GACf6P,UAAW,cACXE,MAAK,UAAK9D,EAAE,kBAAP,YAA4B8R,GAAmB9V,OAG5D,kBAACs2B,GAAD,CAAiB9hB,UAAU,KAAKikB,MAAM,MAAMC,MAAM,UAC7C5iB,GAAmB9V,IAExB,kBAACs2B,GAAD,CAAiB9hB,UAAU,KAAKikB,MAAM,MAAMC,MAAM,UAC9C,8BACG,4BAAQ9wB,UAAU,qBACdE,MAAK,UAAK9D,EAAE,qBAAP,YAA+BhE,EAAQe,OAC5C+T,QAAS,kBA3G3B,SAAC/T,GACd,IAAM43B,EAAM,iBACE53B,GACdmY,OAAOqN,SAASvH,KAAO2Z,EAwGqBC,CAAS54B,EAAQe,SAE7Bf,EAAQe,SAKpB,kBAACu1B,GAAD,CAAiB9hB,UAAU,KAAKikB,MAAM,MAAMC,MAAM,UAC9C,0BAAM9wB,UAAU,aACX,kBAAC,KAAD,CAAM0U,GAAE,UAAKvX,GAAMY,WAAX,OAAuBZ,GAAMa,MAA7B,YAAsClI,EAAM3F,IAA5C,OAAiDgN,GAAMc,QAAvD,YAAkE7F,EAAQjI,IAA1E,OAA+EgN,GAAMe,OAC9F,kBAAC,KAAD,CACI8B,UAAU,cACVE,MAAO9D,EAAE,cACT8Q,QAAS,kBAAM+iB,EAAW73B,EAAQjI,QAGrC,kBAAC,KAAD,CAAMukB,GAAE,UAAKvX,GAAMY,WAAX,OAAuBZ,GAAMa,MAA7B,YAAsClI,EAAM3F,IAA5C,OAAiDgN,GAAMc,QAAvD,YAAkE7F,EAAQjI,IAA1E,OAA+EgN,GAAMgB,SAClG,kBAACA,GAAA,EAAD,CACI+B,MAAO9D,EAAE,gBACT4D,UAAU,gBACVkN,QAAS,kBAAI2iB,GAAoB,SAOzC,kBAAC,GAAD,CACIzgB,KAAM0gB,EACNpjB,SAAUhB,EACVkf,kBAAmBwF,EACnB9D,MAAOA,IAGX,kBAAC,GAAD,CACI2E,cAAe,GACfla,OAAQ3e,EACR0yB,WAAY,UACZ1b,KAAMwgB,EACNzgB,QAASghB,QAKpBD,EAAY,GACT,kBAACpB,GAAD,CAAgBxoB,MAAO,CAAEyiB,OAAQ,GAAKmH,IAClC,kBAAC9V,GAAA,EAAD,CAAWmB,QAAS,MAIhC,kBAAC2V,GAAA,EAAD,KACI,kBAACpC,GAAD,KACI,kBAACqC,GAAA,EAAD,CACIC,iBAAgB,UAAKh1B,EAAE,kBACvBi1B,mBAAoB,CAAC,EAAG,GAAI,GAAI,CAAEvmB,MAAM,GAAD,OAAK1O,EAAE,aAAewD,OAlMtE,IAmMS2b,QAAS,EACT0S,MAAO91B,EAASsM,OAChB0pB,YAAaA,EACbD,KAAMA,EACNoD,YAAa,CACT7P,WAAY,CAAE,aAAc,iBAC5BnW,QAAQ,GAEZ8iB,aApIC,SAAC1uB,EAAO6xB,GAC7B7B,EAAQ6B,IAoIYC,oBAlLQ,SAAC9xB,GAC7BiwB,EAAe8B,SAAS/xB,EAAMC,OAAOC,MAAO,KAC5C8vB,EAAQ,GACRL,IACAE,KA+KoBmC,iBAAkB3D,SAa7C3gB,cAJuB,SAAAzd,GAAK,MAAK,CAC9ByI,QAAQzI,EAAMwI,SAASC,WAGD,GAAzBgV,CAA6B4hB,ICpVvB,IAAM2C,GAAc,SAACC,GACxB,MAC+C,oBAA3CnhB,OAAOC,UAAUmhB,SAASr2B,KAAKo2B,IACJ,OAA3BhsB,KAAKmgB,UAAU6L,ICMTE,I,OAAW,SAACzyB,GACtB,IAAQjD,EAAMkD,aAAe,gBAArBlD,EACR,EAAwCsS,mBAAS,MAAjD,oBAAOqjB,EAAP,KAAqBC,EAArB,KACMC,EAAeve,IAAMnO,SACVpV,EAAmCkP,EAA5CvJ,MAAS3F,GAAKif,EAA8B/P,EAA9B+P,KAAK8iB,EAAyB7yB,EAAzB6yB,sBAgB3B,OACI,kBAAChjB,GAAA,EAAD,CAEIgI,sBAAsB,EACtB/E,kBAAgB,uBAChB/C,KAAMA,GAEN,kBAAC+H,GAAA,EAAD,CAAanX,UAAU,gBAAgB7P,GAAG,wBACrC,kBAAC,KAAD,CACI+P,MAAO9D,EAAE,eACT4D,UAAU,eACViN,QAAQ,YACRC,QAASglB,IAGd,6BACI,2BAAOniC,KAAK,OAAOmG,KAAK,OAAQi8B,OAAO,aAAazxB,SA9B9C,SAAChB,GACnBsyB,EAAgBtyB,EAAMC,OAAOyyB,MAAM,KA6BsDC,IAAKJ,IACjFF,EACG,6BACI,qCAAQ31B,EAAE,qBAAV,aAAmC21B,EAAa77B,OAChD,qCAAQkG,EAAE,qBAAV,aAAmC21B,EAAahiC,OAChD,qCAAQqM,EAAE,0BAAV,aAAwC21B,EAAa3c,OACrD,qCAAQhZ,EAAE,6BAAV,aAA2C21B,EAAaO,iBAAiBC,wBAG7E,2BAAIn2B,EAAE,6BAEV,6BACI,kBAAC4Q,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRC,QAzCC,WACrBlK,IAAkB,GCfe,SAACwvB,EAAK1hC,GAC3C,IAAM2hC,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQH,GACxBtgC,EACKkH,KADL,UlGqBgC,4BkGrBhC,OACsCtI,GAAW2hC,GAC5Cp5B,MAAK,SAAC2H,GACH,IAAI7I,EAAS6I,EAAI9H,KAAKuL,OACtBtM,GAAU,WAAW,IAAXA,EAAiB+B,GAAKkC,EAAE,oCAA0ClC,GAAKkC,EAAE,oCACnFmG,GACIrI,GAAKkC,EAAE,iDAAkD,CACrDsI,SAAUvM,EACVwM,WAAYzK,GAAKkC,EAAE,oCAI9B2G,OAAM,SAACM,GAAD,OAASuvB,MAAM,wBDCtBC,CAA0Bd,EAAc5hC,GACxC8hC,EAAatrB,QAAQ/G,MAAQ,GAC7BoyB,EAAgB,OAsCIvxB,MAAM,UACNP,MAAO9D,EAAE,uBACT0Q,SApCE,OAAfilB,GAsCc31B,EAAE,8B,oCE3ClB02B,GAAqB,SAAAzzB,GAC9B,IAAQ8P,EAAuF9P,EAAvF8P,QAAU4H,EAA6E1X,EAA7E0X,OAAQ3H,EAAqE/P,EAArE+P,KAAK6f,EAAgE5vB,EAAhE4vB,gBAAgB92B,EAAgDkH,EAAhDlH,SAASuU,EAAuCrN,EAAvCqN,SAAS4f,EAA8BjtB,EAA9BitB,MAAcz2B,GAAgBwJ,EAAxBjH,QAAwBiH,EAAhBxJ,QAAOC,EAASuJ,EAATvJ,MACtF,EAA6C4Y,mBAAS,IAAtD,oBAAOwgB,EAAP,KAAwB6D,EAAxB,KACA,EAAiCrkB,oBAAS,GAA1C,oBAAOskB,EAAP,KAAkBC,EAAlB,KACA,EAAyCvkB,oBAAS,GAAlD,oBAAOwkB,EAAP,KAAsBC,EAAtB,KAIA,EAAmCzkB,mBAAS,IAA5C,oBAAO0kB,EAAP,KAAmBC,EAAnB,KACA,EAAqC3kB,mBAAS,IAA9C,oBAAO4kB,EAAP,KAAoBC,EAApB,KACAtnB,qBAAU,WACQ,OAAXnW,EAAM3F,IACTojC,EANO,aAAC3zB,MAAM,GAAD,OAAM9J,EAAM3F,IAAM2a,MAAM,GAAD,OAAMhV,EAAMoK,QAAYpK,MAO9D,CAACA,EAAM3F,KACT,IAAQiM,EAAMkD,aAAe,gBAArBlD,EACR6P,qBAAU,WACNohB,GAAwBhuB,EAAMvJ,MAAM3F,MAGtC,CAACif,IAEHnD,qBAAU,WACNunB,MACF,CAACn0B,EAAMlH,WAET,IAKMs7B,OAJc3hC,IAAT+D,EAAoBA,EAAOsK,KAAI,SAAA7L,GAAO,OAAO,aAACsL,MAAMtL,EAAKnE,GAAG2a,MAAM,GAAD,OAAIxW,EAAK4L,QAAW5L,MAAQ,KAUlGk/B,EAAyB,WAC3B,IACMxyB,EADiB,YAAI7I,GACAgI,KAAI,SAAC7L,GAC5B,OAAO,2BAAIA,GAAX,IAAgB63B,SAAQ,OAE5B4G,EAAoB/xB,IA2ClBuuB,EAA2B,WAC7B0D,GAAc,IAUZS,EAAkB,WAEpB,IADA,IAAIC,GAAW,EACN15B,EAAI,EAAGA,EAAIi1B,EAAiBzqB,OAAQxK,IACzC,GAAai1B,EAAiBj1B,GANpBkyB,QAMwB,CAC9BwH,GAAY,EACZ,MAGR,OAAOA,GAKLC,EAAoB,SAAC99B,EAAMsC,GAC7B,IAAIy7B,EAAQ,GACZ,GAAGz7B,EAAQ+zB,QAAQ,CACW/zB,EAAnB+zB,QAAP,IAAmBnrB,EAAnB,aAA0B5I,EAA1B,IACAy7B,EAAQ,2BAAK7yB,GAAN,IAAUlL,MAAM,CAAC3F,GAAG2F,EAAM3F,MAErC,OAAO0jC,GAgCX,OACI,kBAAC3kB,GAAA,EAAD,CACIgI,sBAAsB,EACtB/H,QAtHY,WAChBA,EAAQ4H,IAsHJ5E,kBAAgB,uBAChB/C,KAAMA,GAGN,kBAAC+H,GAAA,EAAD,CAAahnB,GAAG,wBACZ,oCAEQ,oCAEyB,IAApBgI,EAASsM,OAEN,oCAEI,wBAAIzE,UAAU,eAAd,UAAgC5D,EAAE,eAAlC,OAAsD,wCAAUiD,EAAMvJ,MAAMoK,SAE3E9D,EAAE,+BAIP,0BAAM4D,UAAU,sBACZ,4BACE,kBAAC,KAAD,CACIA,UAAW,eACX8zB,aAAcR,EACdzM,QAAS4M,EACT/yB,SAtFR,SAAC5K,GAC7Bu9B,EAAev9B,IAsFqBi+B,iBAAkB,kBAAIL,QAGhC,wBAAI1zB,UAAU,eAAc,8BAA2B,IAApB7H,EAASsM,OAAT,UAA2BrI,EAAE,kBAA7B,eAAuDA,EAAE,iBAAzD,MAAnC,UAA2HA,EAAE,kBAA7H,KAAkJ,wCAAUiD,EAAMvJ,MAAMoK,SAEpK,kBAAC8uB,GAAD,CAAoBl5B,MAAOuJ,EAAMvJ,MAAOm5B,gBAAiBA,EACzC92B,SAAUA,EAAUuU,SAAUA,EAC9B4f,MAAOA,EACPl0B,QAASiH,EAAMjH,QACf82B,iBAAkBA,EAClBC,mBA/IrB,SAACzvB,GACxB,IAAIs0B,EAAW,YAAO9E,GACtB8E,EAAY3jC,SAAQ,SAAA+H,GACZA,EAAQjI,KAAM6F,OAAQ0J,EAAMC,OAAOC,SACnCxH,EAAQ+zB,QAAWzsB,EAAMC,OAAOwsB,YAExC4G,EAAoBiB,IA0IwB5E,iBAxIxB,SAAC1vB,EAAM6wB,EAAerC,EAAKC,GAEhD,IADC,IAAI6F,EAAW,YAAO9E,GACdj1B,EAAKi0B,EAAMC,EAAal0B,EAAGs2B,EAAgBrC,EAAMC,EAAcl0B,IACpE+5B,EAAY/5B,GAAGkyB,QAAUzsB,EAAMC,OAAOwsB,QAEzC4G,EAAoBiB,IAoIwB3E,eApHzB,WACnB,IAAI2E,EAAW,YAAO9E,GACtB8E,EAAY3jC,SAAQ,SAAA+H,GACTA,EAAQ+zB,UACP/zB,EAAQ+zB,SAAU,MAG9B4G,EAAoBiB,IA8GwB1E,0BA5Gd,WAC9B2D,GAAc,SAAAgB,GAAS,OAAKA,MA4GgB1E,yBAA0BA,EAC1BC,cAAewD,EACfvD,oBAtIpB,SAACc,EAAerC,EAAKC,GAI7C,IAHA,IAAI6F,EAAW,YAAO9E,GAClBgF,EAAOhG,EAAMC,EACbgG,EAAO5D,EAAgBrC,EAAMC,EAC1B+F,EAAMC,GACLH,EAAYE,GAAO/H,SACnB+H,IAMRjB,EAAciB,IAAQC,GAAgB,IAARD,UAiI1B,yBAAKl0B,UAAU,qBACV,kBAAC,GAAD,CAAYlK,MAAOA,EAAOsZ,KAAM8jB,EAAgBhB,sBAzDjC,WACxBiB,GAAkB,MAyDV,kBAACnmB,GAAA,EAAD,CACIhN,UAA+B,IAApB7H,EAASsM,OAAa,6BAA6B,gCAC9DwI,QAAQ,YACRC,QAhEW,WACvBimB,GAAkB,IAgEN1yB,MAAM,UACNP,MAAOhG,GAAKkC,EAAE,qBAEblC,GAAKkC,EAAE,kCAES,IAApBjE,EAASsM,OACV,kBAACuI,GAAA,EAAD,CACIhN,UAAU,6BACViN,QAAQ,YACRC,QAlGkB,WAC9B,GAAGykB,GAAcyB,GACb7wB,GACIrI,GAAKkC,EAAE,+CAAgD,CACnDsI,SAAUxK,GAAKkC,EAAE,wBACjBuI,WAAYzK,GAAKkC,EAAE,wCAI3B,CAC2Bg3B,EAApBxzB,MAAoBwzB,EAAdtoB,MAIb,IAJA,IAAsB9J,EAAtB,aAA2BoyB,EAA3B,IACMgB,EAAgB,YAAIlF,GACpB2E,EAAQ,GACRrG,EAAU,CAACr9B,GAAGmjC,EAAanjC,IACxB8J,EAAI,EAAGA,EAAIm6B,EAAgB3vB,OAAQxK,IAAK,CAC7C,IAAMo6B,EAAQT,EAAkB5yB,EAAIozB,EAAgBn6B,IAChD03B,GAAc0C,IACdR,EAAQvjC,KAAK+jC,GAGrBR,EAAQxjC,SAAQ,SAAAiE,GAAI,OAAEg5B,GAAqB,2BAAKh5B,GAAN,IAAYk5B,kBAE1D+B,KA6EY9uB,MAAM,UACNqM,SA9GL4mB,IA+GKxzB,MAAOhG,GAAKkC,EAAE,wBAEblC,GAAKkC,EAAE,+BAEX,KACD,kBAAC4Q,GAAA,EAAD,CACIhN,UAA+B,IAApB7H,EAASsM,OAAa,6BAA6B,gCAC9DwI,QAAQ,YACRC,QAAS,kBAAMiC,EAAQ,KACvB1O,MAAM,UACNP,MAAOhG,GAAKkC,EAAE,gBAEblC,GAAKkC,EAAE,0BCyFbgR,ID1EAA,cAJS,SAAAzd,GAAK,MAAK,KAIM,GAAzByd,CAA6B0lB,I,OC0E7B1lB,cAXS,SAAAzd,GAAK,MAAK,CAC9BkG,OAAQlG,EAAMkG,OAAOA,OACrBC,MAAOnG,EAAMkG,OAAOC,MACpBC,eAAgBpG,EAAMkG,OAAOE,eAC7BtE,eAAgB9B,EAAM8I,SAAShH,eAC/BC,aAAc/B,EAAM8I,SAAS/G,aAC7B4iC,gBAAiB3kC,EAAM8I,SAAS9G,QAChCwG,SAAUxI,EAAMwI,SAASA,SACzBC,QAASzI,EAAMwI,SAASC,WAGY,GAAzBgV,EAzSC,SAAA/N,GAEZ,IAAQ5N,EAAsF4N,EAAtF5N,eAAgBC,EAAsE2N,EAAtE3N,aAAc4iC,EAAwDj1B,EAAxDi1B,gBAAgBn8B,EAAwCkH,EAAxClH,SAAStC,EAA+BwJ,EAA/BxJ,OAAOC,EAAwBuJ,EAAxBvJ,MAAMw2B,EAAkBjtB,EAAlBitB,MAAMl0B,EAAYiH,EAAZjH,QAC1EgE,EAAMkD,aAAe,gBAArBlD,EAER,EAAwBsS,oBAAS,GAAjC,oBAAOU,EAAP,KAAa8C,EAAb,KACA,EAA8BxD,oBAAU,GAAxC,oBAAO5d,EAAP,KAAgByjC,EAAhB,KACA,EAAwB7lB,mBAAS,IAAjC,oBAAO8c,EAAP,KAAaM,EAAb,KACA,EAAoCpd,mBAAS,MAA7C,oBAAO8lB,EAAP,KAAmBC,EAAnB,KACA,EAAgD/lB,oBAAS,GAAzD,oBAAOgmB,EAAP,KAAyBC,EAAzB,KAEA,EAAgCjmB,oBAAS,GAAzC,oBAAO5B,EAAP,KAAiB8nB,EAAjB,KACA,EAAsClmB,oBAAS,GAA/C,oBAAOmmB,EAAP,KAAqBC,EAArB,KAEMnJ,EAAeG,EACfrN,EAAQC,wBACdzS,qBAAU,WACHqgB,EAAM0D,KAAKx9B,SAAS2K,GAAMe,OACzBokB,GAAmBgK,EAAMlL,OAAOjxB,MAGtC,CAACkP,EAAMxJ,OAAO4O,SAChBwH,qBAAU,WACHqgB,EAAM0D,KAAKx9B,SAAS2K,GAAMgB,SACzBwqB,EAAgBtpB,EAAMitB,MAAMlL,OAAOjxB,MAGzC,CAACkP,EAAMxJ,OAAO4O,SAChBwH,qBAAU,WACHqgB,EAAM0D,KAAKx9B,SAAS2K,GAAMiB,aACzB22B,EAAczI,EAAMlL,OAAOjxB,MAGjC,CAACkP,EAAMxJ,OAAO4O,SAChBwH,qBAAU,WACHqgB,EAAM0D,KAAKx9B,SAAS2K,GAAMkB,aACzB22B,EAAiB31B,EAAMitB,MAAMlL,OAAOjxB,MAG1C,IACF8b,qBAAU,WACHqgB,EAAM0D,KAAKx9B,SAAS2K,GAAMmB,eACzB22B,EAAqBj/B,OAAOs2B,EAAMlL,OAAOjxB,OAE/C,CAACkP,EAAMlH,SAASsM,SAClBwH,qBAAU,WACHqgB,EAAM0D,KAAKx9B,SAAS2K,GAAMc,UAAUquB,EAAM0D,KAAKx9B,SAAS2K,GAAMe,QAC7D+2B,EAAqBj/B,OAAOs2B,EAAMlL,OAAOjxB,KACzCo9B,GAAqBv3B,OAAOs2B,EAAMlL,OAAO8T,eAE/C,CAAC71B,EAAMlH,SAASsM,SAClBwH,qBAAU,WACHqgB,EAAM0D,KAAKx9B,SAAS2K,GAAMc,UAAUquB,EAAM0D,KAAKx9B,SAAS2K,GAAMgB,UAC7D82B,EAAqBj/B,OAAOs2B,EAAMlL,OAAOjxB,KACzCo9B,GAAqBv3B,OAAOs2B,EAAMlL,OAAO8T,eAE/C,CAAC71B,EAAMlH,SAASsM,SAElBwH,qBAAU,kBAAMsW,OAAwB,IAExC,IAKM4S,EACA7T,GADgBxU,EACTzN,EAAMtJ,eACNsJ,EAAMxJ,OADgB21B,EAAM,CAAC,UAGpC7C,EAAkB,SAAA73B,GACpByjC,EAAWzjC,GACXohB,GAAQ,IAON6iB,EAAgB,SAAA5kC,GAClBokC,EAAWpkC,GACXwkC,GAAoB,IA6BlBS,EAAgB,SAACl8B,GACnB,QAAapH,IAAVoH,EAAK/I,GAAe,CACnB,IAAMklC,EAAS,2BAAIn8B,GAAL,IAAUpD,MAAM,CAAC3F,GAAG+I,EAAKpD,SACvCw3B,GAAqB+H,OAEpB,ET5IuB,SAAAn8B,GAEhChH,EACKkH,K3FLkB,W2FKAF,GAClBG,MAAK,SAAArG,GACFgP,GAAMC,SCnBP,CACHlS,KpHiFiB,coHhFjBC,ODiB8BgD,EAASkG,OACnCsJ,GnDfc,cmDgBdD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,gCACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,MSgIzBwiC,CADe,2BAAIp8B,GAAL,IAAUpD,MAAM,CAAC3F,GAAGW,MAGtC6jC,GAAoB,GAChBjH,GAAcjP,IAUhBwW,EAAuB,SAACnkC,GAC1BgkC,GAAgB,GAChBxS,GAAmBxxB,GACnBu8B,GAAwBv8B,IAOtBkkC,EAAmB,SAAClkC,GACtB2jC,EACI5d,IAEJ8R,EAAgB73B,IAOpB,OACI,oCACI,kBAAC,GAAD,CAAgBoF,KAAMq/B,GAAgBC,WAAYC,IAAKC,GAAWC,SAElE,kBAAC,GAAD,CACI3e,OAAQwd,EACRzd,OAAQjmB,EACRg6B,WAAY,QACZ1b,KAAMA,EACND,QA5EQ,SAAAre,GAEhB,GADAohB,GAAQ,GACHphB,EAAL,CAIA,GAAI0jC,EACA,GAAI1nB,GpC1BsB,SAAAhX,GAClCA,EAAMkC,SAAU,EAChByqB,GAAmB3sB,GoC4BP8/B,CAHcv2B,EAAMtJ,eAAekB,MAC/B,SAAAnB,GAAK,OAAIA,EAAM3F,KAAOW,WpCjCH,SAAAgF,GACnCA,EAAMkC,SAAU,EAChByqB,GAAmB3sB,GoCoCP+/B,CADchgC,EAAOoB,MAAK,SAAAnB,GAAK,OAAIE,OAAOF,EAAM3F,MAAQ6F,OAAOlF,YpCnGzC,SAAAA,GAClCoB,EACK0R,OhEzCgB,SgEyCA,WAAO9S,IACvBuI,MAAK,SAAArG,GACFgP,GAAMC,S1CpBP,CACHlS,K9CsDoB,e8CrDpBC,O0CkB+Bc,IAC3B4xB,KACAngB,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,4BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,MoC0FzBgjC,CAAuBhlC,GAE3B2jC,EAAc,MACd/G,GAAcjP,QAjBViP,GAAcjP,MA2Ed,kBAAC,GAAD,CACIrP,KAAMslB,EACNhoB,SAAU0oB,EACVxK,kBA1Cc,WACtB+J,GAAoB,MA2ChB,kBAAC,GAAD,CACIxlB,QA1CgB,WACxB2lB,GAAgB,GAChBpH,GAAcjP,IAyCNrP,KAAMylB,EACN18B,SAAUA,EACVrC,MAAOA,EACPm5B,gBArCY,SAAC72B,GACP,KAAVA,GThIwB,SAAAA,GAChClG,EACK0R,O3FrCkB,W2FqCA,WAAOxL,EAAQjI,KACjCkJ,MAAK,SAAArG,GACFgP,GAAMC,SCjCR,CACFlS,KpHkEoB,iBoHjEpBC,OD+BiCoI,EAAQjI,KACrCk9B,GAAwBj1B,EAAQtC,MAAM3F,IACtCoS,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,gCACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,MSoHzBijC,CAAqB39B,IAoCjBsU,SAAU0oB,EACV9I,MAAOA,EACPl0B,QAASA,EACTvC,OAAQA,IAGZ,yBAAKmK,UAAU,mBACX,2BAAOA,UAAU,sBACb,kBAAC,GAAD,CACI2rB,aAAcA,EACdC,aA5EO,WACvBgJ,GAAa9nB,MA6EAA,EACG,GAGA,kBAAC,GAAD,CACIwf,MAAOA,EACPtsB,UAAU,OACV0M,SAhIT,SAAArE,GAAM,OpCnFS,SAAAA,GAAM,OACpCA,EAAOlY,GAAKsyB,GAAmBpa,GAAUma,GAAmBna,GoCkFnC2tB,CAAmB3tB,IAiIpByJ,QApIA,WpC5ExB9P,GAAMC,S1CiBuB,CAC7BlS,K9CsCuB,gBwFvDvByS,GxBzBsB,gB4D4OV,yBAAKxC,UAAU,4BACe,IAAzBm1B,EAAc1wB,QACX,kBAAC,GAAD,CAAUvO,KAAMkG,EAAE,mBAErB+4B,EAAch1B,KAAI,SAAArK,GAAK,OACpB,6BAASwK,IAAKxK,EAAM3F,GAAI6P,UAAU,cAE9B,yBAAKA,UAAU,0BACT8M,EAoBE,kBAAC,KAAD,CACI9M,UAAU,gCACVE,MAAO9D,EAAE,sBACT8Q,QAAS,WACLunB,EAAc5d,IACd8R,EAAgB7yB,EAAM3F,OAxB9B,oCACA,kBAAC,KAAD,CAAOukB,GAAE,UAAKvX,GAAMY,WAAX,OAAuBZ,GAAMa,MAA7B,YAAsClI,EAAM3F,IAA5C,OAAiDgN,GAAMkB,aAC5D,kBAAC,KAAD,CACI2B,UAAU,gCACVE,MAAO9D,EAAE,uBACT8Q,QAAS,WACL8nB,EAAiBl/B,EAAM3F,QAI/B,kBAAC,KAAD,CAAMukB,GAAE,UAAKvX,GAAMY,WAAX,OAAuBZ,GAAMa,OAA7B,OAAqCb,GAAMe,KAA3C,YAAmDpI,EAAM3F,KACjE,kBAAC,KAAD,CACI6P,UAAU,gCACVE,MAAO9D,EAAE,cACT8Q,QAAS,kBA3J9B,SAAApc,GAAO,OAAIwxB,GAAmBxxB,GA2JMm/B,CAAWn6B,EAAM3F,SAc5C,kBAAC,KAAD,CAAMukB,GAAE,UAAKvX,GAAMY,WAAX,OAAuBZ,GAAMa,OAA7B,OAAqCb,GAAMgB,OAA3C,YAAqDrI,EAAM3F,KACnE,kBAAC,KAAD,CACI6P,UAAU,kCACVE,MAAO9D,EAAE,gBACT8Q,QAAS,kBAAMyb,EAAgB7yB,EAAM3F,QAG7C,kBAAC,KAAD,CAAMukB,GAAE,UAAKvX,GAAMY,WAAX,OAAuBZ,GAAMa,MAA7B,YAAsClI,EAAM3F,IAA5C,OAAiDgN,GAAMiB,aAC3D,kBAAC,KAAD,CACI8B,MAAO9D,EAAE,kCACT4D,UAAU,uCACVkN,QAAS,WACL6nB,EAAcj/B,EAAM3F,SAOhC,uBAAG6P,UAAU,2BACR5D,EAAE,eAAiB,KAExB,wBAAI4D,UAAU,sBA9GlB,SAAC,GAAW,IAAVE,EAAS,EAATA,MAElB,OAAOA,EAAMuE,OADI,EACV,UAA6BvE,EAAMnG,MAAM,EAD/B,GACV,OAA8DmG,EA6G5C+1B,CAAcngC,IAEnB,kBAAC,KAAD,CAAM4e,GAAE,UAAKvX,GAAMY,WAAX,OAAuBZ,GAAMa,MAA7B,YAAsClI,EAAM3F,IAA5C,OAAiDgN,GAAMmB,eAC/D,0BAAM0B,UAAU,kBACZ,kBAAC,KAAD,CACIE,MAAO9D,EAAE,8BACT4D,UAAU,gDACVkN,QACI,WACI+nB,EAAqBn/B,EAAM3F,eAW3D,kBAAC,GAAD,CACIwB,QAAS2iC,EACTvkC,KAAM2B,EACNE,OAAQH,EACRi7B,oBA9MgB,SAAChtB,EAAOw2B,GACjB,cAAXA,GACJh0B,aCtGJi0B,I,OAAU,SAAA92B,GACV,IAAQjD,EAAMkD,aAAe,gBAArBlD,EACAsP,EAAwDrM,EAAxDqM,aAAcC,EAA0CtM,EAA1CsM,SAAUC,EAAgCvM,EAAhCuM,WAAYkG,EAAoBzS,EAApByS,QAAQ1b,EAAYiJ,EAAZjJ,QAmBpD,OAjBA6V,qBAAU,WACF5M,EAAMjJ,UACFiJ,EAAMjJ,QAAQjG,GACdkP,EAAM8M,WAAW,CACbjW,KAAMmJ,EAAMjJ,QAAQF,KACpBnG,KAAMsP,EAAMjJ,QAAQrG,KAAKI,GACzBA,GAAIkP,EAAMjJ,QAAQjG,KAGtBkP,EAAM8M,gBAGf,CAAC9M,EAAMjJ,UAMN,kBAAC,GAAD,CAAM+O,MAAM,uBACR,0BAAMnF,UAAU,wBAAwB0M,SAAUhB,GAC9C,wBAAI1L,UAAU,cACTX,EAAMjJ,QAAQjG,GACTiM,EAAE,cACFA,EAAE,gBACN,IACDA,EAAE,iBAEP,kBAACuQ,GAAA,EAAD,CACI5c,KAAK,OACLmG,KAAK,OACL0W,UAAWsd,GACXC,YAAa/tB,EAAE,gBACf4D,UAAU,aACV8K,MAAO1O,EAAE,cACTyQ,SAAU,CAAC/E,GAAUmC,MAEzB,kBAAC0C,GAAA,EAAD,CACI3M,UAAU,aACV4M,UAAWhC,GACX1U,KAAK,OACL4U,MAAO1O,EAAE,cACTyQ,SAAU,CAAC/E,KACX,4BAAQlI,MAAO,KACdP,EAAM7I,UAAU2J,KAAI,SAAAi2B,GAAQ,OACzB,4BAAQ91B,IAAK81B,EAASjmC,GAAIyP,MAAOw2B,EAASjmC,IACrCimC,EAAS3uB,iBAItB,yBAAKzH,UAAU,0BACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRxM,MAAM,UACNqM,SAAUnB,GAAYC,EACtB7b,KAAK,UACJqM,EAAE,sBAEP,kBAAC4Q,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRH,SAAU0d,GAAiB7e,EAASC,EAAWxV,EAAQjG,IACvD+c,QAAS4E,GACR2Y,GAAsBr0B,EAAQjG,GAAGiM,SAa1D+5B,GAAUhpB,aAAU,CAChBvU,K7D9FqB,W6D6FfuU,CAEPgpB,IAEY/oB,qBATS,SAAAzd,GAAK,MAAK,CAC9ByG,QAASzG,EAAMwG,MAAMC,QACrBI,UAAW7G,EAAM6G,UAAUA,aAOhB4W,CAAyB+oB,ICjD3BE,GAAa,SAAAhuB,GACtBnW,EACKsH,ItG1CqB,asG0CD6O,GACpBhP,MAAK,SAAArG,GACFgP,GAAMC,SC5BP,CACHlS,K/HyEuB,kB+HxEvBC,OD0BiCgD,EAASkG,OACtCsJ,G9DpDkB,Y8DqDlBD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SACIxK,GAAKkC,EAAE,2BACP,IACAlC,GAAKkC,EAAE,2BACXuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OAGxBwjC,GAAc,SAAAjuB,GACvBnW,EACKkH,KtG7DqB,asG6DAiP,GACrBhP,MAAK,SAAArG,GACFgP,GAAMC,SCtEP,CACHlS,K/H6FqB,gB+H5FrBC,ODoE+BgD,EAASkG,OACpCsJ,G9DvEkB,Y8DwElBD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SACIxK,GAAKkC,EAAE,2BACP,IACAlC,GAAKkC,EAAE,2BACXuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OEnEjCyjC,I,OAAc,SAAAl3B,GACd,IAAQqM,EAAkDrM,EAAlDqM,aAAcC,EAAoCtM,EAApCsM,SAAUC,EAA0BvM,EAA1BuM,WAAYpV,EAAc6I,EAAd7I,UAG5C,EAAwBkY,oBAAS,GAAjC,oBAAOU,EAAP,KAAa8C,EAAb,KACA,EAA4BxD,oBAAU,GAAtC,oBAAO8nB,EAAP,KAAeC,EAAf,KAEAxqB,qBAAU,WACN,IAAI6nB,EAAe,GACfz0B,EAAM5I,QAAQtG,KACd2jC,EAAa,CAAErsB,YAAapI,EAAM5I,QAAQgR,YACtCtX,GAAIkP,EAAM5I,QAAQtG,KAE1BkP,EAAM8M,WAAW2nB,KAElB,CAACz0B,EAAM5I,UAEV,IAAQ2F,EAAMkD,aAAe,gBAArBlD,EAeF6zB,EAAa,SAAAzH,IFsCa,SAAAA,GAChCxmB,GAAMC,SCxDC,CACHlS,K/HiEwB,mB+HhExBC,ODsDyBw4B,IEtCzBkO,CAAqBlO,IAGzB,OACI,oCACI,kBAAC,GAAD,CACIyI,cAAe,GACfla,OAAQyf,EACR1L,WAAYpmB,GAASymB,KAAKnZ,cAC1B5C,KAAMA,EACND,QAnBQ,SAAAqnB,GFlBS,IAAAG,GEmBzBzkB,GAAQ,GACHskB,KFpBoBG,EEuBPH,EFtBtBtkC,EACK0R,OtGhBqB,asGgBA,WAAO+yB,IAC5Bt9B,MAAK,SAAArG,GACFgP,GAAMC,SCXP,CACHlS,K/HgFmB,c+H/EnBC,ODS8B2mC,IAC1Bp0B,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SACIxK,GAAKkC,EAAE,2BACP,IACAlC,GAAKkC,EAAE,2BACXuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,UEwBzB,kBAAC,GAAD,CAAMqS,MAAM,uBACR,0BAAMnF,UAAU,qBAAqB0M,SAAUhB,GAC3C,kBAACiB,GAAA,EAAD,CACI5c,KAAK,OACLmG,KAAK,cACL0W,UAAWsd,GACXC,YAAa/tB,EAAE,kBACf0O,MAAO1O,EAAE,kBACT4D,UAAU,aACViN,QAAQ,aAEZ,yBAAKjN,UAAU,qBACX,kBAACgN,GAAA,EAAD,CACIvM,MAAM,UACNT,UAAU,YACV8M,SAAUnB,GAAYC,EACtBqB,QAAQ,YACRld,KAAK,UAEJqM,EAAE,wBAKf,wBAAI4D,UAAU,aACTxJ,EAAU2J,KAAI,SAAAi2B,GAAQ,OACnB,wBACI91B,IAAK81B,EAASjmC,GACdyP,MAAOw2B,EAAS3uB,YAChBzH,UAAU,kBAEV,0BAAMA,UAAU,mBACXo2B,EAAS3uB,aAEd,0BAAMzH,UAAU,WACZ,kBAAC,KAAD,CACIA,UAAU,WACVkN,QAAS,kBAAM+iB,EAAWmG,EAASjmC,OAEvC,kBAAC,KAAD,CACI6P,UAAU,aACVkN,QAAS,kBAnEjB,SAAAspB,GACpBC,EAAUD,GACVtkB,GAAQ,GAiEmCyW,CAAgByN,EAASjmC,iBAgB5EomC,GAAcppB,aAAU,CACpBvU,KhEtH0B,YgEqHhBuU,CAEXopB,IAEYnpB,qBATS,SAAAzd,GAAK,MAAK,CAC9B8G,QAAS9G,EAAM6G,UAAUC,QACzBD,UAAW7G,EAAM6G,UAAUA,aAOhB4W,CAAyBmpB,ICwFzBnpB,I,OAAAA,cATS,SAAAzd,GAAK,MAAK,CAC9BuF,eAAgBvF,EAAMsF,aAAaC,eACnCiB,MAAOxG,EAAMwG,MAAMA,MACnBE,cAAe1G,EAAMwG,MAAME,cAC3BD,QAASzG,EAAMwG,MAAMC,QACrBI,UAAW7G,EAAM6G,UAAUA,UAC3BC,QAAS9G,EAAM6G,UAAUC,WAGW,GAAzB2W,EAhLE,SAAA/N,GACb,IAAQlJ,EAAUkJ,EAAVlJ,MAER8V,qBAAU,WACNiY,OACD,IAEHjY,qBAAU,WH3BV/Z,EACK2Q,ItGPqB,csGQrBxJ,MAAK,SAAA2H,GACFgB,GAAMC,SCTP,CACHlS,K/HqF0B,qB+HpF1BC,ODOmCgR,EAAI9H,UAEtC6J,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,QGwB9B,IAEHmZ,qBAAU,WACNkY,OACD,IAEH,IAAQ/nB,EAAMkD,aAAe,gBAArBlD,EACR,EAAwBsS,oBAAS,GAAjC,oBAAOU,EAAP,KAAa8C,EAAb,KACA,EAA4BxD,oBAAU,GAAtC,oBAAO8Z,EAAP,KAAeoO,EAAf,KACA,EAAwBloB,mBAAS,IAAjC,oBAAO8c,EAAP,KAAaM,EAAb,KACA,EAAoCpd,mBAAS,MAA7C,oBAAO8lB,EAAP,KAAmBC,EAAnB,KAEA,EAAgC/lB,oBAAS,GAAzC,oBAAO5B,EAAP,KAAiB8nB,EAAjB,KAUMiC,EAAc,SAAArO,IrCuDY,SAAAA,GAChCxmB,GAAMC,SC9FC,CACHlS,K7F+DuB,kB6F9DvBC,OD4FyBw4B,IqCvDzBsO,CAAqBtO,IAOnBG,EAAkB,SAAAH,GACpBoO,EAAUpO,GACVtW,GAAQ,IA4BN6kB,EACAzV,GADexU,EACRzN,EAAMhJ,cACNF,EADqBq1B,EAAM,CAAC,SAWzC,OACI,oCACI,kBAAC,GAAD,CAAgBt1B,KAAMq/B,GAAgByB,UAAWvB,IAAKC,GAAWuB,QACjE,kBAAC,GAAD,CACIlgB,OAAQyR,EACRsC,WAAYpmB,GAASwmB,KAAKlZ,cAC1B5C,KAAMA,EACN4H,OAAQwd,EACRrlB,QA7CQ,SAAAqZ,GAEhB,GADAtW,GAAQ,GACHsW,EAAL,CAKQ,IrCpDqBr4B,EqCkD7B,GAAIqkC,EACA,GAAI1nB,GrCpBsB,SAAA0M,GAClCA,EAAKxhB,SAAU,EACfwB,GAAIggB,GqCsBQ0d,CAHa73B,EAAMhJ,cAAcY,MAC7B,SAAAuiB,GAAI,OAAIA,EAAKrpB,KAAOq4B,WrC3BD,SAAAhP,GACnCA,EAAKxhB,SAAU,EACfwB,GAAIggB,GqC8BQ2d,CADa93B,EAAMlJ,MAAMc,MAAK,SAAAuiB,GAAI,OAAIA,EAAKrpB,KAAOq4B,WrCzD7Br4B,EqC6DHq4B,ErC5D9Bt2B,EACK0R,OpE5Be,QoE4BA,WAAOzT,IACtBkJ,MAAK,SAAA2H,GACFgB,GAAMC,SChCQ,SAAA9R,GACtB,MAAO,CACHJ,K7FkFmB,c6FjFnBC,OAAQG,GD6BWinC,CAAWjnC,IAC1Bg0B,KACAD,KACA3hB,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,2BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,MqCiD7B2hC,EAAc,UA6BV,yBAAKz0B,UAAU,mBACX,2BAAOA,UAAU,sBACb,kBAAC,GAAD,CACI2rB,aArBC,SAAAH,GACjBM,EAAQN,IAqBQI,aAlBO,WACvBgJ,GAAa9nB,MAmBAA,EACG,GAEA,oCACI,kBAAC,GAAD,CACIJ,SA/ET,SAAArE,GACf,IAAMZ,EAAcpI,EAAM7I,UAAUS,MAChC,SAAAlH,GAAI,OAAIA,EAAKI,IAAMkY,EAAOtY,QAE9BsY,EAAOic,gBAAkB7c,EAAYA,YACrC2c,GAAkB/b,IA2EMyJ,QApEJ,WrCwDxB9P,GAAMC,SCrFyB,CAC/BlS,K7FoD0B,mB4FiC1ByS,G5B9HqB,ciE2IG,kBAAC,GAAD,CACIxC,UAAU,WACV0M,SA1CT,SAAArE,IH3DU,SAAAA,GACzBA,EAAOlY,GACPkmC,GAAWhuB,GAEXiuB,GAAYjuB,GGwDZgvB,CAAkBhvB,QA8CV,6BAASrI,UAAU,+BACU,IAAxB+2B,EAAatyB,QACV,kBAAC,GAAD,CAAUvO,KAAMkG,EAAE,kBAErB26B,EAAa52B,KAAI,SAACqZ,EAAMplB,GAAP,OACd,kBAAC,GAAD,eAAMkM,IAAKlM,GAAWolB,EAAtB,CAA4BrU,MAAM,wBAC9B,yBAAKnF,UAAU,cACT8M,EAkBE,kBAAC,KAAD,CACI9M,UAAU,mBACVE,MAAO9D,EAAE,sBACT8Q,QAAS,WACLunB,EAAc5d,IACd8R,EAAgBnP,EAAKrpB,OAtB7B,oCACI,kBAAC,KAAD,CACI6P,UAAU,mBACVE,MAAO9D,EAAE,uBACT8Q,QAAS,WACLunB,EACI5d,IAEJ8R,EAAgBnP,EAAKrpB,OAG7B,kBAAC,KAAD,CACI6P,UAAU,UACVkN,QAAS,kBAAM2pB,EAAYrd,EAAKrpB,QAc5C,kBAAC,KAAD,CACI6P,UAAU,UACVkN,QAAS,kBAAMyb,EAAgBnP,EAAKrpB,QAI5C,kCAAQiM,EAAE,cAAgB,IAA1B,KACA,wBAAI4D,UAAU,qBAAqBwZ,EAAKtjB,MACxC,8BAAOkG,EAAE,cAAgB,KACzB,wBAAI4D,UAAU,qBACTwZ,EAAKzpB,KAAK0X,wBC5H5B2F,I,cAAAA,cAJS,SAAAzd,GAAK,MAAK,CAC9B+F,QAAS/F,EAAM8F,SAASC,WAGb0X,CACXD,aAAU,CACNvU,KlE5DoB,ckE2DxBuU,EA3Da,SAAA9N,GACb,IAAQjD,EAAMkD,aAAe,gBAArBlD,EACAsP,EAAwDrM,EAAxDqM,aAAcC,EAA0CtM,EAA1CsM,SAAUmG,EAAgCzS,EAAhCyS,QAASlG,EAAuBvM,EAAvBuM,WAAWlW,EAAY2J,EAAZ3J,QAepD,OAbAuW,qBAAU,WACF5M,EAAM3J,UACF2J,EAAM3J,QAAQvF,GACdkP,EAAM8M,WAAW,CACbhc,GAAIkP,EAAM3J,QAAQvF,GAClB+F,KAAMmJ,EAAM3J,QAAQQ,OAGxBmJ,EAAM8M,gBAGf,CAAC9M,EAAM3J,UAGN,kBAAC,GAAD,CAAMyP,MAAM,0BACR,wBAAImB,MAAO,CAAEgxB,UAAW,WACnBj4B,EAAM3J,QAAQvF,GAAKiM,EAAE,cAAgBA,EAAE,gBACvCA,EAAE,oBAEP,0BAAMsQ,SAAUhB,GACZ,kBAACiB,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,OACL0W,UAAWsd,GACXpf,MAAO1O,EAAE,iBAAiB,IAC1ByQ,SAAU,CAAC/E,GAAUoB,GAAejB,MAExC,yBAAKjI,UAAU,uCACf,kBAACgN,GAAA,EAAD,CACIC,QAAQ,YACRxM,MAAM,UACNT,UAAU,iBACV8M,SAAUnB,GAAYC,EACtB7b,KAAK,UACJqM,EAAE,sBAEP,kBAAC4Q,GAAA,EAAD,CACIjd,KAAK,SACLkd,QAAQ,YACRjN,UAAU,gBACV8M,SAAU0d,GAAiB7e,EAASC,EAAWlW,EAAQvF,IACvD+c,QAAS4E,GACR2Y,GAAsB/0B,EAAQvF,GAAGiM,YC6HvCgR,iBARS,SAAAzd,GAAK,MAAK,CAC9B8F,SAAU9F,EAAM8F,SAASA,SACzBE,iBAAkBhG,EAAM8F,SAASE,iBACjClE,eAAgB9B,EAAM8I,SAAShH,eAC/BC,aAAc/B,EAAM8I,SAAS/G,aAC7B4iC,gBAAiB3kC,EAAM8I,SAAS9G,WAGI,GAAzByb,EA1JK,SAAA/N,GAChB,IAAQjD,EAAMkD,aAAe,gBAArBlD,EACA3K,EAAkD4N,EAAlD5N,eAAgBC,EAAkC2N,EAAlC3N,aAAc4iC,EAAoBj1B,EAApBi1B,gBAEtC,EAAwB5lB,oBAAS,GAAjC,oBAAOU,EAAP,KAAa8C,EAAb,KACA,EAAkCxD,oBAAU,GAA5C,oBAAOqe,EAAP,KAAkBwK,EAAlB,KACA,EAAwB7oB,mBAAS,IAAjC,oBAAO8c,EAAP,KAAaM,EAAb,KACA,EAAoCpd,mBAAS,MAA7C,oBAAO8lB,EAAP,KAAmBC,EAAnB,KAEA,EAAgC/lB,oBAAS,GAAzC,oBAAO5B,EAAP,KAAiB8nB,EAAjB,KAEA3oB,qBAAU,kBAAM+gB,OAA0B,IAC1C/gB,qBAAU,kBAAMkhB,OAA8B,IAE9C,IAGMqK,EACAlW,GADkBxU,EACXzN,EAAM1J,iBACN0J,EAAM5J,SADkB+1B,EAAM,CAAC,SAEtCG,EAAeG,EAEfnD,EAAkB,SAAAoE,GACpBwK,EAAaxK,GACb7a,GAAQ,IAiCZ,OACI,oCACI,kBAAC,GAAD,CAAgBhc,KAAMq/B,GAAgBkC,aAAchC,IAAKC,GAAWgC,WACpE,kBAAC,GAAD,CACI1gB,OAAQwd,EACRzd,OAAQgW,EACRjC,WAAY,UACZ1b,KAAMA,EACND,QAjCQ,SAAA4d,GAEhB,GADA7a,GAAQ,GACH6a,EAAL,CACA,GAAIyH,EACA,GAAI1nB,EAAU,CACV,IAAMhX,EAAQuJ,EAAM1J,iBAAiBsB,MACjC,SAAAvB,GAAO,OAAIA,EAAQvF,KAAO48B,MlBkCLr3B,EkBhCCI,GlBiC9BkC,SAAU,EAClBk1B,GAAqBx3B,OkBjCN,ElB0BuB,SAAAA,GACtCA,EAAQsC,SAAU,EAClBk1B,GAAqBx3B,GkBxBTiiC,CAHct4B,EAAM5J,SAASwB,MACzB,SAAAvB,GAAO,OAAIA,EAAQvF,KAAO48B,WlBpCN,SAAAA,GACpC76B,EACK0R,OzFzBkB,WyFyBA,WAAOmpB,IACzB1zB,MAAK,SAAArG,GACFgP,GAAMC,SCjBP,CACHlS,KlHmFsB,iBkHlFtBC,ODeiC+8B,IAC7BI,KACA5qB,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,8BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,MkB4BzB8kC,CAAyB7K,GlBwBI,IAAAr3B,EkBtBjC++B,EAAc,UAiBV,yBAAKz0B,UAAU,mBACX,2BAAOA,UAAU,sBACb,kBAAC,GAAD,CACI2rB,aAAcA,EACdC,aAlBO,WACvBgJ,GAAa9nB,MAmBAA,EACG,GAEA,kBAAC,GAAD,CACI9M,UAAU,OACV0M,SAhET,SAAArE,GAAM,OlBxBW,SAAAA,GAAM,OACtCA,EAAOlY,GAAK+8B,GAAqB7kB,GAAU4kB,GAAqB5kB,GkBuBvCwvB,CAAqBxvB,IAiEtByJ,QA/DA,kBlBtBxB9P,GAAMC,SCqBA,CACFlS,KlHkEqB,uBiHvFzByS,GjDZwB,kBmEoGZ,6BAASxC,UAAU,+BACa,IAA3Bw3B,EAAgB/yB,QACb,kBAAC,GAAD,CAAUvO,KAAMkG,EAAE,qBAErBo7B,EAAgBr3B,KAAI,SAAAzK,GAAO,OACxB,kBAAC,GAAD,CAAM4K,IAAK5K,EAAQvF,GAAIgV,MAAM,0BACzB,wBAAInF,UAAU,sBACTtK,EAAQQ,MAEb,yBAAK8J,UAAU,cACV8M,EACG,kBAAC,KAAD,CACI9M,UAAU,mBACVE,MAAO9D,EAAE,sBACT8Q,QAAS,WACLunB,EAAc5d,IACd8R,EAAgBjzB,EAAQvF,OAIhC,oCACI,kBAAC,KAAD,CACI6P,UAAU,mBACVE,MAAO9D,EAAE,uBACT8Q,QAAS,WACLunB,EACI5d,IAEJ8R,EAAgBjzB,EAAQvF,OAGhC,kBAAC,KAAD,CACI6P,UAAU,mBACVE,MAAO9D,EAAE,cACT8Q,QAAS,kBAtG9B,SAAA6f,GAAS,OAAID,GAAqBC,GAuGTkD,CAAWv6B,EAAQvF,QAMnC,kBAAC,KAAD,CACI6P,UAAU,qBACVE,MAAO9D,EAAE,gBACT8Q,QAAS,kBAAMyb,EAAgBjzB,EAAQvF,cAU/D,kBAAC,GAAD,CACIwB,QAAS2iC,EACTvkC,KAAM2B,EACNE,OAAQH,EACRi7B,oBAlHgB,SAAChtB,EAAOw2B,GACjB,cAAXA,GACJh0B,YCkBO41B,I,OAnEY,SAAAz4B,GACvB,IAAQ8P,EAA+C9P,EAA/C8P,QAAS4H,EAAsC1X,EAAtC0X,OAAgB3H,GAAsB/P,EAA9B2X,OAA8B3X,EAAtB+P,MAAM2oB,EAAgB14B,EAAhB04B,YA+CvC,OACI,kBAAC7oB,GAAA,EAAD,CACIgI,sBAAsB,EACtB/H,QAhDY,WAChBA,EAAQ4H,IAgDJ5E,kBAAgB,uBAChB/C,KAAMA,GAEN,kBAAC+H,GAAA,EAAD,CAAahnB,GAAG,wBAAwB4nC,GACvC14B,EAAMgG,SApBY,WACvB,GAAKhG,EAAM24B,YAAe34B,EAAM44B,WAGhC,OACI,yBAAKj4B,UAAU,qBAnCA,WACnB,GAAKX,EAAM24B,WAGX,OACI,kBAAChrB,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRxM,MAAM,WAGLpB,EAAM64B,eAyBNC,GArBU,WACnB,GAAK94B,EAAM44B,WAGX,OACI,kBAACjrB,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRC,QAAS,kBAAMiC,EAAQ,MAEtB9P,EAAM+4B,eAYNC,IAcJC,M,mBC5CEC,GAnBa,SAAC,GAOtB,IANHttB,EAME,EANFA,OACAJ,EAKE,EALFA,MACAC,EAIE,EAJFA,MACA5U,EAGE,EAHFA,KACAsiC,EAEE,EAFFA,eACArM,EACE,EADFA,QAEA,OACI,kBAAC9rB,GAAA,EAAD,CACIm4B,eAAgBA,EAChB1tB,MAAOA,EACP5U,KAAMA,EACNi2B,QAASA,EACT5rB,QAAS,kBAACk4B,GAAA,EAAD,eAAUh4B,MAAM,WAAcwK,EAAYJ,OC4VhDuC,iBANS,SAAAzd,GAAK,MAAK,CAC9ByH,SAAUzH,EAAMkF,UAAUuC,SAC1BlC,eAAgBvF,EAAMsF,aAAaC,kBAIxBkY,CACXD,aAAU,CACNvU,KtEhWqB,esE+VzBuU,EAvVkB,SAAA9N,GAClB,IAAMq5B,EAAkB,WACpBC,GAAW,GACXC,GAAa,GACbC,EAAgB,CACZC,QAAQ,EACRC,SAAS,EACTC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,UAAU,EACVC,QAAQ,KAGhBntB,qBAAU,kBAAMoB,OAA+B,IAE/C,IAAQjR,EAAMkD,aAAe,gBAArBlD,EACAsP,EAAyDrM,EAAzDqM,aAAcC,EAA2CtM,EAA3CsM,SAAUmG,EAAiCzS,EAAjCyS,QAASlG,EAAwBvM,EAAxBuM,WAAWxU,EAAaiI,EAAbjI,SAEhDiiC,EAAwB,GAC5BptB,qBAAU,WACN5M,EAAMnK,eAAe7E,SAAQ,SAAAmF,GACzB6jC,EAAsB,GAAD,OAAI7jC,EAAUrF,MAAQ,KAE/CmpC,EAAkB,eAAKD,IACvBX,MACD,CAACr5B,EAAMnK,eAAgBmK,EAAMjI,SAASjH,KACzC,IAAMopC,EAAW,WACb,OAAQ,IAAI19B,MAOhB,EAA8B6X,IAAMhF,UAAS,GAA7C,oBAAO/H,EAAP,KAAgBgyB,EAAhB,KACA,EAAkCjlB,IAAMhF,UAAS,GAAjD,oBAAO8qB,EAAP,KAAkBZ,EAAlB,KACA,EAA+BlqB,mBAAS6qB,KAAxC,oBAAO9vB,EAAP,KACA,GADA,KACiCiF,mBARb,WAChB,IAAM+qB,EAAW,IAAI59B,KAAK09B,KAE1B,OADAE,EAASC,QAAQD,EAASE,UAAY,GAC/BF,EAK+BG,KAA1C,oBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAiCprB,qBAAjC,oBAAOqrB,EAAP,KAAkBC,EAAlB,KACA,EAAmCtrB,qBAAnC,oBAAOurB,EAAP,KAAmBC,EAAnB,KACA,EAAiDxrB,oBAAS,GAA1D,oBAAOyrB,EAAP,KAA0BC,EAA1B,KACA,EAAwC1mB,IAAMhF,SAAS,CACnDoqB,QAAQ,EACRC,SAAS,EACTC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,UAAU,EACVC,QAAQ,IAPZ,oBAAOiB,EAAP,KAAqBxB,EAArB,KAUA,EAA4CnlB,IAAMhF,SAC9C2qB,GADJ,oBAAOiB,EAAP,KAAuBhB,EAAvB,KAIMpN,EAAe,SAACxsB,EAAMusB,GAAP,OAAoBA,EAASvsB,EAAMC,OAAOwsB,UAEzDoO,EAAiB,SAAAC,GACnB,IAAIC,EAAWnyB,GAAOkyB,EAAM,cAAcvY,IAAI,EAAG,KACjD6X,EAAcW,EAASlyB,WAYrBmyB,EAAwBhnB,IAAMinB,aAChC,SAAA3rB,GACI,OAAO,SAAUtP,GACb,IAAIk7B,EAAU,gBAAM5rB,EAAMtP,EAAMC,OAAOwsB,SACvC0M,EAAgB,2BACTwB,GACAO,OAIf,CAACP,IAECQ,EAA2BnnB,IAAMinB,aACnC,SAAAG,GACI,OAAO,SAAUp7B,GACb,IAAIq7B,EAAY,gBAAMD,EAAUp7B,EAAMC,OAAOwsB,SAC7CmN,EAAkB,2BACXgB,GACAS,OAIf,CAACT,IAsIL,OApFAruB,qBAAU,WACN,IAAIyF,EAAe,GAGnB,GAFAgnB,IAEIr5B,EAAMjI,UACFiI,EAAMjI,SAASjH,GAAI,CACnBuhB,EAAe,CACXvhB,GAAIkP,EAAMjI,SAASjH,GACnBqX,KAAMnI,EAAMjI,SAASoQ,KACrBC,YAAapI,EAAMjI,SAASqQ,YAC5BoJ,SAAUxR,EAAMjI,SAASyZ,SACzBC,OAAQzR,EAAMjI,SAAS0Z,OACvB9c,gBAAiBqL,EAAMjI,SAASpD,gBAChCC,gBAAgBoL,EAAMjI,SAASnD,gBAC/Bqc,cAAejR,EAAMjI,SAASkZ,cAC9BC,iBAAkBlR,EAAMjI,SAASmZ,kBAGrCqB,GAAcvhB,SAAQ,SAAAsrB,GACdtc,EAAMjI,SAASkZ,cAAc9d,SAASmpB,KACtCjK,EAAa,wBAAD,OAAyBiK,KAAa,MAG1D,IAAMqf,EAAU37B,EAAMjI,SAASkZ,cAAc2qB,QACzC,SAACjrC,EAAQgf,GAEL,OADAhf,EAAOgf,IAAO,EACPhf,IAEX,IAGAqP,EAAMnK,gBACNmK,EAAMnK,eAAe7E,SAAQ,SAAA6qC,GAErB77B,EAAMjI,SAASmZ,iBAAiBlc,WAC5B,SAAAmB,GACI,OAAO0lC,EAAc/qC,KAAOqF,EAAUrF,OAEzC,IAELuhB,EAAa,2BAAD,OACmBwpB,EAAc/qC,MACzC,MAKhB,IAAMgrC,EAAa97B,EAAMjI,SAASmZ,iBAAiB0qB,QAC/C,SAACjrC,EAAQwF,GAEL,OADAxF,EAAOwF,EAAUrF,KAAM,EAChBH,IAEX,IAGJ2oC,EAAWt5B,EAAMjI,SAASpD,iBAC1B4kC,EAAav5B,EAAMjI,SAASnD,iBAE5B4kC,EAAgB,aACZC,QAAQ,EACRC,SAAS,EACTC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,UAAU,EACVC,QAAQ,GACL4B,IAGP,IAAI3B,EAAwB,GACxBh6B,EAAMnK,gBACNmK,EAAMnK,eAAe7E,SAAQ,SAAAmF,GACzB6jC,EAAsB,GAAD,OAAI7jC,EAAUrF,MAAQ,KAGnDmpC,EAAkB,2BACXD,GACA8B,IAIf97B,EAAM8M,WAAWuF,KAClB,CAACrS,EAAMjI,SAASjH,KAIf,kBAAC,GAAD,CAAMgV,MAAM,2BACR,wBAAImB,MAAO,CAAEgxB,UAAW,WACnBj4B,EAAMjI,SAASjH,GAAKiM,EAAE,cAAgBA,EAAE,gBACxCA,EAAE,mBAGP,0BAAMsQ,SAAUhB,GACZ,yBAAK1L,UAAU,qBACX,kBAAC2M,GAAA,EAAD,CACIzW,KAAK,kBACL4U,MAAO1O,EAAE,wBACTo8B,eAAe,QACf5rB,UAAW2rB,GACXpM,QAASxlB,EACTjG,SAAU,SAACiF,GAAD,OAAKumB,EAAavmB,EAAEgzB,IAC9Bl4B,MAAM,YAEV,kBAACkM,GAAA,EAAD,CACIzW,KAAK,kBACL4U,MAAO1O,EAAE,wBACTo8B,eAAe,QACf5rB,UAAW2rB,GACXpM,QAASqN,EACT94B,SAAU,SAACiF,GAAD,OAAKumB,EAAavmB,EAAEizB,IAC9Bn4B,MAAM,aAId,kBAACkM,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,OACLnG,KAAK,SACL6c,UAAWsd,GACXpf,MAAO1O,EAAE,cAAgB,IACzByQ,SAAU,CAAC/E,GAAUyC,MAEzB,kBAACoC,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,cACL0W,UAAWsd,GACXpf,MAAO1O,EAAE,kBAAoB,IAC7ByQ,SAAU,CAAC/E,MAEf,yBAAK9H,UAAU,mBACX,kBAAC2M,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,WACL0W,UAAWsV,GACXpX,MAAO1O,EAAE,oBAAsB,IAC/ByQ,SAAU,CAAC/E,GAAU4C,IACrB0wB,QAAS3xB,EACT/I,SAAU,SAAChB,EAAOE,GACVA,IACAo6B,EAAcp6B,GACd26B,EAAiB36B,GA9N1B,SAAA6J,IACZ0wB,GAAoB7xB,GAAOyxB,GAAYsB,eAAepB,MACrDC,EAAeK,EAAiB9wB,IAChCpK,EAAMmN,OACF,SACAlE,GAAOmB,EAAW,cAAcwY,IAAI,EAAG,KAAKF,OAAO,gBA0NnCuZ,CAAW17B,GACXw6B,GAAsB,OAIlC,kBAACztB,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,SACL0W,UAAWsV,GACXpX,MAAO1O,EAAE,kBAAoB,IAC7ByQ,SAAU,CAAC/E,GAAU6C,IACrBywB,QAASvB,EACT/sB,SAAUqtB,EACVz5B,SAAU,SAAChB,EAAOE,GACds6B,EAAet6B,OAI3B,yBAAKI,UAAU,IACX,2BAAI5D,EAAE,qBAAuB,MAlL5BqU,OAAO8qB,KAAKlB,GACbl6B,KAAI,SAAAq7B,GACZ,OACI,kBAAC7uB,GAAA,EAAD,CACIrM,IAAKjB,EAAMjI,SAASjH,GAAKqrC,EACzBtlC,KAAI,+BAA0BslC,GAC9B1wB,MAAO1O,EAAE,sBAAD,OAAuBo/B,IAC/BhD,eAAe,MACf1E,aAAcuG,EAAamB,GAC3B5uB,UAAW2rB,GACXpM,QAASkO,EAAamB,GACtB96B,SAAUg6B,EAAsBc,GAChC/6B,MAAM,gBAyKV,yBAAKT,UAAU,IACX,2BAAI5D,EAAE,yCAA2C,MAlN7CqU,OAAO8qB,KAAKjB,GACbn6B,KAAI,SAAA3K,GACf,IAAMimC,EAAep8B,EAAMnK,eAAe+B,MACtC,SAAAyB,GAAQ,OAAIA,EAASvI,MAAQqF,KAEjC,OACI,kBAACmX,GAAA,EAAD,CACIrM,IAAKjB,EAAMjI,SAASjH,GAAKqF,EACzBU,KAAI,kCAA6BV,GACjCsV,MACI2wB,EAAa3yB,WACb,KACA2yB,EAAahyB,UACb,IACAgyB,EAAa/xB,QACb,IAEJ8uB,eAAe,MACf5rB,UAAW2rB,GACXzE,aAAcwG,EAAe9kC,GAC7B22B,QAASmO,EAAe9kC,GACxBkL,SAAUm6B,EAAyBrlC,GACnCiL,MAAM,gBA+LV,yBAAKT,UAAU,wCACX,kBAACgN,GAAA,EAAD,CACIC,QAAQ,YACRxM,MAAM,UACNT,UAAU,iBACV8M,SAAUnB,GAAYC,EACtB7b,KAAK,UAEJqM,EAAE,sBAEP,kBAAC4Q,GAAA,EAAD,CACIjd,KAAK,SACLkd,QAAQ,YACRjN,UAAU,gBACV8M,SAAU0d,GAAiB7e,EAASC,EAAWxU,EAASjH,IACxD+c,QAAS4E,GAER2Y,GAAsBrzB,EAASjH,GAAGiM,WChVrDyb,I,OAAUnc,EAAQ,MAElBmiB,GAAYC,cAAW,SAAA3K,GAAK,MAAK,CACnCC,KAAM,CACF,QAAS,CACL2K,OAAQ5K,EAAM6K,QAAQ,SA6EnB5Q,iBAHS,SAAAzd,GAAK,MAAK,CAC9BkF,UAAWlF,EAAMkF,UAAUA,aAEhBuY,CACXD,aAAU,CACNvU,KvEhF0B,oBuE+E9BuU,EAzEqB,SAAA9N,GACrB,IAAMiX,EAAUuH,KACRzhB,EAAMkD,aAAe,UAArBlD,EACArH,EAA8DsK,EAA9DtK,WAAYF,EAAkDwK,EAAlDxK,UAAW6W,EAAuCrM,EAAvCqM,aAAcC,EAAyBtM,EAAzBsM,SAAUC,EAAevM,EAAfuM,WAsCvD,OACI,6BAAS5L,UAAWsW,EAAQlD,MACxB,2BAAIhX,EAAE,oCACN,uBAAG4D,UAAU,aACR5D,EAAE,wCAEP,0BAAMsQ,SAAUhB,GACZ,yBAAK1L,UAAU,0BA3CA,WACvB,IAAM07B,EAA+B7mC,EAAU3E,QAC3C,SAAAkH,GAAQ,OAAIA,EAASjH,KAAO4E,KAEhC,GAAI2mC,EAA8B,CAC9B,GAAIA,EAA6Bj3B,OAAS,EACtC,OACI,oCACI,kBAACkI,GAAA,EAAD,CACIxc,GAAG,eACH+F,KAAK,eACL0W,UAAWhC,GACXE,MAAO1O,EAAE,+BACTrM,KAAK,OACL8c,SAAU,CAAC/E,KAEX,iCACC4zB,EAA6Bv7B,KAC1B,SAAC/I,EAAUhD,GAAX,OACI,4BACIkM,IAAKuX,GAAQwC,WACbza,MAAOxI,EAASjH,IAEfiH,EAASqQ,kBAO/B,GAA4C,IAAxCi0B,EAA6Bj3B,OACpC,OAAO,2BAAIi3B,EAA6B,GAAGj0B,cAatC6W,GACD,kBAACtR,GAAA,EAAD,CACIhN,UAAU,oBACViN,QAAQ,YACRxM,MAAM,UACN1Q,KAAK,SACL+c,SAAUnB,GAAYC,GAEtB,kBAAC,KAAD,CACI1L,MAAO9D,EAAE,0BACT4D,UAAU,YAEbX,EAAMs8B,0BCThBC,I,OAjEgB,SAAAv8B,GAC3B,IAAQ8P,EAAiC9P,EAAjC8P,QAAS4H,EAAwB1X,EAAxB0X,OAAQC,EAAgB3X,EAAhB2X,OAAQ5H,EAAQ/P,EAAR+P,KAMjC,OACI,kBAACF,GAAA,EAAD,CAEIgI,sBAAsB,EACtB/H,QARY,WAChBA,EAAQ4H,IAQJ5E,kBAAgB,uBAChB/C,KAAMA,GAEN,kBAAC+H,GAAA,EAAD,CAAahnB,GAAG,wBACZ,oCACK6mB,EACG,oCACKA,IAAWH,GACR,oCAAG3c,KAAKkC,EAAE,gCAEV,oCAAGlC,KAAKkC,EAAE,8BAIlB,oCACKlC,KAAKkC,EAAE,uBAAwB,IAChC,0BAAM4D,UAtBd,eAuBa9F,KAAKkC,EAAL,4BACG,KAIflC,KAAKkC,EAAE,wBAAyB,CAC7BsI,SAAUxK,KAAKkC,EAAL,qCAItB,yBAAK4D,UAAU,qBACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRxM,MAAM,UACNyM,QAAS,kBAAMiC,EAAQ4H,KAEtB7c,KAAKkC,EAAE,4BAEZ,kBAAC4Q,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRC,QAAS,kBAAMiC,EAAQ,MAEtBjV,KAAKkC,EAAE,+BC2SbgR,iBATS,SAAAzd,GAAK,MAAK,CAC9BkF,UAAWlF,EAAMkF,UAAUA,UAC3BwC,kBAAmB1H,EAAMkF,UAAUwC,kBACnCC,kBAAmB3H,EAAMkF,UAAUyC,kBACnC7F,eAAgB9B,EAAM8I,SAAShH,eAC/BC,aAAc/B,EAAM8I,SAAS/G,aAC7B4iC,gBAAiB3kC,EAAM8I,SAAS9G,WAGI,GAAzByb,EAnUM,SAAA/N,GACjB,IAAQjD,EAAMkD,aAAe,gBAArBlD,EACR,EAAwBsS,oBAAS,GAAjC,oBAAOU,EAAP,KAAa8C,EAAb,KACA,EAAsCxD,oBAAS,GAA/C,oBAAOmtB,EAAP,KAAoBC,EAApB,KACA,EAAkCptB,oBAAS,GAA3C,oBAAOqtB,EAAP,KAAkBC,EAAlB,KACA,EAAoCttB,oBAAU,GAA9C,oBAAO3Z,EAAP,KAAmBqpB,EAAnB,KACA,EAAwB1P,mBAAS,IAAjC,oBAAO8c,EAAP,KAAaM,EAAb,KACQr6B,EAAkD4N,EAAlD5N,eAAgBC,EAAkC2N,EAAlC3N,aAAc4iC,EAAoBj1B,EAApBi1B,gBAEtCroB,qBAAU,kBAAM8D,OAA2B,IAC3C9D,qBAAU,WACNuF,OACD,IACHvF,qBAAU,kBAAMwF,OAA+B,IAE/C,MAAoC/C,mBAAS,MAA7C,oBAAO8lB,EAAP,KAAmBC,EAAnB,KACA,EAA8C/lB,mBAAS,MAAvD,oBAAOutB,EAAP,KAAwBC,EAAxB,KACA,EAAgCxtB,oBAAS,GAAzC,oBAAO5B,EAAP,KAAiB8nB,EAAjB,KACA,EAAgClmB,oBAAS,GAAzC,oBAAOytB,EAAP,KAAiBC,EAAjB,KAEAr4B,GAAuB,YAEvB,IAAM4nB,EAAeG,EAIfuQ,EAAsB,SAAAtnC,GAAU,OpEgVE,SAAAA,GACxC7C,EACKkH,KAAKkjC,YAAgCvnC,GACrCsE,MAAK,SAAArG,GACFgP,GAAMC,StBnWP,CACHlS,K/C6FgC,2B+C5FhCC,OsBiW0C+E,IACtCwN,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,+BACjBuI,WAAYzK,GAAKkC,EAAE,wCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,MoE3V7BypC,CAA6BxnC,IAE3BynC,EAAY,CAAC,OAAQ,cAAe,WAAY,UAElDzF,EAAe,GAEfA,EAAezV,GADfxU,EACsBzN,EAAMhI,kBACrB8kC,EACe98B,EAAM/H,kBAEN+H,EAAMxK,UAJmB22B,EAAMgR,GAOzD,IAAM7T,EAAkB,SAAA5zB,GACpBqpB,EAAcrpB,GACdmd,GAAQ,IAsBN6B,EAAc,SAAAhf,GAChB,IAAM0nC,EAAUrtB,EACVstB,EAAWb,EAGjB,GAFA3pB,GAAQ,GACR4pB,GAAe,GACV/mC,EAAL,CAGQ,IpE+JsB4nC,EoEjK9B,GAAInI,EACA,GAAI1nB,GpEsP0B,SAAA1V,GACtCA,EAASY,SAAU,EACnBkY,GAAY9Y,GoEpPAwlC,CAHiBv9B,EAAMhI,kBAAkBJ,MACrC,SAAAG,GAAQ,OAAIA,EAASjH,KAAO4E,WpE+OL,SAAAqC,GACvCA,EAASY,SAAU,EACnBkY,GAAY9Y,GoE1OAylC,CAHiBx9B,EAAMxK,UAAUoC,MAC7B,SAAAG,GAAQ,OAAIA,EAASjH,KAAO4E,WAI9B0nC,EpEuEuB,SAAA1nC,IAIJ,IAHhBiN,GACZI,WACAvN,UAAUA,UAAUoC,MAAK,SAAA3C,GAAI,OAAIA,EAAKnE,KAAO4E,KACrCf,gBAQb9B,EACK0R,O7C9KoB,Y6C8KA,WAAO7O,IAC3BsE,MAAK,SAAArG,GACFgP,GAAMC,StBnLP,CACHlS,K/C+FuB,kB+C9FvBC,OsBiLkC+E,IAC9BwN,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,+BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,MAlB7BiP,IACI,EACAM,GACAnI,GAAKkC,EAAE,+CoE9EP0gC,CAA0B/nC,GAEtB2nC,IpEkJsBC,EoEjJJ5nC,EpEkJ7B7C,EACAsH,IADA,U7C3P+B,oB6C2P/B,uBAC0CmjC,IACtCtjC,MAAK,SAAArG,GACHgP,GAAMC,SAASH,GAAe9O,EAASkG,OACtC4W,GAAsB,MACrB0B,KACDC,KACC1B,KACAvN,GL1QgB,eK2QhBD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,+BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI/B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OoEhK7B2hC,EAAc,QAwBZsI,EAAgC,SAAAhoC,IpEkRN,SAAAA,GAChCwM,GAAgB,YAChBrP,EACK2Q,IAAIy5B,YAAgCvnC,GACpCsE,MAAK,SAAArG,GACFgP,GAAMC,SAASX,GAAgBtO,EAASkG,UAE3C6J,OAAM,SAAAM,GAAG,OAAIf,GAAae,MoExR3B25B,EAAsBjoC,IAEpBkoC,EAA+B,SAAA7lC,GAGjC,OAAkC,IAA3BA,EAASnD,gBAAT,UADS,mBACT,YAFmB,WACV,oBAIpB,OACI,oCACI,kBAAC,GAAD,CAAgBiC,KAAMq/B,GAAgB2H,cAAezH,IAAKC,GAAWyH,YACrE,kBAAC,GAAD,CACIpmB,OAAQhiB,EACR+1B,WAAY,WACZ9T,OAAQwd,EACRplB,KAAMA,EACND,QAAS4E,IAEb,kBAAC,GAAD,CACIgD,OAAQhiB,EACRiiB,OAAQwd,EACRplB,KAAMysB,EACN1sB,QAAS4E,IAEb,kBAAC,GAAD,CACI+W,WAAY,WACZ9T,OAAQilB,EACR7sB,KAAM2sB,EACN5sB,QAnFa,SAACzP,EAAOw2B,GAC7B8F,GAAa,GACbE,EAAmB,OAkFXnE,YAAa37B,EAAE,uBACf47B,YAAY,EACZC,YAAY,EACZG,cAAeh8B,EAAE,gBAEjB,kBAAC,GAAD,CACIrH,WAAYA,EACZ2X,SA9CiB,SAAArE,IpE2NT,SAAAA,GACxBnW,EACKkH,KACGgkC,2CAEI/0B,EAAOg1B,eACP,iBACAh1B,EAAOi1B,cAEdjkC,MAAK,SAAArG,GACFuP,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,+BACjBuI,WAAYzK,GAAKkC,EAAE,sCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,MoE3O7ByqC,CAAa,CACTF,gBAAiBtoC,EACjBuoC,cAAej1B,EAAOi1B,eAE1BtB,GAAa,GACbE,EAAmB,OAyCPP,kBAAmBv/B,EAAE,iBAG7B,yBAAK4D,UAAU,mBACX,2BAAOA,UAAU,sBACb,kBAAC,GAAD,CACI2rB,aAAcA,EACdC,aAlEO,WACvBgJ,GAAa9nB,GACbsvB,GAAY,IAiEIvQ,aA9DQ,WACxBuQ,GAAaD,GAEPp4B,IADQ,KAAbo4B,EAC4B,WACA,WAC7BvH,GAAY,MA2DC9nB,GAAYqvB,EACT,GAEA,kBAAC,GAAD,CACIn8B,UAAU,OACV0M,SA7IT,SAAArE,GAAM,OAAI+H,GAAsB/H,IA8IvByJ,QA/IA,kBpE1BxB9P,GAAMC,StBoB0B,CAChClS,K/CuE0B,wBqE3F1ByS,GLxByB,mByEoMb,6BAASxC,UAAU,+BACU,IAAxB+2B,EAAatyB,QACV,kBAAC,GAAD,CAAUvO,KAAMkG,EAAE,oBAErB26B,EAAa52B,KAAI,SAAC/I,EAAUhD,GACzB,IAAMopC,EAAW,GAKjB,OAHApmC,EAASkZ,cAAcjgB,SAAQ,SAAA2e,GAAG,OAC9BwuB,EAASltC,KAAK8L,EAAE,sBAAD,OAAuB4S,QAGtC,kBAAC,GAAD,CACI1O,IAAKlM,EACL+Q,MAAK,kCACD/N,EAASpD,gBAAkB,UAAY,KAG3C,yBAAKgM,UAAU,cACT8M,GAAaqvB,EA8CVA,EAYD,kBAAC,KAAD,CACIn8B,UAAU,mBACVE,MAAO9D,EAAE,kBACT8Q,QAAS,WACL6vB,EACI3lC,EAASjH,OAhBrB,kBAAC,KAAD,CACI6P,UAAU,mBACVE,MAAO9D,EAAE,sBACT8Q,QAAS,WACLunB,EACI5d,IAEJ8R,EAAgBvxB,EAASjH,OArDjC,oCACI,kBAAC,KAAD,CACI6P,UAAU,mBACVE,MAAO9D,EAAE,uBACT8Q,QAAS,WACLunB,EACI5d,IAEJ8R,EACIvxB,EAASjH,OAIrB,kBAAC,KAAD,CACI6P,UAAU,mBACVE,MAAO9D,EAAE,cACT8Q,QAAS,kBApLlC,SAAAnY,GAAU,OAAI+a,GAAsB/a,GAqLPk7B,CAAW74B,EAASjH,OAG5B,kBAAC,KAAD,CACI6P,UAAU,mBACVE,MAAO9D,EAAE,cACT8Q,QAAS,YApKxB,SAAAnY,GACzBqpB,EAAcrpB,GACdinC,GAAa,GAmK+ByB,CACIrmC,EAASjH,OAIpBiH,EAASpD,gBACN,GAEA,kBAAC,KAAD,CACIgM,UAAU,sBACVE,MAAO9D,EACH,uBAEJ8Q,QAAS,WACLmvB,EACIjlC,EAASjH,QA4BjC,kBAAC,KAAD,CACI6P,UAAU,qBACVE,MAAO9D,EAAE,gBACT8Q,QAAS,kBACLyb,EAAgBvxB,EAASjH,OAI7B,kBAAC,KAAD,CACI6P,UAAWi9B,EAA+B7lC,GAC1C8I,MAAO9D,EAAE,qBACT8Q,QAAS,kBA/NlB,SAAAnY,GAC3BqpB,EAAcrpB,GACd+mC,GAAe,GA8NyB4B,CAAuBtmC,EAASjH,QAOhD,uBAAG6P,UAAU,8BACT,+BAAQ5D,EAAE,kBAAoB,KAC9B,2BAAIhF,EAASqQ,aACZ,MAAQrQ,EAASoQ,KAAO,MAE7B,uBAAGxH,UAAU,8BACT,2BACK5I,EAASyZ,SADd,MAC2BzZ,EAAS0Z,SAGxC,uBAAG9Q,UAAU,8BACR5D,EAAE,qBAAuB,KACzBohC,EAASG,KAAK,OAEnB,uBAAG39B,UAAU,8BACR5D,EACG,yCACA,KACHhF,EAASmZ,iBACLpQ,KAAI,SAAA3K,GACD,OAAOA,EAAUsT,cAEpB60B,KAAK,aAOlC,kBAAC,GAAD,CACIhsC,QAAS2iC,EACTvkC,KAAM2B,EACNE,OAAQH,EACRi7B,oBA/PgB,SAAChtB,EAAOw2B,GACjB,cAAXA,GACJh0B,QA+PI,kBAAC,GAAD,CAAmBpO,aAAa,iBChV/B8pC,GAAkB,WAC3B1rC,EACK2Q,IlH0BgB,wBkHzBhBxJ,MAAK,SAAArG,GACFgP,GAAMC,SlGjBP,CACHlS,KxCaiB,YwCZjBC,OkGe4BgD,EAASkG,UAEpC6J,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,OCE/B+qB,I,OAAYC,cAAW,iBAAO,CAChC+f,kBAAmB,CACf,IAAK,CACDn3B,QAAS,eACTqX,OAAQ,gBACR2I,MAAO,WAiHJtZ,iBANS,SAAAzd,GAAK,MAAK,CAC9BD,SAAUC,EAAMD,SAASA,SACzB+H,MAAO9H,EAAM8H,MAAMA,MACnBnE,QAAS3D,EAAMgJ,iBAAiBrF,WAGrB8Z,EA5GO,SAAA/N,GAClB,IAAQjD,EAAMkD,aAAe,UAArBlD,EAER,EAA8BsS,mBAAS,MAAvC,oBAAO9e,EAAP,KAAgB4R,EAAhB,KACA,EAAwBkN,mBAAS,MAAjC,oBAAOhX,EAAP,KAAauJ,EAAb,KAEMqV,EAAUuH,KAEVnuB,EAAW2P,EAAM3P,SACjB+H,EAAQ4H,EAAM5H,MAEpBwU,qBAAU,kBAAM4W,OAA6B,IAC7C5W,qBAAU,kBAAM2xB,OAAmB,IAEnC,IAAME,EAAuB,CACzBjX,QAASn3B,EACTo3B,eAAgB,SAAAC,GAAM,OAClBA,EACMA,EAAO1Y,SACP,IACA0Y,EAAOt3B,QACP,IACAs3B,EAAO7wB,KACP,IACA6wB,EAAO5Y,WACP,KAGR4vB,EAAoB,CACtBlX,QAASpvB,EACTqvB,eAAgB,SAAAC,GAAM,OAAKA,EAASA,EAAO5tB,MAAQ,KAGjD6kC,EAA4B,WDwBI,IAAAC,ECvB7BvmC,GAAS9H,IDuBoBquC,ECtBP,CAAE1sC,UAAW3B,EAAQO,GAAI+tC,OAAQxmC,EAAKvH,IDuBrE+B,EACKsH,IlH7CiC,+BkH6CDykC,GAChC5kC,MAAK,SAAArG,GACF6vB,KACA+a,KACA56B,IAAkB,GAClBT,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,2BACjBuI,WAAYzK,GAAKkC,EAAE,6CAI9B2G,OAAM,SAAAjQ,GACHkQ,IAAkB,GAClBV,GAAaxP,MCrCjBmO,EAAQ,MACRO,EAAW,MACXwB,IAAkB,KAGtB,OACI,oCACI,kBAAC,GAAD,CAAiByyB,IAAKC,GAAWyI,QACjC,yBAAKn+B,UAAU,mBACX,kBAAC,GAAD,CAAMmF,MAAM,mBACR,wBAAInF,UAAU,cAAc5D,EAAE,iBAC7BiD,EAAM/L,QACH,kBAAC6hB,GAAA,EAAD,MAEA,oCACI,yBAAKnV,UAAU,sBACX,kBAACinB,GAAA,EAAD,iBACQ6W,EADR,CAEI5W,eAAa,EACbC,aAAW,EACXnnB,UAAWsW,EAAQunB,kBACnBn9B,SAAU,SAAChB,EAAO2kB,GACd7iB,EAAW6iB,IAEfgD,YAAa,SAAAjG,GAAM,OACf,kBAACqF,GAAA,EAAD,iBACQrF,EADR,CAEItW,MAAO1O,EACH,8BAEJ2hB,OAAO,gBAInB,kBAACkJ,GAAA,EAAD,iBACQ8W,EADR,CAEI7W,eAAa,EACbC,aAAW,EACXnnB,UAAWsW,EAAQunB,kBACnBn9B,SAAU,SAAChB,EAAO2kB,GACdpjB,EAAQojB,IAEZgD,YAAa,SAAAjG,GAAM,OACf,kBAACqF,GAAA,EAAD,iBACQrF,EADR,CAEItW,MAAO1O,EAAE,2BACT2hB,OAAO,iBAKvB,kBAAC/Q,GAAA,EAAD,CACIhN,UAAU,YACViN,QAAQ,YACRxM,MAAM,UACNyM,QAAS,kBAAM8wB,MAEd5hC,EAAE,qCC7CpBgR,I,OAAAA,cAFS,SAAAzd,GAAK,MAAK,KAEnByd,CACXD,aAAU,CACNvU,K5EjEoB,e4EgExBuU,EAjEqB,SAAA9N,GACrB,IAAQjD,EAAMkD,aAAe,gBAArBlD,EACAsP,EAAgDrM,EAAhDqM,aAAcC,EAAkCtM,EAAlCsM,SAAUmG,EAAwBzS,EAAxByS,QAASlG,EAAevM,EAAfuM,WAEzC,OACI,oCACI,kBAAC,GAAD,CAAiB6pB,IAAKC,GAAW0I,UACrC,0BAAM1xB,SAAUhB,GACZ,wBAAI1L,UAAU,cAAc5D,EAAE,+BAC9B,kBAACuQ,GAAA,EAAD,CACIC,UAAWsd,GACXlqB,UAAU,aACV9J,KAAK,mBACL/F,GAAG,mBACH2a,MAAO1O,EAAE,kBACTrM,KAAK,WACL8c,SAAU,CAAC/E,GAAUwC,MAEzB,kBAACqC,GAAA,EAAD,CACIC,UAAWsd,GACXlqB,UAAU,aACV9J,KAAK,eACL/F,GAAG,eACH2a,MAAO1O,EAAE,sBACTrM,KAAK,WACL8c,SAAU,CAAC/E,GAAUwC,MAEzB,kBAACqC,GAAA,EAAD,CACIC,UAAWsd,GACXlqB,UAAU,aACV9J,KAAK,mBACL/F,GAAG,mBACH2a,MAAO1O,EAAE,yBACTrM,KAAK,WACL8c,SAAU,CAAC/E,GAAUwC,MAGzB,yBAAKtK,UAAU,0BACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,gBACVjQ,KAAK,SACLkd,QAAQ,YACRxM,MAAM,UACNqM,SAAUnB,GAAYC,GAErBxP,EAAE,sBAEP,kBAAC4Q,GAAA,EAAD,CACIhN,UAAU,gBACVjQ,KAAK,SACLkd,QAAQ,YACRH,SAAUnB,GAAYC,EACtBsB,QAAS4E,GAER1V,EAAE,+BCwIRgR,I,OAAAA,cANS,SAAAzd,GAAK,MAAK,CAC9BwH,UAAWxH,EAAMwH,UAAUA,UAC3B7D,QAAS3D,EAAMgJ,iBAAiBrF,QAChCU,gBAAiBrE,EAAM+I,SAAS1E,mBAGI,GAAzBoZ,EAnMG,SAAA/N,GACd,IAAQjD,EAAMkD,aAAe,UAArBlD,EAER6P,qBAAU,kBAAM1I,OAA2B,IAC3C0I,qBAAU,WACNoB,KACArK,IAAkB,KACnB,IAEH,IAOIq7B,EAPElnC,EAAYkI,EAAMlI,UAAU,GAE5B8L,EAAY5D,EAAM/L,aAONxB,IAAdqF,IACAknC,EAAkBlnC,EAAUsN,QAGhC,IAOM65B,EAAqB,SAAC5lC,EAAUtE,GAAyB,IAAlBrE,EAAiB,uDAAV,MAChD,OAAOsP,EAAMrL,gBAAgBuc,iBAAiBpQ,KAAI,SAAAo+B,GAC9C,IAAIC,EACJA,EACa,QAATzuC,EACM2I,EAAS4d,QAAQ,GAAGG,IAAIpiB,WACpB,SAAAmB,GAAS,OAAIA,EAAUipC,WAAaF,EAAcpuC,MAEtDuI,EAAS4d,QAAQ,GAAGI,KAAKriB,WACrB,SAAAmB,GAAS,OAAIA,EAAUipC,WAAaF,EAAcpuC,MAEhE,IAAIuuC,EACS,QAAT3uC,EACM2I,EAAS4d,QAAQ,GAAGG,IAAIxf,MACpB,SAAAzB,GAAS,OAAIA,EAAUipC,WAAaF,EAAcpuC,MAEtDuI,EAAS4d,QAAQ,GAAGI,KAAKzf,MACrB,SAAAzB,GAAS,OAAIA,EAAUipC,WAAaF,EAAcpuC,MAEhE,GACIquC,EAAgB,IACfE,GACDA,EAAS/tC,QAAQ8T,QAAU,EAE3B,OACI,yBACIzE,UAAU,aACVM,IAAKlM,EAAQmqC,EAAcz1B,YAE3B,yBAAK9I,UAAU,gCACVu+B,EAAcz1B,YAEnB,yBAAK9I,UAAU,mBACX,yBAAKA,UAAU,iBAK3B,IAAI2+B,EAAiB,GAEjBD,GACAA,EAAS/tC,SACT+tC,EAAS/tC,QAAQ8T,OAAS,IAE1Bk6B,EA5DK,0BA8DT,IAAIC,EAAsB,GAK1B,OAJAF,EAAS/tC,QAAQwP,KAAI,SAAA0+B,GACjBD,EACIC,EAAUhpC,OAAO4O,OAAS,EAhEzB,gBAgE8C,MAGnD,yBACIzE,UAAU,aACVM,IAAKlM,EAAQsqC,EAAS51B,WAAa41B,EAASjhB,YAE5C,yBAAKzd,UAAU,gCACV0+B,EAAS51B,YAEd,yBACI9I,UAAS,uCAAkC4+B,GAAlC,OAAwDD,IAEhED,EAAS/tC,QAAQwP,KAAI,SAAA0+B,GAClB,OAAOA,EAAUhpC,OAAOsK,KAAI,SAAA6V,GACxB,IAAM8oB,EACFD,EAAUE,iBACVF,EAAUrhB,iBACd,OACI,uBACItd,MAAO4+B,EACPx+B,IAAKw+B,EAAYD,EAAU3oC,MAE1B8f,EAAUyH,wBAiCnD,OACI,yBAAKzd,UAAU,wBACViD,EACG,wBAAIjD,UAAU,gBACV,kBAACmV,GAAA,EAAD,OAGJ,oCAEKkpB,EAAkB,EACf,oCACI,kBAAC,GAAD,CAAgB5I,IAAKC,GAAWjyB,aAChC,wBAAIzD,UAAU,gBACT5D,EAAE,uBAEP,6BAAS4D,UAAU,cACd7I,EAAUgJ,KAAI,SAAA6+B,GAAQ,OACnB,kBAAC,GAAD,CACI75B,MAAM,YACN7E,IAAK0+B,EAASC,UAnIzB/oC,EAsIe8oC,EAASE,UAtIlBnvC,EAuISivC,EAASG,UAtI7C,wBAAIn/B,UAAU,gBACV,0BAAMA,UAAU,aAAa9J,GAC7B,0BAAM8J,UAAU,aAAajQ,KAuIAivC,EAASI,UAAUj/B,KAChB,SAACzH,EAAUtE,GACP,OAAOiL,EAAMrL,gBAAgBsc,cAAc9d,SACvCkG,EAASsW,KAlDnC,SAACtW,EAAUtE,GAAX,OAClB,6BAAS4L,UAAU,WAAWM,IAAKlM,EAAQsE,EAASsW,KAChD,wBAAIhP,UAAU,gBAAgB5D,EAAE,eAAD,OAAgB1D,EAASsW,OACxD,iCACI,kBAAC,WAAD,CAAU1O,IAAKlM,GACX,yBAAK4L,UAAU,iBACX,0BAAMA,UAAU,oBACX5D,EAAE,mBAENkiC,EAAmB5lC,EAAUtE,EAAO,QAEzC,yBAAK4L,UAAU,iBACX,0BAAMA,UAAU,oBACX5D,EAAE,oBAENkiC,EAAmB5lC,EAAUtE,EAAO,YAqCPirC,CACI3mC,EACAtE,GAEJ,OAnJ1B,IAAC8B,EAAMnG,OA2JX,oCACI,wBAAIiQ,UAAU,gBACV,kBAACmV,GAAA,EAAD,cCvLnBugB,GAAW,CACpB,QAAU,EACV,MAAQ,EACR,QAAU,EACV,WAAa,EACb,MAAQ,EACR,YAAc,EACd,OAAS,EACT,MAAQ,EACR,SAAW,EACX,UAAY,EACZ,SAAW,IAEFH,GAAgB,CACzB+J,aAAa,cACb9J,WAAW,YACX+J,qBAAqB,qBACrBvI,UAAU,WACVS,aAAa,cACbyF,cAAc,eACdsC,YAAY,cACZC,YAAY,aACZC,gBAAgB,gBAChBtB,QAAQ,UACR36B,WAAW,YACXk8B,QAAQ,WC1BCC,I,OAAc,SAAAvgC,GACvB,IAAQjD,EAAMkD,aAAe,UAArBlD,EACFyjC,EAAWt6B,iBAAOlG,EAAMO,OAC9BigC,EAASl5B,QAAUtH,EAAMO,MACzB,IAAOwP,EAAgC/P,EAAhC+P,KAAKnb,EAA2BoL,EAA3BpL,gBAAgBY,EAAWwK,EAAXxK,UAEtBirC,EAAkB,CACpBlgC,MAAO,eACPkL,MAAO1O,EAAE,iBAGP2jC,EAAsB,kBACxBF,EAASl5B,QAAQlC,SAAWpF,EAAMwnB,QAAQpiB,QAwC9C,OAEI,kBAACyK,GAAA,EAAD,CAAQ/e,GAAG,gBAEH+mB,sBAAsB,EACtB/E,kBAAgB,uBAChB/C,KAAMA,GAEV,kBAAC+H,GAAA,EAAD,CAAahnB,GAAG,sBAAsB6P,UAAU,kBACpD,kBAAC,KAAD,CACIggC,iBAhDiB,SAAAjZ,GAAM,OAC3B8Y,EAASl5B,QAAQiC,MAAK,qBAAGhJ,QAAsBmnB,EAAOnnB,UACtDmgC,KA+CIlZ,QA7CW,CAAOiZ,GAAP,mBAA2BzgC,EAAMwnB,UA8C5CjnB,MA3CJmgC,IAAwB,CAACD,GAAmBzgC,EAAMO,MA4C9Cc,SA1CS,SAAC2jB,EAAU4b,GACxB,IAAQnwC,EAAiCmwC,EAAjCnwC,OAAQi3B,EAAyBkZ,EAAzBlZ,OAAQmZ,EAAiBD,EAAjBC,aAET,kBAAXpwC,GAA8Bi3B,EAAOnnB,QAAUkgC,EAAgBlgC,MAC/DP,EAAMqB,SAASrB,EAAMwnB,QAASoZ,GAGlB,oBAAXnwC,GACGi3B,EAAOnnB,QAAUkgC,EAAgBlgC,OACzB,iBAAX9P,GACGowC,EAAatgC,QAAUkgC,EAAgBlgC,MAE3CP,EAAMqB,SAAS,GAAIu/B,GAEG,oBAAtBA,EAAWnwC,QACXiwC,IAEA1gC,EAAMqB,SACFrB,EAAMwnB,QAAQ32B,QAAO,qBAAG0P,QAAsBmnB,EAAOnnB,SACrDqgC,GAGJ5gC,EAAMqB,SAAS2jB,GAAY,GAAI4b,IAqB/BE,qBAAqB,EACrBC,mBAAmB,EACnBC,SAAO,EACPlW,YAAa/tB,EAAE,qBAEX,kBAAC,KAAD,CACI03B,aAAc7/B,EACd4yB,QAAShyB,EACT6L,SA1BI,SAAC2jB,EAAU4b,GAC3B5gC,EAAMihC,sBAAsBjc,OA6BxB,yBAAKrkB,UAAU,qBACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRxM,MAAM,UACNyM,QAAS7N,EAAMkhC,UAEdnkC,EAAE,oBAEP,kBAAC4Q,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRxM,MAAM,UACNyM,QAAS7N,EAAMmhC,eACf1zB,UAAWzN,EAAMohC,kBAEhBrkC,EAAE,sBCmPRgR,iBAZS,SAAAzd,GAAK,MAAK,CAC9BD,SAAUC,EAAMD,SAASA,SACzBG,iBAAkBF,EAAMD,SAASG,iBACjCqF,eAAgBvF,EAAMsF,aAAaC,eACnCsZ,cAAe7e,EAAMkH,aAAaC,OAClC9C,gBAAgBrE,EAAM+I,SAAS1E,gBAC/BC,gBAAgBtE,EAAM+I,SAASzE,gBAC/BY,UAAWlF,EAAM+I,SAAS7D,UAC1BgD,YAAYlI,EAAMkI,YAAYA,YAC9BC,WAAYnI,EAAMkI,YAAYC,cAGM,GAAzBsV,EAzSK,SAAA/N,GAChB,IAAQjD,EAAMkD,aAAe,UAArBlD,EAER,EAAwBsS,oBAAS,GAAjC,oBAAOU,EAAP,KAAa8C,EAAb,KACA,EAAsCxD,qBAAtC,oBAAO0U,EAAP,KAAsBsd,EAAtB,KACA,EAAwBhyB,mBAAS,IAAjC,oBAAO8c,EAAP,KAAaM,EAAb,KACA,EAAgCpd,oBAAS,GAAzC,oBAAO5B,EAAP,KAAiB8nB,EAAjB,KACA,EAAoClmB,mBAAS,MAA7C,oBAAO8lB,EAAP,KAAmBC,EAAnB,KACA,EAAiC/lB,oBAAS,GAA1C,oBAAOiyB,EAAP,KAAkBC,EAAlB,KAGA30B,qBAAU,kBAAM2W,OAA0B,IAC1C3W,qBAAU,kBAAM8W,OAA8B,IAC9C9W,qBAAU,kBAAMuB,OAAqC,IACrDvB,qBAAU,kBAAM3I,OAA6B,IAC7C2I,qBAAU,kBAAM7I,OAA6B,IAC7C6I,qBAAU,kBAAM5H,OAAiC,IACjD4H,qBAAU,kBAAM8D,OAA2B,IAC3C9D,qBAAU,kBAAIoe,OAA2B,IACzC,IAAO36B,EAA8F2P,EAA9F3P,SAAUG,EAAoFwP,EAApFxP,iBAAkCgF,GAAkDwK,EAAlErL,gBAAkEqL,EAAlDxK,WAAUZ,EAAwCoL,EAAxCpL,gBAAgB4D,EAAwBwH,EAAxBxH,YAAYC,EAAYuH,EAAZvH,WAgBnF+oC,EAAgB/zB,EAAWjd,EAAiB4U,OAAS/U,EAAS+U,OACpE,EAAgCiK,mBAAS,IAAzC,oBAAOoyB,EAAP,KAAiBC,EAAjB,KACA,EAA4CryB,mBAAS,IAArD,oBAAMsyB,EAAN,KAAuBC,EAAvB,KACMpa,EAhBKn3B,EAASyQ,KAAI,SAAA7L,GAAO,MAAO,CAACnE,GAAGmE,EAAKnE,GAAGyP,MAAMtL,EAAKnE,GAAG2a,MAAM,GAAD,OAAIxW,EAAK7E,QAAT,YAAoBse,GAAezZ,EAAK4B,MAAxC,YAAiD6X,GAAezZ,EAAK6Z,iBAiBpI+yB,OAdiBpvC,IAAZ+C,EAAuBA,EAAUsL,KAAI,SAAA7L,GAAO,MAAO,CAACnE,GAAGmE,EAAKnE,GAAGyP,MAAMtL,EAAKnE,GAAG2a,MAAM,GAAD,OAAIxW,EAAKmT,iBAAiB,KAejH05B,EARKtpC,EAAYsI,KAAI,SAAA7L,GAAO,MAAO,CAACnE,GAAGmE,EAAKnE,GAAGyP,MAAMtL,EAAKnE,GAAG2a,MAAM,GAAD,OAAIxW,EAAK4B,UAiB3EkrC,EAAoB,SAAAhe,GACtBJ,GAAyBI,IAGvBie,EAAoB,SAAAlxC,IvDuEU,SAAAA,GACpC+B,EACK0R,OjEpKkB,WiEoKA,WAAOzT,IACzBkJ,MAAK,SAAArG,GACFgP,GAAMC,SAASR,GAActR,IAC7B4yB,KACAxgB,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,gCACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,MuDnF7BwuC,CAAyBnxC,IAGvBw4B,EAAkB,SAAAvF,GACpBsd,EAAatd,GACblR,GAAQ,IA4BZ,EAAgCxD,oBAAS,GAAzC,oBAAOD,EAAP,KAAiB2F,GAAjB,KACA,GAA8B1F,mBAAS,GAAvC,sBAAO9e,GAAP,MAAgB4R,GAAhB,MAEM8S,GAAsB,SAAA1kB,G5FxHD,IAAA2xC,E4FyHvB//B,GAAW5R,G5FzHY2xC,E4F0HP3xC,EAAQO,G5FzH5B+B,EACK2Q,I5BDqB,kB4BErBxJ,MAAK,SAAArG,GACF,IACMwuC,EADcxuC,EAASkG,KACMjC,MAAK,SAAA4Y,GACpC,OAAO0xB,KAAY1xB,EAAYjgB,QAAQO,MAG3CwS,GAAkB6+B,EAClBx/B,GAAMC,SAASN,GAAc6/B,EAAe1+B,uBAE/CC,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,M4F+G7BshB,IAAY,IAOV2iB,GACAzV,GADexU,EACRjd,EACAH,EADkB87B,EAAM,CAAC,OAAQ,UAAW,eAWnDiW,GAAoB,SAAApb,GACtB,OAAOA,EAAIpY,OAAO,GAAGvG,cAAgB2e,EAAItsB,MAAM,IAc7C2nC,GAAqB,WACvBd,GAAc,IAEZe,GAAe,WACjBZ,EAAY,KAKhB,OACI,oCACI,kBAAC,GAAD,CAAgB7qC,KAAMq/B,GAAgB+J,aAAc7J,IAAKC,GAAWkM,WACxE,yBAAK5hC,UAAU,mBAEX,kBAAC,GAAD,CACI+W,OAAQqM,EACR0H,WAAYpmB,GAASoJ,QACrBsB,KAAMA,EACN4H,OAAQwd,EACRrlB,QApFQ,SAAAiU,GAEhB,GADAlR,GAAQ,GACHkR,EAAL,CAGA,GAAIoR,EACA,GAAI1nB,GvD0FyB,SAAAld,GACrCA,EAAQoI,SAAU,EAClB8qB,GAAqB,CAAElzB,YuDxFXiyC,CAHgBhyC,EAAiBoH,MAC7B,SAAArH,GAAO,OAAIA,EAAQO,KAAOizB,WvDmFJ,SAAAxzB,GACtCA,EAAQoI,SAAU,EAClB8qB,GAAqB,CAAElzB,YuD9EXkyC,CAHgBpyC,EAASuH,MACrB,SAAArH,GAAO,OAAIA,EAAQO,KAAOizB,WAKlCie,EAAkBje,GAEtBqR,EAAc,UAmEV,kBAAC,GAAD,CACIhmB,SAAUA,EACVF,YAvDY,SAAA3O,GACpBwU,IAAY,IAuDJxkB,QAASA,GACT4e,cAAenP,EAAMmP,cACrBtZ,eAAgBmK,EAAMnK,iBAG1B,2BAAO8K,UAAU,0BAEb,kBAAC,GAAD,CACI2rB,aAxDK,SAAAH,GACjBM,EAAQN,IAwDII,aArDW,WACvBgJ,GAAa9nB,MAsDL,kBAACE,GAAA,EAAD,CACIhN,UAAU,cACViN,QAAQ,YACRxM,MAAM,UACNyM,QAAS,WACL0zB,GAAc,KAGjBxkC,EAAE,8BAEP,oCACI,kBAAC,GAAD,CAAagT,KAAMuxB,EACN9Z,QAASA,EACTjnB,MAAOkhC,EACPpgC,SAAUqgC,EACVR,SA/DP,WAClBoB,KACAD,MA8DyBlB,eA5DV,WACfkB,KACA,IAAMK,EAAWjB,EAAS3gC,KAAI,SAAA7L,GAAO,OAAOA,EAAKnE,O1F4Fd,SAAC+I,GAMxC,IAAM8oC,EAAS,IAAI3gB,gBAAgBnoB,GAAM24B,WACzCoQ,QAAQC,IAAI,8BAA8BF,GAMlCz/B,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,+BACjBuI,WAAYzK,GAAKkC,EAAE,iC0FzG/B+lC,CADW,CAACptC,WADwB,KAAnBisC,EAAsB/sC,EAAgB9D,GAAG6wC,EAAiB7wC,GACpD4xC,eAEvBJ,MAuDyBlB,iBA9CA,IAAlBK,EAASr8B,OA+CS5P,UAAWqsC,EACXjtC,gBAzJrB,CAAC9D,GAAG8D,EAAgB9D,GAAGyP,MAAM3L,EAAgB9D,GAAG2a,MAAM,GAAD,OAAI7W,EAAgBwT,cA0JpD64B,sBAAuBW,KAKvCn0B,EACG,GAEA,kBAAC,GAAD,CACIjV,YAAaspC,EACbzxC,SAAUA,EACVgd,SAzJE,SAAArE,GAElB,IAAMgtB,EAAS,2BAAIhtB,GAAL,IAAYvQ,WAAWA,IAErCmrB,GAAqBoS,IAsJLzK,kBAAmBwW,KAK/B,6BAASphC,UAAU,uBACU,IAAxB+2B,GAAatyB,QACV,kBAAC,GAAD,CAAUvO,KAAMkG,EAAE,kCAErBykC,EAAgB,EACb9J,GAAa52B,KAAI,SAACvQ,EAASwE,GAAV,OACb,kBAAC,GAAD,eACIkM,IAAKlM,GACDxE,EAFR,CAGIuV,MAAM,2BAEN,yBAAKnF,UAAU,cACT8M,EAqBE,kBAAC,KAAD,CACI9M,UAAU,mBACVE,MAAO9D,EAAE,sBACT8Q,QAAS,WACLunB,EAAc5d,IACd8R,EAAgB/4B,EAAQO,OAzBhC,oCACI,kBAAC,KAAD,CACI6P,UAAU,mBACVE,MAAO9D,EAAE,uBACT8Q,QAAS,WACLunB,EACI5d,IAEJ8R,EAAgB/4B,EAAQO,OAGhC,kBAAC,KAAD,CACI6P,UAAU,mBACVE,MAAO9D,EAAE,2BACT8Q,QAAS,kBACLk0B,EAAkBxxC,EAAQO,QAc1C,kBAAC,KAAD,CACI6P,UAAU,qBACVE,MAAO9D,EAAE,6BACT8Q,QAAS,kBAAMyb,EAAgB/4B,EAAQO,QAI/C,uBAAG6P,UAAU,oBACR5D,EAAE,0BAEP,wBAAI4D,UAAU,qBACTyhC,GAAkB7xC,EAAQH,SAAU,IACpCgyC,GAAkB7xC,EAAQsG,MAAO,IACjCurC,GAAkB7xC,EAAQue,aAE/B,uBAAGnO,UAAU,oBACR5D,EAAE,0BAEP,uBAAG4D,UAAU,sBACRpQ,EAAQye,UAEb,yBAAKrO,UAAU,sBACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,cACViN,QAAQ,YACRxM,MAAM,UACNyM,QAAS,WACLoH,GAAoB1kB,KAGvBwM,EAAE,2BAMnB,4BAAKA,EAAE,gCCvSrByhB,GAAYC,cAAW,iBAAO,CAChCskB,YAAa,CACT,IAAK,CACD9K,UAAW,SACXvZ,OAAQ,aAKhBskB,GAAa,SAAAhjC,GACb,IAAQjD,EAAMkD,aAAe,gBAArBlD,EAEAsP,EAA8CrM,EAA9CqM,aAAcC,EAAgCtM,EAAhCsM,SAAUjJ,EAAsBrD,EAAtBqD,MAAOkJ,EAAevM,EAAfuM,WAEjC0K,EAAUuH,KAEVhtB,EAASwO,EAAMxO,OACfk0B,EAAWl0B,EAAOV,GAElBkgB,EAAgBhR,EAAMgR,cAEtB3gB,EAAW2P,EAAM3P,SAEjB+F,EAAW4J,EAAM5J,SAEjB3E,EAAUuO,EAAMvO,QAEtB,EAA8B4iB,IAAMhF,UAAS,GAA7C,oBAAOyd,EAAP,KAAgBmW,EAAhB,KAGAr2B,qBAAU,WACNq2B,GAAW,GACPvd,EACA4F,EAAsB95B,GAEtBwO,EAAM8M,eAEX,CAAC4Y,IAEJ,IAAM4F,EAAwB,SAAA95B,GAC1BwO,EAAM8M,WAAW,CACbsX,aAAc5yB,EAAOV,GACrBP,QAASiB,EAAOjB,QAAQO,GACxBuF,QAAS7E,EAAO6E,QAAQvF,GACxBJ,KAAMc,EAAO6oB,WACbgK,MAAO7yB,EAAO6yB,MACdzM,cAAcpmB,EAAOomB,cACrBqC,eAAgBzoB,EAAOyoB,eACvBqK,QAAS9yB,EAAO8yB,UAEpB2e,EAAWzxC,EAAO8yB,UAGtB,OACI,kBAAC,GAAD,CAAMxe,MAAM,aACPrU,EACG,wBAAIkP,UAAU,yBACE5D,EAAX2oB,EAAa,aAAkB,gBAC/B3oB,EAAE,iBAGP,GAEHtL,EACG,0BAAM4b,SAAUhB,GACZ,kBAACiB,GAAA,EAAD,eACIxc,GAAG,UACH+F,KAAK,UACL8J,UAAU,aACV4M,UAAWhC,GACXE,MAAO1O,EAAE,kBACHiU,EAEA,CAAEvd,MAAOud,GADT,CAAExD,SAAU,CAAC/E,KAPvB,CASIpH,SAAU,kBACNqjB,IAAsB,MAG1B,iCACCr0B,EAASyQ,KAAI,SAAAvQ,GAAO,OACjB,4BAAQ0Q,IAAK1Q,EAAQO,GAAIyP,MAAOhQ,EAAQO,I9E7FnC,SAACP,GAC9B,IAAOsG,EAAkCtG,EAAlCsG,KAAKzG,EAA6BG,EAA7BH,QAAQ0e,EAAqBve,EAArBue,WAAWE,EAAUze,EAAVye,SAC/B,MAAM,GAAN,OAAU5e,EAAV,YAAqByG,EAArB,YAA6BiY,EAA7B,aAA4CE,EAA5C,K8E4F6Bk0B,CAAkB3yC,QAI/B,kBAAC+c,GAAA,EAAD,eACIxc,GAAG,UACH+F,KAAK,UACL8J,UAAU,aACV4M,UAAWhC,GACXE,MAAO1O,EAAE,kBACHiU,EAEA,CAAEvd,MAAOud,GADT,CAAExD,SAAU,CAAC/E,KAPvB,CASIpH,SAAU,SAAAhB,ICpHa,SAACjK,EAAUs3B,EAAWyV,GACjE,IAAM9sC,EAAUD,EAASwB,MAAK,SAAAvB,GAAO,OAAIA,EAAQvF,MAAQ48B,KACzD,IAAKr3B,EAAS,OAAO8sC,EAAS,iBAAkB,IAC3CA,EAAS,iBAAkB9sC,EAAQQ,MDkHhBusC,CACIhtC,EACAiK,EAAMC,OAAOC,MACbP,EAAMmN,QAEVuX,IAAsB,MAG1B,4BAAQnkB,MAAO,KACdnK,EAAS0K,KAAI,SAAAzK,GAAO,OACjB,4BAAQ4K,IAAK5K,EAAQvF,GAAIyP,MAAOlK,EAAQvF,IACnCuF,EAAQQ,UAIrB,yBAAK8J,UAAU,yBACX,kBAAC2M,GAAA,EAAD,eACIxc,GAAG,OACH+F,KAAK,OACL8J,UAAU,aACV4M,UAAWhC,GACXE,MAAO1O,EAAE,eACHiU,EAEA,CAAEvd,MAAOud,GADT,CAAExD,SAAU,CAAC/E,KAPvB,CASIpH,SAAU,WACNqjB,IAAsB,MAG1B,4BAAQnkB,MAAO,KACdP,EAAMzO,YAAYuP,KAAI,SAACuZ,EAAYtlB,GAAb,OACnB,4BAAQwL,MAAO8Z,EAAYpZ,IAAKlM,GAC3BgI,EAAE,4BAAD,OAC8Bsd,EAAW1H,cADzC,gBAMd,kBAACrF,GAAA,EAAD,CACIxc,GAAG,QACH+F,KAAK,QACL8J,UAAU,aACVjQ,KAAK,SACL6c,UAAWsd,GACXpf,MAAO1O,EAAE,eACTyQ,SAAU,CAAC/E,GAAUC,MAEzB,kBAAC4E,GAAA,EAAD,CACIxc,GAAG,UACH+F,KAAK,UACL8J,UAAU,aACV8K,MACI,kBAAC,KAAD,CACI5K,MAAO9D,EAAE,8BACT4D,UAAU,yCAGlBw4B,eAAe,MACf1E,aAAc3H,EACdvf,UAAW2rB,GACXpM,QAASA,EACTzrB,SAhIH,SAAAhB,GAAK,OAAI4iC,EAAW5iC,EAAMC,OAAOwsB,UAiI9B1rB,MAAM,aAGd,kBAACkM,GAAA,EAAD,CACIxc,GAAG,gBACH+F,KAAK,gBACL8J,UAAU,aACV0iC,QAAQ,IACR3kB,OAAO,SACPnR,UAAWsd,GACXpf,MAAO1O,EAAE,yBACTyQ,SAAU,CAAC/E,GAAUG,IACrBlY,KAAK,MACLo6B,YAAa,cAEjB,kBAACxd,GAAA,EAAD,CACIxc,GAAG,iBACH+F,KAAK,iBACL8J,UAAU,aACV2iC,WAAS,EACTD,QAAQ,IACR3kB,OAAO,SACPnR,UAAWsd,GACXpf,MAAO1O,EAAE,iBAAmBA,EAAE,kBAC9ByQ,SAAU,CAAC/E,GAAUG,MAGzB,yBAAKjI,UAAU,0BACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,gBACVjQ,KAAK,SACLkd,QAAQ,YACRxM,MAAM,UACNqM,SAAUnB,GAAYC,GAErBxP,EAAE,sBAEP,kBAAC4Q,GAAA,EAAD,CACIhN,UAAU,gBACVjQ,KAAK,SACLkd,QAAQ,YACRH,SAAU0d,GAAiB7e,EAASC,EAAW/a,EAAOV,IACtD+c,QAAS,WACLxK,IACAqhB,GAAsB,MACtB1kB,EAAMurB,kBAAkB,QAG3BH,GAAsB55B,EAAOV,GAAGiM,MAK7C,yBAAK4D,UAAWsW,EAAQ8rB,aACpB,4BAAKhmC,EAAE,eAAiB,IAAMA,EAAE,0BASpDimC,GAAal1B,aAAU,CACnBvU,KjF5PuB,ciF2PduU,CAEVk1B,IAEYj1B,qBANS,SAAAzd,GAAK,MAAK,CAAEkB,OAAQlB,EAAMkB,OAAOA,UAM1Cuc,CAAyBi1B,I,4DEpOzBO,GAtBU,SAAC,GAKnB,IAJH93B,EAIE,EAJFA,MAIE,IAHFD,MAASjL,EAGP,EAHOA,MAAU6hB,EAGjB,uBAFF1W,KAAQC,EAEN,EAFMA,QAAS0W,EAEf,EAFeA,QAAS5uB,EAExB,EAFwBA,MACvBmY,EACD,mBACF,OACI,kBAAC,KAAD,CAAyB0W,MAAOC,MAC5B,kBAACihB,GAAA,EAAD,eACI/gB,WAAS,EACTghB,MAAM,EACNljC,MAAOA,EAAQ0I,GAAO1I,EAAO,SAAS2I,SAAW,KACjDzV,MAAOkY,GAAW0W,EAClBM,WAAYhX,GAAWlY,EAAQkY,GAAWlY,EAAQgY,EAClDiX,OAAO,SACHN,EACAxW,MCQd4S,GAAYC,cAAW,SAAA3K,GAAK,MAAK,CACnC4vB,UAAW,CACPrc,MAAO,YA8FAtZ,iBAJS,SAAAzd,GAAK,MAAK,CAC9BwF,iBAAkBxF,EAAMsF,aAAaE,oBAG1BiY,CACXD,aAAU,CACNvU,KpFtHkB,aoFqHtBuU,EA3FgB,SAAA9N,GAChB,IAAQjD,EAAMkD,aAAe,gBAArBlD,EACAsP,EAAiErM,EAAjEqM,aAAcC,EAAmDtM,EAAnDsM,SAAUmG,EAAyCzS,EAAzCyS,QAASlG,EAAgCvM,EAAhCuM,WAAWzW,EAAqBkK,EAArBlK,iBACpC0oB,KAEhB5R,qBAAU,WACN,IAAIgS,EAAgB,GAChB5e,EAAMlK,mBACN8oB,EAAgB5e,EAAMlK,kBAE1BkK,EAAM8M,WAAW8R,KAClB,CAAC5e,EAAMlK,mBAQV,OACI,kBAAC,GAAD,CAAMgQ,MAAM,aACR,wBAAInF,UAAU,cACTX,EAAMlK,iBAAiBhF,GAClBiM,EAAE,cACFA,EAAE,gBAAiB,IACxBA,EAAE,kBAEP,0BAAMsQ,SAAUhB,GACZ,kBAACiB,GAAA,EAAD,CACIC,UAAWsd,GACXlqB,UAAU,aACV9J,KAAK,aACL/F,GAAG,aACH2a,MAAO1O,EAAE,eACTrM,KAAK,OACL8c,SAAU,CAAC/E,GAAUY,MAEzB,yBAAK1I,UAAU,mBACX,kBAAC2M,GAAA,EAAD,CACIC,UAAWg2B,GACX5iC,UAAU,aACV9J,KAAK,YACL4U,MAAO1O,EAAE,oBACTrM,KAAK,OACL8c,SAAU,CAAC/E,GAAUI,GAAcsB,IACnC9I,SAAU,SAAChB,EAAOE,GAhCnB,IAAA6J,EAiCS7J,IAjCT6J,EAkCoB7J,EAjCnCP,EAAMmN,OACF,UACAlE,GAAOmB,EAAW,SAASwY,ICnDT,iCDmD6B,KAAKF,OAAO,cAmCnD,kBAACpV,GAAA,EAAD,CACIC,UAAWg2B,GACX5iC,UAAU,aACV9J,KAAK,UACL4U,MAAO1O,EAAE,kBACTrM,KAAK,OACL8c,SAAU,CAAC/E,GAAUW,GAAiBe,OAI9C,yBAAKxJ,UAAU,0BACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,gBACVjQ,KAAK,SACLkd,QAAQ,YACRxM,MAAM,UACNqM,SAAUnB,GAAYC,GAErBxP,EAAE,sBAEP,kBAAC4Q,GAAA,EAAD,CACIhN,UAAU,gBACVjQ,KAAK,SACLkd,QAAQ,YACRH,SAAU0d,GAAiB7e,EAASC,EAAWzW,EAAiBhF,IAChE+c,QAAS4E,GAER2Y,GAAsBt1B,EAAiBhF,GAAGiM,WEFpDgR,iBALS,SAAAzd,GAAK,MAAK,CAC9BuF,eAAgBvF,EAAMsF,aAAaC,eACnC8tC,iBAAkBrzC,EAAMsF,aAAaE,oBAGD,GAAzBiY,EAtFM,SAAC/N,GAClB,IAAQjD,EAAMkD,aAAe,gBAArBlD,EACR,EAAwBsS,oBAAS,GAAjC,oBAAOU,EAAP,KAAa8C,EAAb,KACA,EAA8BwB,IAAMhF,UAAU,GAA9C,oBAAO/F,EAAP,KAAgBs6B,EAAhB,KACAh3B,qBAAU,kBAAMoB,OAA+B,IAE/C,IAUM4iB,EAAa,SAAAtnB,IrFyDmB,SAAAA,GACtC3G,GAAMC,SpBnF6C,CACrDlS,K7CwDoC,yB6CvDpCqF,gBoBiFqCuT,IqFzD/Bu6B,CAA2Bv6B,IAoB/B,OACI,oCACI,kBAAC,GAAD,CAAgBzS,KAAMq/B,GAAgBgK,qBAAsB9J,IAAKC,GAAWyN,QAChF,yBAAKnjC,UAAU,mBACX,kBAAC,GAAD,CACIixB,cAAe,GACfla,OAAQpO,EACRmiB,WAAYpmB,GAASsmB,MAAMhZ,cAC3B5C,KAAMA,EACND,QAjBQ,SAAAxG,GAChBuJ,GAAQ,GACHvJ,GrF8CgC,SAAAA,GACzCzW,EACK0R,OzCxGgB,UyCwGA,WAAO+E,IACvBtP,MAAK,SAAArG,GACFgP,GAAMC,SpBrFwC,CACxDlS,K7CoDuC,4B6CnDvCqF,gBoBmFgDuT,IACtCpG,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,4BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,MqFvD7BswC,CAA8Bz6B,MAc1B,kBAAC,GAAD,CAAW+D,SA1CJ,SAAArE,GACX,IAAKA,EAAOlY,IAAMkP,EAAMnK,eAAeuP,QAAU,EAC7C,OAAO1C,IACH,EACAM,GACAjG,EAAE,+BrFsBwB,SAAAiM,GAClCA,EAAOlY,GACPsd,GAA8BpF,GAE9BqF,GAA+BrF,GqFxB/Bg7B,CAA2Bh7B,IAmCMyJ,QA5Bb,WrFyExB9P,GAAMC,SpBvFkC,CAC1ClS,K7C4CsC,6BiE2CpCyS,GD9GsB,gBsFiEd,6BAASxC,UAAU,uBACdX,EAAMnK,eAAeiL,KAAI,SAAAzH,GAAQ,OAC9B,kBAAC,GAAD,CAAMyM,MAAM,mBAAmB7E,IAAK5H,EAASvI,IACzC,yBAAK6P,UAAU,cACX,kBAAC,KAAD,CACIA,UAAU,UACVE,MAAO9D,EAAE,2BACT8Q,QAAS,kBAAM+iB,EAAWv3B,EAASvI,OAEvC,kBAAC,KAAD,CACI6P,UAAU,UACVE,MAAO9D,EAAE,6BACT8Q,QAAS,kBArCb,SAAAvE,GACpBs6B,EAAWt6B,GACXuJ,GAAQ,GAmC+ByW,CAAgBjwB,EAASvI,QAGhD,2BACKiM,EAAE,eADP,KACyB1D,EAASoQ,YAElC,2BACK1M,EAAE,oBADP,MAC+BA,EAAE,mBAEjC,2BACK1D,EAAS+Q,UADd,MAC4B/Q,EAASgR,mBC1B9C0D,iBAJS,SAAAzd,GAAK,MAAK,CAC9BmI,WAAWnI,EAAMkI,YAAYC,cAGlBsV,CACXD,aAAU,CACNvU,KvF1DuB,iBuFyD3BuU,EA1DkB,SAAA9N,GAClB,IAAQjD,EAAMkD,aAAe,gBAArBlD,EACDsP,EAAkErM,EAAlEqM,aAAa43B,EAAqDjkC,EAArDikC,MAAMxrC,EAA+CuH,EAA/CvH,WAAW6T,EAAoCtM,EAApCsM,SAASC,EAA2BvM,EAA3BuM,WAAW23B,EAAgBlkC,EAAhBkkC,eAczD,OAbAt3B,qBAAU,WACFnU,GAAYyrC,IACRzrC,EAAW3H,GACXkP,EAAM8M,WAAW,CACbjW,KAAM4B,EAAW5B,KACjB/F,GAAI2H,EAAW3H,KAGnBkP,EAAM8M,gBAGf,CAACrU,IAGA,kBAAC,GAAD,CAAMqN,MAAM,0BACR,wBAAImB,MAAO,CAAEgxB,UAAW,WACnBl7B,EAAE,uBAEP,0BAAMsQ,SAAUhB,GACZ,kBAACiB,GAAA,EAAD,CACI3M,UAAU,aACV9J,KAAK,OACL0W,UAAWsd,GACXpf,MAAO1O,EAAE,wBAAwB,IACjCyQ,SAAU,CAAC/E,GAAUuB,GAAkBpB,MAE3C,yBAAKjI,UAAU,uCACX,kBAACgN,GAAA,EAAD,CACIC,QAAQ,YACRxM,MAAM,UACNT,UAAU,iBACV8M,SAAUnB,GAAYC,EACtB7b,KAAK,UACJqM,EAAE,sBAEP,kBAAC4Q,GAAA,EAAD,CACIjd,KAAK,SACLkd,QAAQ,YACRjN,UAAU,gBACV8M,SAAU0d,GAAiB7e,EAASC,EAAW9T,EAAW3H,IAC1D+c,QAASo2B,GAER7Y,GAAsB3yB,EAAW3H,GAAGiM,WCrCvDwxB,GAAa9P,cAAW,SAAC3K,GAAD,MAAY,CACtCC,KAAM,CACFya,WAAY,EACZC,WAAY3a,EAAM6K,QAAQ,UAIlC,SAASwlB,GAA0BnkC,GAC/B,IAAMiX,EAAUsX,KACVza,EAAQ6a,eACNC,EAA2C5uB,EAA3C4uB,MAAOC,EAAoC7uB,EAApC6uB,KAAMC,EAA8B9uB,EAA9B8uB,YAAaC,EAAiB/uB,EAAjB+uB,aAkBlC,OACI,yBAAKpuB,UAAWsW,EAAQlD,MACpB,kBAACib,GAAA,EAAD,CACInhB,QAnBuB,SAACxN,GAChC0uB,EAAa1uB,EAAO,IAmBZoN,SAAmB,IAATohB,EACVnuB,aAAW,cAEU,QAApBoT,EAAMmb,UAAsB,kBAAC,KAAD,MAAmB,kBAAC,KAAD,OAEpD,kBAACD,GAAA,EAAD,CAAYnhB,QArBU,SAACxN,GAC3B0uB,EAAa1uB,EAAOwuB,EAAO,IAoBqBphB,SAAmB,IAATohB,EAAYnuB,aAAW,iBACpD,QAApBoT,EAAMmb,UAAsB,kBAAC,KAAD,MAAyB,kBAAC,KAAD,OAE1D,kBAACD,GAAA,EAAD,CACInhB,QArBkB,SAACxN,GAC3B0uB,EAAa1uB,EAAOwuB,EAAO,IAqBnBphB,SAAUohB,GAAQtV,KAAKE,KAAKmV,EAAQE,GAAe,EACnDpuB,aAAW,aAEU,QAApBoT,EAAMmb,UAAsB,kBAAC,KAAD,MAAwB,kBAAC,KAAD,OAEzD,kBAACD,GAAA,EAAD,CACInhB,QAxBsB,SAACxN,GAC/B0uB,EAAa1uB,EAAOkZ,KAAK1b,IAAI,EAAG0b,KAAKE,KAAKmV,EAAQE,GAAe,KAwBzDrhB,SAAUohB,GAAQtV,KAAKE,KAAKmV,EAAQE,GAAe,EACnDpuB,aAAW,aAEU,QAApBoT,EAAMmb,UAAsB,kBAAC,KAAD,MAAoB,kBAAC,KAAD,QAcjE,IAAMC,GAAazQ,aAAW,CAC1B0Q,MAAO,CACHC,SAAU,OAGZC,GAAkBlc,cAAW,SAACW,GAAD,MAAY,CAC3Cwb,KAAM,CACFpoB,gBAAiB4M,EAAME,QAAQ1gB,OAAO6gB,MACtC/S,MAAO0S,EAAME,QAAQ1gB,OAAOi8B,OAEhCC,KAAM,CACF/Z,SAAU,OANMtC,CAQpB4H,MAGE0U,GAAiBtc,cAAW,SAACW,GAAD,MAAY,CAC1CC,KAAM,CACF,qBAAsB,CAClB7M,gBAAiB4M,EAAME,QAAQvjB,OAAOi/B,WAH3Bvc,CAMnB2H,MAEW,SAASspB,GAAmBpkC,GACvC,IAAMiX,EAAUiY,KAChB,EAAwB7a,IAAMhF,SAAS,GAAvC,oBAAOwf,EAAP,KAAawB,EAAb,KACA,EAAsChc,IAAMhF,SAAS,GAArD,oBAAOyf,EAAP,KAAoBwB,EAApB,KACOjgC,EAAU2P,EAAV3P,SACC0M,EAAMkD,aAAe,gBAArBlD,EAEF8zB,EAAY/B,EAAcvV,KAAK3b,IAAIkxB,EAAaz+B,EAAS+U,OAASypB,EAAOC,GAiB/E,OACI,kBAAC3T,GAAA,EAAD,CAAgB5N,UAAWgkB,MACvB,kBAACnW,GAAA,EAAD,CAAOza,UAAWsW,EAAQkY,MAAOzuB,aAAW,2BAExC,kBAACma,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAAC,GAAD,KAAkB/d,EAAE,kBACpB,kBAAC,GAAD,KAAkBA,EAAE,qBACpB,kBAAC,GAAD,KAAkBA,EAAE,wBAI5B,kBAACse,GAAA,EAAD,MACMyT,EAAc,EACNz+B,EAASqK,MAAMm0B,EAAOC,EAAaD,EAAOC,EAAcA,GACxDz+B,GACRyQ,KAAI,SAACvQ,GAAD,OACF,kBAAC,GAAD,CAAgB0Q,IAAK1Q,EAAQye,UACzB,kBAAC,GAAD,CAAiByiB,MAAM,SAASxqB,MAAO,CAAEogB,MAAO,MAC3CxY,GAAmBte,IAExB,kBAAC,GAAD,CAAiBgd,UAAU,KAAKikB,MAAM,MAAMC,MAAM,UAC7ClhC,EAAQye,UAEb,kBAAC,GAAD,CAAiB/H,MAAO,CAAEogB,MAAO,KAAOoK,MAAM,UAC1C,8BACI,2BAAIlhC,EAAQuJ,OACZ,kBAAC,KAAD,CACI6G,UAAU,uBACVE,MAAK,UAAK9D,EAAE,qBAAP,YAA+BxM,EAAQuJ,OAC5C+T,QAAS,kBArC5B,SAAC/T,GACd,IAAM43B,EAAM,iBAEE53B,GACdmY,OAAOqN,SAASvH,KAAO2Z,EAiCsBC,CAASphC,EAAQuJ,gBAQjD+2B,EAAY,GACT,kBAAC,GAAD,CAAgB5pB,MAAO,CAAEyiB,OAAQ,GAAKmH,IAClC,kBAAC9V,GAAA,EAAD,CAAWmB,QAAS,MAIhC,kBAAC2V,GAAA,EAAD,KACI,kBAAC,GAAD,KACI,kBAACC,GAAA,EAAD,CACIC,iBAAgB,UAAKh1B,EAAE,kBACvBi1B,mBAAoB,CAAC,EAAG,GAAI,GAAI,CAAEvmB,MAAM,GAAD,OAAK1O,EAAE,aAAewD,OAAQ,IACrE2b,QAAS,EACT0S,MAAOv+B,EAAS+U,OAChB0pB,YAAaA,EACbD,KAAMA,EACNoD,YAAa,CACT7P,WAAY,CAAE,aAAc,iBAC5BnW,QAAQ,GAEZ8iB,aAxEC,SAAC1uB,EAAO6xB,GAC7B7B,EAAQ6B,IAwEYC,oBArEQ,SAAC9xB,GAC7BiwB,EAAe8B,SAAS/xB,EAAMC,OAAOC,MAAO,KAC5C8vB,EAAQ,IAoEYgC,iBAAkB8R,SClLvC,IAsDQp2B,iBAJS,SAAAzd,GAAK,MAAK,CAC9BmI,WAAYnI,EAAMkI,YAAYC,cAGM,GAAzBsV,EAtDe,SAAA/N,GAC1B,IAAQ8P,EAA+C9P,EAA/C8P,QAAU4H,EAAqC1X,EAArC0X,OAAQ3H,EAA6B/P,EAA7B+P,KAAK1f,EAAwB2P,EAAxB3P,SAASoI,EAAeuH,EAAfvH,WAChCsE,EAAMkD,aAAe,gBAArBlD,EAIR,OACI,kBAAC8S,GAAA,EAAD,CACIgI,sBAAsB,EACtB/H,QANY,WAChBA,EAAQ4H,IAMJ5E,kBAAgB,uBAChB/C,KAAMA,GAEN,kBAAC+H,GAAA,EAAD,CAAahnB,GAAG,wBACZ,oCAEI,oCACuB,IAAlBT,EAAS+U,OACN,oCACI,wBAAIzE,UAAU,eAAd,UAAgC5D,EAAE,6BAAlC,OAAoE,wCAAUtE,EAAW5B,QACxFkG,EAAE,oCAIP,oCACI,wBAAI4D,UAAU,eAAc,8BAAyB,IAAlBtQ,EAAS+U,OAAT,UAAuBrI,EAAE,kBAAzB,eAAiDA,EAAE,mBAAtF,UAAoHA,EAAE,uBAAtH,KAAgJ,wCAAUtE,EAAW5B,QACrK,kBAACutC,GAAD,CAAoB/zC,SAAUA,QAMlD,yBAAKsQ,UAAU,qBACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRC,QAAS,kBAAMiC,EAAQ,KACvB1O,MAAM,WAELvG,GAAKkC,EAAE,4BC8K5B,IAWegR,iBAXS,SAAAzd,GAAK,MAAK,CAC9BkI,YAAalI,EAAMkI,YAAYA,YAC/BE,oBAAqBpI,EAAMkI,YAAYE,oBACvCD,WAAYnI,EAAMkI,YAAYC,WAC9BrG,eAAgB9B,EAAM8I,SAAShH,eAC/BC,aAAc/B,EAAM8I,SAAS/G,aAC7B4iC,gBAAiB3kC,EAAM8I,SAAS9G,QAChCjC,SAASC,EAAMD,SAASA,YAIY,GAAzB0d,EAhNf,SAAwB/N,GACpB,IAAQjD,EAAMkD,aAAe,gBAArBlD,EACAvE,EAAoCwH,EAApCxH,YAAYE,EAAwBsH,EAAxBtH,oBACpB,EAAiC2W,oBAAS,GAA1C,oBAAOg1B,EAAP,KAAkBC,EAAlB,KACA,EAAwBj1B,mBAAS,IAAjC,oBAAO8c,EAAP,KAAaM,EAAb,KACA,EAAqCpd,oBAAS,GAA9C,oBAAOk1B,EAAP,KAAoBC,EAApB,KACA,EAAqCn1B,mBAAS,IAA9C,oBAAO7J,EAAP,KAAoBi/B,EAApB,KACA,EAAoCp1B,mBAAS,MAA7C,oBAAO8lB,EAAP,KAAmBC,EAAnB,KACA,EAAiC/lB,mBAAS,IAA1C,oBAAO5W,EAAP,KAAkBisC,EAAlB,KACA,EAAuCr1B,oBAAS,GAAhD,oBAAOs1B,EAAP,KAAqBC,EAArB,KACA,EAAyCv1B,oBAAS,GAAlD,oBAAO60B,EAAP,KAAsBW,EAAtB,KACQzyC,EAA2D4N,EAA3D5N,eAAgBC,EAA2C2N,EAA3C3N,aAAc4iC,EAA6Bj1B,EAA7Bi1B,gBAAgB5kC,EAAa2P,EAAb3P,SACtDuc,qBAAU,kBAAIk4B,MAAsB,IACpC,IAAMC,EACA9iB,GADqBoiB,EACd3rC,EACAF,EADqB2zB,EAAM,CAAC,SAEnCG,EAAeG,EASfqY,EAAsB,WnDgC5BniC,GAAMC,SDxDA,CACFlS,KtGkF2B,0BuG1B/ByS,GvC5E2B,kB0F8CrB6hC,EAAiB,SAACl0C,GACpB2zC,EAAgB3zC,GAChB0zC,GAAgB,IAadS,EAAsB,SAACn0C,GACzBo6B,GAAyBp6B,IAmC7B,OATA8b,qBAAU,kBAAMoe,OAA4B,CAACqZ,IAC7Cz3B,qBAAU,WACFy3B,GnD/DRxxC,EACK2Q,IADL,U/EgCwB,e+EhCxB,cAEKxJ,MAAK,SAAArG,GACFgP,GAAMC,SD7BR,CACFlS,KtGsG8B,2BsGrG9BC,OC2B0CgD,EAASkG,UAElD6J,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,QmD4D/B,IAME,oCACI,kBAAC,GAAD,CAAgBoD,KAAMq/B,GAAgBiK,YAAa/J,IAAKC,GAAW8J,cACnE,kBAAC,GAAD,CACIxoB,OAAQwd,EACRzd,OAAQlS,EACRimB,WAAY,aACZ1b,KAAMw0B,EACNz0B,QAtCM,SAAChf,GACf,GAAQ,KAALA,EACC,QAAmB2B,IAAhBgG,EAAW3H,IACV,GAAIqkC,IAAe3d,GAAmB,CAClC,IAAQ1mB,EAAa2H,EAAb3H,GAAI+F,EAAS4B,EAAT5B,KnD7BYgD,EmD8BE,CAAE/I,KAAI+F,OAAM8B,SAAS,GnD7B/DiqC,QAAQC,IAAIhpC,GACZhH,EACKsH,IADL,U/EewB,gB+EdKN,GACxBG,MAAK,SAAArG,GACFgP,GAAMC,SAASmoB,GAAqBp3B,EAASkG,UAEhD6J,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,WmDyBd,GAAI0hC,IAAe3d,GAAmB,CAEzC,IAAQ1mB,EAAa2H,EAAb3H,GAAI+F,EAAS4B,EAAT5B,KAEZo0B,GAD0B,CAAEn6B,KAAI+F,OAAM8B,SAAS,UnDX3B,SAAC7H,GACrC+B,EACK0R,OADL,U/ERwB,e+EQxB,YACiCzT,IAC5BkJ,MAAK,SAAArG,GACFgP,GAAMC,SD9CR,CACFlS,KtG8EuB,oBsG7EvBC,OC4CoCgD,EAASkG,UAE5C6J,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,MmDWrByxC,CAAyB1/B,GnDzCE,IAAC3L,EmD4CnC2qC,GAAgB,MAqBb,kBAAC,GAAD,CACI7sB,OAAQwd,EACRzd,OAAQlS,EACRuK,KAAM40B,EACN70B,QA/Ce,WACzB80B,GAAiB,IA+CPv0C,SAAUA,IAEd,yBAAKsQ,UAAU,mBACf,2BAAOA,UAAU,sBACb,kBAAC,GAAD,CACI2rB,aAAcA,EACdC,aAnFI,WAChB+X,GAAc,SAAAa,GAAI,OAAGA,QAqFTd,EAAW,GACX,kBAAC,GAAD,CACAh3B,SArFD,SAACxT,QACFpH,IAAVoH,EAAK/I,GnDrC0B,SAAA+I,GACnChH,EACKkH,K/EuDmB,e+EvDEF,GACrBG,MAAK,SAAArG,GACFgP,GAAMC,SDjBP,CACHlS,KtG8GoB,iBsG7GpBC,OCeiCgD,EAASkG,OACtCsJ,GvCPmB,iBuCQnBD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,iCACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,MmDyBzB2xC,CAAwBvrC,GnDWG,SAACA,GACpChH,EACKsH,IADL,U/EOwB,gB+ENKN,GACxBG,MAAK,SAAArG,GACFgP,GAAMC,SDnBP,CACHlS,KtGuEuB,oBsGtEvBC,OCiBgCgD,EAASkG,OACrCsJ,GvCxDmB,iBuCyDnBD,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,iCACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,MmDvBzB4xC,CAAwBxrC,IAkFEoqC,MAAOa,EAAqBZ,eAAgBA,KAItE,6BAASvjC,UAAU,+BACgB,IAA9BokC,EAAmB3/B,QAChB,kBAAC,GAAD,CAAUvO,KAAMkG,EAAE,wBAErBgoC,EAAmBjkC,KAAI,SAAArI,GAAU,OAC9B,kBAAC,GAAD,CAAMwI,IAAKxI,EAAW3H,GAAIgV,MAAM,0BAC5B,wBAAInF,UAAU,sBACTlI,EAAW5B,MAEhB,yBAAK8J,UAAU,cACV0jC,EACG,kBAAC,KAAD,CACI1jC,UAAU,mBACVE,MAAO9D,EAAE,sBACT8Q,QAAS,WACLunB,EAAc5d,IACdwtB,EAAiBvsC,EAAW3H,IAC5B4zC,EAAcjsC,MAKlB,oCACI,kBAAC,KAAD,CACIkI,UAAU,mBACVE,MAAO9D,EAAE,uBACT8Q,QAAS,WAELunB,EACI5d,IAEJwtB,EAAiBvsC,EAAW3H,IAC5B4zC,EAAcjsC,MAItB,kBAAC,KAAD,CACIkI,UAAU,mBACVE,MAAO9D,EAAE,cACT8Q,QAAS,WACLg3B,GAAkB,GAClBI,EAAsBxsC,EAAW3H,QAWrD,kBAAC,KAAD,CACI6P,UAAU,qBACVE,MAAO9D,EAAE,gBACT8Q,QAAS,WACL62B,EAAc,IACdM,EAAiBvsC,EAAW3H,OAGpC,kBAAC,KAAD,CACI6P,UAAU,qBACVE,MAAO9D,EAAE,sBACT8Q,QAAS,WACLtI,GAAyC9M,EAAW3H,IACpDo6B,GAAyBzyB,EAAW3H,IACpCm0C,EAAsBxsC,EAAW3H,IACjC8zC,GAAiB,aAWzC,kBAAC,GAAD,CACItyC,QAAS2iC,EACTvkC,KAAM2B,EACNE,OAAQH,EACRi7B,oBApHgB,SAAChtB,EAAOw2B,GACjB,cAAXA,GACJh0B,YCjEKyiC,GAAQ,CAChB,CAACzuC,KAAMq/B,GAAgBoK,SACxB,CAAEzpC,KAAMq/B,GAAgBgK,qBAAsB3yB,UAAW,kBAAC,GAAD,OACzD,CAAE1W,KAAMq/B,GAAgBiK,YAAa5yB,UAAW,kBAAC,GAAD,OAChD,CAAE1W,KAAMq/B,GAAgBC,WAAY5oB,UAAW,kBAAC,GAAD,OAC/C,CAAE1W,KAAMq/B,GAAgByB,UAAWpqB,UAAW,kBAAC,GAAD,OAC9C,CAAE1W,KAAMq/B,GAAgBkC,aAAc7qB,UAAW,kBAAC,GAAD,OACjD,CAAE1W,KAAMq/B,GAAgB2H,cAAetwB,UAAW,kBAAC,GAAD,OAClD,CAAE1W,KAAMq/B,GAAgB+J,aAAc1yB,UAAW,kBAAC,GAAD,QAGxCg4B,GAAkB,CAC3B,CAAE1uC,KAAMq/B,GAAgBkK,YAAa7yB,UAAW,kBAAC,GAAD,OAChD,CAAE1W,KAAMq/B,GAAgBmK,gBAAiB9yB,UAAW,kBAAC,GAAD,OACpD,CAAE1W,KAAMq/B,GAAgB6I,QAASxxB,UAAW,kBAAC,GAAD,OAC5C,CAAE1W,KAAMq/B,GAAgB9xB,WAAYmJ,UAAW,kBAAC,GAAD,OAC/C+3B,ICpBJ,SAASE,GAAUzwC,GACf,MAAO,CACHjE,GAAG,cAAD,OAAgBiE,GAClB,gBAAgB,mBAAhB,OAAoCA,IAI5C,IAAMypB,GAAYC,cAAW,SAAA3K,GAAK,MAAK,CACnCC,KAAM,CACF0xB,SAAU,EACVv+B,gBAAiB4M,EAAME,QAAQ5M,WAAWgM,OAE9CsyB,OAAQ,CACJx+B,gBAAiB4M,EAAME,QAAQ2xB,KAAKC,MAExCC,IAAI,CACAjwB,eAAe,OACXxU,MAAO,OACP,SAAU,CACNA,MAAO,WAGnB0kC,OAAO,CACJ5+B,gBAAgB,WAGnB6+B,IAAI,CACArnB,OAAO,EACP2I,MAAO,YAwFAtZ,iBALS,SAAAzd,GAAK,MAAK,CAC9BuF,eAAgBvF,EAAMsF,aAAaC,eACnC8tC,iBAAkBrzC,EAAMsF,aAAaE,oBAGD,GAAzBiY,EApFQ,SAAC/N,GACpB,IAAOo2B,EAAKp2B,EAALo2B,IACCr5B,EAAMkD,aAAe,UAArBlD,EACFka,EAAUuH,KAChB,EAA0BnP,mBAAS+mB,GAAQ,GAA3C,oBAAO71B,EAAP,KAAc4iC,EAAd,KACA,EAAmB9zB,mBAASrP,EAAMnJ,MAAMyuC,GAAQ,GAAGzuC,MAAnD,oBAAOmvC,EAAP,KAAWC,EAAX,KACAr5B,qBAAU,WACN9K,OACD,IAEH,IAIIokC,EAAiB,SAAArlC,GACjB8F,SAAS9F,MAAQ9D,EAAE,GAAD,OAAI8D,EAAJ,uBAEtB,OACI,yBAAKF,UAAWsW,EAAQlD,MACpB,kBAACoyB,GAAA,EAAD,CAAQn3B,SAAS,UACb,kBAACo3B,GAAA,EAAD,CACI7lC,MAAOA,EACPc,SAZK,SAAChB,EAAO2kB,GACzBme,EAASne,IAYGtkB,aAAW,sBACX2lC,eAAe,UACfz4B,QAAQ,aACR04B,cAAc,KACd3lC,UAAWsW,EAAQyuB,QAElBH,GAAgBzkC,KAAI,SAACylC,EAASxxC,GAAV,OAED,yCACsBtC,IAAjB8zC,EAAQnhC,OACL,kBAAC,KAAD,CAAMzE,UAAWsW,EAAQ4uB,IAEnBxwB,GAAIvX,GAAMyoC,EAAQ1vC,OACpB,kBAAC2vC,GAAA,EAAD,eAAK7lC,UAAWsW,EAAQ8uB,IACpB9kC,IAAKlM,EAAQwxC,EACb14B,QAAS,kBAAMq4B,EAAeK,EAAQ1vC,OACtC4U,MAAO1O,EAAE,GAAD,OAAIwpC,EAAQ1vC,KAAZ,uBACJ2uC,GAAUzwC,MAGtB,kBAACiX,GAAA,EAAD,CAAQrL,UAAU,sBACdue,QAAQ,oCACRpuB,GAAG,8BACHyP,MAAOylC,EACP3kC,SAAU,SAAAhB,GACN,IAAM+1B,EAAI/1B,EAAMC,OAAOC,MACvB0lC,EAAO7P,GACP8P,EAAe9P,KAKnBhlB,OAAOqK,QAAQ8qB,GAASzlC,KAAI,SAASjH,EAAM9E,GACvC,OAAS,kBAACqf,GAAA,EAAD,eAAUzT,UAAW,8BAAgCJ,MAAO1G,EAAK,GAAGhD,KAAMoK,IAAKpH,EAAK,IAAQ2rC,GAAUzwC,IAC3G,kBAAC,KAAD,CAAM4L,UAAWsW,EAAQ4uB,IAEnBxwB,GAAIvX,GAAMjE,EAAK,GAAGhD,OACnBkG,EAAE,GAAD,OAAKlD,EAAK,GAAGhD,KAAb,+B,cCxH5D2nB,GAAYC,cAAW,iBAAO,CAChCgoB,WAAY,CACR,IAAK,CACD/nB,OAAQ,SACR2I,MAAO,YAyFJqf,GApFiB,SAAA1mC,GAC5B,IAAQ8P,EAAwD9P,EAAxD8P,QAASte,EAA+CwO,EAA/CxO,OAAQ40B,EAAuCpmB,EAAvComB,YAAa5vB,EAA0BwJ,EAA1BxJ,OAAQ/E,EAAkBuO,EAAlBvO,QAASse,EAAS/P,EAAT+P,KACvD,EAA0BV,mBAAS,IAAnC,oBAAO5Y,EAAP,KAAckwC,EAAd,KACA,EAA0Bt3B,mBAAS,IAAnC,oBAAO5b,EAAP,KAAcmzC,EAAd,KAEM3vB,EAAUuH,KAiBV+I,EAAe,CACjBC,QAAShxB,EACTixB,eAAgB,SAAAC,GAAM,OAAKA,EAASA,EAAO7mB,MAAQ,KAGvD,OACI,kBAACgP,GAAA,EAAD,CACIgI,sBAAsB,EACtB/H,QAvBY,WAChBA,KAuBIgD,kBAAgB,uBAChB/C,KAAMA,GAEN,kBAAC+H,GAAA,EAAD,CAAahnB,GAAG,uBACXs1B,EAAY,iBAEjB,kBAACwB,GAAA,EAAD,iBACQL,EADR,CAEIz2B,GAAG,QACH+1C,UAAQ,EACRhf,eAAa,EACbC,aAAW,EACXnnB,UAAWsW,EAAQwvB,WACnBplC,SAAU,SAAChB,EAAO2kB,GACd2hB,EAAS3hB,GACT4hB,EAAS,OAEb5e,YAAa,SAAAjG,GAAM,OACf,kBAACqF,GAAA,EAAD,iBACQrF,EADR,CAEItW,MAAO2a,EAAY,uBACnB3yB,QAASA,EACTkvB,WAAYlvB,GAAgB,KAC5BirB,OAAO,gBAInB,yBAAK/d,UAAU,qBACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRxM,MAAM,UACNyM,QAAS,WAnDhBpX,IAGDA,EAAM3F,KAAOW,EAIjBqe,EAAQ,CAAEte,SAAQiF,UAHdmwC,EAASxgB,EAAY,gCAiDZA,EAAY,qCAEjB,kBAACzY,GAAA,EAAD,CACIhN,UAAU,gBACViN,QAAQ,YACRC,QAAS,kBAAMiC,MAEdsW,EAAY,wCC8BlB0gB,GAjHK,SAAA9mC,GAChB,IAAM1O,EAAU0O,EAAM1O,QAEhByL,EAAIiD,EAAMomB,YAcV2gB,EAAe,SAACC,GAClB,OAAa,IAATA,EACO,uCAERA,GAAQ,GAAGA,GAAQ,EACX,uCAENA,GAAQ,GAAGA,GAAQ,IAAc,IAATA,EAClB,sCADX,GA4BCC,EAAQ,SAACD,GACV,IAAMxsC,EAAUK,KAAKL,SAAU6N,cAG/B,MAFS,OAEN7N,EAVS,SAACwsC,GACb,OAAa,IAATA,EACO,OAEJ,QAOIE,CAAUF,GAFZ,OAIDxsC,EA9BI,SAACwsC,GACb,GAAGA,GAAQ,IAAIA,GAAQ,IAAI,CACvB,IACIG,EADSH,EAAOxU,WACE93B,OAAO,GAE7B,OAAOqsC,GADWI,GAGjB,GAAGH,EAAO,IAAI,CACf,IACIG,EADSH,EAAOxU,WACE93B,OAAO,GAE7B,OAAOqsC,GADWI,GAIlB,OAAQJ,EAAeC,GAiBhBI,CAAUJ,QADhB,GAKT,OACI,6BACI,6BAASrmC,UAAU,uBACdrP,EAAQwP,KAAI,SAAAtP,GAAM,OACf,kBAAC,GAAD,CAAMsU,MAAM,YAAY7E,IAAKzP,EAAOV,IAChC,yBAAK6P,UAAU,cACCnP,EAAO8yB,QA5DnC,kBAAC,KAAD,CACIzjB,MAAO9D,EAAE,8BACT4D,UAAU,yCAGd,GAwDgB,kBAAC,KAAD,CACIE,MAAO9D,EAAE,eACT4D,UAAU,mBACVkN,QAAS,kBAAM7N,EAAMqnC,aAAa71C,MAEtC,kBAAC,KAAD,CACIqP,MAAO9D,EAAE,eACT4D,UAAU,mBACVkN,QAAS,kBAAM7N,EAAMsnC,eAAe91C,EAAOV,OAE/C,kBAAC,KAAD,CACI+P,MAAO9D,EAAE,iBACT4D,UAAU,qBACVkN,QAAS,kBAAM7N,EAAMunC,YAAY/1C,EAAOV,QAGhD,2BAEQU,EAAOyoB,eAnFpB8I,QAAQ,OAAO,SAAAkE,GAAC,OAAIA,EAAE5e,iBAoFV,IAHP,IAKKtL,EAAE,4BAAD,OAC8BvL,EAAO6oB,WAAW1H,cADhD,WALN,KAUD,2B3FxGK,SAAEpiB,GAC1B,IAAOsG,EAAyBtG,EAAzBsG,KAAKzG,EAAoBG,EAApBH,QAAQ0e,EAAYve,EAAZue,WACpB,MAAM,GAAN,OAAU1e,EAAV,YAAqBse,GAAe7X,GAApC,YAA6C6X,GAAeI,I2FsGrC04B,CAAeh2C,EAAOjB,UACzB,2BACK,IACD,2BAAIiB,EAAO6yB,OAAW,IACrB4iB,EAAQz1C,EAAO6yB,QAEpB,2BACI,2BAAO9jB,MAAO/O,EAAOomB,cAAenK,SAAS,qBCpGnE+K,I,OAAUnc,EAAQ,MA6DT0R,iBAJS,SAAAzd,GAAK,MAAK,CAC9BkF,UAAWlF,EAAMkF,UAAUA,UAC3Bb,gBAAiBrE,EAAM+I,SAAS1E,mBAErBoZ,CACXD,aAAU,CACNvU,K/FxDuC,+B+FuD3CuU,EA5DgC,SAAA9N,GAChC,IAAQjD,EAAMkD,aAAe,UAArBlD,EACAvH,EAAkDwK,EAAlDxK,UAAW6W,EAAuCrM,EAAvCqM,aAAcC,EAAyBtM,EAAzBsM,SAAUC,EAAevM,EAAfuM,WA+B3C,OACI,kBAAC,GAAD,CAAMzG,MAAM,aACR,0BAAMuH,SAAUhB,GACZ,wBAAI1L,UAAU,iBAAiB5D,EAAE,gBACjC,2BAAIA,EAAE,0CAlCS,WACvB,GAAIvH,EAAW,CACX,GAAIA,EAAU4P,OAAS,EACnB,OACI,kBAACkI,GAAA,EAAD,CACIxc,GAAG,iBACH+F,KAAK,iBACL0W,UAAWhC,GACXE,MAAO1O,EAAE,+BACTrM,KAAK,OACL8c,SAAU,CAAC/E,KAEX,iCACCjT,EAAUsL,KAAI,SAAC/I,EAAUhD,GAAX,OACX,4BACIkM,IAAKuX,GAAQwC,WACbza,MAAOxI,EAASjH,IAEfiH,EAASqQ,iBAKvB,GAAyB,IAArB5S,EAAU4P,OAEjB,OADAiH,EAAa,CAAE2xB,eAAgBxoC,EAAU,GAAG1E,KACrC,2BAAI0E,EAAU,GAAG4S,cAUvB6W,GACD,yBAAKte,UAAU,0BACX,kBAACgN,GAAA,EAAD,CACIhN,UAAU,oBACViN,QAAQ,YACRxM,MAAM,UACN1Q,KAAK,SACL+c,SAAUnB,GAAYC,GAErBxP,EAAE,mCCxBrBmqB,I,OAAaC,aAAOC,KAAPD,CAAkB,CACjC9f,QAAS,eACTggB,MAAO,WAgNItZ,iBAbS,SAAAzd,GAAK,MAAK,CAC9BgB,QAAShB,EAAMkB,OAAOF,QACtBC,YAAajB,EAAMkB,OAAOD,YAC1BE,QAASnB,EAAMkB,OAAOC,QACtBuf,cAAe1gB,EAAMkB,OAAOE,YAC5BrB,SAAUC,EAAMD,SAASA,SACzBmG,OAAQlG,EAAMkG,OAAOA,OACrBJ,SAAU9F,EAAM8F,SAASA,SACzBnC,QAAS3D,EAAMgJ,iBAAiBrF,QAChCuB,UAAWlF,EAAMkF,UAAUA,UAC3Bb,gBAAiBrE,EAAM+I,SAAS1E,mBAGrBoZ,EA7MI,SAAA/N,GACf,IAAQjD,EAAMkD,aAAe,UAArBlD,EAER,EAAwBsS,oBAAS,GAAjC,oBAAOU,EAAP,KAAa8C,EAAb,KACA,EAAwDxD,oBAAS,GAAjE,oBAAOo4B,EAAP,KAA6BC,EAA7B,KACA,EAAgCrzB,IAAMhF,UAAU,GAAhD,oBAAOqW,EAAP,KAAiBiiB,EAAjB,KACA,EAAwCtzB,IAAMhF,UAAU,GAAxD,oBAAOu4B,EAAP,KAAqBC,EAArB,KAEMx3C,EAAW2P,EAAM3P,SAEjB2gB,EAAgBhR,EAAMgR,cAEtB1f,EAAU0O,EAAM1O,QAChBw2C,EAAex2C,EAAQ8T,OAEvBxB,EAAY5D,EAAM/L,QAEhBuC,EAAoBwJ,EAApBxJ,OAAQ/E,EAAYuO,EAAZvO,QAEV2E,EAAW4J,EAAM5J,SAEvBwW,qBAAU,WACFnb,IACAkS,IAAkB,GAClBqgB,GAAyBvyB,MAE9B,CAACA,IACJmb,qBAAU,kBAAM2W,OAA0B,IAC1C3W,qBAAU,kBAAM8D,OAA2B,IAC3C9D,qBAAU,WtE3BV/Z,EACK2Q,IlE5CuB,iBkE6CvBxJ,MAAK,SAAArG,GACFgP,GAAMC,SChCP,CACHlS,K3FhBwB,mB2FiBxBC,OD8BkCgD,EAASkG,UAE1C6J,OAAM,SAAAM,GACHf,GAAae,QsEqBoB,IACzC4I,qBAAU,kBAAMsW,OAAwB,IACxCtW,qBAAU,WACN+gB,OACD,IAEH,IAOMoa,EAA0B,SAAA3jB,GAC5BO,GAAwBP,IAkCtBmD,EAAe,CACjBC,QAAShxB,EACTixB,eAAgB,SAAAC,GAAM,OAAKA,EAASA,EAAO7mB,MAAQ,KAYjDmnC,EAAa,SAAAh/B,GACfA,EAAOi1B,aAAej+B,EAAMrL,gBAAgB7D,GAC5CkY,EAAOg1B,gBAAkBh1B,EAAOg1B,e3FuPM,SAAAh1B,GAC1CnW,EACKkH,KACGkuC,wCAEIj/B,EAAOg1B,eACP,iBACAh1B,EAAOi1B,cAEdjkC,MAAK,SAAArG,GACFuP,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,6BACjBuI,WAAYzK,GAAKkC,EAAE,sCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,M2FvQ7By0C,CAA+Bl/B,IAS/Bm/B,EACA,oCACKL,EAAe,EACZ,kBAAC,GAAD,CACIx2C,QAASA,EACTi2C,YAtDQ,SAAA7hB,GACpBiiB,EAAYjiB,GACZ7S,GAAQ,IAqDIy0B,eAAgBS,EAChBV,aA5CmB,SAAA71C,GAC/Bq2C,EAAgBr2C,GAChBk2C,GAAwB,IA2CZthB,YAAarpB,IAGjB,6BAAS4D,UAAU,sBACf,4BAjEI,SAACnK,EAAQ/E,GACzB,OAAO+E,EAAOoB,MAAK,SAAAnB,GAAK,OAAIA,EAAM3F,MAAQW,KAiEzB22C,CAAY5xC,EAAQ/E,GACfsL,EAAE,oCAvEH,SAACvG,EAAQ/E,GAC9B,OAAO+E,EAAOoB,MAAK,SAAAnB,GAAK,OAAIA,EAAM3F,MAAQW,KAASoP,MAuE7BwnC,CAAiB7xC,EAAQ/E,GACzB,MAe1B,OARImS,IACAukC,EACI,6BAASxnC,UAAU,sBACf,kBAACmV,GAAA,EAAD,QAMR,oCACI,kBAAC,GAAD,CAAMhQ,MAAM,0BACR,kBAAC,GAAD,CACIiK,KAAM03B,EACN33B,QApEoB,SAAAw4B,GAChCZ,GAAwB,GACnBY,GtE2CwB,SAAAA,GACjC,IAAMpyB,EAAY,GAClBoyB,EAAe7xC,MAAMqK,KAAI,SAAA6V,GAAS,OAAIT,EAAUjlB,KAAK0lB,EAAU7lB,OAC/D+B,EACKkH,KlEjGsB,kCkEkGJ,oBAAgBuuC,EAAe92C,OAAOV,IACrDolB,GAEHlc,MAAK,SAAArG,GACFuP,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,6BACjBuI,WAAYzK,GAAKkC,EAAE,sCAI9B2G,OAAM,SAAAM,GACHf,GAAae,MsE3DjBukC,CAAsBD,IAkEV72C,QAASA,EACTD,OAAQo2C,EACRpxC,OAAQA,EACR4vB,YAAarpB,IAEjB,kBAAC,GAAD,CACI2a,OAAQgO,EACR+F,WAAYpmB,GAASqmB,OAAO/Y,cAC5B5C,KAAMA,EACND,QA1FI,SAAA4V,GtEoCe,IAAAtB,GsEnC/BvR,GAAQ,GACH6S,KtEkC0BtB,EsEhCPsB,EtEiC5B7yB,EACK0R,OlE3IiB,UkE2IA,WAAO6f,IACxBpqB,MAAK,SAAA2H,GACFgB,GAAMC,SCxHc,SAAAjB,GAC5B,MAAO,CACHjR,K3FtB0B,qB2FuB1BC,OAAQgR,GDqHW6mC,CAAiBpkB,IAChClhB,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,6BACjBuI,WAAYzK,GAAKkC,EAAE,uCAI9B2G,OAAM,SAAAM,GACHf,GAAae,UsE2CT,yBAAKrD,UAAU,qBACX,wBAAIA,UAAU,iBACT5D,EAAE,2BAEP,kBAAC6qB,GAAA,EAAD,iBACQL,EADR,CAEIz2B,GAAG,QACH+2B,eAAa,EACbC,aAAW,EACXvnB,MA1EM,SAAA9O,GACtB,OAAIA,EAAgB+E,EAAOoB,MAAK,SAAAnB,GAAK,OAAIA,EAAM3F,KAAOW,KAC1C,GAwEWs2B,CAAkBt2B,GACzB4P,SAAU,SAAChB,EAAO2kB,GA/EZ,IAAAvuB,KAgFgBuuB,IA/E3BJ,GAAqBnuB,EAAM3F,KAiFtBk3B,YAAa,SAAAjG,GAAM,OACf,kBAAC,GAAD,iBACQA,EADR,CAEItW,MAAO1O,EAAE,4BACT2hB,OAAO,kBAM3B,yBAAK/d,UAAU,mBACX,iCACI,kBAAC,GAAD,CACIpP,YAAayO,EAAMzO,YACnByf,cAAeA,EACfvf,QAASA,EACT2E,SAAUA,EACV/F,SAAUA,EACVgd,SAnJY,SAAAtH,GACK,IAA7BqL,OAAO8qB,KAAKn2B,GAAMX,QAAgBW,EAAK0iC,cAAgBr3B,QAG3D6S,GAAwBle,EAAMtU,IAgJd85B,kBAAmBwc,IAtFT,WAC1B,IAAKt2C,EACD,OAAO,kBAAC,GAAD,CAA6B4b,SAAU26B,IAsFrCU,IAEJP,OCtNjB,IAKep6B,iBALS,SAAAzd,GAAK,MAAK,CAC9BuF,eAAgBvF,EAAMsF,aAAaC,eACnC8tC,iBAAkBrzC,EAAMsF,aAAaE,oBAGD,GAAzBiY,EAdf,SAAmB/N,GACf,OAEI,oCACI,kBAAC,GAAD,CAAgBo2B,IAAKC,GAAWsS,UAChC,kBAAC,GAAD,UCUG56B,gBAAQ,MANI,SAAAnL,GACvB,MAAO,CACHgmC,SAAU,kBAAMhmC,ECab,CACHlS,KnKViC,kCkKA1Bqd,EAhBA,SAAA/N,GAOX,OANA4M,qBAAU,WACN5M,EAAM4oC,aACP,IAII,kBAAC,YAAD,CAAUvzB,GAAG,SEiETtH,I,OAAAA,cAXS,SAAAzd,GAAK,MAAK,CAC9BqD,SAAUrD,EAAM6I,KAAKxF,SACrBF,MAAOnD,EAAM6I,KAAKzF,oBAGK,SAAAkP,GACvB,MAAO,CACHimC,WAAY,SAAAhvC,GAAI,OAAI+I,EDlDjB,CACHlS,KnKWqB,gBmKVrBC,OCgD0CkJ,QAInCkU,EA/DQ,SAAA/N,GACnB,IAAQjD,EAAMkD,aAAe,UAArBlD,EAGF/J,EADS,IAAIgvB,gBAAgBhiB,EAAMsf,SAAS2C,QAC7Bze,IAAI,SAEnB/P,EAAQuM,EAAMvM,MAEdE,EAAWqM,EAAMrM,SACnBm1C,EAAW,KAEXn1C,GAAYA,EAASkG,KAAKF,eAAe,aACzCmvC,EAAW,kBAAC,YAAD,CAAUzzB,GAAIvX,GAAMirC,OAC/BrmC,IACI,EACAM,GACArP,EAASkG,KAAKvH,UAItB,IAAI4hB,EACA,oCACI,4BAAKnX,EAAE,oBACP,kBAAC+Y,GAAA,EAAD,OAmBR,OAfIriB,IACAygB,EACI,oCACI,4BAAKnX,EAAE,gBACP,2BAAItJ,KAKhBmZ,qBAAU,WACF5Z,GACAgN,EAAM6oC,WAAW71C,KAEtB,CAACA,IAGA,oCACI,6BAAS2N,UAAU,6BACdmoC,EACD,6BAASnoC,UAAU,2BAA2BuT,SCzCxDsK,I,OAAYC,cAAW,SAAA3K,GAAK,MAAK,CACnC4vB,UAAW,CACPrc,MAAO,aA6DAtZ,iBAJS,SAAAzd,GAAK,MAAK,CAC9B+H,KAAM/H,EAAM8H,MAAMC,QAGP0V,EAzDG,SAAA/N,GACd,IAAQjD,EAAMkD,aAAe,gBAArBlD,EAcFisC,GAbUxqB,KAaY,SAAAxV,I3BoBC,SAAAA,GAC7BnW,EACKsH,IlHlB0B,uBkHkBD,CACtB8uC,aAAcjgC,EAAOnS,KACrBqyC,gBAAiBlgC,EAAO5Y,QACxB+4C,mBAAoBngC,EAAO8F,WAC3Bs6B,iBAAkBpgC,EAAOgG,WAE5BhV,MAAK,SAAArG,GACFgP,GAAMC,SAAShB,GAAQjO,EAASkG,OAChC8I,GAAMC,SACFT,GAAW,CACPrR,GAAI,GACJ+F,KAAMlD,EAASkG,KAAKovC,aACpB74C,QAASuD,EAASkG,KAAKqvC,gBACvBp6B,WAAYnb,EAASkG,KAAKsvC,mBAC1Bn6B,SAAUrb,EAASkG,KAAKuvC,oBAGhClmC,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,2BACjBuI,WAAYzK,GAAKkC,EAAE,iCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,M2B7C7B41C,CAAkBrgC,KAEhBsgC,EAA0B,kBAAMnmC,GrG1Bd,gBqG2BlBomC,EAAyB,kBAAMpmC,GrGvCb,eqGwCxByJ,qBAAU,W3BrBV/Z,EACK2Q,IlHkBmB,iBkHjBnBxJ,MAAK,SAAArG,GACFgP,GAAMC,SAAShB,GAAQjO,EAASkG,OAC5BlG,EAASkG,KAAKovC,cACdtmC,GAAMC,SACFT,GAAW,CACPrR,GAAI,GACJ+F,KAAMlD,EAASkG,KAAKovC,aACpB74C,QAASuD,EAASkG,KAAKqvC,gBACvBp6B,WAAYnb,EAASkG,KAAKsvC,mBAC1Bn6B,SAAUrb,EAASkG,KAAKuvC,uBAKvC1lC,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,Q2BO9B,CAACR,aAAaC,QAAQ,cAazB,OACI,oCACI,kBAAC,GAAD,CAAM4S,MAAM,aACR,wBAAInF,UAAU,cAAc5D,EAAE,sBAC9B,iCACI,8BAAOA,EAAE,eAAiB,MAC1B,8BAAO9J,aAAaC,QAAQ,WAEhC,kBAAC,GAAD,CACIma,SAxCa,SAAArE,GACrBA,EAAOwgC,eAAiBxgC,EAAOygC,mB3BaT,SAAAzgC,GAC9BnW,EACKsH,IlHD0B,uBkHCD,CACtBuvC,iBAAkB1gC,EAAO0gC,iBACzBF,aAAcxgC,EAAOwgC,eAExBxvC,MAAK,SAAArG,GACFgP,GAAMC,SAAShB,GAAQjO,EAASkG,OAChCqJ,GACIrI,GAAKkC,EAAE,6CAA8C,CACjDsI,SAAUxK,GAAKkC,EAAE,8BACjBuI,WAAYzK,GAAKkC,EAAE,iCAI9B2G,OAAM,SAAAjQ,GAAK,OAAIwP,GAAaxP,M2BtB7Bk2C,CAAmB3gC,GACnBsgC,KANItpC,EAAM4mC,SAAS,CACX9yC,aAAc,CAAE81C,UAAW7sC,EAAE,2BAsCzB0V,QAAS62B,KArBK,WAC1B,GAAyC,iBAArCr2C,aAAaC,QAAQ,YACrB,OACI,kBAAC,GAAD,CACIma,SAAU27B,EACVv2B,QAAS82B,IAmBhBM,OC3EAC,GACF,QADEA,GAED,SAFCA,GAGK,eAHLA,GAIO,iBCoBhBC,I,OAAY,SAAA/pC,GAEZ4M,qBAAU,kBAAI3H,GAA6B,MAC3C2H,qBAAU,kBAAI9H,GAA4B,MAC1C8H,qBAAU,kBAAIpI,GAA0B,MACxCoI,qBAAU,kBAAIlI,GAAuB,OACrC,IAAQ3H,EAAMkD,aAAe,gBAArBlD,EACAsP,EAAiBrM,EAAjBqM,aAEF5Y,EAAQuM,EAAMgqC,WAEd5jB,EAAcpmB,EAAMomB,YAOtB7sB,EACA,0BAAM8T,SAAUhB,GACZ,kBAACiB,GAAA,EAAD,CACIzW,KAAK,QACL8J,UAAU,aACV4M,UAAWsd,GACXpf,MAAO1O,EAAE,eACTtJ,QAASA,EACTkvB,WAAYlvB,EAAQA,EAAMG,MAAQ,KAClCyN,SAAU,SAAAiF,GAAC,OAdD/F,EAcmB+F,EAAEhG,OAAOC,WAb1CkI,GAASlI,GAAQP,EAAM4mC,SAASn+B,GAASlI,IACxCP,EAAM4mC,SAAS,OAFF,IAAArmC,KAgBd,kBAAC+M,GAAA,EAAD,CACIzW,KAAK,WACL8J,UAAU,aACVjQ,KAAK,WACL6c,UAAWsd,GACXpf,MAAO1O,EAAE,kBACTtJ,QAASA,EACT4N,SAAU,kBAAMrB,EAAM4mC,SAAS,SAEnC,kBAACj5B,GAAA,EAAD,CACIhN,UAAU,2BACVjQ,KAAK,SACLkd,QAAQ,YACRxM,MAAM,WAELglB,EAAY,gBAEjB,yBAAKzlB,UAAU,cACX,4BACIjQ,KAAK,SACLiQ,UAAU,YACVkN,QAAS,WACL7N,EAAMiqC,eAAeH,IACrB9pC,EAAM4mC,SAAS,QAGpB,kBAAC,KAAD,CAAOjmC,UAAU,WAAW0U,GAAIvX,GAAM8B,cAAewmB,EAAY,gBAEpE,4BACI11B,KAAK,SACLiQ,UAAU,YACVkN,QAAS,WACL7N,EAAMiqC,eAAeH,IACrB9pC,EAAM4mC,SAAS,QAGpB,kBAAC,KAAD,CAAOjmC,UAAU,WAAW0U,GAAIvX,GAAM+B,gBAAiBumB,EAAY,sBAI1E,kBAACzY,GAAA,EAAD,CACIC,QAAQ,YACRxM,MAAM,YACNyM,QAAS,kBACJoE,OAAOtL,SAAS2Y,SAASvH,KACtBrlB,mHAAYF,uBAAuBG,O/I7F3B,gB+IiGhB,kBAAC,KAAD,MACCoK,EAAE,sBASf,OAJIiD,EAAM4D,YACNrK,EAAO,kBAACuc,GAAA,EAAD,OAIP,kBAAC,GAAD,CAAMhQ,MAAM,aACR,wBAAInF,UAAU,cAAcylB,EAAY,qBACvC7sB,KASEwwC,GAJfA,GAAYj8B,aAAU,CAClBvU,KvG/GsB,auG8GduU,CAETi8B,ICzGCG,GAAmB,SAAAlqC,GACnB,IAAQjD,EAAMkD,aAAe,gBAArBlD,EACAsP,EAAiBrM,EAAjBqM,aAEF+Z,EAAcpmB,EAAMomB,YAEpB3yB,EAAQuM,EAAMmqC,kBAEdC,EAAgB,CAAE58B,SAAU,CAAC/E,GAAU3O,KACvCuwC,EAAsB52C,GAASA,EAAMK,aAAaC,IAClDu2C,EAAwB,CAC1B72C,QAAS42C,EACT1nB,WAAY0nB,EAAsB52C,EAAMK,aAAaC,IAAM,IAGzDw2C,EAAmB,CAAE/8B,SAAU,CAAC/E,GAAUwC,KAC1Cu/B,EAAqB/2C,GAASA,EAAMK,aAAa81C,UACjDa,EAA2B,CAC7Bh3C,QAAS+2C,EACT7nB,WAAY6nB,EAAqB/2C,EAAMK,aAAa81C,UAAY,IAG9Dc,EAAyB,CAAEl9B,SAAU,CAAC/E,GAAUwC,KAChD0/B,EAAiC,CACnCl3C,QAAS+2C,GAGTjxC,EACA,0BAAM8T,SAAUhB,GACZ,kBAACiB,GAAA,EAAD,eACIzW,KAAK,QACL8J,UAAU,aACVjQ,KAAK,QACL6c,UAAWsd,GACXpf,MAAO1O,EAAE,gBACHtJ,EAAwB62C,EAAhBF,EANlB,CAOI/oC,SAAU,SAAAiF,GAAC,OAAItG,EAAM4mC,SAAS,UAElC,kBAACt5B,GAAA,EAAD,eACIzW,KAAK,WACL8J,UAAU,aACVjQ,KAAK,WACL6c,UAAWsd,GACXpf,MAAO1O,EAAE,mBACHtJ,EAA2Bg3C,EAAnBF,EANlB,CAOIlpC,SAAU,SAAAiF,GAAC,OAAItG,EAAM4mC,SAAS,UAElC,kBAACt5B,GAAA,EAAD,eACIzW,KAAK,iBACL8J,UAAU,aACVjQ,KAAK,WACL6c,UAAWsd,GACXpf,MAAO1O,EAAE,0BACHtJ,EAEAk3C,EADAD,IAGV,kBAAC/8B,GAAA,EAAD,CACIhN,UAAU,gBACVjQ,KAAK,SACLkd,QAAQ,YACRxM,MAAM,WAELglB,EAAY,mBAEjB,yBAAKzlB,UAAU,cACX,4BACIjQ,KAAK,SACLiQ,UAAU,YACVkN,QAAS,WACL7N,EAAMiqC,eAAeH,IACrB9pC,EAAM4mC,SAAS,QAGpB,kBAAC,KAAD,CAAOjmC,UAAU,WAAW0U,GAAIvX,GAAMI,OAAQkoB,EAAY,qBASzE,OAHIpmB,EAAM4D,YACNrK,EAAO,kBAACuc,GAAA,EAAD,OAGP,kBAAC,GAAD,CAAMhQ,MAAM,aACR,wBAAInF,UAAU,cACTX,EAAMomB,YAAY,4BAEtB7sB,IASE2wC,GAJfA,GAAmBp8B,aAAU,CACzBvU,KxGpG6B,oBwGmGduU,CAEhBo8B,IC9FCU,GAAoB,SAAA5qC,GACpB,IAAQjD,EAAMkD,aAAe,gBAArBlD,EACAsP,EAAiBrM,EAAjBqM,aAEF5Y,EAAQuM,EAAM6qC,mBAEdzkB,EAAcpmB,EAAMomB,YAEpBgkB,EAAgB,CAAE58B,SAAU,CAAC/E,GAAU3O,KAUzCP,EACA,0BAAM8T,SAAUhB,GACZ,kBAACiB,GAAA,EAAD,eACIzW,KAAK,QACL8J,UAAU,aACV4M,UAAWsd,GACXpf,MAAO1O,EAAE,gBACHtJ,GAAQ22C,EALlB,CAMI/oC,SAAU,SAAAiF,GAhBA,IAAA/F,IAiBQ+F,EAAEhG,OAAOC,MAhB/BkI,GAASlI,GACTP,EAAM4mC,SAASn+B,GAASlI,IAExBP,EAAM4mC,SAAS,UAgBf,kBAACj5B,GAAA,EAAD,CACIhN,UAAU,2BACVjQ,KAAK,SACLkd,QAAQ,YACRxM,MAAM,WAELglB,EAAY,0BAEjB,yBAAKzlB,UAAU,cACX,4BACIjQ,KAAK,SACLiQ,UAAU,YACVkN,QAAS,WACL7N,EAAMiqC,eAAeH,IACrB9pC,EAAM4mC,SAAS,QAGrB,kBAAC,KAAD,CAAOjmC,UAAU,WAAW0U,GAAIvX,GAAMI,OAASkoB,EAAY,wBAUzE,OAJIpmB,EAAM4D,YACNrK,EAAO,kBAACuc,GAAA,EAAD,OAIP,kBAAC,GAAD,CAAMhQ,MAAM,aACR,wBAAInF,UAAU,cACTylB,EAAY,8BAEhB7sB,IASEqxC,GAJfA,GAAoB98B,aAAU,CAC1BvU,KzG1E+B,qByGyEfuU,CAEjB88B,ICqKY78B,iBAnBS,SAAAzd,GAAK,MAAK,CAC9BqD,SAAUrD,EAAM6I,KAAKxF,SACrBK,sBAAuB1D,EAAM6I,KAAKnF,sBAClCP,MAAOnD,EAAM6I,KAAK1F,MAClBT,MAAO1C,EAAM6I,KAAKnG,MAClBgiB,SAAU1kB,EAAM6I,KAAK3F,KACrBS,QAAS3D,EAAMgJ,iBAAiBrF,YAGT,SAAA2O,GACvB,MAAO,CACHkoC,OAAQ,SAAAjxC,GAAI,OAAI+I,EPhPb,CACHlS,KnKeiB,YmKdjBC,OO8OkCkJ,KAClCkxC,WAAY,SAAAlxC,GAAI,OAAI+I,EP1OjB,CACHlS,KnKiBqB,gBmKhBrBC,OOwO0CkJ,KAC1CmxC,gBAAiB,SAAAnxC,GAAI,OAAI+I,EPpOtB,CACHlS,KnKc2B,sBmKb3BC,OOkOoDkJ,KACpDgI,WAAY,SAAA+B,GAAS,OAAIhB,EAASf,GAAW+B,KAC7CgjC,SAAU,SAAAnzC,GAAK,OAAImP,EPnMhB,CACHlS,KnK3BsB,iBmK4BtBC,OOiMyC8C,QAIlCsa,EA3NF,SAAA/N,GACT,IAO2BnG,EAPnBkD,EAAMkD,aAAe,UAArBlD,EACR,EAAgCsS,mBAASy6B,IAAzC,oBAAOlwC,EAAP,KAAiBqxC,EAAjB,KAEMx3C,EAAQuM,EAAMvM,MAChBy5B,EAAMjb,OAAOtL,SAAS2Y,SACtB4rB,EAAS,IAAIC,IAAIje,GAejBke,GAAS,EACTC,GAAU,EACVr4C,EAAQ,GAEZ,GAAIk4C,EAAOjpB,OAAO7c,OAAS,EAAG,CAC1B,IAAM2c,EAASmpB,EAAOjpB,OAAOuD,MAAM,KAC/BzD,GACAA,EAAOjhB,KAAI,SAAAwqC,GACP,IAAMC,EAAeD,EAAM9lB,MAAM,KAC7B+lB,IAEwB,YAApBA,EAAa,IACO,SAApBA,EAAa,KAEbH,GAAS,GAGW,UAApBG,EAAa,IACbA,EAAa,GAAGnmC,OAAS,IAEzBimC,GAAU,EACVr4C,EAAQu4C,EAAa,QAKjCH,GAAUC,IAvCSxxC,EAwCA,CAAED,SAAU,SAAU5G,SAvC7CgN,EAAM6B,YAAW,IACZhI,EAAK7G,OAAS6G,EAAK7G,MAAMoS,OAAS,GACnCpF,EAAM4mC,SAAS,CAAEhzC,MAAOmJ,EAAE,mBAG9BkuC,EAAYnB,IACZ9pC,EAAM8qC,OAAOjxC,GACbsJ,G1GvCkB,a0GwClB8O,OAAOmN,QAAQosB,aAAa,GAAI7kC,SAAS9F,MAAO,KAChDb,EAAM6B,YAAW,KAiCrB+K,qBAAU,WAEFhT,IAAakwC,IACb9pC,EAAMrM,UACNqM,EAAMrM,SAASkG,KAAKF,eAAe,aAEnCsxC,EAAYnB,IACZx3C,EAAUyK,EAAE,iCACZ2F,IAA0B,EAAMM,GAAuB1Q,MAE5D,CAAC0N,EAAMrM,WAEViZ,qBAAU,WAEF5M,EAAMhM,uBACNgM,EAAMhM,sBAAsB6F,KAAKF,eAAe,aAEhDsxC,EAAYnB,IACZx3C,EAAUyK,EAAE,qCACZ2F,IAA0B,EAAMM,GAAuB1Q,MAE5D,CAAC0N,EAAMhM,wBAEV,IAqCIy3C,EAAWn5C,EArCTo5C,EAAe,SAAAC,GACZA,EAAU7xC,OAAU6xC,EAAU1gC,SAI9B3C,GAAWC,MAAMyC,KAAK2gC,EAAU7xC,QAIrCkG,EAAM8qC,OAAOa,GACb3rC,EAAM6B,YAAW,GACjBsB,G1G5GkB,c0GuGdnD,EAAM4mC,SAAS,CAAEhzC,MAAOmJ,EAAE,8BAJ1BiD,EAAM4mC,SAAS,CAAEhzC,MAAOmJ,EAAE,mBAoC5B6G,EAAY5D,EAAM/L,SAEnBR,GAASuM,EAAMgV,WAEhBy2B,IADczrC,EAAMhN,MAEpBV,EAAUyK,EAAE,4BACZ2F,IAA0B,EAAMM,GAAuB1Q,IAG3D,IAAMs5C,GAAmBn4C,GAASg4C,IAAc7nC,EAE5CioC,EAAe,KACfD,GAAmB5rC,EAAMgV,WAAa1G,GAAUE,QAChDq9B,EAAe,kBAAC,YAAD,CAAUx2B,GAAIvX,GAAME,cAC5B4tC,GAAmB5rC,EAAMgV,UAEzB42B,GAAmB5rC,EAAMgV,WAAa1G,GAAUG,WADvDo9B,EAAe,kBAAC,YAAD,CAAUx2B,GAAIvX,GAAMC,aAKvC,IAII+tC,EAJEC,EAAwB,SAAAnyC,GAC1BqxC,EAAYrxC,IAKhB,OAAQA,GACJ,KAAKkwC,GACDnjC,SAAS9F,MAAQ9D,EAAE,oBACnB+uC,EACI,kBAAC,GAAD,CACIloC,UAAWA,EACXomC,WAAYv2C,EACZ4Z,SAAUq+B,EACVzB,eAAgB8B,EAChB3lB,YAAarpB,EACb6pC,SAAU5mC,EAAM4mC,WAGxB,MACJ,KAAKkD,GACDnjC,SAAS9F,MAAQ9D,EAAE,2BACnB+uC,EACI,kBAAC,GAAD,CACIloC,UAAWA,EACXumC,kBAAmB12C,EACnB4Z,SAtEY,SAAA2+B,GACpBA,EAAiB/gC,WAAa+gC,EAAiBC,gBAMnDjsC,EAAM+qC,WAAW,CACbjxC,MAAOkyC,EAAiBlyC,MACxBmR,SAAU+gC,EAAiB/gC,WAE/BjL,EAAM6B,YAAW,GACjBsB,G1G1HyB,qB0GgHrBnD,EAAM4mC,SAAS,CACX9yC,aAAc,CAAE81C,UAAW7sC,EAAE,2BAoEzBktC,eAAgB8B,EAChB3lB,YAAarpB,EACb6pC,SAAU5mC,EAAM4mC,WAGxB,MACJ,KAAKkD,GACDnjC,SAAS9F,MAAQ9D,EAAE,6BACnB+uC,EACI,kBAAC,GAAD,CACIloC,UAAWA,EACXinC,mBAAoBp3C,EACpB4Z,SApEa,SAAA6+B,GACzBlsC,EAAMgrC,gBAAgB,CAClBlxC,MAAOoyC,EAAkBpyC,QAE7BkG,EAAM6B,YAAW,GACjBsB,G1GjI2B,sB0GiMf8mC,eAAgB8B,EAChB3lB,YAAarpB,EACb6pC,SAAU5mC,EAAM4mC,WAGxB,MACJ,QACIjgC,SAAS9F,MAAQ9D,EAAE,oBACnB+uC,EACI,kBAAC,GAAD,CACIloC,UAAWA,EACXomC,WAAYv2C,EACZ4Z,SAAUq+B,EACVzB,eAAgB8B,EAChB3lB,YAAarpB,EACb6pC,SAAU5mC,EAAM4mC,WAKhC,OACI,yBAAKjmC,UAAU,aACVkrC,EACAC,MC/NPK,GAAW,WACb,OAAO,kBAAC,GAAD,CAAMvyC,SAAUkwC,MCDrBsC,GAAgB,WAClB,OAAO,kBAAC,GAAD,CAAMxyC,SAAUkwC,MCDrBuC,GAAQ,WACV,OAAO,kBAAC,GAAD,CAAMzyC,SAAUkwC,MC+HZ/7B,iBAFS,SAAAzd,GAAK,MAAK,CAAE0kB,SAAU1kB,EAAM6I,KAAK3F,QAE1Cua,EAnGC,SAAA/N,GACZ,IAAMgV,EAAWhV,EAAMgV,SAEnBs3B,EACA,kBAAC,UAAD,KACI,kBAAC,SAAD,CAAO3b,KAAM7yB,GAAM8B,aAAc2N,UAAW4+B,KAC5C,kBAAC,SAAD,CAAOxb,KAAM7yB,GAAMC,UAAWwuC,OAAK,EAACh/B,UAAWi/B,KAC/C,kBAAC,SAAD,CAAO7b,KAAM7yB,GAAM6B,YAAa4N,UAAWk/B,KAC3C,kBAAC,SAAD,CAAO9b,KAAM7yB,GAAME,YACf,kBAAC,YAAD,CAAUqX,GAAIvX,GAAMI,SAExB,kBAAC,SAAD,CAAOyyB,KAAM7yB,GAAMI,MAAOqP,UAAW8+B,KACrC,kBAAC,SAAD,CAAO1b,KAAM7yB,GAAMK,gBAAiBoP,UAAWm/B,KAC/C,kBAAC,SAAD,CAAO/b,KAAM7yB,GAAMS,WAAYgP,UAAWo/B,MA4ElD,OAvEI33B,IAAa1G,GAAUE,QACvB89B,EACI,kBAAC,UAAD,KACI,kBAAC,SAAD,CAAO3b,KAAM7yB,GAAMG,cAAesP,UAAWq/B,KAC7C,kBAAC,SAAD,CAAOjc,KAAM7yB,GAAMgC,YAAayN,UAAWs/B,KAC3C,kBAAC,SAAD,CAAOlc,KAAM7yB,GAAM8B,aAAc2N,UAAW4+B,KAC5C,kBAAC,SAAD,CAAOxb,KAAM7yB,GAAM+B,eAAgB0N,UAAW6+B,KAC9C,kBAAC,SAAD,CAAOzb,KAAM7yB,GAAMC,UAAWwuC,OAAK,EAACh/B,UAAWi/B,KAE/C,kBAAC,SAAD,CAAO7b,KAAM7yB,GAAMU,WAAa+O,UAAWu/B,KAC3C,kBAAC,SAAD,CAAOnc,KAAM7yB,GAAMW,YAAc8O,UAAW9O,KAC5C,kBAAC,SAAD,CAAO8tC,OAAK,EAAC5b,KAAM7yB,GAAMY,UAAW6O,UAAW7O,KAE/C,kBAAC,SAAD,CAAOiyB,KAAI,UAAK7yB,GAAMY,WAAX,OAAuBZ,GAAMa,OAA7B,OAAqCb,GAAMe,MAA3C,OAAkDf,GAAMoB,SAAYqO,UAAW7O,KAC1F,kBAAC,SAAD,CAAOiyB,KAAI,UAAK7yB,GAAMY,WAAX,OAAuBZ,GAAMa,OAA7B,OAAqCb,GAAMgB,QAA3C,OAAoDhB,GAAMoB,SAAYqO,UAAW7O,KAC5F,kBAAC,SAAD,CAAOiyB,KAAI,UAAK7yB,GAAMY,WAAX,OAAuBZ,GAAMa,OAA7B,OAAqCb,GAAMoB,SAA3C,OAAqDpB,GAAMiB,YAAewO,UAAW7O,KAChG,kBAAC,SAAD,CAAOiyB,KAAI,UAAK7yB,GAAMY,WAAX,OAAuBZ,GAAMa,OAA7B,OAAqCb,GAAMoB,SAA3C,OAAqDpB,GAAMkB,YAAeuO,UAAW7O,KAChG,kBAAC,SAAD,CAAOiyB,KAAI,UAAK7yB,GAAMY,WAAX,OAAuBZ,GAAMa,OAA7B,OAAqCb,GAAMoB,SAA3C,OAAqDpB,GAAMmB,cAAiBsO,UAAW7O,KAClG,kBAAC,SAAD,CAAOiyB,KAAI,UAAK7yB,GAAMY,WAAX,OAAuBZ,GAAMa,OAA7B,OAAqCb,GAAMoB,SAA3C,OAAqDpB,GAAMc,SAA3D,OAAqEd,GAAMqB,gBAA3E,OAA4FrB,GAAMe,MAAS0O,UAAW7O,KACjI,kBAAC,SAAD,CAAOiyB,KAAI,UAAK7yB,GAAMY,WAAX,OAAuBZ,GAAMa,OAA7B,OAAqCb,GAAMoB,SAA3C,OAAqDpB,GAAMc,SAA3D,OAAqEd,GAAMqB,gBAA3E,OAA4FrB,GAAMgB,QAAWyO,UAAW7O,KAEnI,kBAAC,SAAD,CAAOiyB,KAAM7yB,GAAMsB,mBAAqBmO,UAAWw/B,KACnD,kBAAC,SAAD,CAAOpc,KAAM7yB,GAAMuB,SAAWkO,UAAWlO,KACzC,kBAAC,SAAD,CAAOsxB,KAAM7yB,GAAMwB,YAAciO,UAAWjO,KAC5C,kBAAC,SAAD,CAAOqxB,KAAM7yB,GAAMyB,UAAYgO,UAAWhO,KAC1C,kBAAC,SAAD,CAAOoxB,KAAM7yB,GAAM0B,aAAe+N,UAAW/N,KAC7C,kBAAC,SAAD,CAAOmxB,KAAM7yB,GAAM2B,cAAgB8N,UAAW9N,KAC9C,kBAAC,SAAD,CAAOkxB,KAAM7yB,GAAM4B,QAAU6N,UAAWy/B,KAGxC,kBAAC,SAAD,CAAOrc,KAAM7yB,GAAMK,iBACf,kBAAC,YAAD,CAAUkX,GAAIvX,GAAME,cAExB,kBAAC,SAAD,CAAO2yB,KAAM7yB,GAAMI,MAAOqP,UAAW8+B,KAErC,kBAAC,SAAD,CAAO1b,KAAM7yB,GAAME,WAAYuP,UAAWu/B,KAC1C,kBAAC,SAAD,CAAOnc,KAAM7yB,GAAMM,OAAQmP,UAAW0/B,KACtC,kBAAC,SAAD,CAAOtc,KAAM7yB,GAAMS,WAAYgP,UAAWo/B,KAC1C,kBAAC,SAAD,CAAOhc,KAAM7yB,GAAM6B,YAAa4N,UAAWk/B,MAK5Cz3B,IACPs3B,EACI,kBAAC,UAAD,KACI,kBAAC,SAAD,CAAO3b,KAAM7yB,GAAM8B,aAAc2N,UAAW4+B,KAC5C,kBAAC,SAAD,CAAOxb,KAAM7yB,GAAM+B,eAAgB0N,UAAW6+B,KAC9C,kBAAC,SAAD,CAAOzb,KAAM7yB,GAAMC,UAAWwuC,OAAK,EAACh/B,UAAWi/B,KAG/C,kBAAC,SAAD,CACI7b,KAAM7yB,GAAMQ,iBACZiP,UAAW2/B,KAEf,kBAAC,SAAD,CAAOvc,KAAM7yB,GAAMG,eACf,kBAAC,YAAD,CAAUoX,GAAIvX,GAAMI,SAExB,kBAAC,SAAD,CAAOyyB,KAAM7yB,GAAME,YACf,kBAAC,YAAD,CAAUqX,GAAIvX,GAAMI,SAExB,kBAAC,SAAD,CAAOyyB,KAAM7yB,GAAMI,MAAOqP,UAAW8+B,KACrC,kBAAC,SAAD,CAAO1b,KAAM7yB,GAAMK,iBACf,kBAAC,YAAD,CAAUkX,GAAIvX,GAAMC,aAExB,kBAAC,SAAD,CAAO4yB,KAAM7yB,GAAMS,WAAYgP,UAAWo/B,KAC1C,kBAAC,SAAD,CAAOhc,KAAM7yB,GAAMM,OAAQmP,UAAW0/B,KACtC,kBAAC,SAAD,CAAOtc,KAAM7yB,GAAM6B,YAAa4N,UAAWk/B,OAKnD,kBAAC,KAAD,KACI,kBAAC,GAAD,CAAQz3B,SAAUA,EAAUrY,MAAO2R,KAClCg+B,MC3EEv+B,iBAZS,SAAAzd,GAAK,MAAK,CAC9B8B,eAAgB9B,EAAM8I,SAAShH,eAC/BC,aAAc/B,EAAM8I,SAAS/G,aAC7B4iC,gBAAiB3kC,EAAM8I,SAAS9G,YAGT,SAAAsQ,GACvB,MAAO,CACHuqC,eAAgB,kBAAMvqC,EZVA,WAC1B,IAAM5P,EAAQC,aAAaC,QAAQ,SACnC,OAAIF,IAAUA,EAAMG,S7JvCE,W6JwCX,CACHzC,KnKjBoB,oBmKqBrB,CACHA,KnKpB6B,wBmKqB7BsC,QACAQ,KAJSP,aAAaC,QAAQ,aYGCk6C,QAIxBr/B,EAzCH,SAAA/N,GACR,IAAQ5N,EAAkD4N,EAAlD5N,eAAgBC,EAAkC2N,EAAlC3N,aAAc4iC,EAAoBj1B,EAApBi1B,gBAatC,OAJAroB,qBAAU,WACN5M,EAAMmtC,mBACP,IAGC,kBAAC,WAAD,CAAUE,SAAU,MAChB,yBAAK1sC,UAAU,aACX,kBAAC,GAAD,MACA,kBAAC,GAAD,CACIrO,QAAS2iC,EACTvkC,KAAM2B,EACNE,OAAQH,EACRi7B,oBApBY,SAAChtB,EAAOw2B,GAChB,eAAXA,GAILh0B,aChBY8S,QACW,cAA7B1D,OAAOqN,SAASguB,UACe,UAA7Br7B,OAAOqN,SAASguB,UAChBr7B,OAAOqN,SAASguB,SAASrgB,MACvB,2DCLN,uCAiBA,IAAMsgB,GAAiBC,cAEjBC,GAGaC,IAEN/qC,GAAQgrC,YACjB10C,EACAw0C,GAAiBG,YAAgBL,MAGrCA,GAAeM,IAAIC,IAEnBC,IAASC,OACL,kBAAC,KAAD,CAAUrrC,MAAOA,IACb,kBAAC,GAAD,OAEJgE,SAASC,eAAe,SD+DtB,kBAAmBrM,WACrBA,UAAU0zC,cAAcC,MACrBl0C,MAAK,SAAAlG,GACJA,EAAaq6C,gBAEdzqC,OAAM,SAAAjQ,GACLmvC,QAAQnvC,MAAMA,EAAMnB,c","file":"static/js/main.3aaa0102.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionsType';\nfunction compare(a, b) {\n    let comparison = 0;\n    if (a.surname > b.surname) {\n        comparison = 1;\n    } else if (a.surname < b.surname) {\n        comparison = -1;\n    }\n    return comparison;\n}\n\nconst teachers = (\n    state = {\n        teachers: [],\n        teacher: {},\n        disabledTeachers: []\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.ADD_TEACHER:\n            return {\n                ...state,\n                teachers: [...state.teachers, action.result].sort(compare)\n            };\n\n        case actionTypes.DELETE_TEACHER:\n            return {\n                ...state,\n                teachers: [\n                    ...state.teachers.filter(\n                        teachers => teachers.id !== action.result\n                    )\n                ]\n            };\n\n        case actionTypes.SET_TEACHER:\n            return {\n                ...state,\n                teacher: action.result\n            };\n        case actionTypes.SELECT_TEACHER:\n            let teacher = state.teachers.filter(\n                teacher => teacher.id === action.result\n            )[0];\n            if (!teacher) {\n                teacher = { id: null };\n            }\n            return {\n                ...state,\n                teacher: teacher\n            };\n\n        case actionTypes.UPDATE_TEACHER:\n            const updatedTeacher = [];\n            state.teachers.forEach(teacher => {\n                if (teacher.id === action.result.id) {\n                    teacher = { ...teacher, ...action.result };\n                }\n                updatedTeacher.push(teacher);\n            });\n            return {\n                ...state,\n                teacher: {},\n                teachers: updatedTeacher\n            };\n\n        case actionTypes.SHOW_ALL:\n            return {\n                ...state,\n                teachers: [...action.result]\n            };\n        case actionTypes.SET_DISABLED_TEACHERS:\n            return {\n                ...state,\n                disabledTeachers: [...action.result]\n            };\n        case actionTypes.GET_TEACHERS_BY_DEPARTMENT:\n            return {\n            ...state,\n            teachers: [...action.result]\n        };\n\n        default:\n            return state;\n    }\n};\n\nexport default teachers;\n","export const ADD_LESSON_CARD = 'ADD_LESSON_CARD';\nexport const SET_LESSONS_CARDS = 'SET_LESSONS_CARDS';\nexport const SET_LESSON_TYPES = 'SET_LESSON_TYPES';\nexport const DELETE_LESSON_CARD = 'DELETE_LESSON_CARD';\nexport const SELECT_LESSON_CARD = 'SELECT_LESSON_CARD';\nexport const UPDATE_LESSON_CARD = 'UPDATE_LESSON_CARD';\nexport const SELECT_GROUP_ID = 'SELECT_GROUP_ID';\nexport const SET_UNIQUE_ERROR = 'SET_UNIQUE_ERROR';\n\nexport const SET_TEMPORARY_SCHEDULES = 'SET_TEMPORARY_SCHEDULES';\nexport const SET_SCHEDULES_AND_TEMPORARY_SCHEDULES = 'SET_SCHEDULES_AND_TEMPORARY_SCHEDULES';\nexport const SELECT_TEMPORARY_SCHEDULE = 'SELECT_TEMPORARY_SCHEDULE';\nexport const SELECT_VACATION = 'SELECT_VACATION';\nexport const SELECT_TEACHER_ID = 'SELECT_TEACHER_ID';\n\nexport const SET_OPEN_SNACKBAR = 'SET_OPEN_SNACKBAR';\n\nexport const SET_USERS = 'SET_USERS';\nexport const SET_USER = 'SET_USER';\n\nexport const AUTH_USER = 'AUTH_USER';\nexport const AUTH_USER_SUCCESS = 'AUTH_USER_SUCCESS';\nexport const AUTH_USER_ERROR = 'AUTH_USER_ERROR';\nexport const AUTH_USER_INITIATE_LOGOUT = 'AUTH_USER_INITIATE_LOGOUT';\nexport const AUTH_USER_LOGOUT = 'AUTH_USER_LOGOUT';\nexport const AUTH_USER_AUTO_LOGOUT = 'AUTH_USER_AUTO_LOGOUT';\nexport const AUTH_USER_CHECK_STATE = 'AUTH_USER_CHECK_STATE';\nexport const SET_AUTH_ERROR = 'SET_AUTH_ERROR';\n\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const REGISTER_USER_ERROR = 'REGISTER_USER_ERROR';\n\nexport const RESET_USER_PASSWORD = 'RESET_USER_PASSWORD';\nexport const RESET_USER_PASSWORD_SUCCESS = 'RESET_USER_PASSWORD_SUCCESS';\nexport const RESET_USER_PASSWORD_ERROR = 'RESET_USER_PASSWORD_ERROR';\n\nexport const ACTIVATE_USER = 'ACTIVATE_USER';\nexport const ACTIVATE_USER_SUCCESS = 'ACTIVATE_USER_SUCCESS';\nexport const ACTIVATE_USER_ERROR = 'ACTIVATE_USER_ERROR';\n\nexport const SET_LOADING_INDICATOR = 'SET_LOADING_INDICATOR';\nexport const SET_SCHEDULE_LOADING_INDICATOR = 'SET_SCHEDULE_LOADING_INDICATOR';\nexport const SET_SEMESTER_LOADING_INDICATOR = 'SET_SEMESTER_LOADING_INDICATOR';\n\nexport const SET_SCHEDULE_ITEMS = 'SET_SCHEDULE_ITEMS';\nexport const SET_CURRENT_SEMESTER = 'SET_CURRENT_SEMESTER';\nexport const SET_DEFAULT_SEMESTER = 'SET_DEFAULT_SEMESTER';\nexport const ADD_ITEM_TO_SCHEDULE = 'ADD_ITEM_TO_SCHEDULE';\nexport const CHECK_AVAILABILITY_SCHEDULE = 'CHECK_AVAILABILITY_SCHEDULE';\nexport const SET_FULL_SCHEDULE = 'SET_FULL_SCHEDULE';\nexport const SET_GROUP_SCHEDULE = 'SET_GROUP_SCHEDULE';\nexport const SET_SCHEDULE_TYPE = 'SET_SCHEDULE_TYPE';\nexport const DELETE_ITEM_FROM_SCHEDULE = 'DELETE_ITEM_FROM_SCHEDULE';\nexport const SET_ITEM_GROUP_ID = 'SET_ITEM_GROUP_ID';\n\nexport const ADD_TEACHER = 'ADD_TEACHER';\nexport const SELECT_TEACHER = 'SELECT_TEACHER';\nexport const SET_TEACHER = 'SET_TEACHER';\nexport const UPDATE_TEACHER = 'UPDATE_TEACHER';\nexport const DELETE_TEACHER = 'DELETE_TEACHER';\nexport const SHOW_ALL = 'SHOW_ALL';\nexport const GET_TEACHERS_BY_DEPARTMENT='GET_TEACHERS_BY_DEPARTMENT';\nexport const UPDATE_WISH = 'UPDATE_WISH';\nexport const SELECT_WISH = 'SELECT_WISH';\nexport const SHOW_ALL_WISH = 'SHOW_ALL_WISH';\nexport const SET_MY_TEACHER_WISHES = 'SET_MY_TEACHER_WISHES';\n\nexport const SHOW_ALL_BUSY_ROOMS = 'SHOW_ALL_BUSY_ROOMS';\n\nexport const SET_CLASS_SCHEDULE_LIST = 'SET_CLASS_SCHEDULE_LIST';\nexport const ADD_CLASS_SCHEDULE_ONE = 'ADD_CLASS_SCHEDULE_ONE';\nexport const GET_CLASS_SCHEDULE_LIST = 'GET_CLASS_SCHEDULE_LIST';\nexport const GET_CLASS_SCHEDULE_ONE = 'GET_CLASS_SCHEDULE_ONE';\nexport const DELETE_CLASS_SCHEDULE_ONE = 'DELETE_CLASS_SCHEDULE_ONE';\nexport const UPDATE_CLASS_SCHEDULE_ONE = 'UPDATE_CLASS_SCHEDULE_ONE';\nexport const CLEAR_CLASS_SCHEDULE_ONE = 'CLEAR_CLASS_SCHEDULE_ONE';\n\nexport const ADD_GROUP = 'ADD_GROUP';\nexport const DELETE_GROUP = 'DELETE_GROUP';\nexport const SHOW_ALL_GROUPS = 'SHOW_ALL_GROUPS';\nexport const SELECT_GROUP = 'SELECT_GROUP';\nexport const UPDATE_GROUP = 'UPDATE_GROUP';\nexport const CLEAR_GROUP = 'CLEAR_GROUP';\n\nexport const ADD_STUDENT='ADD_STUDENT';\nexport const SHOW_ALL_STUDENTS_BY_GROUP_ID='SHOW_ALL_STUDENTS_BY_GROUP_ID';\nexport const SHOW_ALL_STUDENTS='SHOW_ALL_STUDENTS';\nexport const DELETE_STUDENT='DELETE_STUDENT';\nexport const SET_STUDENT='SET_STUDENT';\nexport const UPDATE_STUDENT='UPDATE_STUDENT';\n\nexport const ADD_ROOM = 'ADD_ROOM';\nexport const DELETE_ROOM = 'DELETE_ROOM';\nexport const SHOW_LIST_OF_ROOMS = 'SHOW_LIST_OF_ROOMS';\nexport const SELECT_ONE_ROOM = 'SELECT_ONE_ROOM';\nexport const UPDATE_ONE_ROOM = 'UPDATE_ONE_ROOM';\nexport const CLEAR_ROOM_ONE = 'CLEAR_ROOM_ONE';\nexport const GET_ALL_ROOM_TYPES = 'GET_ALL_ROOM_TYPES';\nexport const POST_NEW_TYPE = 'POST_NEW_TYPE';\nexport const DELETE_TYPE = 'DELETE_TYPE';\nexport const GET_ONE_NEW_TYPE = 'GET_ONE_NEW_TYPE';\nexport const UPDATE_ONE_TYPE = 'UPDATE_ONE_TYPE';\nexport const CLEAR_ONE_NEW_TYPE = 'CLEAR_ONE_NEW_TYPE';\nexport const SHOW_FREE_ROOMS = 'SHOW_FREE_ROOMS';\nexport const CLEAR_FREE_ROOM = 'CLEAR_FREE_ROOM';\n\nexport const ADD_SUBJECT = 'ADD_SUBJECT';\nexport const DELETE_SUBJECT = 'DELETE_SUBJECT';\nexport const SHOW_ALL_SUBJECTS = 'SHOW_ALL_SUBJECT';\nexport const SELECT_SUBJECT = 'SELECT_SUBJECT';\nexport const UPDATE_SUBJECT = 'UPDATE_SUBJECT';\nexport const CLEAR_SUBJECT = 'CLEAR_SUBJECT';\n\nexport const ADD_DEPARTMENT='ADD_DEPARTMENT';\nexport const GET_ALL_DEPARTMENTS='GET_ALL_DEPARTMENTS';\nexport const CLEAR_DEPARTMENT_FORM='CLEAR_DEPARTMENT_FORM';\nexport const DELETE_DEPARTMENT='DELETE_DEPARTMENT';\nexport const GET_DISABLED_DEPARTMENTS='GET_DISABLED_DEPARTMENTS';\nexport const SET_DISABLED_DEPARTMENT='SET_DISABLED_DEPARTMENT';\nexport const SET_ENABLED_DEPARTMENT='SET_ENABLED_DEPARTMENT';\nexport const GET_DEPARTMENT_BY_ID='GET_DEPARTMENT_BY_ID';\nexport const UPDATE_DEPARTMENT='UPDATE_DEPARTMENT';\n\nexport const SET_SCHEDULE_GROUP_ID = 'SET_SCHEDULE_GROUP_ID';\n\nexport const ADD_SEMESTER = 'ADD_SEMESTER';\nexport const DELETE_SEMESTER = 'DELETE_SEMESTER';\nexport const SHOW_ALL_SEMESTERS = 'SHOW_ALL_SEMESTER';\nexport const SELECT_SEMESTER = 'SELECT_SEMESTER';\nexport const UPDATE_SEMESTER = 'UPDATE_SEMESTER';\nexport const CLEAR_SEMESTER = 'CLEAR_SEMESTER';\nexport const SET_ERROR = 'SET_ERROR';\nexport const SET_ARCHIVED_SEMESTERS = 'SET_ARCHIVED_SEMESTERS';\n\nexport const SET_DISABLED_ROOMS = 'SET_DISABLED_ROOMS';\nexport const SET_DISABLED_TEACHERS = 'SET_DISABLED_TEACHERS';\nexport const SET_DISABLED_GROUPS = 'SET_DISABLED_GROUPS';\nexport const SET_DISABLED_SEMESTERS = 'SET_DISABLED_SEMESTERS';\nexport const SET_DISABLED_SUBJECTS = 'SET_DISABLED_SUBJECTS';\n\nexport const SET_SCHEDULE_TEACHER_ID = 'SET_SCHEDULE_TEACHER_ID';\nexport const SET_TEACHER_SCHEDULE = 'SET_TEACHER_SCHEDULE';\nexport const SET_SEMESTER_LIST = 'SET_SEMESTER_LIST';\nexport const SET_SCHEDULE_SEMESTER_ID = 'SET_SCHEDULE_SEMESTER_ID';\nexport const SET_TEACHER_RANGE_SCHEDULE = 'SET_TEACHER_RANGE_SCHEDULE';\nexport const SET_TEACHER_VIEW_TYPE = 'SET_TEACHER_VIEW_TYPE';\nexport const MOVE_SEMESTER_TO_ARCHIVE = 'MOVE_SEMESTER_TO_ARCHIVE';\n","export const updateObject = (oldObject, updatedValues) => {\n  return {\n    ...oldObject,\n    ...updatedValues\n  };\n};\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    lessons: [],\n    lessonTypes: [],\n    lesson: {},\n    groupId: null,\n    uniqueError: false\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_LESSON_CARD:\n            return updateObject(state, {\n                lessons: state.lessons.concat(action.result)\n            });\n        case actionTypes.SET_LESSONS_CARDS:\n            return updateObject(state, {\n                lessons: action.result\n            });\n        case actionTypes.SET_LESSON_TYPES:\n            return updateObject(state, {\n                lessonTypes: action.result\n            });\n        case actionTypes.DELETE_LESSON_CARD:\n            state.lessons = state.lessons.filter(\n                lesson => lesson.id !== action.result\n            );\n            return updateObject(state, {\n                lessons: state.lessons\n            });\n        case actionTypes.SELECT_LESSON_CARD:\n            let lesson = state.lessons.filter(\n                lesson => lesson.id === action.result\n            )[0];\n            if (!lesson) {\n                lesson = { id: null };\n            }\n            return updateObject(state, {\n                lesson: lesson\n            });\n        case actionTypes.UPDATE_LESSON_CARD:\n            const updatedLessons = [];\n            state.lessons.forEach(lesson => {\n                if (lesson.id === action.result.id) {\n                    lesson = { ...lesson, ...action.result };\n                }\n                updatedLessons.push(lesson);\n            });\n            return updateObject(state, {\n                lessons: updatedLessons,\n                lesson: {}\n            });\n        case actionTypes.SELECT_GROUP_ID:\n            return updateObject(state, {\n                lesson: {},\n                groupId: action.result\n            });\n        case actionTypes.SET_UNIQUE_ERROR:\n            return updateObject(state, {\n                uniqueError: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    temporarySchedules: [],\n    temporarySchedule: {},\n    vacation: {},\n    schedulesAndTemporarySchedules: [],\n    teacherId: null,\n    changedScheduleId: null\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_TEMPORARY_SCHEDULES:\n            return updateObject(state, {\n                temporarySchedules: action.result\n            });\n        case actionTypes.SET_SCHEDULES_AND_TEMPORARY_SCHEDULES:\n            return updateObject(state, {\n                schedulesAndTemporarySchedules: action.result\n            });\n        case actionTypes.SELECT_TEMPORARY_SCHEDULE:\n            return updateObject(state, {\n                temporarySchedule: action.result\n            });\n        case actionTypes.SELECT_VACATION:\n            return updateObject(state, {\n                vacation: action.result\n            });\n        case actionTypes.SELECT_TEACHER_ID:\n            return updateObject(state, {\n                teacherId: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    isSnackbarOpen: false,\n    snackbarType: null,\n    message: null\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_OPEN_SNACKBAR:\n            let type = action.result.type;\n            let message = action.result.message;\n            return updateObject(state, {\n                isSnackbarOpen: action.result.isOpen,\n                snackbarType: type,\n                message: message\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import axios from 'axios';\nimport { TOKEN_BEGIN } from '../constants/tokenBegin';\n\nlet REACT_APP_API_BASE_URL = \"/\";\nif(process.env.REACT_APP_API_BASE_URL !== undefined){\n    REACT_APP_API_BASE_URL = process.env.REACT_APP_API_BASE_URL.trim();\n}\nconst instance = axios.create({\n    baseURL: REACT_APP_API_BASE_URL\n});\n\nconst token = localStorage.getItem('token');\nif (token && token.includes(TOKEN_BEGIN)) {\n    instance.defaults.headers.common.Authorization = token;\n}\n\nexport default instance;\n","export const TOKEN_BEGIN= 'Bearer_';\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\nimport axios from '../../helper/axios';\n\nconst initialState = {\n    token: null,\n    role: null,\n    error: null,\n    activationError: null\n};\n\nconst reducer = (state = initialState, action) => {\n    const response = action.response;\n\n    switch (action.type) {\n        case actionTypes.AUTH_USER_SUCCESS:\n            return updateObject(state, {\n                token: response.token,\n                role: response.role,\n                error: null\n            });\n        case actionTypes.AUTH_USER_ERROR:\n            return updateObject(state, {\n                response,\n                error: { login: action.error }\n            });\n        case actionTypes.AUTH_USER_LOGOUT:\n            delete axios.defaults.headers.common.Authorization;\n\n            localStorage.removeItem('token');\n            localStorage.removeItem('expirationDate');\n            localStorage.removeItem('userRole');\n            return updateObject(state, {\n                response: null,\n                token: null,\n                error: null,\n                role: null\n            });\n        case actionTypes.REGISTER_USER_SUCCESS:\n            return updateObject(state, {\n                response\n            });\n        case actionTypes.REGISTER_USER_ERROR:\n            return updateObject(state, {\n                error: { registration: { reg: action.error } }\n            });\n        case actionTypes.RESET_USER_PASSWORD_SUCCESS:\n            return updateObject(state, {\n                resetPasswordResponse: response\n            });\n        case actionTypes.RESET_USER_PASSWORD_ERROR:\n            return updateObject(state, {\n                error: action.error\n            });\n        case actionTypes.ACTIVATE_USER_SUCCESS:\n            return updateObject(state, {\n                response\n            });\n        case actionTypes.ACTIVATE_USER_ERROR:\n            return updateObject(state, {\n                activationError: action.error\n            });\n        case actionTypes.SET_AUTH_ERROR:\n            return updateObject(state, {\n                error: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    loading: false,\n    scheduleLoading: false,\n    semesterLoading: false\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_LOADING_INDICATOR:\n            return updateObject(state, {\n                loading: action.result\n            });\n        case actionTypes.SET_SCHEDULE_LOADING_INDICATOR:\n            return updateObject(state, {\n                scheduleLoading: action.result\n            });\n        case actionTypes.SET_SEMESTER_LOADING_INDICATOR:\n            return updateObject(state, {\n                semesterLoading: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    items: [],\n    availability: {},\n    itemsIds: [],\n    fullSchedule: [],\n    groupSchedule: {},\n    scheduleType: '',\n    scheduleGroupId: 0,\n    currentSemester: {},\n    defaultSemester:{},\n    viewTeacherScheduleResults: 'block-view'\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_SCHEDULE_ITEMS:\n            return updateObject(state, {\n                items: action.result\n            });\n        case actionTypes.SET_CURRENT_SEMESTER:\n            return updateObject(state, {\n                currentSemester: action.result\n            });\n        case actionTypes.SET_DEFAULT_SEMESTER:\n            return updateObject(state, {\n                defaultSemester: action.result\n            });\n        case actionTypes.CHECK_AVAILABILITY_SCHEDULE:\n            return updateObject(state, {\n                availability: action.result\n            });\n        case actionTypes.ADD_ITEM_TO_SCHEDULE:\n            const id = action.result.id;\n            let itemArr;\n            if (id) {\n                const index = state.items.findIndex(item => {\n                    return item.id === id;\n                });\n                if (index < 0) {\n                    itemArr = state.items.concat(action.result);\n                } else {\n                    state.items.splice(index, 1, action.result);\n                    itemArr = state.items;\n                }\n            } else {\n                itemArr = state.items.concat(action.result);\n            }\n            return updateObject(state, {\n                items: itemArr\n            });\n        case actionTypes.SET_SCHEDULE_TYPE:\n            return updateObject(state, {\n                groupSchedule: {},\n                fullSchedule: [],\n                scheduleType: action.newType\n            });\n        case actionTypes.SET_FULL_SCHEDULE:\n            updateObject(state, {\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n            return updateObject(state, {\n                fullSchedule: action.result\n            });\n        case actionTypes.SET_GROUP_SCHEDULE:\n            return updateObject(state, {\n                groupSchedule: action.result,\n                fullSchedule: [],\n\n            });\n        case actionTypes.SET_ITEM_GROUP_ID:\n            return updateObject(state, {\n                itemGroupId: action.result\n            });\n        case actionTypes.SET_SCHEDULE_GROUP_ID:\n            return updateObject(state, {\n                scheduleGroupId: action.groupId,\n                scheduleTeacherId: null,\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n        case actionTypes.DELETE_ITEM_FROM_SCHEDULE:\n            const index = state.items.findIndex(\n                item => item.id === action.result\n            );\n            state.items.splice(index, 1);\n            const newArr = state.items;\n            return updateObject(state, {\n                items: newArr\n            });\n\n        case actionTypes.SET_SCHEDULE_TEACHER_ID:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                scheduleTeacherId: action.teacherId,\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n        case actionTypes.SET_TEACHER_SCHEDULE:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                teacherSchedule: action.result,\n                scheduleTeacherId:`${action.result.teacher.id}`,\n                groupSchedule: {},\n                fullSchedule: []\n            });\n        case actionTypes.SET_SEMESTER_LIST:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                scheduleTeacherId: null,\n                teacherSchedule: {},\n                groupSchedule: {},\n                fullSchedule: [],\n                semesters: action.result\n            });\n        case actionTypes.SET_SCHEDULE_SEMESTER_ID:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                scheduleTeacherId: null,\n                scheduleSemesterId: action.semesterId,\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n        case actionTypes.SET_TEACHER_RANGE_SCHEDULE:\n            return updateObject(state, {\n                teacherRangeSchedule: action.result,\n                scheduleGroupId: null,\n                teacherSchedule: [],\n                groupSchedule: {},\n                fullSchedule: []\n            });\n        case actionTypes.SET_TEACHER_VIEW_TYPE:\n            return updateObject(state, {\n                viewTeacherScheduleResults: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from \"../actions/actionsType\";\nconst classActions = (\n  state = {\n    classScheduler: [],\n    classScheduleOne: {}\n  },\n  action\n) => {\n  switch (action.type) {\n    case actionTypes.SET_CLASS_SCHEDULE_LIST:\n      return {\n        ...state,\n        classScheduler: [...action.classScheduler]\n      };\n    case actionTypes.ADD_CLASS_SCHEDULE_ONE:\n      return {\n        ...state,\n        classScheduleOne: {},\n        classScheduler: [...state.classScheduler, action.classSchedulOne]\n      };\n    case actionTypes.GET_CLASS_SCHEDULE_LIST:\n      return state;\n    case actionTypes.GET_CLASS_SCHEDULE_ONE:\n      const one = state.classScheduler.filter(\n        classScheduleItem => classScheduleItem.id === action.classSchedulOne\n      );\n      return {\n        ...state,\n        classScheduleOne: one[0]\n      };\n    case actionTypes.DELETE_CLASS_SCHEDULE_ONE:\n      return {\n        ...state,\n        classScheduler: state.classScheduler.filter(\n          classScheduleItem => classScheduleItem.id !== action.classSchedulOne\n        )\n      };\n    case actionTypes.UPDATE_CLASS_SCHEDULE_ONE:\n      let classSchedulerstate = [...state.classScheduler];\n      classSchedulerstate[\n        classSchedulerstate.findIndex(\n          classItem => classItem.id === action.classSchedulOne.id\n        )\n      ] = action.classSchedulOne;\n      return {\n        ...state,\n        classScheduleOne: {},\n        classScheduler: [...classSchedulerstate]\n      };\n    case actionTypes.CLEAR_CLASS_SCHEDULE_ONE:\n      return {\n        ...state,\n        classScheduleOne: {}\n      };\n    default:\n      return state;\n  }\n};\nexport default classActions;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    subjects: [],\n    subject: {},\n    disabledSubjects: []\n};\n\nconst subjects = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_SUBJECT:\n            return updateObject(state, {\n                subjects: state.subjects.concat(action.result),\n                subject: state.subject\n            });\n\n        case actionTypes.DELETE_SUBJECT:\n            state.subjects = state.subjects.filter(\n                subject => subject.id !== action.result\n            );\n            return updateObject(state, {\n                subjects: state.subjects,\n                subject: state.subject\n            });\n\n        case actionTypes.SHOW_ALL_SUBJECTS:\n            return updateObject(state, {\n                subjects: action.result,\n                subject: state.subject\n            });\n\n        case actionTypes.SET_DISABLED_SUBJECTS:\n            return updateObject(state, {\n                disabledSubjects: action.result\n            });\n\n        case actionTypes.SELECT_SUBJECT:\n            let subject = state.subjects.filter(\n                subject => subject.id === action.result\n            )[0];\n            if (!subject) {\n                subject = { id: null };\n            }\n            return updateObject(state, {\n                subjects: state.subjects,\n                subject: subject\n            });\n\n        case actionTypes.UPDATE_SUBJECT:\n            const updatedSubjects = [];\n            state.subjects.forEach(subject => {\n                if (subject.id === action.result.id) {\n                    subject = { ...subject, ...action.result };\n                }\n                updatedSubjects.push(subject);\n            });\n            return updateObject(state, {\n                subjects: updatedSubjects,\n                subject: {}\n            });\n\n        case actionTypes.CLEAR_SUBJECT:\n            return {\n                ...state,\n                subject: {}\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default subjects;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    groups: [],\n    group: {},\n    disabledGroups: []\n};\n\nconst groups = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_GROUP:\n            return updateObject(state, {\n                groups: state.groups.concat(action.result),\n                group: state.group\n            });\n\n        case actionTypes.DELETE_GROUP:\n            state.groups = state.groups.filter(\n                group => group.id !== action.result\n            );\n            return updateObject(state, {\n                groups: state.groups,\n                group: state.group\n            });\n\n        case actionTypes.SHOW_ALL_GROUPS:\n            return updateObject(state, {\n                ...state,\n                groups: action.result\n            });\n        case actionTypes.SET_DISABLED_GROUPS:\n            return updateObject(state, {\n                ...state,\n                disabledGroups: action.result\n            });\n\n        case actionTypes.SELECT_GROUP:\n            let group = state.groups.filter(\n                group => group.id === Number(action.result)\n            )[0];\n\n            if (!group) {\n                group = { id: null };\n            }\n            return updateObject(state, {\n                groups: state.groups,\n                group: group\n            });\n\n        case actionTypes.UPDATE_GROUP:\n            const updatedGroups = [];\n            state.groups.forEach(group => {\n                if (group.id === action.result.id) {\n                    group = { ...group, ...action.result };\n                }\n                updatedGroups.push(group);\n            });\n            return updateObject(state, {\n                groups: updatedGroups,\n                group: {}\n            });\n\n        case actionTypes.CLEAR_GROUP:\n            return {\n                ...state,\n                group: {}\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default groups;\n","import * as actionTypes from '../actions/actionsType';\nfunction compare(a, b) {\n    let comparison = 0;\n    if (a.name > b.name) {\n        comparison = 1;\n    } else if (a.name < b.name) {\n        comparison = -1;\n    }\n    return comparison;\n}\nconst rooms = (\n    state = {\n        rooms: [],\n        oneRoom: {},\n        disabledRooms: []\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.ADD_ROOM:\n            return {\n                ...state,\n                oneRoom: {},\n                rooms: [...state.rooms, action.result].sort(compare)\n            };\n        case actionTypes.DELETE_ROOM:\n            return {\n                ...state,\n                oneRoom: {},\n                rooms: [\n                    ...state.rooms.filter(rooms => rooms.id !== action.result)\n                ]\n            };\n\n        case actionTypes.SHOW_LIST_OF_ROOMS:\n            return {\n                ...state,\n                rooms: [...action.result]\n            };\n        case actionTypes.SET_DISABLED_ROOMS:\n            return {\n                ...state,\n                disabledRooms: [...action.result]\n            };\n        case actionTypes.SELECT_ONE_ROOM:\n            const one = state.rooms.filter(\n                roomItem => roomItem.id === action.result\n            );\n            return {\n                ...state,\n                oneRoom: one[0]\n            };\n        case actionTypes.UPDATE_ONE_ROOM:\n            let roomState = [...state.rooms];\n            roomState[\n                roomState.findIndex(\n                    roomItem => roomItem.id === action.result.id\n                )\n            ] = action.result;\n            return {\n                ...state,\n                oneRoom: {},\n                rooms: [...roomState]\n            };\n        case actionTypes.CLEAR_ROOM_ONE:\n            return {\n                ...state,\n                oneRoom: {}\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default rooms;\n","import * as actionTypes from '../actions/actionsType';\nimport actions from 'redux-form/lib/actions';\nimport { actionType } from '../../constants/actionTypes';\n\nconst roomTypes = (\n    state = {\n        roomTypes: [],\n        oneType: {}\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.POST_NEW_TYPE:\n            return {\n                ...state,\n                roomTypes: [...state.roomTypes, action.result]\n            };\n\n        case actionTypes.GET_ALL_ROOM_TYPES:\n            return {\n                ...state,\n                roomTypes: [...action.result]\n            };\n        case actionTypes.DELETE_TYPE:\n            return {\n                ...state,\n                roomTypes: [\n                    ...state.roomTypes.filter(\n                        roomTypes => roomTypes.id !== action.result\n                    )\n                ]\n            };\n\n            case actionTypes.UPDATE_ONE_TYPE:\n                let updateTypeState = [...state.roomTypes];\n                updateTypeState[\n                    updateTypeState.findIndex(\n                        typeItem => typeItem.id === action.result.id\n                    )\n                ] = action.result;\n                return {\n                    ...state,\n                    oneType: {},\n                    roomTypes: [...updateTypeState]\n                };\n                case actionTypes.GET_ONE_NEW_TYPE:\n                    const one = state.roomTypes.filter(\n                        roomTypeItem => roomTypeItem.id === action.result\n                    );\n                    return {\n                        ...state,\n                        oneType: one[0]\n                    };\n        default:\n            return state;\n    }\n};\n\nexport default roomTypes;\n","import * as actionTypes from '../actions/actionsType';\n\nconst teachersWish = (\n    state = {\n        wishes: [],\n        wish: {},\n        myWishes: {}\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.SELECT_WISH:\n            let wish = state.wishes[0].find(\n                wish => wish.day_of_week === action.result\n            );\n\n            if (!wish) {\n                wish = { day_of_week: null };\n            }\n            return {\n                ...state,\n                wishes: state.wishes,\n                wish: wish\n            };\n\n        case actionTypes.SHOW_ALL_WISH:\n            return {\n                ...state,\n                wishes: [action.result],\n                wish: {}\n            };\n        case actionTypes.SET_MY_TEACHER_WISHES:\n            return {\n                ...state,\n                wish: {},\n                myWishes: action.result\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default teachersWish;\n","import * as actionTypes from '../actions/actionsType';\n\nconst busyRooms = (\n    state = {\n        busyRooms: []\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.SHOW_ALL_BUSY_ROOMS:\n            return {\n                ...state,\n                busyRooms: [action.result]\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default busyRooms;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    semesters: [],\n    semester: {},\n    disabledSemesters: [],\n    archivedSemesters: []\n};\n\nconst semesters = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_SEMESTER:\n            return updateObject(state, {\n                semesters: state.semesters.concat(action.result),\n                semester: state.semester\n            });\n\n        case actionTypes.DELETE_SEMESTER:\n            state.semesters = state.semesters.filter(\n                semester => semester.id !== action.result\n            );\n            return updateObject(state, {\n                semesters: state.semesters,\n                semester: state.semester\n            });\n\n        case actionTypes.SHOW_ALL_SEMESTERS:\n            return updateObject(state, {\n                semesters: action.result,\n                semester: state.semester\n            });\n        case actionTypes.SET_DISABLED_SEMESTERS:\n            return updateObject(state, {\n                disabledSemesters: action.result\n            });\n        case actionTypes.SET_ARCHIVED_SEMESTERS:\n            return updateObject(state, {\n                archivedSemesters: action.result\n            });\n\n        case actionTypes.SELECT_SEMESTER:\n            let semester = state.semesters.filter(\n                semester => semester.id === action.result\n            )[0];\n            if (!semester) {\n                semester = { id: null };\n            }\n            return updateObject(state, {\n                semesters: state.semesters,\n                semester: semester\n            });\n\n        case actionTypes.UPDATE_SEMESTER:\n            const updatedSemesters = [];\n            state.semesters.forEach(semester => {\n                if (semester.id === action.result.id) {\n                    semester = { ...semester, ...action.result };\n                }\n                updatedSemesters.push(semester);\n            });\n            return updateObject(state, {\n                semesters: updatedSemesters,\n                semester: {}\n            });\n\n        case actionTypes.MOVE_SEMESTER_TO_ARCHIVE:\n            const archivedSemester = state.semesters.find(\n                semester => semester.id === action.result\n            );\n            state.semesters = state.semesters.filter(\n                semester => semester.id !== action.result\n            );\n            return updateObject(state, {\n                semesters: state.semesters,\n                archivedSemesters: [\n                    ...state.archivedSemesters,\n                    archivedSemester\n                ]\n            });\n        case actionTypes.CLEAR_SEMESTER:\n            return {\n                ...state,\n                semester: {}\n            };\n        case actionTypes.SET_ERROR:\n            return updateObject(state, {\n                uniqueError: action.result\n            });\n\n        default:\n            return state;\n    }\n};\n\nexport default semesters;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    users: [],\n    user: {}\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_USERS:\n            return updateObject(state, {\n                users: action.result\n            });\n        case actionTypes.SET_USER:\n            return updateObject(state, {\n                user: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport actions from 'redux-form/lib/actions';\n\nconst freeRooms = (\n    state = {\n        freeRooms : [],\n        freeRoom : {}\n    }, \n    action\n) => {\n    switch(action.type) {\n        case actionTypes.SHOW_FREE_ROOMS:\n            return {\n                ...state,\n                freeRooms: action.result\n            };\n        case actionTypes.CLEAR_FREE_ROOM:\n            return {\n                ...state,\n                freeRoom: {}\n            };\n        default:\n            return state;    \n    }\n};\n\nexport default freeRooms;","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    departments: [],\n    department: {},\n    disabledDepartments: []\n};\n\nconst departments = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_DEPARTMENT:\n            return updateObject(state, {\n                departments: state.departments.concat(action.result),\n                department: state.department\n            });\n        case actionTypes.GET_ALL_DEPARTMENTS:\n            let departments = action.result.filter(\n                department => department.disable ===false\n            );\n            let disabledDepartments = action.result.filter(\n                department => department.disable ===true\n            );\n            return updateObject(state, {\n                departments: departments,\n                department: state.department,\n                disabledDepartments: disabledDepartments\n            });\n        case actionTypes.CLEAR_DEPARTMENT_FORM:\n            return {\n                ...state,\n                department: {}\n            };\n        case actionTypes.DELETE_DEPARTMENT:\n            state.departments = state.departments.filter(\n                department => department.id !== action.result.id\n            );\n            state.disabledDepartments = state.disabledDepartments.filter(\n                department => department.id !== action.result.id\n            );\n            return updateObject(state, {\n                departments: state.departments,\n                department: state.department,\n                disabledDepartments: state.disabledDepartments\n            });\n        case actionTypes.GET_DISABLED_DEPARTMENTS:\n            return updateObject(state, {\n                departments: state.departments,\n                department: state.department,\n                disabledDepartments: action.result\n            });\n        case actionTypes.SET_DISABLED_DEPARTMENT:\n            state.departments = state.departments.filter(\n                department => department.id !== action.result.id\n            );\n            state.disabledDepartments.push(action.result)\n            return updateObject(state, {\n                departments: state.departments,\n                department: state.department,\n                disabledDepartments: state.disabledDepartments\n            });\n        case actionTypes.SET_ENABLED_DEPARTMENT:\n            state.disabledDepartments = state.disabledDepartments.filter(\n                department => department.id !== action.result.id\n            );\n            state.departments.push(action.result)\n            return updateObject(state, {\n                departments: state.departments,\n                department: state.department,\n                disabledDepartments: state.disabledDepartments\n            });\n        case actionTypes.GET_DEPARTMENT_BY_ID:\n            let department = state.departments.filter(\n                department => department.id === action.result\n            )[0];\n            if (!department) {\n                department = { id: null };\n            }\n            return updateObject(state, {\n                departments: state.departments,\n                department: department\n            });\n        case actionTypes.UPDATE_DEPARTMENT:\n            let updatedDepartments = [];\n            state.departments.forEach(department => {\n                if (department.id === action.result.id) {\n                    department = { ...department, ...action.result };\n                }\n                updatedDepartments.push(department);\n            });\n            let updatedDefaultDepartments = [];\n            state.disabledDepartments.forEach(department => {\n                if (department.id === action.result.id) {\n                    department = { ...department, ...action.result };\n                }\n                updatedDefaultDepartments.push(department);\n            });\n\n            return updateObject(state, {\n                departments:updatedDepartments,\n                disabledDepartments:updatedDefaultDepartments,\n                department: {}\n            });\n\n        default:\n            return state;\n    }\n};\n\nexport default departments;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    students: [],\n    student: {}\n};\n\nconst students = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_STUDENT:\n            return updateObject(state, {\n                students: state.students.concat(action.result),\n                student: state.student\n            });\n        case actionTypes.SHOW_ALL_STUDENTS_BY_GROUP_ID:\n            return updateObject(state, {\n                ...state,\n                students: action.result\n            });\n        case actionTypes.SHOW_ALL_STUDENTS:\n            return updateObject(state, {\n                ...state,\n                students: action.result\n            });\n        case actionTypes.DELETE_STUDENT:\n            state.students = state.students.filter(\n                student => student.id !== action.result\n            );\n            return updateObject(state, {\n                students: state.students,\n                student: state.student\n            });\n        case actionTypes.SET_STUDENT:\n            let student = state.students.filter(\n                student => student.id === Number(action.result)\n            )[0];\n\n            if (!student) {\n                student = { id: null };\n            }\n            return updateObject(state, {\n                students: state.students,\n                student: student\n            });\n        case actionTypes.UPDATE_STUDENT:\n            const updatedStudents = [];\n            state.students.forEach(student => {\n                if (student.id === action.result.id) {\n                    student = { ...student, ...action.result };\n                }\n                updatedStudents.push(student);\n            });\n            return updateObject(state, {\n                students: updatedStudents,\n                student: {}\n            });\n        default:\n            return state;\n    }\n};\n\nexport default students;","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport teachers from './teachers';\nimport lesson from './lesson';\nimport temporarySchedule from './temporarySchedule';\nimport snackbar from './snackbar';\nimport auth from './auth';\nimport loadingIndicator from './loadingIndicator';\nimport schedule from './schedule';\nimport classActions from './class';\nimport subjects from './subjects';\nimport groups from './groups';\nimport rooms from './rooms';\nimport roomTypes from './roomTypes';\nimport teachersWish from './teachersWish';\nimport busyRooms from './busyRooms';\nimport semesters from './semesters';\nimport users from './users';\nimport freeRooms from './freeRooms';\nimport departments from './departments';\nimport students from './students';\n\nconst rootReducer = combineReducers({\n    lesson,\n    temporarySchedule,\n    auth,\n    snackbar,\n    schedule,\n    users,\n    loadingIndicator,\n    classActions,\n    teachers,\n    subjects,\n    groups,\n    rooms,\n    roomTypes,\n    teachersWish,\n    busyRooms,\n    semesters,\n    freeRooms,\n    departments,\n    students,\n\n    form: formReducer\n});\n\nexport default rootReducer;\n","import axios from '../helper/axios';\n\nimport {\n    ACTIVATE_ACCOUNT_URL,\n    LOGIN_URL,\n    LOGOUT_URL,\n    REGISTRATION_URL,\n    RESET_PASSWORD_URL\n} from '../constants/axios';\n\nexport const authUserService = request => {\n    if (\n        request.result.hasOwnProperty('authType') &&\n        request.result.authType === 'google'\n    ) {\n        const response = { data: { token: request.result.token, email: '' } };\n        return response;\n    }\n    return axios.post(LOGIN_URL, request.result).then(response => {\n        return response;\n    });\n};\n\nexport const registerUserService = request => {\n    return axios.post(REGISTRATION_URL, request.result).then(response => {\n        return response;\n    });\n};\n\nexport const resetUserPasswordService = request => {\n    return axios\n        .put(\n            `${RESET_PASSWORD_URL}?email=${request.result.email}`,\n            request.result\n        )\n        .then(response => {\n            return response;\n        });\n};\n\nexport const activateUserService = request => {\n    return axios\n        .put(`${ACTIVATE_ACCOUNT_URL}?token=${request.result}`)\n        .then(response => response);\n};\n\nexport const logoutUserService = () => {\n    return axios.post(LOGOUT_URL).then(response => response);\n};\n","export const CLASS_URL = 'classes';\nexport const GROUP_URL = 'groups';\nexport const LESSON_URL = 'lessons';\nexport const LESSON_TYPES_URL = 'lessons/types';\nexport const LOGIN_URL = 'auth/sign-in';\nexport const GOOGLE_LOGIN_URL = 'auth/google';\nexport const LOGOUT_URL = 'auth/sign-out';\nexport const REGISTRATION_URL = 'auth/sign-up';\nexport const RESET_PASSWORD_URL = 'auth/reset-password';\nexport const ACTIVATE_ACCOUNT_URL = 'auth/activation-account';\nexport const TEACHER_URL = 'teachers';\nexport const ROOM_URL = 'rooms';\nexport const ROOM_TYPES_URL = 'room-types';\nexport const FREE_ROOMS_URL = 'rooms/free';\nexport const SUBJECT_URL = 'subjects';\nexport const STUDENT_URL = 'students';\n\nexport const FULL_SCHEDULE_URL = 'schedules/full/semester?semesterId=';\nexport const GROUP_SCHEDULE_URL = 'schedules/full/groups?semesterId=';\nexport const TEACHER_WISHES = 'teacher_wishes';\nexport const SCHEDULE_SEMESTER_ITEMS_URL = 'schedules/semester';\nexport const SCHEDULE_ITEMS_URL = 'schedules';\nexport const CURRENT_SEMESTER_URL = 'semesters/current';\nexport const DEFAULT_SEMESTER_URL = 'semesters/default';\n\nexport const TEMPORARY_SCHEDULE_URL = 'temporary-schedules';\nexport const TEMPORARY_SCHEDULE_RANGE_URL = 'temporary-schedules/add-range';\nexport const TEACHER_TEMPORARY_SCHEDULE = 'schedules/full/teachers/date-range';\n\nexport const STUDENTS_TO_GROUP_FILE='students/import?groupId='\n\nexport const SCHEDULE_CHECK_AVAILABILITY_URL = 'schedules/data-before';\nexport const BUSY_ROOMS = 'schedules/full/rooms';\nexport const ROOMS_AVAILABILITY = 'rooms/available';\nexport const SEMESTERS_URL = 'semesters';\nexport const GROUPS_URL = 'groups';\nexport const TEACHER_SCHEDULE_URL = 'schedules/full/teachers?semesterId=';\n\nexport const DISABLED_ROOMS_URL = 'rooms/disabled';\nexport const DISABLED_TEACHERS_URL = 'teachers/disabled';\nexport const DISABLED_GROUPS_URL = 'groups/disabled';\nexport const DISABLED_SEMESTERS_URL = 'semesters/disabled';\nexport const DISABLED_SUBJECTS_URL = 'subjects/disabled';\n\nexport const USERS_URL = 'users/with-role-user';\nexport const USER_PROFILE = 'users/profile';\nexport const UPDATE_USER_PROFILE = 'users/change-profile';\nexport const TEACHERS_WITHOUT_ACCOUNT_URL = 'not-registered-teachers';\nexport const MERGE_USER_AND_TEACHER_URL = 'managers/teacher_credentials';\n\nexport const MY_TEACHER_WISHES_URL = 'teacher_wishes/my-wishes';\n\nexport const PUBLIC_CLASSES_URL = 'public/classes';\nexport const PUBLIC_GROUP_URL = 'public/groups';\nexport const PUBLIC_TEACHER_URL = 'public/teachers';\nexport const PUBLIC_SEMESTERS_URL = 'public/semesters';\n\nexport const PUBLIC_DOWNLOAD_GROUP_SCHEDULE_URL =\n    '/download/schedule-for-group-in-pdf';\nexport const PUBLIC_DOWNLOAD_TEACHER_SCHEDULE_URL =\n    '/download/schedule-for-teacher-in-pdf';\n\nexport const FOR_TEACHER_SCHEDULE_URL = 'schedules/teacher';\nexport const SEMESTER_COPY_URL = '/schedules/copy-schedule';\nexport const CLEAR_SCHEDULE_URL = '/schedules/delete-schedules';\nexport const TEACHER_SCHEDULE_BY_DATE_RANGE_URL = 'schedules/full/teachers/date-range';\n\nexport const COPY_LESSON_URL = '/lessons/copy-lesson-for-groups';\nexport const LESSONS_FROM_SEMESTER_COPY_URL = '/lessons/copy-lessons';\nexport const SCHEDULE_ITEM_ROOM_CHANGE = '/schedules/by-room';\nexport const CREATE_ARCHIVE_SEMESTER = '/archive';\nexport const ARCHIVED_SEMESTERS_URL = '/archive/all-semesters';\n\nexport const DEPARTMENT_URL=\"/departments\";\n","import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nvar supportedLangs = ['en', 'uk'];\nvar userLang = (navigator.language || navigator.userLanguage).slice(0, 2);\nexport const lang = supportedLangs.find(i => i === userLang) || 'en';\n\ni18n.use(LanguageDetector)\n    .use(initReactI18next)\n    .use(Backend)\n    .init({\n        lng: lang,\n        backend: {\n            loadPath: '/assets/i18n/translations/{{lng}}/{{ns}}.json'\n        },\n        fallbackLng: 'en',\n        debug: false,\n        ns: ['formElements', 'validationMessages', 'common', 'serviceMessages'],\n        defaultNS: 'common',\n        keySeparator: false,\n        useDataAttrOptions: true,\n        interpolation: {\n            escapeValue: false,\n            formatSeparator: ','\n        },\n        react: {\n            wait: true\n        }\n    });\n\nexport default i18n;\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { authUserService } from '../services/authService';\n\nimport { TOKEN_BEGIN } from '../constants/tokenBegin';\n\nimport axios from '../helper/axios';\nimport i18n from '../helper/i18n';\n\nexport function* authSaga(payload) {\n    try {\n        const response = yield call(authUserService, payload);\n\n        const jwtDecode = require('jwt-decode');\n        const token = response.data.token;\n        const email = response.data.email;\n        const decodedJWT = jwtDecode(token);\n        const expirationDate = new Date(decodedJWT.exp * 1000);\n\n        axios.defaults.headers.common.Authorization = TOKEN_BEGIN + token;\n\n        yield localStorage.setItem('token', TOKEN_BEGIN + token);\n        yield localStorage.setItem('expirationDate', expirationDate);\n        yield localStorage.setItem('userRole', decodedJWT.roles);\n        yield localStorage.setItem('email', email ? email : decodedJWT.sub);\n\n        yield put({\n            type: actionTypes.AUTH_USER_SUCCESS,\n            response: { token, role: decodedJWT.roles, email }\n        });\n\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n\n        yield put({\n            type: actionTypes.AUTH_USER_AUTO_LOGOUT,\n            expirationTime: decodedJWT.exp * 1000 - new Date().getTime()\n        });\n    } catch (error) {\n        yield put({\n            type: actionTypes.AUTH_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { logoutUserService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* logoutSaga(payload) {\n    try {\n        yield call(logoutUserService, payload);\n        yield put({\n            type: actionTypes.AUTH_USER_LOGOUT\n        });\n    } catch (error) {\n        yield put({\n            type: actionTypes.AUTH_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n    }\n}\n","import { call, delay } from 'redux-saga/effects';\n\nimport { logoutSaga } from './logoutSaga';\n\nexport function* checkAuthTimeoutSaga(action) {\n    yield delay(action.expirationTime);\n    yield call(logoutSaga);\n}\n","import { put } from 'redux-saga/effects';\n\nimport * as actionTypes from '../redux/actions/actionsType';\n\nexport function* checkAuthStateSaga(payload) {\n    if (!payload.token) {\n        yield put({ type: actionTypes.AUTH_USER_LOGOUT });\n    } else {\n        const expirationDate = new Date(localStorage.getItem('expirationDate'));\n        if (expirationDate <= new Date()) {\n            yield put({ type: actionTypes.AUTH_USER_LOGOUT });\n        } else {\n            yield put({\n                type: actionTypes.AUTH_USER_SUCCESS,\n                response: {\n                    token: payload.token,\n                    role: payload.role\n                }\n            });\n        }\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { registerUserService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* registrationSaga(payload) {\n    try {\n        const response = yield call(registerUserService, payload);\n        yield put({ type: actionTypes.REGISTER_USER_SUCCESS, response });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    } catch (error) {\n        yield put({\n            type: actionTypes.REGISTER_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { activateUserService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* activateUserSaga(payload) {\n    try {\n        const response = yield call(activateUserService, payload);\n        yield put({ type: actionTypes.ACTIVATE_USER_SUCCESS, response });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    } catch (error) {\n        yield put({\n            type: actionTypes.ACTIVATE_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { resetUserPasswordService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* resetUserPasswordSaga(payload) {\n    try {\n        const response = yield call(resetUserPasswordService, payload);\n        yield put({ type: actionTypes.RESET_USER_PASSWORD_SUCCESS, response });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    } catch (error) {\n        yield put({\n            type: actionTypes.RESET_USER_PASSWORD_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { takeLatest, takeEvery } from 'redux-saga/effects';\n\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { authSaga } from './authSaga';\nimport { logoutSaga } from './logoutSaga';\nimport { checkAuthTimeoutSaga } from './checkAuthTimeoutSaga';\nimport { checkAuthStateSaga } from './checkAuthStateSaga';\nimport { registrationSaga } from './registrationSaga';\nimport { activateUserSaga } from './activateUserSaga';\nimport { resetUserPasswordSaga } from './resetUserPasswordSaga';\n\nexport default function* watchUserAuthentication() {\n    yield takeLatest(actionTypes.REGISTER_USER, registrationSaga);\n    yield takeLatest(actionTypes.ACTIVATE_USER, activateUserSaga);\n    yield takeLatest(actionTypes.RESET_USER_PASSWORD, resetUserPasswordSaga);\n    yield takeLatest(actionTypes.AUTH_USER, authSaga);\n    yield takeEvery(actionTypes.AUTH_USER_CHECK_STATE, checkAuthStateSaga);\n    yield takeEvery(actionTypes.AUTH_USER_AUTO_LOGOUT, checkAuthTimeoutSaga);\n    yield takeLatest(actionTypes.AUTH_USER_INITIATE_LOGOUT, logoutSaga);\n}\n","import { fork } from 'redux-saga/effects';\nimport watchUserAuthentication from './watchers';\n\nexport default function* startForman() {\n  yield fork(watchUserAuthentication);\n}","import * as moment from 'moment';\nimport {\n    checkUniqClassName,\n    checkUniqueGroup,\n    checkUniqueRoomName,\n    checkUniqueSubject,\n    checkUniqWish,\n    timeIntersectService,\n    checkUniqSemester, checkUniqueDepartment\n} from './storeValidation';\nimport i18n from '../helper/i18n';\nimport { validation } from '../constants/validation';\n\nexport const required = value =>\n    value ? undefined : i18n.t('validationMessages:required_message');\n\nexport const lessThanZero = value =>\n    value > 0\n        ? undefined\n        : i18n.t('validationMessages:bigger_than_zero_message');\n\nconst minLength = min => value =>\n    value && value.length < min\n        ? i18n.t('validationMessages:bigger_than_char_message', { min: min })\n        : undefined;\n\nexport const minLengthValue = minLength(3);\n\nconst maxLength = max => value =>\n    value && value.length > max\n        ? i18n.t('validationMessages:less_than_char_message', {\n              max: max\n          })\n        : undefined;\n\nexport const maxLengthValue = maxLength(55);\n\nexport const lessThanTime = (value, previousValue, allValues) => {\n    const otherField = 'endTime';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'HH:mm').toDate() <=\n        moment(allValues.values[otherField], 'HH:mm').toDate() &&\n        allValues.values[otherField] !== undefined\n        ? undefined\n        : i18n.t('validationMessages:less_than_field_message', {\n              field: i18n.t('formElements:class_to_label')\n          });\n};\n\nexport const greaterThanTime = (value, previousValue, allValues) => {\n    const otherField = 'startTime';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'HH:mm').toDate() >=\n        moment(allValues.values[otherField], 'HH:mm').toDate()\n        ? undefined\n        : i18n.t('validationMessages:bigger_than_field_message', {\n              field: i18n.t('formElements:class_from_label')\n          });\n};\n\nexport const uniqueClassName = value => {\n    return checkUniqClassName(value);\n};\n\nexport const uniqueGroup = value => {\n    return checkUniqueGroup(value);\n};\n\nexport const uniqueSubject = value => {\n    return checkUniqueSubject(value);\n};\nexport const uniqueDepartment = value => {\n    return checkUniqueDepartment(value);\n};\nexport const timeIntersect = (value, previousValue, allValues) => {\n    return timeIntersectService(\n        allValues.values['startTime'],\n        allValues.values['endTime']\n    );\n};\n\nexport const uniqueRoomName = value => {\n    return checkUniqueRoomName(value);\n};\n\nexport const uniqWish = value => {\n    return checkUniqWish(value);\n};\n\nexport const email = value =>\n    value && !validation.EMAIL.test(value)\n        ? i18n.t('validationMessages:email')\n        : undefined;\n\nexport const password = value =>\n    value && !validation.PASSWORD.test(value)\n        ? i18n.t('validationMessages:password')\n        : undefined;\n\nconst minYear = min => value =>\n    value < min\n        ? i18n.t('validationMessages:bigger_than_this_year_message', {\n              min: min\n          })\n        : undefined;\nvar today = new Date();\nvar year = today.getFullYear();\nexport const minYearValue = minYear(year);\n\nexport const lessThanDate = (value, previousValue, allValues) => {\n    const otherField = 'endDay';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'DD/MM/YYYY').toDate() <=\n        moment(allValues.values[otherField], 'DD/MM/YYYY').toDate() &&\n        allValues.values[otherField] !== undefined\n        ? undefined\n        : i18n.t('validationMessages:less_than_field_message', {\n              field: i18n.t('formElements:class_to_label')\n          });\n};\n\nexport const greaterThanDate = (value, previousValue, allValues) => {\n    const otherField = 'startDay';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'DD/MM/YYYY').toDate() >=\n        moment(allValues.values[otherField], 'DD/MM/YYYY').toDate()\n        ? undefined\n        : i18n.t('validationMessages:bigger_than_field_message', {\n              field: i18n.t('formElements:class_from_label')\n          });\n};\n\nexport const uniquesSemesterName = value => checkUniqSemester(value);\n","export const links = {\n    HOME_PAGE: '/',\n    ADMIN_PAGE: '/admin',\n    SCHEDULE_PAGE: '/schedules',\n    LOGIN: '/login',\n    ACTIVATION_PAGE: '/activation-page',\n    LOGOUT: '/logout',\n    WISHES: '/wishes',\n    TEACHER_SCHEDULE: '/teacher-schedule',\n    MY_PROFILE: '/my-profile',\n    LessonPage: \"/lessons\",\n    TeacherList: \"/teachers\",\n    GroupList: \"/groups\",\n    Group:\"/group\",\n    Student:\"/student\",\n    Edit:\"/edit\",\n    Delete:\"/delete\",\n    AddStudent:\"/add-student\",\n    SetDisable:\"/set-disable\",\n    ShowStudents:\"/show-students\",\n    IdParam:\"/:id\",\n    IdStudentParam:\"/:idStudent\",\n    ClassScheduleTitle: \"/bells\",\n    RoomList: \"/rooms\",\n    SubjectPage: \"/subjects\",\n    BusyRooms: \"/busy-rooms\",\n    SemesterPage: \"/semesters\",\n    MergeRolePage: \"/users\",\n    Changes: \"/changes\",\n    ScheduleFor:\"/schedule\",\n    Registration:\"/registration\",\n    RESET_PASSWORD:\"/reset-password\",\n    Departments:\"/departments\"\n\n};\n","import React from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { useTranslation } from 'react-i18next';\nimport './LanguageSelector.scss';\n\nconst LanguageSelector = props => {\n    const { i18n } = useTranslation();\n    const langFlags = [\n        {\n            lang: 'en',\n            img: 'https://image.flaticon.com/icons/svg/555/555417.svg',\n            title: 'English'\n        },\n        {\n            lang: 'uk',\n            img: 'https://image.flaticon.com/icons/svg/321/321267.svg',\n            title: 'Українська'\n        }\n    ];\n    let radioLangClasses = {};\n    i18n.languages.forEach(lang => {\n        radioLangClasses[lang] = 'languageItem ';\n    });\n    radioLangClasses[i18n.language] += ' activeLanguage';\n\n    const changeLanguage = event => {\n        radioLangClasses[i18n.language] = 'languageItem ';\n        radioLangClasses[event.target.value] += ' activeLanguage';\n        i18n.changeLanguage(event.target.value);\n    };\n    const renderLangControls = langItem => (\n        <FormControlLabel\n            key={langItem.lang}\n            control={\n                <>\n                    <Radio\n                        color=\"primary\"\n                        value={langItem.lang}\n                        onChange={changeLanguage}\n                    />\n                    <img\n                        className=\"language-icon\"\n                        src={langItem.img}\n                        alt={langItem.lang}\n                        title={langItem.title}\n                    />\n                </>\n            }\n            className={radioLangClasses[langItem.lang]}\n        />\n    );\n\n    return (\n        <RadioGroup\n            row\n            aria-label=\"lang\"\n            name=\"lang\"\n            value={i18n.language}\n            className=\"lang_selector\"\n        >\n            {langFlags.map(langItem => renderLangControls(langItem))}\n        </RadioGroup>\n    );\n};\n\nexport default LanguageSelector;\n","export const colors = {\n    POSSIBILITY: '#f7f7c1',\n    DANGER: '#ff5e54',\n    ALLOW: '#68f271',\n    NOTHING: '#fff',\n    BORDER: '#d3d4d5'\n};\n","import * as actionTypes from \"./actionsType\";\n\nexport const setOpenSnackbar = res => {\n  return {\n    type: actionTypes.SET_OPEN_SNACKBAR,\n    result: res\n  };\n};\n","import * as actionTypes from './actionsType';\n\nexport const setUsers = res => {\n    return {\n        type: actionTypes.SET_USERS,\n        result: res\n    };\n};\nexport const setUser = res => {\n    return {\n        type: actionTypes.SET_USER,\n        result: res\n    };\n};\n","import * as actionTypes from './actionsType';\n\nexport const setLoading = res => {\n    return {\n        type: actionTypes.SET_LOADING_INDICATOR,\n        result: res\n    };\n};\n\nexport const setScheduleLoading = res => {\n    return {\n        type: actionTypes.SET_SCHEDULE_LOADING_INDICATOR,\n        result: res\n    };\n};\n\nexport const setSemesterLoading = res => {\n    return {\n        type: actionTypes.SET_SEMESTER_LOADING_INDICATOR,\n        result: res\n    };\n};\n","import * as actionTypes from './actionsType';\n\nexport const setScheduleItems = res => {\n    return {\n        type: actionTypes.SET_SCHEDULE_ITEMS,\n        result: res\n    };\n};\n\nexport const setCurrentSemester = res => {\n    return {\n        type: actionTypes.SET_CURRENT_SEMESTER,\n        result: res\n    };\n};\nexport const setDefaultSemester = res => {\n    return {\n        type: actionTypes.SET_DEFAULT_SEMESTER,\n        result: res\n    };\n};\n\nexport const addItemToSchedule = res => {\n    return {\n        type: actionTypes.ADD_ITEM_TO_SCHEDULE,\n        result: res\n    };\n};\n\nexport const checkAvailabilitySchedule = res => {\n    return {\n        type: actionTypes.CHECK_AVAILABILITY_SCHEDULE,\n        result: res\n    };\n};\n\nexport const setFullSchedule = result => {\n    return {\n        type: actionTypes.SET_FULL_SCHEDULE,\n        result: result\n    };\n};\nexport const setItemGroupId = res => {\n    return {\n        type: actionTypes.SET_ITEM_GROUP_ID,\n        result: res\n    };\n};\n\nexport const setGroupSchedule = result => {\n    return {\n        type: actionTypes.SET_GROUP_SCHEDULE,\n        result: result\n    };\n};\nexport const deleteItemFromSchedule = res => {\n    return {\n        type: actionTypes.DELETE_ITEM_FROM_SCHEDULE,\n        result: res\n    };\n};\n\nexport const setScheduleType = result => {\n    return {\n        type: actionTypes.SET_SCHEDULE_TYPE,\n        newType: result\n    };\n};\n\nexport const setScheduleGroupId = groupId => {\n    return {\n        type: actionTypes.SET_SCHEDULE_GROUP_ID,\n        groupId: groupId\n    };\n};\n\nexport const setScheduleTeacherId = teacherId => {\n    return {\n        type: actionTypes.SET_SCHEDULE_TEACHER_ID,\n        teacherId: teacherId\n    };\n};\nexport const setTeacherSchedule = result => {\n    return {\n        type: actionTypes.SET_TEACHER_SCHEDULE,\n        result: result\n    };\n};\n\nexport const setSemesterList = result => {\n    return {\n        type: actionTypes.SET_SEMESTER_LIST,\n        result: result\n    };\n};\nexport const setScheduleSemesterId = semesterId => {\n    return {\n        type: actionTypes.SET_SCHEDULE_SEMESTER_ID,\n        semesterId: semesterId\n    };\n};\n\nexport const setTeacherRangeSchedule = result => {\n    return {\n        type: actionTypes.SET_TEACHER_RANGE_SCHEDULE,\n        result: result\n    };\n};\n\nexport const setTeacherViewType = type => {\n    return {\n        type: actionTypes.SET_TEACHER_VIEW_TYPE,\n        result: type\n    };\n};\n","import * as actionsType from './actionsType';\n\nexport const addTeacher = teacher => {\n    return {\n        type: actionsType.ADD_TEACHER,\n        result: teacher\n    };\n};\n\nexport const setTeacher = teacher => {\n    return {\n        type: actionsType.SET_TEACHER,\n        result: teacher\n    };\n};\n\nexport const deleteTeacher = id => {\n    return {\n        type: actionsType.DELETE_TEACHER,\n        result: id\n    };\n};\n\nexport const selectTeacherCard = res => {\n    return {\n        type: actionsType.SELECT_TEACHER,\n        result: res\n    };\n};\n\nexport const updateTeacherCard = res => {\n    return {\n        type: actionsType.UPDATE_TEACHER,\n        result: res\n    };\n};\n\nexport const showAllTeachers = teachers => {\n    return {\n        type: actionsType.SHOW_ALL,\n        result: teachers\n    };\n};\nexport const getAllTeachersByDepartmentId=teachers=>{\n    return{\n        type:actionsType.GET_TEACHERS_BY_DEPARTMENT,\n        result:teachers\n    }\n}\n\nexport const setDisabledTeachers = teachers => {\n    return {\n        type: actionsType.SET_DISABLED_TEACHERS,\n        result: teachers\n    };\n};\n","import * as actionsType from './actionsType';\n\nexport const selectWishCard = res => {\n    return {\n        type: actionsType.SELECT_WISH,\n        result: res\n    };\n};\n\nexport const setMyTeacherWishes = res => {\n    return {\n        type: actionsType.SET_MY_TEACHER_WISHES,\n        result: res\n    };\n};\n\nexport const showAllWishes = data => {\n    return {\n        type: actionsType.SHOW_ALL_WISH,\n        result: data\n    };\n};\n","import * as actionTypes from \"./actionsType\";\n\nexport const setClassScheduleList = classScheduler => ({\n  type: actionTypes.SET_CLASS_SCHEDULE_LIST,\n  classScheduler\n});\n\nexport const addClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.ADD_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const getClassScheduleList = () => ({\n  type: actionTypes.GET_CLASS_SCHEDULE_LIST\n});\n\nexport const getClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.GET_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const deleteClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.DELETE_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const updateClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.UPDATE_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const clearClassScheduleOne = () => ({\n  type: actionTypes.CLEAR_CLASS_SCHEDULE_ONE\n});\n","import * as actionTypes from './actionsType';\n\nexport const showAllGroups = res => {\n    return {\n        type: actionTypes.SHOW_ALL_GROUPS,\n        result: res\n    };\n};\n\nexport const setDisabledGroups = res => {\n    return {\n        type: actionTypes.SET_DISABLED_GROUPS,\n        result: res\n    };\n};\n\nexport const addGroup = res => {\n    return {\n        type: actionTypes.ADD_GROUP,\n        result: res\n    };\n};\n\nexport const deleteGroup = res => {\n    return {\n        type: actionTypes.DELETE_GROUP,\n        result: res\n    };\n};\n\nexport const selectGroup = res => {\n    return {\n        type: actionTypes.SELECT_GROUP,\n        result: res\n    };\n};\n\nexport const updateGroup = res => {\n    return {\n        type: actionTypes.UPDATE_GROUP,\n        result: res\n    };\n};\n\nexport const clearGroup = () => ({\n    type: actionTypes.CLEAR_GROUP\n});\n","import * as actionTypes from './actionsType';\n\nexport const showAllSemesters = res => {\n\n    return {\n        type: actionTypes.SHOW_ALL_SEMESTERS,\n        result: res\n    };\n};\n\nexport const setDisabledSemesters = res => {\n    return {\n        type: actionTypes.SET_DISABLED_SEMESTERS,\n        result: res\n    };\n};\nexport const setArchivedSemesters = res => {\n    return {\n        type: actionTypes.SET_ARCHIVED_SEMESTERS,\n        result: res\n    };\n};\n\nexport const addSemester = res => {\n    return {\n        type: actionTypes.ADD_SEMESTER,\n        result: res\n    };\n};\n\nexport const deleteSemester = res => {\n    return {\n        type: actionTypes.DELETE_SEMESTER,\n        result: res\n    };\n};\n\nexport const selectSemester = res => {\n\n    return {\n        type: actionTypes.SELECT_SEMESTER,\n        result: res\n    };\n};\n\nexport const updateSemester = res => {\n    return {\n        type: actionTypes.UPDATE_SEMESTER,\n        result: res\n    };\n};\n\nexport const moveToArchivedSemester = res => {\n    return {\n        type: actionTypes.MOVE_SEMESTER_TO_ARCHIVE,\n        result: res\n    };\n};\n\nexport const clearSemester = () => ({\n    type: actionTypes.CLEAR_SEMESTER\n});\n\nexport const setError = res => {\n    return {\n        type: actionTypes.SET_ERROR,\n        result: res\n    };\n};\n","import { store } from '../index';\n\nimport { setOpenSnackbar } from '../redux/actions/index';\n\nexport const handleSnackbarOpenService = (isOpen, type, message) => {\n    store.dispatch(\n        setOpenSnackbar({\n            isOpen: isOpen,\n            type: type,\n            message: message\n        })\n    );\n};\n\nexport const handleSnackbarCloseService = () => {\n    const snackbarStore = store.getState().snackbar;\n    store.dispatch(\n        setOpenSnackbar({\n            isOpen: false,\n            type: snackbarStore.snackbarType,\n            message: null\n        })\n    );\n};\n","export const snackbarTypes = {\n    ERROR: 'error',\n    WARNING: 'warning',\n    INFO: 'info',\n    SUCCESS: 'success'\n};\n","import { handleSnackbarOpenService } from '../services/snackbarService';\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport i18n from './i18n';\n\nexport const errorHandler = error => {\n    handleSnackbarOpenService(\n        true,\n        snackbarTypes.ERROR,\n        error.response\n            ? i18n.t(error.response.data.message, error.response.data.message)\n            : 'Error'\n    );\n};\n\nexport const successHandler = message => {\n    handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n};\n\nexport const infoHandler = message => {\n    handleSnackbarOpenService(true, snackbarTypes.INFO, message);\n};","import { reset } from 'redux-form';\nimport { store } from '../index';\n\nexport const resetFormHandler = formName => {\n    store.dispatch(reset(formName));\n};\n","import { store } from '../index';\n\nimport { TEACHER_WISH_FORM } from '../constants/reduxForms';\n\nimport { MY_TEACHER_WISHES_URL, TEACHER_WISHES } from '../constants/axios';\nimport axios from '../helper/axios';\nimport i18n from '../helper/i18n';\n\nimport {\n    selectWishCard,\n    setMyTeacherWishes,\n    showAllWishes\n} from '../redux/actions';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nlet teacherWithWish = {};\n\nexport const showTeacherWish = wishId => {\n    axios\n        .get(TEACHER_WISHES)\n        .then(response => {\n            const teacherWish = response.data;\n            const teacherWishOne = teacherWish.find(teacherWish => {\n                return wishId === +teacherWish.teacher.id;\n            });\n\n            teacherWithWish = teacherWishOne;\n            store.dispatch(showAllWishes(teacherWishOne.teacherWishesList));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const updateTeacherWishService = (data, teacherWishList) => {\n    let updatedWish = [];\n\n    teacherWishList[0].forEach(wish => {\n        if (wish.day_of_week === data.day_of_week) {\n            wish = { ...wish, ...data };\n        }\n        updatedWish.push(wish);\n    });\n\n    const updatatTeacherWishes = {\n        id: teacherWithWish.id,\n        teacherWishesList: updatedWish\n    };\n\n    return axios\n        .put(TEACHER_WISHES, updatatTeacherWishes)\n        .then(response => {\n            store.dispatch(showAllWishes(response.data.teacherWishesList));\n            resetFormHandler(TEACHER_WISH_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:wish_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const selectTeacherWishService = wishDay => {\n    store.dispatch(selectWishCard(wishDay));\n};\n\nexport const getMyTeacherWishesService = () => {\n    axios\n        .get(MY_TEACHER_WISHES_URL)\n        .then(response => {\n            store.dispatch(setMyTeacherWishes(response.data));\n            store.dispatch(showAllWishes(response.data[0].teacherWishesList));\n            teacherWithWish = { id: response.data[0].teacher.id };\n        })\n        .catch(error => errorHandler(error));\n};\n","import { store } from '../index';\n\nimport {\n    setLoading,\n    setScheduleLoading,\n    setSemesterLoading\n} from '../redux/actions/index';\n\nexport const setLoadingService = isLoading => {\n    store.dispatch(setLoading(isLoading));\n};\n\nexport const setScheduleLoadingService = isLoading => {\n    store.dispatch(setScheduleLoading(isLoading));\n};\n\nexport const setSemesterLoadingService = isLoading => {\n    store.dispatch(setSemesterLoading(isLoading));\n};\n","import { store } from '../index';\nimport React, { useEffect } from 'react';\nimport axios from '../helper/axios';\nimport i18n from '../helper/i18n';\nimport { errorHandler, infoHandler, successHandler } from '../helper/handlerAxios';\n\nimport {\n    checkAvailabilitySchedule,\n    deleteItemFromSchedule,\n    setCurrentSemester,\n    setDefaultSemester,\n    setFullSchedule,\n    setGroupSchedule,\n    setItemGroupId,\n    setScheduleGroupId,\n    setScheduleItems,\n    setScheduleSemesterId,\n    setScheduleTeacherId,\n    setScheduleType,\n    setSemesterList,\n    setTeacherSchedule,\n    showAllGroups,\n    showAllTeachers,\n    setTeacherRangeSchedule,\n    setTeacherViewType\n} from '../redux/actions/index';\n\nimport {\n    setLoadingService,\n    setScheduleLoadingService,\n    setSemesterLoadingService\n} from './loadingService';\nimport { handleSnackbarOpenService } from './snackbarService';\n\nimport {\n    CURRENT_SEMESTER_URL,\n    DEFAULT_SEMESTER_URL,\n    FULL_SCHEDULE_URL,\n    GROUP_SCHEDULE_URL,\n    SCHEDULE_CHECK_AVAILABILITY_URL,\n    SCHEDULE_ITEMS_URL,\n    SCHEDULE_SEMESTER_ITEMS_URL,\n    PUBLIC_SEMESTERS_URL,\n    TEACHER_SCHEDULE_URL,\n    PUBLIC_GROUP_URL,\n    PUBLIC_TEACHER_URL,\n    FOR_TEACHER_SCHEDULE_URL,\n    CLEAR_SCHEDULE_URL,\n    ROOMS_AVAILABILITY,\n    SCHEDULE_ITEM_ROOM_CHANGE, TEACHER_URL, SEMESTERS_URL, GROUPS_URL\n} from '../constants/axios';\n\nimport { snackbarTypes } from '../constants/snackbarTypes';\n\nimport { showBusyRooms } from './busyRooms';\nimport { TEACHER_SCHEDULE_FORM } from '../constants/reduxForms';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { useHistory } from 'react-router-dom';\nimport { getAllTeachersByDepartmentId } from '../redux/actions/teachers';\nimport departments from '../redux/reducers/departments';\n\nexport const getCurrentSemesterService = () => {\n    axios\n        .get(CURRENT_SEMESTER_URL)\n        .then(response => {\n            setSemesterLoadingService(false);\n            store.dispatch(setCurrentSemester(response.data));\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t('common:no_current_semester_error')\n            );\n            setSemesterLoadingService(false);\n        });\n};\nexport const getDefaultSemesterService = () => {\n    axios\n        .get(DEFAULT_SEMESTER_URL)\n        .then(response => {\n            setSemesterLoadingService(false);\n            store.dispatch(setDefaultSemester(response.data));\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t('common:no_current_semester_error')\n            );\n            setSemesterLoadingService(false);\n        });\n};\n\nexport const disableDefaultSemesterService=()=>{\n    store.dispatch(setDefaultSemester({}));\n}\n\nexport const getScheduleItemsService = () => {\n    axios\n        .get(CURRENT_SEMESTER_URL)\n        .then(response => {\n            store.dispatch(setCurrentSemester(response.data));\n            getScheduleItemsServiceBySemester(response.data.id);\n            showBusyRooms(response.data.id);\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t('common:no_current_semester_error')\n            );\n            setLoadingService(false);\n        });\n};\n\nconst getScheduleItemsServiceBySemester = semesterId => {\n    axios\n        .get(`${SCHEDULE_SEMESTER_ITEMS_URL}?semesterId=${semesterId}`)\n        .then(response => {\n            store.dispatch(setScheduleItems(response.data));\n            setScheduleLoadingService(false);\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const checkAvailabilityScheduleService = item => {\n    axios\n        .get(\n            SCHEDULE_CHECK_AVAILABILITY_URL +\n                '?classId=' +\n                item.periodId +\n                '&dayOfWeek=' +\n                item.dayOfWeek +\n                '&evenOdd=' +\n                item.evenOdd +\n                '&lessonId=' +\n                item.lessonId +\n                '&semesterId=' +\n                item.semesterId\n        )\n        .then(response => {\n            setLoadingService(false);\n            store.dispatch(checkAvailabilitySchedule(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\nexport const checkAvailabilityChangeRoomScheduleService = item => {\n    axios\n        .get(\n            ROOMS_AVAILABILITY +\n                '?classId=' +\n                item.periodId +\n                '&dayOfWeek=' +\n                item.dayOfWeek +\n                '&evenOdd=' +\n                item.evenOdd +\n                '&semesterId=' +\n                item.semesterId\n        )\n        .then(response => {\n            setLoadingService(false);\n            store.dispatch(\n                checkAvailabilitySchedule({\n                    classSuitsToTeacher: true,\n                    teacherAvailable: true,\n                    rooms: response.data\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\nexport const addItemToScheduleService = item => {\n    axios\n        .post(SCHEDULE_ITEMS_URL, item)\n        .then(response => {\n            getScheduleItemsService();\n        })\n        .catch(err => errorHandler(err));\n};\nexport const editRoomItemToScheduleService = item => {\n    axios\n        .put(\n            SCHEDULE_ITEM_ROOM_CHANGE +\n                '?roomId=' +\n                item.roomId +\n                '&scheduleId=' +\n                item.itemId\n        )\n        .then(response => {\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('common:schedule_title'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n            getScheduleItemsService();\n        })\n        .catch(err => errorHandler(err));\n};\nexport const deleteItemFromScheduleService = itemId => {\n    axios\n        .delete(`${SCHEDULE_ITEMS_URL}/${itemId}`)\n        .then(response => {\n            store.dispatch(deleteItemFromSchedule(itemId));\n            getScheduleItemsService();\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const submitSearchSchedule = values => {\n\n    setScheduleSemesterIdService(values.semester);\n\n    if (values.hasOwnProperty('group') && +values.group > 0) {\n        setScheduleTypeService('group');\n        setScheduleGroupIdService(values.group);\n        getGroupSchedule(values.group, values.semester);\n\n        return;\n    }\n    if (values.hasOwnProperty('teacher') && +values.teacher > 0) {\n        setScheduleTypeService('teacher');\n        // setScheduleGroupIdService(values.teacher);\n        setScheduleTeacherIdService(values.teacher)\n        getTeacherSchedule(values.teacher, values.semester);\n        return;\n    }\n    if (\n        (!values.hasOwnProperty('group') &&\n            !values.hasOwnProperty('teacher')) ||\n        (values.hasOwnProperty('group') &&\n            !values.hasOwnProperty('teacher') &&\n            +values.group === 0) ||\n        (!values.hasOwnProperty('group') &&\n            values.hasOwnProperty('teacher') &&\n            +values.teacher === 0) ||\n        (values.hasOwnProperty('group') &&\n            values.hasOwnProperty('teacher') &&\n            +values.teacher === 0 &&\n            +values.group === 0)\n    ) {\n        setScheduleTypeService('full');\n        getFullSchedule(values.semester);\n        return;\n    }\n};\n\n\nexport const sendTeachersScheduleService = (data) => {\n    //TODO remove hardcode data\n    // let data = {\n    //     teachersId: 'id',\n    //     semesterId: ['abc', 123]\n    // }\n    const supQuery=new URLSearchParams(data).toString();\n    console.log(\"sendTeachersScheduleService\",supQuery)\n\n    //axios\n        // .get(`${SCHEDULE_ITEMS_URL}?${supQuery}`)\n        // .then(response => {\n        //     setLoadingService(false);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:schedule_label'),\n                    actionType: i18n.t('serviceMessages:sent_label')\n                })\n            );\n        // })\n        // .catch(error => errorHandler(error));\n};\n\nexport const setItemGroupIdService = groupId => {\n    store.dispatch(setItemGroupId(groupId));\n};\n\nexport const setScheduleGroupIdService = groupId => {\n\n    store.dispatch(setScheduleGroupId(groupId));\n};\n\nexport const setScheduleTypeService = item => {\n    store.dispatch(setScheduleType(item));\n};\n\n\nexport const getFullSchedule = semesterId => {\n    if(semesterId!==undefined)\n    axios\n        .get(FULL_SCHEDULE_URL + semesterId)\n        .then(response => {\n            store.dispatch(setFullSchedule(response.data));\n        })\n        .catch(err => errorHandler(err));\n\n};\n\n\nexport const getGroupSchedule = (groupId, semesterId) => {\n    if (groupId > 0) {\n        axios\n            .get(GROUP_SCHEDULE_URL + semesterId + '&groupId=' + groupId)\n            .then(response => {\n                store.dispatch(setGroupSchedule(response.data));\n            })\n            .catch(err => errorHandler(err));\n    }\n};\n\n\nexport const getTeacherSchedule = (teacherId, semesterId) => {\n    if (teacherId > 0) {\n        axios\n            .get(TEACHER_SCHEDULE_URL + semesterId + '&teacherId=' + teacherId)\n            .then(response => {\n                store.dispatch(setTeacherSchedule(response.data));\n            })\n            .catch(err => errorHandler(err));\n    }\n};\nexport const setScheduleTeacherIdService = teacherId => {\n    store.dispatch(setScheduleTeacherId(teacherId));\n};\n\nexport const showAllPublicSemestersService = () => {\n    axios\n        .get(PUBLIC_SEMESTERS_URL)\n        .then(response => {\n            store.dispatch(setSemesterList(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\nexport const setScheduleSemesterIdService = semesterId => {\n    store.dispatch(setScheduleSemesterId(semesterId));\n};\n\nexport const showAllPublicGroupsService = (id) => {\n    if(id!==null&&id!==undefined)\n    axios\n        .get(`/${SEMESTERS_URL}/${id}/${GROUPS_URL}`)\n        .then(response => {\n            store.dispatch(showAllGroups(response.data.sort((a, b) => a - b)));\n            if(response.data.length===0) {\n                infoHandler(\n                    i18n.t('serviceMessages:chosen_semester_has_not_groups', {\n                        cardType: i18n.t('formElements:chosen_semester_label'),\n                        actionType: i18n.t('serviceMessages:group_label')\n                    })\n                );\n            }\n        })\n        .catch(err => errorHandler(err));\n};\n\nexport const showAllPublicTeachersService = () => {\n    axios\n        .get(PUBLIC_TEACHER_URL)\n        .then(response => {\n            store.dispatch(showAllTeachers(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\nexport const showAllPublicTeachersByDepartmentService = (departmentId) => {\n    const data=[\n\n        {\n            \"department\": {\n                \"id\": 41,\n                \"name\": \"mat analysi\",\n                \"disable\": false\n            },\n            \"id\": 49,\n            \"name\": \"Svitlana\",\n            \"surname\": \"Боднарук\",\n            \"patronymic\": \"Богданівна\",\n            \"position\": \"доцент\",\n            \"disable\": false,\n            \"email\": \"nasta_2000@i.ua\"\n        },\n\n        {\n            \"department\":{\n                \"id\": 41,\n                \"name\": \"mat analysi\",\n                \"disable\": false\n            },\n            \"id\": 78,\n            \"name\": \"Anna\",\n            \"surname\": \"Романенко\",\n            \"patronymic\": \"Богданівна\",\n            \"position\": \"доцент\",\n            \"disable\": false,\n            \"email\":\"nasta_2000@i.ua\"\n\n        },\n        {\n            \"department\":{\n                \"id\": 41,\n                \"name\": \"mat analysi\",\n                \"disable\": false\n            },\n            \"id\": 79,\n            \"name\": \"Анна\",\n            \"surname\": \"Івах\",\n            \"patronymic\": \"Іванівна\",\n            \"position\": \"доцент\",\n            \"disable\": false,\n            \"email\":\"nasta_2000@i.ua\"\n\n        },\n        {\n            \"department\":{\n                \"id\": 44,\n                \"name\": \"Computer Science1\",\n                \"disable\": false\n            },\n            \"id\": 39,\n            \"name\": \"Ірина\",\n            \"surname\": \"Вернигора\",\n            \"patronymic\": \"Володимирівна\",\n            \"position\": \"доцент\",\n            \"disable\": false,\n            \"email\":\"nasta_2000@i.ua\"\n        },\n        {\n            \"department\": {\n                \"id\": 41,\n                \"name\": \"mat analysi\",\n                \"disable\": false\n            },\n            \"id\": 50,\n            \"name\": \"Світлана\",\n            \"surname\": \"Боднарук\",\n            \"patronymic\": \"Богданівна\",\n            \"position\": \"доцент\",\n            \"disable\": false,\n            \"email\": \"nasta_2000@i.ua\"\n        },\n\n        {\n            \"department\":{\n                \"id\": 41,\n                \"name\": \"mat analysi\",\n                \"disable\": false\n            },\n            \"id\": 51,\n            \"name\": \"Наталія\",\n            \"surname\": \"Романенко\",\n            \"patronymic\": \"Богданівна\",\n            \"position\": \"доцент\",\n            \"disable\": false,\n            \"email\":\"nasta_2000@i.ua\"\n\n        },\n        {\n            \"department\":{\n                \"id\": 41,\n                \"name\": \"mat analysi\",\n                \"disable\": false\n            },\n            \"id\": 52,\n            \"name\": \"Анна\",\n            \"surname\": \"Івах\",\n            \"patronymic\": \"Іванівна\",\n            \"position\": \"доцент\",\n            \"disable\": false,\n            \"email\":\"nasta_2000@i.ua\"\n\n        },\n        {\n            \"department\":{\n                \"id\": 44,\n                \"name\": \"Computer Science1\",\n                \"disable\": false\n            },\n            \"id\": 53,\n            \"name\": \"Ірина\",\n            \"surname\": \"Вернигора\",\n            \"patronymic\": \"Володимирівна\",\n            \"position\": \"доцент\",\n            \"disable\": false,\n            \"email\":\"nasta_2000@i.ua\"\n        }\n    ];\n    function isDepartment(value) {\n        return value ===departmentId;\n    }\n\n    let filtered = data.filter(({department})=>isDepartment(department.id))\n    store.dispatch(getAllTeachersByDepartmentId(filtered));\n    // axios\n    //     .get(`${PUBLIC_TEACHER_URL}/departmentId=${departmentId}`)\n    //     .then(response => {\n    //         store.dispatch(getAllTeachersByDepartmentId(response.data));\n    //     })\n    //     .catch(err => errorHandler(err));\n};\n\nexport const clearTeacherScheduleFormService = () => {\n    resetFormHandler(TEACHER_SCHEDULE_FORM);\n};\n\nexport const getTeacherScheduleService = values => {\n    axios\n        .get(\n            FOR_TEACHER_SCHEDULE_URL +\n                '?from=' +\n                values.startDay.replace(/\\//g, '-') +\n                '&to=' +\n                values.endDay.replace(/\\//g, '-')\n        )\n        .then(response => {\n            setLoadingService(false);\n            store.dispatch(setTeacherRangeSchedule(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const getTeacherScheduleByDateRangeService = (teacherId, to, from) => {\n    axios\n        .get(\n            FOR_TEACHER_SCHEDULE_URL +\n                '?teacherId' +\n                teacherId +\n                '&from=' +\n                from.replace(/\\//g, '-') +\n                '&to=' +\n                to.replace(/\\//g, '-')\n        )\n        .then(response => {})\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const setTeacherServiceViewType = type => {\n    store.dispatch(setTeacherViewType(type));\n};\n\nexport const clearSchedule = semesterId => {\n    axios\n        .delete(CLEAR_SCHEDULE_URL + '?semesterId=' + semesterId)\n        .then(response => {\n            getScheduleItemsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('common:schedule_title'),\n                    actionType: i18n.t('serviceMessages:cleared_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n","import { store } from '../index';\n\nimport { BUSY_ROOMS } from '../constants/axios';\nimport axios from '../helper/axios';\n\nimport { showAllBusyRooms } from '../redux/actions';\nimport { errorHandler } from '../helper/handlerAxios';\n\nexport const showBusyRooms = semesterId => {\n    axios\n        .get(BUSY_ROOMS + '?semesterId=' + semesterId)\n        .then(response => {\n            store.dispatch(showAllBusyRooms(response.data));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n","import * as actionsType from './actionsType';\n\nexport const showAllBusyRooms = data => {\n    return {\n        type: actionsType.SHOW_ALL_BUSY_ROOMS,\n        result: data\n    };\n};\n","export const cssClasses = {\n    SCHEDULE_BOARD: 'schedule-board',\n    IN_BOARD_SECTION: 'in-board-section',\n    IN_BOARD_CARD: 'in-board-card',\n    MORE_ICON: 'more-icon'\n};\n","import React, { useRef } from 'react';\n\nimport './Card.scss';\nimport { colors } from '../../constants/schedule/colors';\n\nimport { setItemGroupIdService } from '../../services/scheduleService';\nimport { cssClasses } from '../../constants/schedule/cssClasses';\n\nconst Card = props => {\n    let className = 'card';\n    if (props.class) {\n        className = className.concat(' ' + props.class);\n    }\n\n    let card = <div className={className}>{props.children}</div>;\n\n    const dragItemNode = useRef();\n    const dragItem = useRef();\n\n    if (props.draggable) {\n        const dragStart = e => {\n            const item = JSON.parse(e.target.childNodes[0].value);\n            const groupId = item.lesson.group.id;\n            const groupTitle = document.getElementById(`group-${groupId}`);\n            groupTitle.style.backgroundColor = colors.ALLOW;\n            const boards = document.getElementsByClassName(`group-${groupId}`);\n\n            setTimeout(() => {\n                groupTitle.style.display = 'flex';\n\n                for (const board of boards) {\n                    board.style.display = 'flex';\n                    if (\n                        board.childNodes[0].classList.contains(\n                            cssClasses.MORE_ICON\n                        ) &&\n                        !board.childNodes[1]\n                    ) {\n                        board.style.background = colors.POSSIBILITY;\n                    }\n                }\n            }, 50);\n\n            setItemGroupIdService(groupId);\n\n            dragItemNode.current = e.target;\n            dragItemNode.current.addEventListener('dragend', handleDragEnd);\n\n            e.dataTransfer.setData('card_id', dragItemNode.current.id);\n        };\n\n        const handleDragEnd = e => {\n            const groupId = +JSON.parse(e.target.childNodes[0].value).lesson\n                .group.id;\n            const groupTitleEl = document.getElementById(`group-${groupId}`);\n\n            const allBoards = document.getElementsByClassName('schedule-board');\n            const groupTitles = document.getElementsByClassName('group-title');\n\n            const boards = document.getElementsByClassName(`group-${groupId}`);\n\n            if (groupTitleEl) {\n                groupTitleEl.style.backgroundColor = colors.NOTHING;\n            }\n            for (const board of boards) {\n                if (board) {\n                    board.style.background = colors.NOTHING;\n                }\n            }\n\n            for (let board of allBoards) {\n                board.style.display = 'flex';\n            }\n\n            for (const groupTitle of groupTitles) {\n                groupTitle.style.display = 'flex';\n            }\n\n            dragItem.current = null;\n            dragItemNode.current.removeEventListener('dragend', handleDragEnd);\n            dragItemNode.current = null;\n        };\n\n        card = (\n            <div\n                id={props.id}\n                className={className}\n                onDragStart={dragStart}\n                draggable={props.draggable}\n            >\n                {props.children}\n            </div>\n        );\n    }\n\n    return <>{card}</>;\n};\n\nexport default Card;\n","import { store } from '../index';\n\nimport Moment from 'moment';\nimport { extendMoment } from 'moment-range';\nimport i18n from '../helper/i18n';\n\nexport const checkUniqClassName = className => {\n    const classId = store.getState().classActions.classScheduleOne.id;\n    var find = false;\n    if (classId) {\n        find = store\n            .getState()\n            .classActions.classScheduler.some(function (value, index, _arr) {\n                return value.class_name === className && value.id !== classId;\n            });\n    } else {\n        find = store\n            .getState()\n            .classActions.classScheduler.some(function (value, index, _arr) {\n                return value.class_name === className;\n            });\n    }\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const timeIntersectService = (startTime, endTime) => {\n    const classId = store.getState().classActions.classScheduleOne.id;\n    const moment = extendMoment(Moment);\n    let find = false;\n    if (startTime && endTime) {\n        const incomeRange = moment.range(\n            moment(startTime, 'HH:mm').toDate(),\n            moment(endTime, 'HH:mm').toDate()\n        );\n        if (classId) {\n            find = store\n                .getState()\n                .classActions.classScheduler.some(function (\n                    value,\n                    index,\n                    _arr\n                ) {\n                    return (\n                        incomeRange.intersect(\n                            moment.range(\n                                moment(value.startTime, 'HH:mm').toDate(),\n                                moment(value.endTime, 'HH:mm').toDate()\n                            )\n                        ) !== null && value.id !== classId\n                    );\n                });\n        } else {\n            find = store\n                .getState()\n                .classActions.classScheduler.some(function (\n                    value,\n                    index,\n                    _arr\n                ) {\n                    return (\n                        incomeRange.intersect(\n                            moment.range(\n                                moment(value.startTime, 'HH:mm').toDate(),\n                                moment(value.endTime, 'HH:mm').toDate()\n                            )\n                        ) !== null\n                    );\n                });\n        }\n    }\n    return find\n        ? i18n.t('validationMessages:intersect_time_error_message')\n        : undefined;\n};\n\nexport const checkUniqLesson = lesson => {\n    const lessons = store.getState().lesson.lessons;\n    let isNotUnique;\n    if (!lesson.id) {\n        isNotUnique = !!lessons.find(\n            storeLesson =>\n                storeLesson.subject.id === +lesson.subject.id &&\n                storeLesson.teacher.id === +lesson.teacher.id &&\n                storeLesson.lessonType === lesson.lessonType\n        );\n    } else {\n        isNotUnique = !!lessons.find(\n            storeLesson =>\n                storeLesson.subject.id === +lesson.subject.id &&\n                storeLesson.teacher.id === +lesson.teacher.id &&\n                storeLesson.lessonType === lesson.lessonType &&\n                storeLesson.id !== +lesson.id\n        );\n    }\n    return !isNotUnique;\n};\n\nexport const checkUniqueRoomName = roomName => {\n    const roomdId = store.getState().rooms.oneRoom.id;\n    let find = false;\n    if (roomdId) {\n        find = store\n        .getState()\n        .rooms.rooms.some(function (value, index, _arr) {\n            return value.name.toUpperCase() === roomName.toUpperCase() && value.id !== roomdId;\n        });\n    } else {\n     find = store\n        .getState()\n        .rooms.rooms.some(function (value, index, _arr) {\n            return value.name.toUpperCase() === roomName.toUpperCase()  ;\n        });\n    }\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const checkUniqueGroup = groupTitle => {\n    if (!groupTitle) {\n        return;\n    }\n    const find = store.getState().groups.groups.some(function (value) {\n        return (\n            value.title.toUpperCase().trim() === groupTitle.toUpperCase().trim()\n        );\n    });\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const checkUniqueSubject = subjectTitle => {\n    if (!subjectTitle) {\n        return;\n    }\n    const find = store.getState().subjects.subjects.some(function (value) {\n        return (\n            value.name.toUpperCase().trim() ===\n            subjectTitle.toUpperCase().trim()\n        );\n    });\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\nexport const checkUniqueDepartment = departmentTitle => {\n    if (!departmentTitle) {\n        return;\n    }\n    const find = store.getState().departments.departments.some(function (value) {\n        return (\n            value.name.toUpperCase().trim() ===\n            departmentTitle.toUpperCase().trim()\n        );\n    });\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const checkUniqWish = wish => {\n    if (!wish) {\n        return;\n    }\n    const find = store.getState().teachersWish.wishes.some(function (value) {\n        return (\n            value.teacherWishesList[0].day_of_week.toUpperCase() ===\n            wish.toUpperCase()\n        );\n    });\n    return find ? 'Day must be unique!' : undefined;\n};\n\nexport const checkUniqSemester = semester => {\n    const semesters = store.getState().semesters.semesters;\n    let isNotUnique;\n    if (!semester.id) {\n        isNotUnique = !!semesters.find(\n            storeSemester =>\n                storeSemester.year === +semester.year &&\n                storeSemester.description.toUpperCase().trim() === semester.description.toUpperCase().trim()\n        );\n    } else {\n        isNotUnique = !!semesters.find(\n            storeSemester =>\n            storeSemester.year=== +semester.year &&\n            storeSemester.description.toUpperCase().trim() === semester.description.toUpperCase().trim() && \n            storeSemester.id !== +semester.id\n        );\n    }\n    \n    return !isNotUnique\n};\n","export const validation = {\n    EMAIL: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n    PASSWORD: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?=.*[!@#$%^&*]).{8,}$/\n};\n","import React from \"react\";\n\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport InputLabel from '@material-ui/core/InputLabel'\n\nimport {renderFromHelper} from './error';\n\nconst renderSelectField = ({\n  input,\n  label,\n  name,\n  id,\n  meta: { touched, error },\n  children,\n  ...custom\n}) => (\n  <FormControl error={touched && !!error}>\n    <InputLabel htmlFor={id}>{label}</InputLabel>\n    <Select\n      native\n      {...input}\n      {...custom}\n      name={name}\n      id={id}\n    >\n      {children}\n    </Select>\n    {renderFromHelper({ touched, error })}\n  </FormControl>\n)\n\nexport default renderSelectField;\n","import React from \"react\";\n\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\n\nexport const renderFromHelper = ({ touched, error }) => {\n  if (!(touched && error)) {\n    return;\n  } else {\n    return <FormHelperText>{touched && error}</FormHelperText>;\n  }\n};\n","import React, { useEffect } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { required } from '../../validation/validateFields';\nimport Button from '@material-ui/core/Button';\nimport renderSelectField from '../../share/renderedFields/select';\nimport { TEACHER_WISH_FORM } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\n\nlet WishForm = props => {\n    const { t } = useTranslation('formElements');\n\n    const { handleSubmit, classScheduler, pristine, submitting, reset } = props;\n\n    const class_on_day = [];\n\n    if (classScheduler.length > 0) {\n        classScheduler.map(classSchedulerOne => {\n            class_on_day.push(classSchedulerOne.class_name);\n        });\n    }\n\n    const days_of_week = [\n        'MONDAY',\n        'TUESDAY',\n        'WEDNESDAY',\n        'THURSDAY',\n        'FRIDAY',\n        'SATURDAY',\n        'SUNDAY'\n    ];\n\n    const wishOne = props.wish;\n    const wishDays = wishOne.day_of_week;\n\n    useEffect(() => {\n        if (wishDays) {\n            initializeFormWish(wishOne);\n        } else {\n            props.initialize();\n        }\n    }, [wishDays]);\n\n    const initializeFormWish = wishOne => {\n        props.initialize({\n            day_of_week: wishOne.day_of_week,\n            evenOdd: wishOne.evenOdd\n        });\n\n        const classStats = [];\n        wishOne.class_status.map(classStatus => {\n            classStats.push(classStatus);\n        });\n\n        for (let i = 0; i < classStats.length; i++) {\n            props.change(\n                `class_number${classStats[i].class_name}`,\n                `${classStats[i].status}`\n            );\n        }\n    };\n\n    return (\n        <form className=\"wish-form\" onSubmit={handleSubmit}>\n            <Field\n                name=\"day_of_week\"\n                className=\"week-days\"\n                component={renderSelectField}\n                label={t('teacher_wish_day')}\n                type=\"text\"\n                validate={[required]}\n                disabled\n            >\n                <option />\n                {days_of_week.map((day_of_week, index) => (\n                    <option key={index} value={`${day_of_week}`}>\n                        {t(`common:day_of_week_${day_of_week}`)}\n                    </option>\n                ))}\n            </Field>\n            {class_on_day.map(class_number => (\n                <Field\n                    key={class_number}\n                    name={`class_number${class_number}`}\n                    component={renderSelectField}\n                    validate={[required]}\n                    label={`${t(\n                        'teacher_wish_class_number'\n                    )}: ${class_number}`}\n                >\n                    <option />\n                    <option value={'OK'}>\n                        {t('common:teacher_wish_class_status_OK')}\n                    </option>\n                    <option value={'GOOD'}>\n                        {t('common:teacher_wish_class_status_GOOD')}\n                    </option>\n                    <option value={'BAD'}>\n                        {t('common:teacher_wish_class_status_BAD')}\n                    </option>\n                </Field>\n            ))}\n            <div className=\"form-buttons-container wish-margin-top\">\n                <Button\n                    className=\"buttons-style\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    type=\"submit\"\n                    disabled={pristine || submitting}\n                >\n                    {t('save_button_label')}\n                </Button>\n                <Button\n                    className=\"buttons-style\"\n                    variant=\"contained\"\n                    type=\"button\"\n                    disabled={pristine || submitting}\n                    onClick={() => {\n                        reset();\n                    }}\n                >\n                    {t('clear_button_label')}\n                </Button>\n            </div>\n        </form>\n    );\n};\nconst mapStateToProps = state => ({ wish: state.teachersWish.wish });\n\nWishForm = reduxForm({\n    form: TEACHER_WISH_FORM\n})(WishForm);\n\nexport default connect(mapStateToProps)(WishForm);\n","export const LESSON_FORM = 'lessonForm';\nexport const TEMPORARY_SCHEDULE_FORM = 'temporaryScheduleForm';\nexport const TEMPORARY_SCHEDULE_VACATION_FORM = 'temporaryScheduleVacationForm';\nexport const GROUP_FORM = 'addGroup';\nexport const ROOM_FORM = 'AddRoom';\nexport const ROOM_FORM_TYPE = 'roomType';\nexport const FREE_ROOMS = 'FREE_ROOMS';\nexport const TEACHER_FORM = 'addTeacher';\nexport const STUDENT_FORM=\"addStudent\";\nexport const CLASS_FORM = 'classForm';\nexport const LOGIN_FORM = 'loginForm';\nexport const REGISTRATION_FORM = 'registrationForm';\nexport const RESET_PASSWORD_FORM = 'resetPasswordForm';\nexport const SUBJECT_FORM = 'addSubject';\nexport const DEPARTMENT_FORM = 'addDepartment';\nexport const TEACHER_WISH_FORM = 'teacherWish';\nexport const SEMESTER_FORM = 'addSemester';\nexport const TEACHER_SCHEDULE_FORM = 'teacherScheduleForm';\nexport const SCHEDULE_SEARCH_FORM = 'GroupSchedulePageTop';\nexport const PROFILE_FORM = 'ProfilePage';\nexport const SEMESTER_COPY_FORM = 'SemesterCopyForm';\nexport const COPY_LESSONS_FROM_SEMESTER_FORM = 'CopyLessonsFromSemesterForm';\n","import axios from '../helper/axios';\nimport { store } from '../index';\nimport { CLASS_URL, PUBLIC_CLASSES_URL } from '../constants/axios';\n\nimport { CLASS_FORM } from '../constants/reduxForms';\n\nimport {\n    addClassScheduleOne,\n    setClassScheduleList,\n    getClassScheduleOne,\n    deleteClassScheduleOne,\n    updateClassScheduleOne,\n    clearClassScheduleOne\n} from '../redux/actions/class';\n\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { setLoadingService } from './loadingService';\n\nexport const getClassScheduleListService = dispatch => {\n    axios\n        .get(CLASS_URL)\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(setClassScheduleList(bufferArray));\n            setLoadingService(false);\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getPublicClassScheduleListService = dispatch => {\n    axios\n        .get(PUBLIC_CLASSES_URL)\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(setClassScheduleList(bufferArray));\n        })\n        .catch(error => {\n            errorHandler(error);\n            setLoadingService(false);\n        });\n};\n\nexport const addClassScheduleOneService = values => {\n    if (values.id) {\n        putAddClassScheduleOneService(values);\n    } else {\n        postAddClassScheduleOneService(values);\n    }\n};\n\nexport const putAddClassScheduleOneService = values => {\n    axios\n        .put(CLASS_URL, values)\n        .then(response => {\n            store.dispatch(updateClassScheduleOne(response.data));\n            resetFormHandler(CLASS_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:class_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const postAddClassScheduleOneService = values => {\n    axios\n        .post(CLASS_URL, values)\n        .then(response => {\n            store.dispatch(addClassScheduleOne(response.data));\n            resetFormHandler(CLASS_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:class_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getClassScheduleOneService = classId => {\n    store.dispatch(getClassScheduleOne(classId));\n};\n\nexport const deleteClassScheduleOneService = classId => {\n    axios\n        .delete(CLASS_URL + `/${classId}`)\n        .then(response => {\n            store.dispatch(deleteClassScheduleOne(classId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:class_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const clearClassScheduleOneService = () => {\n    store.dispatch(clearClassScheduleOne());\n    resetFormHandler(CLASS_FORM);\n};\n","export const userRoles = {\n    USER: 'ROLE_USER',\n    MANAGER: 'ROLE_MANAGER',\n    TEACHER: 'ROLE_TEACHER'\n};\n","export const getFirstLetter=(word)=>{\n    return word!==null?`${word.charAt(0)}.`:\"\";\n}\nexport const getTeacherName=( teacher )=>{\n    const {name,surname,patronymic}=teacher;\n    return `${surname} ${getFirstLetter(name)} ${getFirstLetter(patronymic)}`;\n\n}\nexport const getTeacherFullName=( teacher )=>{\n    const {name,surname,patronymic}=teacher;\n    return `${surname} ${name} ${patronymic}`;\n\n}\nexport const getTeacherForSite=(teacher)=>{\n    const {name,surname,patronymic,position}=teacher;\n    return `${position} ${surname} ${getFirstLetter(name)} ${getFirstLetter(patronymic)}\\n`;\n\n}\nexport const handleTeacherInfo = (teacher) => {\n    const {name,surname,patronymic,position}=teacher;\n    return `${surname} ${name} ${patronymic} (${position})`;\n};\nexport const getTeacherWithPosition = (teacher) => {\n    const {name,surname,patronymic,position}=teacher;\n    return `${position} ${surname} ${name} ${patronymic}`;\n};","import React, { useEffect, useState } from 'react';\n\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport Card from '../../share/Card/Card';\nimport WishForm from '../../components/AddTeacherWishForm/WishForm';\n\nimport {\n    getMyTeacherWishesService,\n    selectTeacherWishService,\n    updateTeacherWishService\n} from '../../services/teacherWishService';\n\nimport { getPublicClassScheduleListService } from '../../services/classService';\n\nimport { FaEdit } from 'react-icons/fa';\nimport { useTranslation } from 'react-i18next';\n\nimport './WishModal.scss';\nimport { userRoles } from '../../constants/userRoles';\nimport { getTeacherFullName } from '../../helper/renderTeacher';\n\nconst WishModal = props => {\n    const { t } = useTranslation('common');\n    const {\n        onCloseWish,\n        teacher,\n        classScheduler,\n        teacherWishes,\n        openWish\n    } = props;\n\n    const [showForm, setShowForm] = useState(false);\n\n    useEffect(() => getPublicClassScheduleListService, []);\n\n    const class_names = [];\n\n    if (classScheduler.length - 1 > 0) {\n        classScheduler.map(classSchedulerOne => {\n            class_names.push(classSchedulerOne.class_name);\n        });\n    }\n\n    let teacherWishList = [];\n\n    if (teacherWishes[0] !== undefined) {\n        teacherWishes.map(wishes => {\n            for (let i = 0; i < wishes.length; i++) {\n                teacherWishList.push(wishes[i]);\n            }\n        });\n    } else {\n        teacherWishList = undefined;\n    }\n\n    const selectWishCard = day => {\n        selectTeacherWishService(day);\n    };\n\n    const teacherWishSubmit = values => {\n        const someWish = {\n            day_of_week: values.day_of_week,\n            evenOdd: values.evenOdd,\n            class_status: []\n        };\n\n        for (let i = 0; i <= classScheduler.length - 1; i++) {\n            let new_class_status = {\n                class_name: class_names[i],\n                status: values[`class_number${class_names[i]}`]\n            };\n\n            someWish.class_status.push(new_class_status);\n        }\n\n        updateTeacherWishService(someWish, props.teacherWishes);\n    };\n\n    const handleClose = () => {\n        onCloseWish();\n        setShowForm(!showForm);\n    };\n\n    return (\n        <Dialog onClose={handleClose} open={openWish} maxWidth=\"lg\">\n            <h2 className=\"modal-teacher-title\">\n                {t('teacher_wish_heading', {\n                    teacherName: getTeacherFullName(teacher)\n                })}\n            </h2>\n\n            <div className=\"cards-container\">\n                <Card class=\"wish-modal\">\n                    {showForm ? (\n                        <WishForm\n                            teacherWishId={teacher.id}\n                            classScheduler={classScheduler}\n                            onSubmit={teacherWishSubmit}\n                            teacherWishList={teacherWishList}\n                            selectWishCard={selectWishCard}\n                        />\n                    ) : (\n                        <>{t('teacher_wish_edit_wish')}</>\n                    )}\n                </Card>\n\n                <section className=\"container-flex-wrap\">\n                    {teacherWishList !== undefined ? (\n                        <div className=\"wish-card\">\n                            {teacherWishList.map((teacherWish, index) => (\n                                <Card class=\"day-week-status\" key={index}>\n                                    <div className=\"cards-btns\">\n                                        <FaEdit\n                                            className=\"svg-btn edit-btn\"\n                                            title={t('edit_hover_title')}\n                                            onClick={() => {\n                                                selectWishCard(\n                                                    teacherWish.day_of_week\n                                                );\n                                                setShowForm(true);\n                                            }}\n                                        />\n                                    </div>\n                                    <h3 className=\"wish-title-day\">\n                                        {t(\n                                            `day_of_week_${teacherWish.day_of_week}`\n                                        )}\n                                    </h3>\n                                    {teacherWish.class_status.map(\n                                        (class_status, index) => (\n                                            <div\n                                                className=\"class-status-block\"\n                                                key={index}\n                                            >\n                                                <span>\n                                                    {t('teacher_wish_class')}{' '}\n                                                    {class_status.class_name}\n                                                </span>\n                                                <span\n                                                    className={`_${class_status.status}`}\n                                                >\n                                                    {t(\n                                                        `teacher_wish_class_status_${class_status.status}`\n                                                    )}\n                                                </span>\n                                            </div>\n                                        )\n                                    )}\n                                </Card>\n                            ))}\n                        </div>\n                    ) : (\n                        <Card class=\"teacher-without-wishes\">\n                            <p>{t('teacher_wish_no_wish')}</p>\n                        </Card>\n                    )}\n                </section>\n            </div>\n        </Dialog>\n    );\n};\n\nWishModal.propTypes = {\n    onCloseWish: PropTypes.func.isRequired,\n    openWish: PropTypes.bool.isRequired\n};\n\nexport default WishModal;\n","import i18n from '../helper/i18n';\nimport { store } from '../index';\nimport axios from '../helper/axios';\nimport {\n    DISABLED_SEMESTERS_URL,\n    SEMESTERS_URL,\n    SEMESTER_COPY_URL,\n    LESSONS_FROM_SEMESTER_COPY_URL,\n    CREATE_ARCHIVE_SEMESTER,\n    ARCHIVED_SEMESTERS_URL, DEFAULT_SEMESTER_URL\n} from '../constants/axios';\nimport { setDisabledSemesters, setError } from '../redux/actions/semesters';\nimport { SEMESTER_FORM } from '../constants/reduxForms';\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { checkUniqSemester } from '../validation/storeValidation';\nimport {\n    addSemester,\n    clearSemester,\n    deleteSemester,\n    selectSemester,\n    showAllSemesters,\n    updateSemester,\n    setArchivedSemesters,\n    moveToArchivedSemester,\n    setScheduleType,\n    setFullSchedule\n} from '../redux/actions/index';\n\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const selectSemesterService = semesterId =>\n    store.dispatch(selectSemester(semesterId));\n\nexport const setUniqueErrorService = isUniqueError =>\n    store.dispatch(setError(isUniqueError));\n\nexport const clearSemesterService = () => {\n    store.dispatch(clearSemester());\n    resetFormHandler(SEMESTER_FORM);\n};\n\nexport const showAllSemestersService = () => {\n    const semesters=[\n        {\n            \"id\": 7,\n            \"description\": \"Семестер для архівування\",\n            \"year\": 2020,\n            \"startDay\": \"19/05/2020\",\n            \"endDay\": \"30/05/2020\",\n            \"currentSemester\": false,\n            \"defaultSemester\":false,\n            \"disable\": false,\n            \"semester_days\": [\n                \"MONDAY\",\n                \"TUESDAY\",\n                \"WEDNESDAY\",\n                \"THURSDAY\",\n                \"FRIDAY\"\n            ],\n            \"semester_classes\": [\n                {\n                    \"id\": 1,\n                    \"startTime\": \"08:20\",\n                    \"endTime\": \"09:40\",\n                    \"class_name\": \"1\"\n                },\n                {\n                    \"id\": 2,\n                    \"startTime\": \"09:50\",\n                    \"endTime\": \"11:10\",\n                    \"class_name\": \"2\"\n                },\n                {\n                    \"id\": 3,\n                    \"startTime\": \"11:30\",\n                    \"endTime\": \"12:50\",\n                    \"class_name\": \"3\"\n                },\n                {\n                    \"id\": 4,\n                    \"startTime\": \"13:00\",\n                    \"endTime\": \"14:20\",\n                    \"class_name\": \"4\"\n                }\n            ]\n        },\n        {\n            \"id\": 6,\n            \"description\": \"Весняна сесія заочники1\",\n            \"year\": 2020,\n            \"startDay\": \"13/06/2020\",\n            \"endDay\": \"31/07/2020\",\n            \"currentSemester\": true,\n            \"defaultSemester\":true,\n            \"disable\": false,\n            \"semester_days\": [\n                \"MONDAY\",\n                \"TUESDAY\",\n                \"WEDNESDAY\",\n                \"THURSDAY\",\n                \"FRIDAY\"\n            ],\n            \"semester_classes\": [\n                {\n                    \"id\": 1,\n                    \"startTime\": \"08:20\",\n                    \"endTime\": \"09:40\",\n                    \"class_name\": \"1\"\n                },\n                {\n                    \"id\": 2,\n                    \"startTime\": \"09:50\",\n                    \"endTime\": \"11:10\",\n                    \"class_name\": \"2\"\n                },\n                {\n                    \"id\": 3,\n                    \"startTime\": \"11:30\",\n                    \"endTime\": \"12:50\",\n                    \"class_name\": \"3\"\n                },\n                {\n                    \"id\": 4,\n                    \"startTime\": \"13:00\",\n                    \"endTime\": \"14:20\",\n                    \"class_name\": \"4\"\n                }\n            ]\n        }\n    ];\n    // store.dispatch(\n    //             showAllSemesters(\n    //                semesters\n    //                     .sort((a, b) => (a.year > b.year ? 1 : -1))\n    //                     .reverse()\n    //             )\n    //         );\n    axios\n        .get(SEMESTERS_URL)\n        .then(response => {\n            store.dispatch(\n                showAllSemesters(\n                    response.data\n                        .sort((a, b) => (a.year > b.year ? 1 : -1))\n                        .reverse()\n                )\n            );\n        })\n        .catch(error => errorHandler(error));\n\n};\n\nconst cardSemester = semester => {\n    const semester_days = [];\n    const semester_classes = [];\n    for (let prop in semester) {\n        if (Object.prototype.hasOwnProperty.call(semester, prop)) {\n            if (\n                prop.indexOf('semester_days_markup_') >= 0 &&\n                semester[prop] === true\n            ) {\n                semester_days.push(prop.substring(21));\n            }\n        }\n        if (Object.prototype.hasOwnProperty.call(semester, prop)) {\n            if (\n                prop.indexOf('semester_classes_markup_') >= 0 &&\n                semester[prop] === true\n            ) {\n                semester_classes.push(\n                    store\n                        .getState()\n                        .classActions.classScheduler.find(\n                            schedule => schedule.id === +prop.substring(24)\n                        )\n                );\n            }\n        }\n    }\n\n    return {\n        id: semester.id,\n        year: +semester.year,\n        description: semester.description,\n        startDay: semester.startDay,\n        endDay: semester.endDay,\n        currentSemester: semester.currentSemester,\n        defaultSemester: semester.defaultSemester,\n        semester_days: semester_days,\n        semester_classes: semester_classes\n    };\n};\n\nexport const removeSemesterCardService = semesterId => {\n    const semester = store\n        .getState()\n        .semesters.semesters.find(item => item.id === semesterId);\n    if (semester.currentSemester === true) {\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.ERROR,\n            i18n.t('serviceMessages:semester_service_is_active')\n        );\n        return;\n    }\n    axios\n        .delete(SEMESTERS_URL + `/${semesterId}`)\n        .then(response => {\n            store.dispatch(deleteSemester(semesterId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nconst switchSaveActions = semester => {\n    if (semester.id) {\n        putSemester(semester);\n    } else {\n        postSemester(semester);\n    }\n};\n\nexport const handleSemesterService = values => {\n    let semester = cardSemester(values);\n    if (!checkUniqSemester(semester)) {\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.ERROR,\n            i18n.t('common:semester_service_is_not_unique')\n        );\n        setUniqueErrorService(true);\n        return;\n    }\n    if (!checkSemesterYears(semester.endDay, semester.startDay, semester.year))\n        return;\n\n    if (semester.currentSemester) {\n        const currentScheduleOld = findCurrentSemester(semester.id);\n        if (currentScheduleOld) {\n            currentScheduleOld.currentSemester = false;\n            axios\n                .put(SEMESTERS_URL, currentScheduleOld)\n                .then(response => {\n                    store.dispatch(updateSemester(response.data));\n                    switchSaveActions(semester);\n                })\n                .catch(error => errorHandler(error));\n        } else {\n            switchSaveActions(semester);\n        }\n    } else {\n        switchSaveActions(semester);\n    }\n};\n\nconst checkSemesterYears = (endDay, startDay, year) => {\n    const dateEndYear = +endDay.substring(endDay.length - 4);\n    const dateStartYear = +startDay.substring(startDay.length - 4);\n    let conf = true;\n    if (year !== dateEndYear || year !== dateStartYear) {\n        conf = window.confirm(\n            i18n.t('serviceMessages:semester_service_not_as_begin_or_end')\n        );\n    }\n    return conf;\n};\nexport const setDefaultSemesterById = dataId => {\n     axios\n    .put(`${DEFAULT_SEMESTER_URL}?semesterId=${dataId}`)\n        .then(response => {\n           store.dispatch(updateSemester(response.data));\n            selectSemesterService(null);\n             getDisabledSemestersService();\n            getArchivedSemestersService();\n             showAllSemestersService();\n             resetFormHandler(SEMESTER_FORM);\n             successHandler(\n                 i18n.t('serviceMessages:back_end_success_operation', {\n                     cardType: i18n.t('formElements:semester_label'),\n                     actionType: i18n.t('serviceMessages:updated_label')\n                 })\n             );\n         })\n        .catch(error => errorHandler(error));\n}\n\nconst putSemester = data => {\n     axios\n    .put(SEMESTERS_URL, data)\n        .then(response => {\n           store.dispatch(updateSemester(response.data));\n            selectSemesterService(null);\n             getDisabledSemestersService();\n            getArchivedSemestersService();\n             showAllSemestersService();\n             resetFormHandler(SEMESTER_FORM);\n             successHandler(\n                 i18n.t('serviceMessages:back_end_success_operation', {\n                     cardType: i18n.t('formElements:semester_label'),\n                     actionType: i18n.t('serviceMessages:updated_label')\n                 })\n             );\n         })\n        .catch(error => errorHandler(error));\n};\nconst postSemester = data => {\n    axios\n        .post(SEMESTERS_URL, data)\n        .then(response => {\n            store.dispatch(addSemester(response.data));\n            resetFormHandler(SEMESTER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nconst findCurrentSemester = semesterId => {\n    return store\n        .getState()\n        .semesters.semesters.find(\n            semesterItem =>\n                semesterItem.currentSemester === true &&\n                semesterItem.id !== semesterId\n        );\n};\nconst findDefaultSemester = semesterId => {\n    return store\n        .getState()\n        .semesters.semesters.find(\n            semesterItem =>\n                semesterItem.defaultSemester === true &&\n                semesterItem.id !== semesterId\n        );\n};\nexport const getDisabledSemestersService = () => {\n    axios\n        .get(DISABLED_SEMESTERS_URL)\n        .then(res => {\n            store.dispatch(setDisabledSemesters(res.data));\n        })\n        .catch(err => errorHandler(err));\n};\n\nexport const setDisabledSemestersService = semester => {\n    semester.disable = true;\n    putSemester(semester);\n};\n\nexport const setEnabledSemestersService = semester => {\n    semester.disable = false;\n    putSemester(semester);\n};\n\nexport const semesterCopy = values => {\n    axios\n        .post(\n            SEMESTER_COPY_URL +\n                '?fromSemesterId=' +\n                values.fromSemesterId +\n                '&toSemesterId=' +\n                values.toSemesterId\n        )\n        .then(response => {\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:copied_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const CopyLessonsFromSemesterService = values => {\n    axios\n        .post(\n            LESSONS_FROM_SEMESTER_COPY_URL +\n                '?fromSemesterId=' +\n                values.fromSemesterId +\n                '&toSemesterId=' +\n                values.toSemesterId\n        )\n        .then(response => {\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:copied_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createArchiveSemesterService = semesterId => {\n    axios\n        .post(CREATE_ARCHIVE_SEMESTER + '/' + semesterId)\n        .then(response => {\n            store.dispatch(moveToArchivedSemester(semesterId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:archived_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getArchivedSemestersService = () => {\n    axios\n        .get(ARCHIVED_SEMESTERS_URL)\n        .then(response => {\n            store.dispatch(setArchivedSemesters(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\n\nexport const viewArchivedSemester = semesterId => {\n    setScheduleType('archived');\n    axios\n        .get(CREATE_ARCHIVE_SEMESTER + '/' + semesterId)\n        .then(response => {\n            store.dispatch(setFullSchedule(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\n","export const days = [\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n    'Sunday'\n];\n\nexport const daysUppercase = [];\ndays.map(day => daysUppercase.push(day.toUpperCase()));\n","import React, { useEffect } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport { required } from '../../validation/validateFields';\nimport renderSelectField from '../../share/renderedFields/select';\nimport { FREE_ROOMS } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\nimport { showAllSemestersService } from '../../services/semesterService';\nimport './freeRoomForm.scss';\nimport { daysUppercase } from '../../constants/schedule/days';\n\nlet FreeRoomForm = props => {\n\n    const { t } = useTranslation('formElements');\n\n    const weeks = ['ODD', 'EVEN', 'WEEKLY'];\n\n    useEffect(() => showAllSemestersService(), []);\n\n    const {\n        handleSubmit,\n        classScheduler,\n        pristine,\n        submitting,\n        onReset\n    } = props;\n\n    const class_names = [];\n\n    if (classScheduler.length - 1 > 0) {\n        classScheduler.map(classSchedulerOne => {\n            class_names.push(classSchedulerOne.class_name);\n        });\n    }\n\n    return (\n        <>\n            <form className=\"freeRoomsItems\" onSubmit={handleSubmit}>\n                <div className=\"roomsItems\">\n                    <Field\n                        name=\"semesterId\"\n                        component={renderSelectField}\n                        label={t('formElements:semester_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {props.semesters.map((semesters, index) => (\n                            <option key={index} value={semesters.id}>\n                                {semesters.description}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"evenOdd\"\n                        component={renderSelectField}\n                        label={t('formElements:week_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {weeks.map((week, index) => (\n                            <option key={index} value={`${week}`}>\n                                {t(`common:${week.toLowerCase()}_week`)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"dayOfWeek\"\n                        component={renderSelectField}\n                        label={t('formElements:day_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {daysUppercase.map((day, index) => (\n                            <option key={index} value={`${day}`}>\n                                {t(`common:day_of_week_${day}`)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"class\"\n                        component={renderSelectField}\n                        label={t('formElements:class_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {class_names.map((classNum, index) => (\n                            <option key={index} value={`${classNum}`}>\n                                {classNum}\n                            </option>\n                        ))}\n                    </Field>\n                </div>\n                <div className=\"form-buttons-container freeRoomsButtons\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                        className=\"buttons-style\"\n                        type=\"submit\"\n                    >\n                        {t('formElements:submit_button_label')}\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        disabled={pristine || submitting}\n                        className=\"buttons-style\"\n                        onClick={onReset}\n                    >\n                        {t('formElements:clear_button_label')}\n                    </Button>\n                </div>\n            </form>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    freeRooms: state.freeRooms.freeRooms,\n    semesters: state.semesters.semesters\n});\n\nFreeRoomForm = reduxForm({\n    form: FREE_ROOMS\n})(FreeRoomForm);\n\nexport default connect(mapStateToProps)(FreeRoomForm);\n","import React, { useEffect, useState } from 'react';\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport Dialog from '@material-ui/core/Dialog';\n\nimport FreeRoomForm from '../../components/FreeRoomForm/freeRoomForm';\nimport { GiCancel } from 'react-icons/gi';\nimport { useTranslation } from 'react-i18next';\nimport { clearFreeRoomsService } from '../../services/freeRoomsService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { showFreeRoomsService } from '../../services/freeRoomsService';\n\nimport './freeRooms.scss';\n\nconst FreeRooms = props => {\n    const { t } = useTranslation('formElements');\n\n    const [open, setOpen] = useState(false);\n\n    const { classScheduler } = props;\n\n    useEffect(() => getClassScheduleListService(), []);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleFormReset = () => {\n        clearFreeRoomsService();\n    };\n\n    const submit = values => {\n        showFreeRoomsService(values);\n    };\n\n    return (\n        <>\n            <span className=\"navLinks\" onClick={handleClickOpen}>\n                {t('find_free_room')}\n            </span>\n\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                maxWidth=\"lg\"\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <div className=\"cards-container \">\n                    <aside className=\"free-rooms__panel\">\n                        <Card className=\"free-rooms-wrapper freeRoomCard\">\n                            <div className=\"freeRoomForms\">\n                                <h2 id=\"form-dialog-title\">\n                                    {t('find_free_room')}\n                                </h2>\n                                <FreeRoomForm\n                                    classScheduler={classScheduler}\n                                    onReset={handleFormReset}\n                                    onSubmit={submit}\n                                />\n                            </div>\n                        </Card>\n                    </aside>\n                    <section className=\"container-flex-wrap wrapper\">\n                        {props.freeRooms.map(freeRoom => (\n                            <Card key={freeRoom.id} className=\"container\">\n                                <div className=\"freeRoomCard\">\n                                    <span> {t('room_label') + ':'} </span>\n                                    <h2 className=\"room-card__number\">\n                                        {freeRoom.name}\n                                    </h2>\n                                    <span>{t('type_label') + ':'}</span>\n                                    <h2 className=\"room-card__number\">\n                                        {freeRoom.type.description}\n                                    </h2>\n                                </div>\n                            </Card>\n                        ))}\n                    </section>\n                </div>\n            </Dialog>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    freeRooms: state.freeRooms.freeRooms\n});\n\nexport default connect(mapStateToProps)(FreeRooms);\n","import axios from '../helper/axios';\nimport { store } from '../index';\n\nimport { showFreeRooms, clearFreeRooms } from '../redux/actions/freeRooms';\nimport { FREE_ROOMS_URL } from '../constants/axios';\nimport { FREE_ROOMS } from '../constants/reduxForms';\n\nimport { errorHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const showFreeRoomsService = elem => {\n    axios\n        .get(\n            FREE_ROOMS_URL +\n                '?dayOfWeek=' +\n                elem.dayOfWeek +\n                '&evenOdd=' +\n                elem.evenOdd +\n                '&classId=' +\n                elem.class +\n                '&semesterId=' +\n                elem.semesterId\n        )\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(showFreeRooms(bufferArray));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const clearFreeRoomsService = () => {\n    store.dispatch(clearFreeRooms());\n    resetFormHandler(FREE_ROOMS);\n};\n","import * as actionsType from './actionsType';\n\nexport const showFreeRooms = freeRooms => {\n    return {\n        type: actionsType.SHOW_FREE_ROOMS,\n        result: freeRooms\n    };\n};\n\nexport const clearFreeRooms = () => ({\n    type: actionsType.CLEAR_FREE_ROOM\n});\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {\n    FaCaretDown,\n    FaClipboardList,\n    FaClock,\n    FaDoorOpen,\n    FaHome,\n    FaRunning,\n    FaSignOutAlt,\n    FaUser\n} from 'react-icons/fa';\nimport Menu from '@material-ui/core/Menu';\nimport Button from '@material-ui/core/Button';\nimport { useTranslation } from 'react-i18next';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { withStyles } from '@material-ui/core/styles';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\n\nimport '../../App.scss';\nimport './Header.scss';\nimport { links } from '../../constants/links';\n\nimport LanguageSelector from '../LanguageSelector/LanguageSelector';\nimport * as colors from '../../constants/schedule/colors';\nimport { getMyTeacherWishesService } from '../../services/teacherWishService';\n\nimport WishModal from '../../containers/WishModal/WishModal';\nimport { getCurrentSemesterService } from '../../services/scheduleService';\n\nimport FreeRooms from '../../containers/FreeRooms/freeRooms';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { setSemesterLoadingService } from '../../services/loadingService';\n\nconst StyledMenu = withStyles({\n    paper: {\n        border: `1px solid ${colors.colors.BORDER}`\n    }\n})(props => (\n    <Menu\n        elevation={0}\n        getContentAnchorEl={null}\n        anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center'\n        }}\n        transformOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center'\n        }}\n        {...props}\n    />\n));\n\nconst StyledMenuItem = withStyles(theme => ({\n    root: {\n        '&:focus': {\n            backgroundColor: theme.palette.primary.main,\n            color: theme.palette.common.white\n        }\n    }\n}))(MenuItem);\n\nconst Header = props => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const handleClick = event => setAnchorEl(event.currentTarget);\n    const handleClose = () => setAnchorEl(null);\n\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\n    const handleClickUserMenu = event => setAnchorElUser(event.currentTarget);\n    const handleCloseUserMenu = () => setAnchorElUser(null);\n\n    const { t } = useTranslation('common');\n\n    const [openWish, setOpenWish] = useState(false);\n    const [teacher, setTeacher] = useState(0);\n\n    useEffect(() => {\n        if (props.userRole === roles.MANAGER) {\n            setSemesterLoadingService(true);\n            getCurrentSemesterService();\n        }\n    }, [props.userRole]);\n\n    const handleClickOpenWish = teacher => {\n        setTeacher(teacher);\n        setOpenWish(true);\n    };\n\n    const handleCloseWish = value => {\n        setOpenWish(false);\n    };\n    const getUserMenu = userRole => {\n        let userMenu = null;\n        if (userRole === null || userRole === undefined) {\n            return (\n                <Link to={links.LOGIN} className=\"navLinks\">\n                    {t('login_title')}\n                </Link>\n            );\n        }\n        switch (userRole) {\n            case roles.MANAGER:\n                userMenu = (\n                    <div className=\"user-menu\">\n                        <Button\n                            aria-controls=\"customized-menu\"\n                            aria-haspopup=\"true\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={handleClickUserMenu}\n                        >\n                            {localStorage.getItem('email')}\n                            <ListItemIcon>\n                                <FaCaretDown fontSize=\"normall\" />\n                            </ListItemIcon>\n                        </Button>\n                        <StyledMenu\n                            id=\"customized-menu\"\n                            anchorEl={anchorElUser}\n                            keepMounted\n                            open={Boolean(anchorElUser)}\n                            onClose={handleCloseUserMenu}\n                        >\n                            <Link\n                                to={links.ADMIN_PAGE}\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaUser fontSize=\"normall\" />\n                                    </ListItemIcon>\n                                    {t('admin_title')}\n                                </StyledMenuItem>\n                            </Link>\n                            <Link\n                                to={links.SCHEDULE_PAGE}\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaClock fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    {t('schedule_title')}\n                                </StyledMenuItem>\n                            </Link>\n                            <span\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaDoorOpen fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    <FreeRooms\n                                        classScheduler={props.classScheduler}\n                                    />\n                                </StyledMenuItem>\n                            </span>\n                            <Link\n                                to={links.MY_PROFILE}\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaUser fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    {t('my_profile')}\n                                </StyledMenuItem>\n                            </Link>\n                            <Link\n                                to={links.LOGOUT}\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaSignOutAlt fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    {t('logout_title')}\n                                </StyledMenuItem>\n                            </Link>\n                        </StyledMenu>\n                    </div>\n                );\n                break;\n            case roles.TEACHER:\n                userMenu = (\n                    <div className=\"user-menu\">\n                        <Button\n                            aria-controls=\"customized-menu\"\n                            aria-haspopup=\"true\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={handleClickUserMenu}\n                        >\n                            {localStorage.getItem('email')}\n                            <ListItemIcon>\n                                <FaCaretDown fontSize=\"normal\" />\n                            </ListItemIcon>\n                        </Button>\n                        <StyledMenu\n                            id=\"customized-menu\"\n                            anchorEl={anchorElUser}\n                            keepMounted\n                            open={Boolean(anchorElUser)}\n                            onClose={handleCloseUserMenu}\n                        >\n                            <Link\n                                to={links.TEACHER_SCHEDULE}\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaClock fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    {t('schedule_title')}\n                                </StyledMenuItem>\n                            </Link>\n                            <span\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={() => {\n                                    handleClickOpenWish(\n                                        props.myWishes[0].teacher\n                                    );\n                                    getMyTeacherWishesService();\n                                    handleCloseUserMenu();\n                                }}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaClipboardList fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    {t('wishes_title')}\n                                </StyledMenuItem>\n                            </span>\n                            <Link\n                                to={links.MY_PROFILE}\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaUser fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    {t('my_profile')}\n                                </StyledMenuItem>\n                            </Link>\n                            <Link\n                                to={links.LOGOUT}\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaSignOutAlt fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    {t('logout_title')}\n                                </StyledMenuItem>\n                            </Link>\n                        </StyledMenu>\n                    </div>\n                );\n                break;\n            default:\n                userMenu = (\n                    <div className=\"user-menu\">\n                        <Button\n                            aria-controls=\"customized-menu\"\n                            aria-haspopup=\"true\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={handleClickUserMenu}\n                        >\n                            {localStorage.getItem('email')}\n                        </Button>\n                        <StyledMenu\n                            id=\"customized-menu\"\n                            anchorEl={anchorElUser}\n                            keepMounted\n                            open={Boolean(anchorElUser)}\n                            onClose={handleCloseUserMenu}\n                        >\n                            <Link\n                                to={links.LOGOUT}\n                                className=\"navLinks\"\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaSignOutAlt fontSize=\"normal\" />\n                                    </ListItemIcon>\n                                    {t('logout_title')}\n                                </StyledMenuItem>\n                            </Link>\n                        </StyledMenu>\n                    </div>\n                );\n        }\n        return userMenu;\n    };\n\n    const roles = props.roles;\n\n    let leftLinks = null;\n    let menu = null;\n    let userMenu = getUserMenu(props.userRole);\n    if (props.userRole === roles.MANAGER) {\n        leftLinks = (\n            <>\n                {props.loading ? (\n                    <span className=\"navLinks nav-semester\">\n                        <CircularProgress size={20} />\n                    </span>\n                ) : (\n                    <span className=\"navLinks nav-semester\">\n                        {t('formElements:semester_label')}:{' '}\n                        {props.currentSemester.description}\n                    </span>\n                )}\n            </>\n        );\n        menu = (\n            <div className=\"menu\">\n                <Button\n                    aria-controls=\"customized-menu\"\n                    aria-haspopup=\"true\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleClick}\n                >\n                    {t('menu_button')}\n                </Button>\n\n                <StyledMenu\n                    id=\"customized-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    <span className=\"navLinks menu-semester\">\n                        {props.currentSemester.description}\n                    </span>\n                    <Link\n                        to={links.HOME_PAGE}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaHome fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('home_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        to={links.SCHEDULE_PAGE}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaClock fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('schedule_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        to={links.ADMIN_PAGE}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaUser fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('admin_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <span\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaDoorOpen fontSize=\"normall\" />\n                            </ListItemIcon>\n                            <FreeRooms classScheduler={props.classScheduler} />\n                        </StyledMenuItem>\n                    </span>\n\n                    <Link\n                        to={links.LOGOUT}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaSignOutAlt fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('logout_title')}\n                        </StyledMenuItem>\n                    </Link>\n                </StyledMenu>\n            </div>\n        );\n    } else if (props.userRole === roles.TEACHER) {\n        menu = (\n            <div className=\"menu\">\n                <Button\n                    aria-controls=\"customized-menu\"\n                    aria-haspopup=\"true\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleClick}\n                >\n                    {t('menu_button')}\n                </Button>\n\n                <StyledMenu\n                    id=\"customized-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    <Link\n                        to={links.HOME_PAGE}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaHome fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('home_title')}\n                        </StyledMenuItem>\n                    </Link>\n                    <StyledMenuItem>\n                        <ListItemIcon>\n                            <FaClipboardList fontSize=\"normall\" />\n                        </ListItemIcon>\n                        <span\n                            className=\"navLinks\"\n                            onClick={() => {\n                                handleClickOpenWish(props.myWishes[0].teacher);\n                                getMyTeacherWishesService();\n                                handleClose();\n                            }}\n                        >\n                            {t('wishes_title')}\n                        </span>\n                    </StyledMenuItem>\n\n                    <Link\n                        to={links.TEACHER_SCHEDULE}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaClock fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('schedule_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        to={links.LOGOUT}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaSignOutAlt fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('logout_title')}\n                        </StyledMenuItem>\n                    </Link>\n                </StyledMenu>\n            </div>\n        );\n    } else if (props.userRole === null || props.userRole === undefined) {\n        menu = (\n            <div className=\"menu\">\n                <Button\n                    aria-controls=\"customized-menu\"\n                    aria-haspopup=\"true\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleClick}\n                >\n                    {t('menu_button')}\n                </Button>\n                <StyledMenu\n                    id=\"customized-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    <Link\n                        to={links.HOME_PAGE}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={ () => {\n                            setAnchorEl(null);\n                        }}\n\n                    >\n                        <StyledMenuItem>\n\n                            <ListItemIcon>\n                                <FaHome fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('home_title')}\n                        </StyledMenuItem>\n                    </Link>\n                    <Link\n                        to={links.LOGIN}\n                        className=\"navLinks\"\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaRunning fontSize=\"normall\" />\n                            </ListItemIcon>\n                            {t('login_title')}\n                        </StyledMenuItem>\n                    </Link>\n                </StyledMenu>\n            </div>\n        );\n    }\n\n    return (\n        <>\n            {props.userRole === roles.TEACHER ? (\n                <>\n                    <WishModal\n                        openWish={openWish}\n                        onCloseWish={handleCloseWish}\n                        teacher={teacher}\n                        teacherWishes={props.teacherWishes}\n                        classScheduler={props.classScheduler}\n                    />\n                </>\n            ) : (\n                ''\n            )}\n            <header className=\"header\">\n                {menu}\n                <nav className=\"header-blocks header-blocks_one\">\n                    <Link to={links.HOME_PAGE} className=\"navLinks\">\n\n                        {t('home_title')}\n                    </Link>\n                    {leftLinks}\n                </nav>\n                <nav className=\"header-blocks header-blocks_two\">\n                    {userMenu}\n                </nav>\n                <nav className=\"header-blocks header-blocks_three\">\n                    <LanguageSelector />\n                </nav>\n            </header>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    myWishes: state.teachersWish.myWishes,\n    classScheduler: state.classActions.classScheduler,\n    currentSemester: state.schedule.currentSemester,\n    teacherWishes: state.teachersWish.wishes,\n    loading: state.loadingIndicator.semesterLoading\n});\n\nexport default connect(mapStateToProps, {})(Header);\n","import { daysUppercase } from '../constants/schedule/days';\n\nexport const makeGroupSchedule = groupSchedule => {\n    let evenArray = [];\n    let oddArray = [];\n    let group = {};\n    let done = false;\n\n    const evenDaysPrepArray = [\n        { day: 'MONDAY', class: [] },\n        { day: 'TUESDAY', class: [] },\n        { day: 'WEDNESDAY', class: [] },\n        { day: 'THURSDAY', class: [] },\n        { day: 'FRIDAY', class: [] },\n        { day: 'SATURDAY', class: [] },\n        { day: 'SUNDAY', class: [] }\n    ];\n    const oddDaysPrepArray = [\n        { day: 'MONDAY', class: [] },\n        { day: 'TUESDAY', class: [] },\n        { day: 'WEDNESDAY', class: [] },\n        { day: 'THURSDAY', class: [] },\n        { day: 'FRIDAY', class: [] },\n        { day: 'SATURDAY', class: [] },\n        { day: 'SUNDAY', class: [] }\n    ];\n\n    if (groupSchedule.schedule && groupSchedule.schedule.length > 0) {\n        group = groupSchedule.schedule[0].group;\n        groupSchedule.schedule[0].days.map(day => {\n            day.classes.map(classItem => {\n                evenDaysPrepArray.map(evenDayPrep => {\n                    if (evenDayPrep.day === day.day) {\n                        evenDayPrep.class[classItem.class.id] = {\n                            class: classItem.class,\n                            card: classItem.weeks.even\n                        };\n                    }\n                });\n\n                oddDaysPrepArray.map(oddDayPrep => {\n                    if (oddDayPrep.day === day.day) {\n                        oddDayPrep.class[classItem.class.id] = {\n                            class: classItem.class,\n                            card: classItem.weeks.odd\n                        };\n                    }\n                });\n            });\n        });\n    }\n\n    oddDaysPrepArray.map(oddDay => {\n        oddDay.class.map((oddClas, clasIndex) => {\n            if (!oddArray.hasOwnProperty(clasIndex)) {\n                oddArray[clasIndex] = { class: oddClas.class, cards: {} };\n            }\n\n            daysUppercase.map(dayArr => {\n                if (!oddArray[clasIndex].cards.hasOwnProperty(dayArr)) {\n                    oddArray[clasIndex].cards[dayArr] = {};\n                }\n            });\n            if (oddClas.card !== null && oddClas.card !== undefined) {\n                // if (oddClas.card.hasOwnProperty('teacherForSite')) {\n                if (oddClas.card.hasOwnProperty('teacher')) {\n                    oddArray[clasIndex].cards[oddDay.day] = {\n                        card: oddClas.card\n                    };\n                }\n            }\n        });\n    });\n\n    evenDaysPrepArray.map(evenDay => {\n        evenDay.class.map((evenClas, clasIndex) => {\n            if (!evenArray.hasOwnProperty(clasIndex)) {\n                evenArray[clasIndex] = { class: evenClas.class, cards: {} };\n            }\n\n            daysUppercase.map(dayArr => {\n                if (!evenArray[clasIndex].cards.hasOwnProperty(dayArr)) {\n                    evenArray[clasIndex].cards[dayArr] = {};\n                }\n            });\n            if (evenClas.card !== null && evenClas.card !== undefined) {\n                // if (evenClas.card.hasOwnProperty('teacherForSite')) {\n                if (evenClas.card.hasOwnProperty('teacher')) {\n                    evenArray[clasIndex].cards[evenDay.day] = {\n                        card: evenClas.card\n                    };\n                }\n            }\n        });\n    });\n    done = true;\n    return {\n        semester: groupSchedule.semester,\n        oddArray,\n        evenArray,\n        group,\n        done\n    };\n};\n\nexport const makeFullSchedule = fullSchedule => {\n    let groupsCount = 0;\n    let groupList = [];\n    let groupListId = new Map([]);\n    let daysPrepArrayFull = [];\n    let done = false;\n    let semester_days = [];\n    let semester_classes = [];\n\n    if (fullSchedule.schedule) {\n        groupsCount = fullSchedule.schedule.length;\n        semester_days = fullSchedule.semester.semester_days;\n        semester_classes = fullSchedule.semester.semester_classes;\n\n        fullSchedule.schedule.map(group => {\n            groupList.push(group.group);\n            groupListId.set(group.group.id, {});\n        });\n        groupList = groupList.sort((a, b) =>\n            a.title > b.title ? 1 : b.title > a.title ? -1 : 0\n        );\n\n        fullSchedule.semester.semester_days.map(day => {\n            let prep_schedule_array = [];\n            fullSchedule.semester.semester_classes.map(classItem => {\n                const oddArray = [];\n                const evenArray = [];\n                groupList.forEach((groupItem, groupIndex) => {\n                    const groupFull = fullSchedule.schedule.find(\n                        groupFullIterate =>\n                            groupFullIterate.group.id === groupItem.id\n                    );\n                    const dayFull = groupFull.days.find(\n                        dayFullIterate => dayFullIterate.day === day\n                    );\n                    const classFull = dayFull.classes.find(\n                        dayFullIterable =>\n                            dayFullIterable.class.id === classItem.id\n                    );\n                    oddArray.push({\n                        group: groupItem,\n                        card: classFull.weeks.odd\n                    });\n                    evenArray.push({\n                        group: groupItem,\n                        card: classFull.weeks.even\n                    });\n                });\n                prep_schedule_array.push({\n                    class: classItem,\n                    cards: { odd: oddArray, even: evenArray }\n                });\n            });\n            daysPrepArrayFull.push({ day, classes: prep_schedule_array });\n        });\n        done = true;\n    }\n\n    return {\n        semester: fullSchedule.semester,\n        schedule: fullSchedule.schedule,\n        semester_classes,\n        semester_days,\n        groupsCount: groupsCount,\n        groupList: groupList,\n        resultArray: daysPrepArrayFull,\n        done\n    };\n};\n\nexport const makeTeacherSchedule = teacherSchedule => {\n    let teacher = {};\n    let evenArray = [];\n    let oddArray = [];\n    let oddDays = [];\n    let evenDays = [];\n    let oddClasses = [];\n    let evenClasses = [];\n    let done = false;\n\n    if (teacherSchedule && teacherSchedule.days) {\n        teacher = teacherSchedule.teacher;\n\n        teacherSchedule.days.map(dayTeacher => {\n            dayTeacher.odd.classes.map(clas => {\n                if (\n                    oddClasses.findIndex(\n                        oddClass => oddClass.id === clas.class.id\n                    ) < 0\n                ) {\n                    oddClasses.push(clas.class);\n                }\n                if (oddDays.indexOf(dayTeacher.day) < 0) {\n                    oddDays.push(dayTeacher.day);\n                }\n                if (!(clas.class.id in oddArray)) {\n                    oddArray[clas.class.id] = [];\n                }\n\n                oddArray[clas.class.id].push({\n                    day: dayTeacher.day,\n                    cards: clas.lessons\n                });\n            });\n\n            dayTeacher.even.classes.map(clas => {\n                if (\n                    evenClasses.findIndex(\n                        evenClass => evenClass.id === clas.class.id\n                    ) < 0\n                ) {\n                    evenClasses.push(clas.class);\n                }\n                if (evenDays.indexOf(dayTeacher.day) < 0) {\n                    evenDays.push(dayTeacher.day);\n                }\n                if (!(clas.class.id in evenArray)) {\n                    evenArray[clas.class.id] = [];\n                }\n\n                evenArray[clas.class.id].push({\n                    day: dayTeacher.day,\n                    cards: clas.lessons\n                });\n            });\n        });\n        done = true;\n    }\n\n\n    return {\n        done,\n        teacher,\n        semester: teacherSchedule.semester,\n        odd: {\n            days: oddDays,\n            classes: oddClasses.sort((a, b) =>\n                a.startTime > b.startTime\n                    ? 1\n                    : b.startTime > a.startTime\n                    ? -1\n                    : 0\n            ),\n            cards: oddArray\n        },\n        even: {\n            days: evenDays,\n            classes: evenClasses.sort((a, b) =>\n                a.startTime > b.startTime\n                    ? 1\n                    : b.startTime > a.startTime\n                    ? -1\n                    : 0\n            ),\n            cards: evenArray\n        }\n    };\n};\n","export const disabledCard = {\n    SHOW: 'show',\n    HIDE: 'hide'\n};\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './modal.scss';\n\nimport i18n from 'i18next';\nimport { disabledCard } from '../../../constants/disabledCard';\nimport './linkToMeetingDialog.scss'\nexport const LinkToMeetingDialog = props => {\n    const { onClose, cardId, isHide, open,linkToMeeting} = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n\n    return (\n        <Dialog id=\"my-dialog\"\n\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\" className=\"confirm-dialog\">\n                <>\n                    {isHide ? (\n                        <>\n                            {isHide === disabledCard.HIDE ? (\n                                <>{i18n.t('common:do_you_wanna_disable')}</>\n                            ) : (\n                                <>{i18n.t('common:do_you_wanna_show')}</>\n                            )}\n                        </>\n                    ) : (\n                        <>\n                            {i18n.t('common:do_you_wanna')}{' '}\n                            <span>\n                                <a className=\"go-to-meeting\" href={linkToMeeting} target=\"_blank\" title={linkToMeeting}>\n                                    {i18n.t(`common:go_to_meeting_word`)}\n                                </a>\n                            </span>{' '}\n                        </>\n                    )}\n\n                    {i18n.t('common:by_this_card_type', {\n                        cardType: i18n.t(`formElements:reference_element`)\n                    })}\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => onClose(cardId)}\n                >\n                    {i18n.t('common:yes_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                >\n                    {i18n.t('common:no_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nLinkToMeetingDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default LinkToMeetingDialog;\n","import React, { useState } from 'react';\nimport { IoMdLink } from 'react-icons/all';\nimport LinkToMeetingDialog from '../../share/modals/modal/linkToMeetingDialog';\nimport './LinkToMeeting.scss'\nconst LinkToMeeting=(props)=>{\n   const {linkToMeeting}=props;\n   const [openDialog,setOpenDialog]=useState(false);\n   const openWindowByUrl=(url)=>{\n      let win = window.open(linkToMeeting, '_blank');\n       win.focus();\n   }\n    const handleClose = semesterId => {\n        setOpenDialog(false);\n        if (semesterId !== '') {\n           openWindowByUrl(linkToMeeting);\n        }\n    };\n\n    return (<>\n                    <IoMdLink\n                        color={\"blue\"}\n                        className=\"svg-btn copy-btn link\"\n                        onClick={() => {\n                            setOpenDialog(true);\n                        }}\n                        title={linkToMeeting}\n\n                    />\n                <LinkToMeetingDialog\n                    cardId={1}\n                    isHide={false}\n                    open={openDialog}\n                    onClose={handleClose}\n                    linkToMeeting={linkToMeeting}\n                />\n                </>\n           )\n\n}\nexport {LinkToMeeting}","export const places={\n    TOGETHER:\"auditory+online\",\n    AUDITORY:\"auditory\",\n    ONLINE:\"online\"\n}","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport Card from '../share/Card/Card';\n\nimport i18next from './i18n';\n\nimport { daysUppercase } from '../constants/schedule/days';\nimport { LinkToMeeting } from '../components/LinkToMeeting/LinkToMeeting';\nimport { places } from '../constants/places';\nimport i18n from 'i18next';\nimport './renderScheduleTable.scss'\nimport { getFirstLetter, getTeacherForSite, getTeacherFullName } from './renderTeacher';\nconst shortid = require('shortid');\n\nconst matchDayNumberSysytemToDayName = () => {\n    let now = new Date();\n    return daysUppercase[now.getDay() - 1];\n};\nconst currentDay = matchDayNumberSysytemToDayName();\nconst setLink=(card,place)=>{\n    if(place===places.TOGETHER){\n        return <LinkToMeeting {...card} />\n    }\n    else if(place===places.ONLINE){\n        return getHref(card.linkToMeeting)\n    }\n    return null;\n}\n\nconst getWeekNumber = (startScheduleDate, date) => {\n    const parsed = Array.from(startScheduleDate);\n\n    const startDay = new Date(\n        parsed[3] +\n            parsed[4] +\n            parsed[5] +\n            parsed[0] +\n            parsed[1] +\n            parsed[2] +\n            parsed[6] +\n            parsed[7] +\n            parsed[8] +\n            parsed[9]\n    );\n\n    const numberOfDays = Math.floor((date - startDay) / (24 * 60 * 60 * 1000));\n    return Math.ceil((date.getDay() + 1 + numberOfDays) / 7);\n};\nconst printWeekNumber = startScheduleDate => {\n    let date = new Date();\n    let result = getWeekNumber(startScheduleDate, date);\n    return result;\n};\nfunction isOddFunction(num) {\n    return num % 2;\n}\nlet currentWeekType = 0;\n\nconst renderClassCell = classItem => {\n   return (classItem.class_name +\n    '\\n\\r\\n\\r' +\n    classItem.startTime +\n    ' - ' +\n    classItem.endTime);\n}\n\nexport const prepareLessonCardCell = card => {\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        inner = getTeacherForSite(card.teacher) + '\\n' + card.subjectForSite+'\\n';\n    }\n    return inner;\n};\nexport const prepareLessonSubCardCell = (card,place) => {\n    const room=place!==places.ONLINE?card.room:\"\";\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        inner =\n            i18next.t(\n                `formElements:lesson_type_${card.lessonType.toLowerCase()}_label`\n            );\n        if (room!==\"\") {\n            inner=`(${inner}, ${card.room.name})`\n        }\n    }\n    return inner;\n};\nconst getHref=(link)=>{\n    return (<a title={link} className=\"link-to-meeting\" href={link} target=\"_blank\">{i18n.t(`common:link_to_meeting_word`)}</a>);\n}\n\nexport const prepareLessonTemporaryCardCell = (card,place) => {\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        if (card.temporary_schedule) {\n            if (card.temporary_schedule.vacation === true) {\n                inner +=\n                    card.temporary_schedule.date +\n                    '\\n\\r' +\n                    i18next.t(`common:vacation_label`);\n            } else {\n                inner +=\n                    card.temporary_schedule.date +\n                    '\\n\\r' +\n                    getTeacherForSite(card.temporary_schedule)+\n                    '\\n' +\n                    card.temporary_schedule.subjectForSite;\n                if (card.temporary_schedule.room) {\n                    inner += ', ' + card.temporary_schedule.room.name + ' )';\n                }\n            }\n            let title =\n                i18next.t(`common:regular_lesson_label`) +\n                '\\r' +\n                prepareLessonCardCell(card, place) +\n                '\\r' +\n                prepareLessonSubCardCell(card, place) +\n                '\\r'\n\n            return inner.length > 0 ? (\n                <>\n                    <p className=\"temporary-class\" title={title}>\n                        {inner}\n                    </p>\n                    {setLink(card,place)}\n                </>\n\n            ) : (\n                ''\n            );\n        } else {\n            return (\n                <>\n                    <p>{prepareLessonCardCell(card,place)}</p>\n                    <p>{prepareLessonSubCardCell(card,place)}</p>\n                    {setLink(card,place)}\n                </>\n            );\n        }\n    }else {\n        return '';\n    }\n};\n\nexport const prepareTeacherCardCell = card => {\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        inner = card.subjectForSite;\n    }\n    return inner;\n};\n\nexport const prepareTeacherCardRegularCell = (card,place) => {\n    let inner=buildLessonWithRoom(card,place);\n    inner+='\\n' +\n        card.group.title+'\\n';\n    return inner;\n\n}\n\nexport const buildLessonWithRoom = (card,place) => {\n    const room=place!==places.ONLINE?card.room:\"\";\n    let inner=\"\";\n    inner+=   prepareTeacherCardCell(card)+\n        '\\n';\n\n    if (room!==\"\") {\n        inner+=`(${ i18next.t(\n            `formElements:lesson_type_${card.lessonType.toLowerCase()}_label`\n        )} ,${card.room})\\n`\n    }\n    else {\n        inner+= i18next.t(\n                `formElements:lesson_type_${card.lessonType.toLowerCase()}_label`\n            )+'\\n';\n    }\n    return inner;\n\n\n\n}\nexport const buildGroupNumber = card => {\n\n    return    card.group.title+'\\n';\n}\n\nexport const prepareTeacherTemporaryCardCell = (cards,place) => {\n\n    let inner = '';\n    let title = '';\n    if (!cards) {\n        return '';\n    }\n\n    if (cards.length === 1) {\n        if (cards[0] === undefined || cards[0] === null) {\n            return '';\n        }\n        const card = cards[0];\n\n        if (!card.temporary_schedule) {\n            return <>\n                {prepareTeacherCardRegularCell(card,place)}\n                {setLink(card,place)}\n            </>\n\n        }\n        if (card.temporary_schedule.vacation === true) {\n            inner +=\n                card.temporary_schedule.date +\n                '\\n' +\n                i18next.t(`common:vacation_label`);\n        } else {\n\n            inner +=\n                card.temporary_schedule.date +\n                '\\n' ;\n            if (card.temporary_schedule.room) {\n                inner +=`(${card.temporary_schedule.subjectForSite}, ${card.temporary_schedule.room.name})\\n`;\n            }\n            else {\n                inner+=card.temporary_schedule.subjectForSite+'\\n';\n            }\n        }\n        title =\n            i18next.t(`common:regular_lesson_label`) +\n            '\\r' +\n            prepareTeacherCardRegularCell(card,place);\n        return inner.length > 0 ? (\n            <p className=\"temporary-class\" title={title}>\n                {inner}\n                {setLink(card,place)}\n            </p>\n        ) : (\n            ''\n        );\n    }\n    let card=cards[0];\n\n    inner+=buildLessonWithRoom(card,place);\n    cards.map(card => {\n        if (!card.temporary_schedule) {\n            inner+=\n               buildGroupNumber(card);\n        }\n\n       else if (card.temporary_schedule.vacation === true) {\n\n            inner +=\n                card.temporary_schedule.date +\n                '\\n' +\n                i18next.t(`common:vacation_label`) +\n                '\\n';\n        } else {\n            inner +=\n                card.temporary_schedule.date +\n                '\\n' +\n                getTeacherFullName(card.temporary_schedule.teacher)+\n                '\\n';\n            if (card.temporary_schedule.room) {\n                inner +=`${card.temporary_schedule.subjectForSite}, ${card.temporary_schedule.room.name}\\n`;\n            }\n            else {\n                inner+=card.temporary_schedule.subjectForSite+'\\n';\n            }\n        }\n        title +=\n            i18next.t(`common:regular_lesson_label`) +\n            '\\r' +\n            prepareTeacherCardRegularCell(card,place) +\n            '\\r';\n    });\n\n    return inner.length > 0 ? (\n        <p className=\"temporary-class\" title={title}>\n            {inner}\n            {setLink(card,place)}\n        </p>\n    ) : (\n        ''\n    );\n};\n\nexport const renderGroupDayClass = (classDay, isOddWeek,place) => {\n    let res = [];\n    for (let [key, value] of Object.entries(classDay.cards)) {\n        value.day = key;\n        res.push(value);\n    }\n    return (\n        <TableRow key={shortid.generate()}>\n            <TableCell className=\" lesson groupLabelCell\">\n                {renderClassCell(classDay.class)}\n            </TableCell>\n            {res.map(day => {\n                let className = 'lesson ';\n                if (currentDay === day.day && currentWeekType === isOddWeek) {\n                    className += ' currentDay';\n                }\n                return (\n                    <TableCell key={shortid.generate()} className={className}>\n                        {/* <p>{prepareLessonCardCell(day.card, currentDay)}</p>\n                        <p>{prepareLessonSubCardCell(day.card, currentDay)}</p> */}\n                        {prepareLessonTemporaryCardCell(day.card,place)}\n\n                    </TableCell>\n                );\n            })}\n        </TableRow>\n    );\n};\n\nexport const renderScheduleGroupHeader = daysUppercase => (\n    <TableHead>\n        <TableRow>\n            <TableCell className=\"groupLabelCell\"></TableCell>\n            {daysUppercase.map(day => (\n                <TableCell key={shortid.generate()}>\n                    {i18next.t(`day_of_week_${day}`)}\n                </TableCell>\n            ))}\n        </TableRow>\n    </TableHead>\n);\n\nexport const renderGroupTable = (classes, isOdd, semester,place) => {\n    if (semester) {\n        currentWeekType = isOddFunction(printWeekNumber(semester.startDay));\n    }\n\n    return (\n        <TableContainer>\n            <Table aria-label=\"sticky table\">\n                {renderScheduleGroupHeader(daysUppercase)}\n                <TableBody>\n                    {classes.map((classDay, classIndex) => {\n                        if (classDay) {\n                            return renderGroupDayClass(classDay, isOdd,place);\n                        }\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nexport const renderGroupCells = (\n    groups,\n    place,\n    isOdd = 0,\n    currentWeekType = 0,\n    isCurrentDay = 0,\n\n) => {\n    return groups.map((group, groupIndex) => {\n        let colspan = 1;\n        let rowspan = 1;\n        let classname = 'lesson';\n\n        if (currentWeekType === isOdd && isCurrentDay) {\n            classname += ' currentDay';\n        }\n        if (group.card !== null && group.card.skip_render === 1) {\n            return;\n        }\n        if (group.card !== null && group.card.weekly_render === 1) {\n            rowspan = 2;\n            classname += ' weekly';\n        }\n        for (let i = groupIndex+1; i < groups.length; i++) {\n            if (\n                group &&\n                groups[i] &&\n                group.card !== null &&\n                groups[i].card !== null\n\n            ) {\n                if (\n                    group.card.teacher &&\n                    group.card.teacher.surname ===\n                    groups[i].card.surname &&\n                    group.card.teacher.name ===\n                    groups[i].card.name &&\n                    group.card.subjectForSite ===\n                    groups[i].card.subjectForSite &&\n                    group.card.room.id === groups[i].card.room.id\n                    &&\n                    group.card.weekly_render ===\n                    groups[i].card.weekly_render\n\n\n                ) {\n\n                    groups[i].card.skip_render = 1;\n                    colspan++;\n                    classname += ' grouped';\n                }\n                else break ;\n\n            }\n            else break;\n\n        }\n\n        return (\n\n            <TableCell\n\n                key={shortid.generate()}\n                colSpan={colspan}\n                rowSpan={rowspan}\n                className={classname}\n            >\n                {prepareLessonTemporaryCardCell(group.card,place)}\n            </TableCell>\n        );\n    });\n};\n\nexport const renderScheduleHeader = groups => (\n    <TableHead>\n        <TableRow>\n            <TableCell className=\"groupLabelCell\" colSpan={3}>\n                {i18next.t('group_y_label')}\n            </TableCell>\n            {groups.map(group => (\n                <TableCell key={shortid.generate()}>{group}</TableCell>\n            ))}\n        </TableRow>\n    </TableHead>\n);\n\nexport const renderFirstDayFirstClassFirstCardLine = (\n\n    day_name,\n    classItem,\n    groups,\n    classesCount,\n    place\n) => {\n    let dayClassName = 'dayNameCell ';\n    let classClassName = 'classNameCell ';\n\n    let oddWeekClass = '';\n    let evenWeekClass = '';\n    if (currentDay === day_name) {\n        dayClassName += ' currentDay';\n\n        if (currentWeekType === 1) {\n            oddWeekClass = ' currentDay';\n        } else {\n            evenWeekClass = ' currentDay';\n        }\n    }\n\n    if (groups.even.length <= 2 || groups.odd.length <= 2) {\n        dayClassName += ' minHeightDouble';\n    }\n\n    return (\n        <React.Fragment key={shortid.generate()}>\n            <TableRow>\n                <TableCell rowSpan={classesCount * 2} className={dayClassName}>\n                    <span className=\"dayName\">\n                        <b>{i18next.t(`common:day_of_week_${day_name}`)}</b>\n                    </span>\n                </TableCell>\n                <TableCell className={classClassName} rowSpan={2}>\n                    {renderClassCell(classItem)}\n\n                </TableCell>\n                <TableCell\n                    className={classClassName + oddWeekClass + ' subClassName'}\n                >\n                    1\n                </TableCell>\n                {renderGroupCells(groups.odd,place)}\n            </TableRow>\n            <TableRow>\n                <TableCell\n                    className={classClassName + evenWeekClass + ' subClassName'}\n                >\n                    2\n                </TableCell>\n                {renderGroupCells(groups.even,place)}\n            </TableRow>\n        </React.Fragment>\n    );\n};\n\nexport const renderFirstDayOtherClassFirstCardLine = (\n    day_name,\n    classItem,\n    groups,\n    place\n) => {\n\n    let classClassName = 'classNameCell ';\n    let oddWeekClass = '';\n    let evenWeekClass = '';\n\n    if (currentDay === day_name) {\n        if (currentWeekType === 1) {\n            oddWeekClass = ' currentDay';\n        } else {\n            evenWeekClass = ' currentDay';\n        }\n    }\n\n    return (\n        <React.Fragment key={shortid.generate()}>\n            <TableRow>\n                <TableCell className={classClassName} rowSpan={2}>\n                    {renderClassCell(classItem)}\n                </TableCell>\n                <TableCell\n                    className={classClassName + oddWeekClass + ' subClassName'}\n                >\n                    1\n                </TableCell>\n                {renderGroupCells(groups.odd, place,1)}\n            </TableRow>\n            <TableRow>\n                <TableCell\n                    className={classClassName + evenWeekClass + ' subClassName'}\n                >\n                    2\n                </TableCell>\n                {renderGroupCells(groups.even, place,0)}\n            </TableRow>\n        </React.Fragment>\n    );\n};\n\nconst prepareForRender = classItem => {\n    if (classItem.cards) {\n        classItem.cards.odd.forEach((card, cardIndex, map) => {\n            if (\n                classItem.cards.even[cardIndex] &&\n                card.group.id === classItem.cards.even[cardIndex].group.id\n            ) {\n                if (\n                    card.card !== null &&\n                    classItem.cards.even[cardIndex].card !== null\n                ) {\n                    if (\n                        card.card.teacher.name ===\n                            classItem.cards.even[cardIndex].card\n                                .teacher.name &&\n                        card.card.teacher.surname ===\n                        classItem.cards.even[cardIndex].card\n                            .teacher.surname &&\n                        card.card.subjectForSite ===\n                            classItem.cards.even[cardIndex].card\n                                .subjectForSite &&\n                        card.card.room.id ===\n                            classItem.cards.even[cardIndex].card.room.id\n                    ) {\n                        classItem.cards.odd[cardIndex].card.weekly_render = 1;\n                        classItem.cards.even[cardIndex].card.skip_render = 1;\n                    }\n                }\n            }\n        });\n    }\n    return classItem;\n};\n\nexport const renderDay = (dayName, dayItem, semesterClassesCount,place) => {\n\n\n    return dayItem.map((classItem, classIndex) => {\n      const t= prepareForRender(classItem);\n        if (classIndex === 0) {\n            return renderFirstDayFirstClassFirstCardLine(\n                dayName,\n                classItem.class,\n                classItem.cards,\n                semesterClassesCount,\n                place\n            );\n        } else {\n            return renderFirstDayOtherClassFirstCardLine(\n                dayName,\n                classItem.class,\n                classItem.cards,\n                place\n            );\n        }\n    });\n};\n\nexport const renderScheduleFullHeader = groupList => (\n    <TableHead>\n        <TableRow>\n            <TableCell colSpan={3}>\n                {i18next.t('formElements:group_label')}\n            </TableCell>\n            {groupList.map(group => (\n                <TableCell key={shortid.generate()} className=\"groupLabelCell\">\n                    {group.title}\n                </TableCell>\n            ))}\n        </TableRow>\n    </TableHead>\n);\n\nconst renderScheduleDays = (fullResultSchedule,place) => {\n   return  fullResultSchedule.resultArray.map((dayItem, dayName) => {\n        return renderDay(\n            dayItem.day,\n            dayItem.classes,\n            fullResultSchedule.semester_classes.length,\n            place\n        );\n    });\n}\n\nexport const renderFullSchedule = (fullResultSchedule,place) => {\n    currentWeekType = isOddFunction(\n        printWeekNumber(fullResultSchedule.semester.startDay)\n    );\n    let scheduleTitle = '';\n    if (fullResultSchedule.semester) {\n        scheduleTitle =\n            fullResultSchedule.semester.description +\n            ' (' +\n            fullResultSchedule.semester.startDay +\n            '-' +\n            fullResultSchedule.semester.endDay +\n            ')';\n    }\n\n    return (\n        <>\n            <h1>{scheduleTitle}</h1>\n            <TableContainer>\n                <Table aria-label=\"sticky table\">\n                    {renderScheduleFullHeader(fullResultSchedule.groupList)}\n                    <TableBody>\n                        {renderScheduleDays(fullResultSchedule,place)}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n};\n\nconst renderClassRow = (classItem, days, scheduleRow,place) => (\n\n    <TableRow key={shortid.generate()}>\n        <TableCell className=\"lesson groupLabelCell\">\n\n            {renderClassCell(classItem)}\n        </TableCell>\n        {days.map(dayName => {\n\n            if (scheduleRow) {\n                return renderTeacherClassCell(\n                    scheduleRow.find(clas => clas.day === dayName),place\n                );\n            }\n        })}\n    </TableRow>\n);\nconst renderTeacherClassCell = (cards,place) => {\n    let teacherLessonAddCellClass = '';\n\n    if (cards !== undefined) {\n        if (cards.cards.length > 1) {\n            cards.cards.map((card, cardIndex) => {\n                if (\n                    cards.cards[cardIndex + 1] &&\n                    card.room !== cards.cards[cardIndex + 1].room\n                ) {\n                    teacherLessonAddCellClass += 'intersection-on-schedule';\n                }\n            });\n        }\n    }\n    return (\n        <TableCell\n            key={shortid.generate()}\n            className={`lesson ${teacherLessonAddCellClass}`}\n        >\n\n            {prepareTeacherTemporaryCardCell(cards && cards.cards,place)}\n        </TableCell>\n    );\n};\nexport const renderWeekTable = (schedule, isOdd,place) => {\n    if (schedule) {\n        return (\n            <TableContainer>\n                <Table aria-label=\"sticky table\">\n                    {renderScheduleGroupHeader(schedule.days)}\n                    <TableBody>\n                        {schedule.classes.map(classItem => {\n                            return renderClassRow(\n                                classItem,\n                                schedule.days,\n                                schedule.cards[classItem.id],\n                                place\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n};\n\nexport const renderTeacherRangeSchedule = (\n    schedule,\n    viewTeacherScheduleResults\n) => {\n    if (schedule === undefined) return;\n    if (schedule) {\n        if (schedule.length === 0) {\n            return i18next.t('empty_schedule');\n        }\n        return schedule.map((dayItem, dayIndex) => {\n            const parsed = Array.from(dayItem.date);\n\n            const startDay = new Date(\n                parsed[3] +\n                    parsed[4] +\n                    parsed[5] +\n                    parsed[0] +\n                    parsed[1] +\n                    parsed[2] +\n                    parsed[6] +\n                    parsed[7] +\n                    parsed[8] +\n                    parsed[9]\n            );\n            return (\n                <Card\n                    class={\n                        viewTeacherScheduleResults +\n                        ' ' +\n                        'form-card teacher-schedule-day-card'\n                    }\n                    key={shortid.generate()}\n                >\n                    <h3>\n                        {dayItem.date +\n                            ' ( ' +\n                            i18next.t(`day_of_week_${startDay.getDay() + 1}`) +\n                            ' )'}\n                    </h3>\n                    {renderTeacherRangeDay(dayItem.schedule)}\n                </Card>\n            );\n        });\n    }\n};\n\nconst renderLessonsFirstLine = lessonItem => {\n    return (\n        <>\n            <TableCell>{lessonItem.lesson.subject_for_site}</TableCell>\n            <TableCell>{lessonItem.lesson.group_name}</TableCell>\n            <TableCell>{lessonItem.lesson.room.name}</TableCell>\n        </>\n    );\n};\n\nconst renderLessonsRestLines = lessons => {\n    if (lessons.length === 1) {\n        return;\n    }\n    let lessonClassName = '';\n    lessonClassName = 'groupped';\n    lessons.forEach((lessonItem, lessonIndex) => {\n        if (\n            lessons[lessonIndex + 1] &&\n            (lessonItem.lesson.subject_for_site !==\n                lessons[lessonIndex + 1].lesson.subject_for_site ||\n                lessonItem.lesson.room.id !==\n                    lessons[lessonIndex + 1].lesson.room.id)\n        ) {\n            lessonClassName = 'overlap';\n        }\n    });\n    return lessons.map((lessonItem, lessonIndex) => {\n        if (lessonIndex === 0) {\n            return;\n        }\n        return (\n            <TableRow className={lessonClassName} key={shortid.generate()}>\n                <TableCell>{lessonItem.lesson.subject_for_site}</TableCell>\n                <TableCell>{lessonItem.lesson.group_name}</TableCell>\n                <TableCell>{lessonItem.lesson.room.name}</TableCell>\n            </TableRow>\n        );\n    });\n};\n\nconst renderFirstLineTable = classItem => {\n    return (\n        <TableRow key={shortid.generate()}>\n            <TableCell rowSpan={classItem.lessons.length}>\n                {classItem.class.class_name +\n                    ' ( ' +\n                    classItem.class.startTime +\n                    ' - ' +\n                    classItem.class.endTime +\n                    ')'}\n            </TableCell>\n            {renderLessonsFirstLine(classItem.lessons[0])}\n        </TableRow>\n    );\n};\n\nexport const renderTeacherRangeDay = schedule => {\n    if (schedule) {\n        return (\n            <TableContainer key={shortid.generate()}>\n                <Table aria-label=\"sticky table\">\n                    <TableBody>\n                        {schedule.map(classItem => {\n                            return (\n                                <React.Fragment key={shortid.generate()}>\n                                    {renderFirstLineTable(classItem)}\n                                    {renderLessonsRestLines(classItem.lessons)}\n                                </React.Fragment>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n};\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\n\nimport Button from '@material-ui/core/Button';\nimport { MdPlayArrow } from 'react-icons/md';\n\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport {\n    showAllPublicSemestersService,\n    showAllPublicGroupsService,\n    showAllPublicTeachersService, getFullSchedule\n} from '../../services/scheduleService';\n\nimport './GroupSchedulePageTop.scss';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Card from '../../share/Card/Card';\n\nimport { SCHEDULE_SEARCH_FORM } from '../../constants/reduxForms';\nimport { required } from '../../validation/validateFields';\nimport { MenuItem, Select } from '@material-ui/core';\nimport { places } from '../../constants/places';\nimport { getTeacherFullName } from '../../helper/renderTeacher';\nconst shortid = require('shortid');\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    }\n}));\n\nconst GroupSchedulePageTop = props => {\n    const [groupDisabled,setGroupDisabled]=useState(true);\n    const classes = useStyles();\n    const { t } = useTranslation('common');\n    const {\n        groups,\n        teachers,\n        semesters,\n        handleSubmit,\n        pristine,\n        submitting\n    } = props;\n    const isLoading = props.loading;\n    const [semesterId,setSemesterId]=useState(props.initialValues.semester);\n    let loadingContainer = '';\n    if (isLoading) {\n        loadingContainer = (\n            <section className=\"centered-container\">\n                <CircularProgress />\n            </section>\n        );\n    }\n    useEffect(() => showAllPublicGroupsService(semesterId), [semesterId]);\n    useEffect(() => showAllPublicTeachersService(), []);\n    useEffect(() => showAllPublicSemestersService(), []);\n    useEffect(() => {\n        if(groups.length!==0){\n            setGroupDisabled(false)\n        }\n        else {\n            setGroupDisabled(true)\n        }\n    }, [groups]);\n    const renderSemesterList = () => {\n        if (semesters) {\n            if (semesters.length > 1) {\n\n                return (\n                    <Field\n                        id=\"semester\"\n                        name=\"semester\"\n                        component={renderSelectField}\n                        label={t('formElements:semester_label')}\n                        type=\"text\"\n                        validate={[required]}\n                        onChange={(e)=>setSemesterId(e.target.value)}\n                    >\n                        <option />\n                        {semesters.map((semester, index) => (\n\n                            <option\n                                key={shortid.generate()}\n                                value={semester.id}\n\n                            >\n                                {semester.description}\n                            </option>\n\n                        ))}\n                    </Field>\n                );\n            }\n            else if (semesters.length === 1) {\n                handleSubmit({ semester: semesters[0].id });\n                return <p>{semesters[0].description}</p>;\n            }\n        }\n    };\n    const renderTeacherList=()=>{\n      return  (<Field\n            id=\"teacher\"\n            name=\"teacher\"\n            component={renderSelectField}\n            label={t('formElements:teacher_label')}\n            type=\"text\"\n            onChange={() => props.change('group', 0)}\n\n        >\n            <option />\n            {teachers.map((teacher, index) => (\n                <option\n                    key={shortid.generate()}\n                    value={teacher.id}\n                >\n                    {getTeacherFullName(teacher)}\n                </option>\n            ))}\n        </Field>)\n    };\n    const renderGroupList=()=>{\n       return (<Field\n            disabled={groupDisabled}\n            id=\"group\"\n            name=\"group\"\n            component={renderSelectField}\n            label={t('formElements:group_label')}\n            type=\"text\"\n            onChange={() => {\n                props.change('teacher', 0);\n            }}\n        >\n            <option />\n            {groups.map((group, index) => (\n                <option\n                    key={shortid.generate()}\n                    value={group.id}\n                >\n                    {group.title}\n                </option>\n            ))}\n        </Field>)\n    }\n\n    useEffect(()=>{\n\n        props.initialize({\n            semester:props.initialValues.semester,\n            group: props.initialValues.group,\n            teacher:props.initialValues.teacher\n        })\n    },[])\n\n    return (\n        <section className={classes.root}>\n            <p>{t('greetings_schedule_message')}</p>\n            <p>{t('greetings_schedule_message_hint')}</p>\n            <section className=\"form-buttons-container top\">\n                <Card class=\"form-card width-auto\">\n                    <form onSubmit={handleSubmit}>\n                        {renderSemesterList()}\n                        {renderGroupList()}\n                        {renderTeacherList()}\n\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            disabled={pristine || submitting}\n\n                        >\n\n                            <MdPlayArrow\n                                title={t('teacher_schedule_label')}\n                                className=\"svg-btn\"\n                            />\n                        </Button>\n\n                    </form>\n\n                </Card>\n                <span id=\"select-place\">\n                    <label htmlFor={\"demo-controlled-open-select\"}>{t('place_for_class_label')}</label>\n                <Select className=\"place\"\n                        labelId=\"demo-controlled-open-select-label\"\n                        id=\"demo-controlled-open-select\"\n                        value={props.place}\n                        onChange={props.onChange}\n\n                >\n\n                    {\n                        Object.entries(places).map(function(data, index) {\n                            return <MenuItem value={data[1]} key={data[0]}>{t(`${data[1]}_label`)}</MenuItem>\n                        }, this)\n                    }\n\n                </Select>\n                </span>\n\n            </section>\n            {loadingContainer}\n        </section>\n    );\n};\n\nconst mapStateToProps = state => ({\n    groups: state.groups.groups,\n    teachers: state.teachers.teachers,\n    semesters: state.schedule.semesters,\n    loading: state.loadingIndicator.loading,\n    initialValues:{semester: state.schedule.scheduleSemesterId,group: state.schedule.scheduleGroupId,teacher: state.schedule.scheduleTeacherId},\n\n});\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SCHEDULE_SEARCH_FORM\n    })(GroupSchedulePageTop)\n);\n\n\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport {\n    PUBLIC_DOWNLOAD_GROUP_SCHEDULE_URL,\n    PUBLIC_DOWNLOAD_TEACHER_SCHEDULE_URL\n} from '../../constants/axios';\n\nimport './GroupSchedulePage.scss';\nimport { MdPictureAsPdf } from 'react-icons/md';\n\nimport {\n    makeGroupSchedule,\n    makeFullSchedule,\n    makeTeacherSchedule\n} from '../../helper/prepareSchedule';\nimport {\n    renderGroupTable,\n    renderFullSchedule,\n    renderWeekTable\n} from '../../helper/renderScheduleTable';\nimport {\n    getDefaultSemesterService,\n    getFullSchedule, getGroupSchedule, getTeacherSchedule,\n    setScheduleGroupIdService,\n    setScheduleSemesterIdService,\n    setScheduleTeacherIdService, showAllPublicSemestersService,\n    submitSearchSchedule, submitSearchSchedule1\n} from '../../services/scheduleService';\n\nimport GroupSchedulePageTop from '../GroupSchedulePageTop/GroupSchedulePageTop';\nimport { setLoadingService } from '../../services/loadingService';\nimport {useHistory,useLocation} from 'react-router-dom';\nimport { links } from '../../constants/links';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { FormLabel, InputLabel, MenuItem, Select } from '@material-ui/core';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport { places } from '../../constants/places';\nimport i18n from 'i18next';\nimport { Contactless } from '@material-ui/icons';\nimport { getTeacherWithPosition } from '../../helper/renderTeacher';\nconst GroupSchedulePage = props => {\n\n    const [place,setPlace]=useState(places.TOGETHER);\n    let {scheduleType, groupSchedule, fullSchedule, teacherSchedule,groupId,teacherId ,semesterId,loading,defaultSemester,semesters} = props;\n    let history = useHistory();\n\n    const location = useLocation();\n    const emptySchedule = () => (\n        <p className=\"empty_schedule\">{t('common:empty_schedule')}</p>\n    );\n    const { t } = useTranslation('common');\n    const renderDownloadLink = (entity, semesterId, entityId) => {\n        let link = '';\n        const {language}=i18n;\n        const languageToRequest=`&language=${language}`;\n        if (semesterId && entityId) {\n            switch (entity) {\n                case 'group':\n                    link =\n                        PUBLIC_DOWNLOAD_GROUP_SCHEDULE_URL +\n                        '?groupId=' +\n                        entityId +\n                        '&semesterId=' +\n                        semesterId+\n                        languageToRequest;\n                    break;\n                case 'teacher':\n                    link =\n                        PUBLIC_DOWNLOAD_TEACHER_SCHEDULE_URL +\n                        '?teacherId=' +\n                        entityId +\n                        '&semesterId=' +\n                        semesterId+\n                        languageToRequest;\n                    break;\n                default:\n                    break;\n            }\n            return (\n                <a\n                    href={link}\n                    target=\"_blank\"\n                    rel=\"noreferrer noopener\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className=\"pdf_link\"\n                    download\n                >\n                    <MdPictureAsPdf className=\"svg-btn\" />\n                    {t('common:download_pdf')}\n                </a>\n            );\n        }\n    };\n\n    const renderGroupScheduleTitle = (semester, group) => {\n        let title = '';\n        if (semester) {\n            title +=\n                semester.description +\n                ' (' +\n                semester.startDay +\n                '-' +\n                semester.endDay +\n                ') : ';\n        }\n        if (group) {\n            title += group.title ? group.title : '';\n        }\n        return title;\n    };\n    const renderTeacherScheduleTitle = (semester, teacher) => {\n        let title = '';\n        if (semester) {\n            title +=\n                semester.description +\n                ' (' +\n                semester.startDay +\n                '-' +\n                semester.endDay +\n                ') : ';\n        }\n        if (teacher) {\n            title +=\n                getTeacherWithPosition(teacher);\n        }\n        return title;\n    };\n\n    const renderSchedule = () => {\n        switch (props.scheduleType) {\n            case 'group':\n                if (\n                    (!groupSchedule ||\n                        (groupSchedule.schedule &&\n                            groupSchedule.schedule.length === 0)) &&\n                    !props.loading\n                ) {\n                    return emptySchedule();\n                }\n\n                const resultArrays = makeGroupSchedule(groupSchedule);\n                if (resultArrays.done) {\n                    setLoadingService(false);\n                    return (\n                        <>\n                            <h1>\n                                {renderGroupScheduleTitle(\n                                    resultArrays.semester,\n                                    resultArrays.group\n                                )}\n                                {renderDownloadLink(\n                                    'group',\n                                    props.semesterId,\n                                    props.groupId\n                                )}\n                            </h1>\n                            <h2>{t('common:odd_week')}</h2>\n                            {renderGroupTable(\n                                resultArrays.oddArray,\n                                1,\n                                resultArrays.semester,\n                                place\n                            )}\n                            <h2>{t('common:even_week')}</h2>\n                            {renderGroupTable(\n                                resultArrays.evenArray,\n                                0,\n                                resultArrays.semester,\n                                place\n                            )}\n                        </>\n                    );\n                }\n                else setLoadingService(false)\n                break;\n            case 'teacher':\n                if (\n                    (!teacherSchedule ||\n                        !teacherSchedule.days ||\n                        teacherSchedule.days.length === 0) &&\n                    !props.loading\n                ) {\n                    return emptySchedule();\n                }\n                    if(teacherSchedule) {\n                        const teacher = makeTeacherSchedule(teacherSchedule);\n                        if (teacher.done) {\n                            setLoadingService(false);\n                            return (\n                                <>\n                                    <h1>\n                                        {renderTeacherScheduleTitle(\n                                            teacher.semester,\n                                            teacher.teacher\n                                        )}\n                                        {renderDownloadLink(\n                                            'teacher',\n                                            props.semesterId,\n                                            props.teacherId\n                                        )}\n                                    </h1>\n                                    <h2>{t('common:odd_week')}</h2>\n                                    {renderWeekTable(teacher.odd, 1,place)}\n                                    <h2>{t('common:even_week')}</h2>\n                                    {renderWeekTable(teacher.even, 0,place)}\n                                </>\n                            );\n                        }\n                    }\n                    else setLoadingService(false)\n                break;\n            case 'full':\n\n                if (\n                    (!fullSchedule.schedule ||\n                        fullSchedule.schedule.length === 0) &&\n                    !props.loading\n                ) {\n                    return emptySchedule();\n                }\n                const result = makeFullSchedule(fullSchedule);\n\n                if (result.groupsCount || result.done) {\n                    setLoadingService(false);\n                    return renderFullSchedule(result,place);\n                }\n                else setLoadingService(false)\n                break;\n            case 'archived':\n                if (\n                    (!fullSchedule.schedule ||\n                        fullSchedule.schedule.length === 0) &&\n                    !props.loading\n                ) {\n                    return '';\n                }\n                const archive = makeFullSchedule(fullSchedule);\n                if (archive.groupsCount || archive.done) {\n                    setLoadingService(false);\n                    return renderFullSchedule(archive,place);\n                }\n                else setLoadingService(false)\n                break;\n\n\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = values => {\n        const {semester,group,teacher}=values\n        const groupPath=group?\"&group=\"+group:\"\";\n        const teacherPath=teacher?\"&teacher=\"+teacher:\"\";\n        setLoadingService('true');\n        submitSearchSchedule(values, history);\n        history.push(links.ScheduleFor+\"?semester=\"+semester+groupPath+teacherPath);\n\n    };\n    useEffect(()=>getFullSchedule(),[place])\n\n\n    useEffect(()=> {\n         if(scheduleType===\"group\")\n         getGroupSchedule(groupId, semesterId);\n     },[groupId])\n     useEffect(()=> {\n         if(scheduleType===\"teacher\")\n         getTeacherSchedule(teacherId, semesterId);\n     },[teacherId])\n\n    useEffect(()=> {\n        if((scheduleType===\"full\"&&fullSchedule.length===0)) {\n            getFullSchedule();\n        }\n    },)\n    useEffect(()=>{\n        getDefaultSemesterService()\n    },[])\n\n   const getSchedule=()=>{\n       if((props.scheduleType===\"\")&&(props.defaultSemester.id!==undefined)){\n           const semester=`${props.defaultSemester.id}`;\n           handleSubmit({ \"semester\":semester });\n\n           return\n       }\n       if(props.scheduleType!==\"\"|| location.pathname===links.HOME_PAGE){\n\n           return renderSchedule();\n\n       }\n\n\n       const params = new URLSearchParams(location.search);\n\n       const semester= params.get(\"semester\");\n       const teacher=params.get(\"teacher\");\n       const group=params.get(\"group\");\n\n       if(semester!==null) {\n           handleSubmit({ semester, 'group': group != null ? group : 0, 'teacher': teacher != null ? teacher : 0 });\n        return null\n       }\n       else return null;\n    }\n\n    const getTop=()=>{\n\n       if(props.scheduleType !== 'archived') {\n\n         return (\n             <GroupSchedulePageTop\n                  scheduleType={props.scheduleType}\n                 onSubmit={handleSubmit} place={place} onChange={changePlace}\n             />\n         );\n\n\n       }\n       return null;\n    }\n    const changePlace=(e)=>{\n        if(e.target) {\n            setPlace(e.target.value);}\n    }\n\n\n    return (\n        <>\n            {getTop()}\n            {getSchedule()}\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    scheduleType: state.schedule.scheduleType,\n    groupSchedule: state.schedule.groupSchedule,\n    fullSchedule: state.schedule.fullSchedule,\n    teacherSchedule: state.schedule.teacherSchedule,\n    groupId: state.schedule.scheduleGroupId,\n    teacherId: state.schedule.scheduleTeacherId,\n    semesterId: state.schedule.scheduleSemesterId,\n    loading: state.loadingIndicator.loading,\n    defaultSemester: state.schedule.defaultSemester,\n    semesters: state.schedule.semesters,\n\n\n});\nexport default connect(mapStateToProps)(GroupSchedulePage);\n","import React, { Fragment, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\n\nimport { userRoles } from '../../constants/userRoles';\n\nimport GroupSchedulePage from '../../components/GroupSchedulePage/GroupSchedulePage';\n\nimport { getPublicClassScheduleListService } from '../../services/classService';\nimport { getMyTeacherWishesService } from '../../services/teacherWishService';\nimport {\n    disableDefaultSemesterService,\n    getDefaultSemesterService,\n    getFullSchedule,\n    setScheduleGroupIdService,\n    setScheduleSemesterIdService,\n    setScheduleTeacherIdService,\n    setScheduleTypeService,\n    showAllPublicGroupsService,\n    showAllPublicSemestersService,\n    showAllPublicTeachersService\n} from '../../services/scheduleService';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { setScheduleType } from '../../redux/actions';\nimport { showAllSemestersService } from '../../services/semesterService';\nconst HomePage = props => {\n    const { t } = useTranslation('common');\n    useEffect(() => getPublicClassScheduleListService(), []);\n    setScheduleSemesterIdService(null)\n    setScheduleTypeService(\"\")\n\n    // useEffect(() => showAllPublicSemestersService(), []);\n    useEffect(() => {\n        if (props.userRole === userRoles.TEACHER) {\n            //getMyTeacherWishesService();\n        }\n    }, []);\n    useEffect(() => {\n        if (props.userRole === null) {\n            //disableDefaultSemesterService();\n            getDefaultSemesterService();\n            setScheduleTypeService(\"\");\n        }\n    }, []);\n    useEffect(() => {\n        if (props.userRole === userRoles.TEACHER) {\n            //disableDefaultSemesterService();\n            getDefaultSemesterService();\n            setScheduleTypeService(\"\");\n        }\n    }, []);\n    useEffect(() => {\n        if (props.userRole === userRoles.MANAGER) {\n           // disableDefaultSemesterService();\n            getDefaultSemesterService();\n            setScheduleTypeService(\"\");\n        }\n    }, []);\n\n    return (\n\n        <Fragment>\n            <h1>{t('home_title')}</h1>\n            <GroupSchedulePage scheduleType=\"default\"  />\n        </Fragment>\n    );\n};\n\nconst mapStateToProps = state => ({\n    userRole: state.auth.role ,\n});\n\nexport default connect(mapStateToProps)(HomePage);\n","import React from 'react';\nimport MomentUtils from '@date-io/moment';\nimport * as moment from 'moment';\nimport { MuiPickersUtilsProvider, DatePicker } from '@material-ui/pickers';\n\nconst renderMounthPicker = ({\n    label,\n    input: { value, ...inputProps },\n    meta: { touched, invalid, error },\n    ...custom\n}) => {\n    return (\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n            <DatePicker\n                clearable\n                value={value ? moment(value, 'DD/MM/YYYY').toDate() : null}\n                format=\"DD/MM/YYYY\"\n                error={touched && invalid}\n                helperText={touched && error ? touched && error : label}\n                {...inputProps}\n                {...custom}\n            />\n        </MuiPickersUtilsProvider>\n    );\n};\nexport default renderMounthPicker;\n","import React, { useEffect } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport './TeacherScheduleForm.scss';\n\nimport renderMonthPicker from '../../share/renderedFields/timeSemester';\nimport { MdPlayArrow, MdViewModule, MdViewHeadline } from 'react-icons/md';\n\nimport Button from '@material-ui/core/Button';\n\nimport {\n    required,\n    lessThanDate,\n    greaterThanDate\n} from '../../validation/validateFields';\n\nimport { TEACHER_SCHEDULE_FORM } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\nimport * as moment from 'moment';\nimport { setTeacherServiceViewType } from '../../services/scheduleService';\n\nlet TeacherScheduleForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n    const isSchedule = false;\n\n    useEffect(() => {\n        props.initialize({\n            startDay: moment(new Date(), 'DD/MM/YYYY').format('DD/MM/YYYY'),\n            endDay: moment(new Date(), 'DD/MM/YYYY')\n                .add(7, 'd')\n                .format('DD/MM/YYYY')\n        });\n    }, [isSchedule]);\n    return (\n        <Card class={'form-card teacher-schedule-form'}>\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-line-block\">\n                    <h2 className=\"form-title\">\n                        {t('common:select_dates_for_teacher_schedule')}\n                    </h2>\n                    <Field\n                        className=\"time-input\"\n                        name=\"startDay\"\n                        component={renderMonthPicker}\n                        label={t('class_from_label') + ':'}\n                        validate={[required, lessThanDate]}\n                    />\n                    <Field\n                        className=\"time-input\"\n                        name=\"endDay\"\n                        component={renderMonthPicker}\n                        label={t('class_to_label') + ':'}\n                        validate={[required, greaterThanDate]}\n                    />\n                    <div className=\"form-buttons-container\">\n                        <Button\n                            className=\"buttons-style\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >\n                            <MdPlayArrow\n                                title={t('full_schedule_label')}\n                                className=\"svg-btn\"\n                            />\n                        </Button>\n                        <Button\n                            className=\"view-type-icon first-view-type-button\"\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            title={t('common:block_view')}\n                            onClick={() =>\n                                setTeacherServiceViewType('blocks-view')\n                            }\n                        >\n                            <MdViewModule className=\"svg-btn\" />\n                        </Button>\n                        <Button\n                            className=\"view-type-icon\"\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            title={t('common:list_view')}\n                            onClick={() =>\n                                setTeacherServiceViewType('list-view')\n                            }\n                        >\n                            <MdViewHeadline className=\"svg-btn\" />\n                        </Button>\n                    </div>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: TEACHER_SCHEDULE_FORM\n    })(TeacherScheduleForm)\n);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport './TeacherSchedule.scss';\n\nimport TeacherScheduleForm from '../TeacherScheduleForm/TeacherScheduleForm';\nimport {\n    clearTeacherScheduleFormService,\n    getTeacherScheduleService\n} from '../../services/scheduleService';\n\nimport { renderTeacherRangeSchedule } from '../../helper/renderScheduleTable';\nconst TeacherSchedule = props => {\n    const handleFormReset = () => {\n        clearTeacherScheduleFormService();\n    };\n    const submit = values => {\n        getTeacherScheduleService(values);\n    };\n\n    useEffect(() => {\n        renderTeacherRangeSchedule(\n            props.schedule,\n            props.viewTeacherScheduleResults\n        );\n    }, [props.viewTeacherScheduleResults]);\n\n    return (\n        <>\n            <TeacherScheduleForm onSubmit={submit} onReset={handleFormReset} />\n            <section>\n                {renderTeacherRangeSchedule(\n                    props.schedule,\n                    props.viewTeacherScheduleResults\n                )}\n            </section>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    loading: state.loadingIndicator.loading,\n    schedule: state.schedule.teacherRangeSchedule,\n    viewTeacherScheduleResults: state.schedule.viewTeacherScheduleResults\n});\nexport default connect(mapStateToProps)(TeacherSchedule);\n","import { reset } from 'redux-form';\n\nimport { store } from '../index';\nimport axios from '../helper/axios';\nimport { DISABLED_GROUPS_URL, GROUP_URL } from '../constants/axios';\nimport { GROUP_FORM } from '../constants/reduxForms';\nimport {\n    showAllGroups,\n    deleteGroup,\n    addGroup,\n    selectGroup,\n    updateGroup,\n    clearGroup,\n    setDisabledGroups\n} from '../redux/actions/index';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport i18n from '../helper/i18n';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const selectGroupService = groupId => {\n    store.dispatch(selectGroup(groupId));\n}\n\nexport const handleGroupService = values =>\n    values.id ? updateGroupService(values) : createGroupService(values);\n\nexport const clearGroupService = () => {\n    store.dispatch(clearGroup());\n    resetFormHandler(GROUP_FORM);\n};\n\nexport const showAllGroupsService = () => {\n    axios\n        .get(GROUP_URL)\n        .then(response => {\n            store.dispatch(showAllGroups(response.data.sort((a, b) => a - b)));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const removeGroupCardService = groupId => {\n    axios\n        .delete(GROUP_URL + `/${groupId}`)\n        .then(response => {\n            store.dispatch(deleteGroup(groupId));\n            getDisabledGroupsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:group_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createGroupService = data => {\n    axios\n        .post(GROUP_URL, data)\n        .then(response => {\n            store.dispatch(addGroup(response.data));\n            resetFormHandler(GROUP_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:group_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const updateGroupService = data => {\n    return axios\n        .put(GROUP_URL, data)\n        .then(response => {\n            store.dispatch(updateGroup(response.data));\n            selectGroupService(null);\n            getDisabledGroupsService();\n            showAllGroupsService();\n            resetFormHandler(GROUP_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:group_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getDisabledGroupsService = () => {\n    axios\n        .get(DISABLED_GROUPS_URL)\n        .then(res => {\n            store.dispatch(setDisabledGroups(res.data));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const setDisabledGroupService = group => {\n    group.disable = true;\n    updateGroupService(group);\n};\n\nexport const setEnabledGroupService = group => {\n    group.disable = false;\n    updateGroupService(group);\n};\n","import { store } from '../index';\nimport {\n    DISABLED_TEACHERS_URL,\n    TEACHER_URL,\n    TEACHERS_WITHOUT_ACCOUNT_URL\n} from '../constants/axios';\nimport { TEACHER_FORM } from '../constants/reduxForms';\n\nimport axios from '../helper/axios';\n\nimport i18n from '../helper/i18n';\n\nimport {\n    addTeacher,\n    deleteTeacher,\n    selectTeacherCard,\n    setDisabledTeachers,\n    showAllTeachers,\n    updateTeacherCard\n} from '../redux/actions';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { setLoadingService } from './loadingService';\n\nexport const showAllTeachersService = () => {\n    const data=[\n        {\n            \"department\": {\n                \"id\": 41,\n                \"name\": \"mat analysi\",\n                \"disable\": false\n            },\n            \"id\": 49,\n            \"name\": \"Світлана\",\n            \"surname\": \"Боднарук\",\n            \"patronymic\": \"Богданівна\",\n            \"position\": \"доцент\",\n            \"disable\": false,\n            \"email\": \"nasta_2000@i.ua\"\n        },\n\n        {\n            \"department\":{\n                \"id\": 41,\n                \"name\": \"mat analysi\",\n                \"disable\": false\n            },\n            \"id\": 78,\n            \"name\": \"Наталія\",\n            \"surname\": \"Романенко\",\n            \"patronymic\": \"Богданівна\",\n            \"position\": \"доцент\",\n            \"disable\": false,\n            \"email\":\"nasta_2000@i.ua\"\n\n        },\n        {\n            \"department\":{\n                \"id\": 41,\n                \"name\": \"mat analysi\",\n                \"disable\": false\n            },\n            \"id\": 79,\n            \"name\": \"Анна\",\n            \"surname\": \"Івах\",\n            \"patronymic\": \"Іванівна\",\n            \"position\": \"доцент\",\n            \"disable\": false,\n            \"email\":\"nasta_2000@i.ua\"\n\n        },\n        {\n            \"department\":{\n                \"id\": 44,\n                \"name\": \"Computer Science1\",\n                \"disable\": false\n            },\n            \"id\": 39,\n            \"name\": \"Ірина\",\n            \"surname\": \"Вернигора\",\n            \"patronymic\": \"Володимирівна\",\n            \"position\": \"доцент\",\n            \"disable\": false,\n            \"email\":\"nasta_2000@i.ua\"\n        }\n    ];\n    store.dispatch(showAllTeachers(data));\n            setLoadingService(false);\n    // axios\n    //     .get(TEACHER_URL)\n    //     .then(response => {\n    //         store.dispatch(showAllTeachers(response.data));\n    //         setLoadingService(false);\n    //     })\n    //     .catch(error => errorHandler(error));\n};\n\n\n\nexport const getTeachersWithoutAccount = () => {\n    axios\n        .get(TEACHERS_WITHOUT_ACCOUNT_URL)\n        .then(response => {\n            store.dispatch(showAllTeachers(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createTeacherService = values => {\n    values.wish = [];\n    axios\n        .post(TEACHER_URL, values)\n        .then(response => {\n            store.dispatch(addTeacher(response.data));\n            resetFormHandler(TEACHER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_a_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nconst cardTeacher = teacher => {\n    return {\n        teacher: {\n            id: teacher.id,\n            name: teacher.name,\n            surname: teacher.surname,\n            patronymic: teacher.patronymic,\n            position: teacher.position,\n            email:teacher.email,\n            department: teacher.department\n        }\n    };\n};\n\nexport const updateTeacherService = data => {\n    return axios\n        .put(TEACHER_URL, data.teacher)\n        .then(response => {\n            store.dispatch(updateTeacherCard(response.data));\n            if (response.data.disable) {\n                store.dispatch(deleteTeacher(response.data.id));\n            }\n            showAllTeachersService();\n            getDisabledTeachersService();\n\n            selectTeacherCardService(null);\n            resetFormHandler(TEACHER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_a_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const handleTeacherService = values => {\n    const teacher = cardTeacher(values);\n\n    if (values.id) {\n        updateTeacherService(teacher);\n    } else {\n        createTeacherService(values);\n    }\n};\n\nexport const removeTeacherCardService = id => {\n    axios\n        .delete(TEACHER_URL + `/${id}`)\n        .then(response => {\n            store.dispatch(deleteTeacher(id));\n            getDisabledTeachersService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_a_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const selectTeacherCardService = teacherCardId => {\n    store.dispatch(selectTeacherCard(teacherCardId));\n};\n\nexport const getDisabledTeachersService = () => {\n    axios\n        .get(DISABLED_TEACHERS_URL)\n        .then(res => {\n            store.dispatch(setDisabledTeachers(res.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const setDisabledTeachersService = teacher => {\n    teacher.disable = true;\n    updateTeacherService({ teacher });\n};\n\nexport const setEnabledTeachersService = teacher => {\n    teacher.disable = false;\n    updateTeacherService({ teacher });\n};\n","import axios from '../helper/axios';\nimport { store } from '../index';\n\nimport {\n    LESSON_TYPES_URL,\n    LESSON_URL,\n    COPY_LESSON_URL\n} from '../constants/axios';\nimport { LESSON_FORM } from '../constants/reduxForms';\n\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { setLoadingService } from './loadingService';\n\nimport {\n    deleteLessonCard,\n    selectGroupId,\n    selectLessonCard,\n    setLessonsCards,\n    setLessonTypes,\n    setUniqueError,\n    storeLessonCard,\n    updateLessonCard\n} from '../redux/actions/index';\n\nimport { snackbarTypes } from '../constants/snackbarTypes';\n\nimport { checkUniqLesson } from '../validation/storeValidation';\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { getTeacherById } from './teacherService';\n\nexport const getLessonsByGroupService = groupId => {\n    axios\n        .get(LESSON_URL + `?groupId=${groupId}`)\n        .then(response => {\n            store.dispatch(setLessonsCards(response.data));\n            setLoadingService(false);\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const getLessonTypesService = () => {\n    axios\n        .get(LESSON_TYPES_URL)\n        .then(response => {\n            store.dispatch(setLessonTypes(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\nconst cardObjectHandler = (card, groupId) => {\n    return {\n        id: card.lessonCardId,\n        group: {\n            id: groupId\n        },\n        hours: card.hours,\n        subject: {\n            id: card.subject\n        },\n        lessonType: card.type,\n        subjectForSite: card.subjectForSite,\n        teacher: { id: card.teacher },\n        linkToMeeting:card.linkToMeeting,\n        grouped: card.grouped\n    };\n};\n\nconst updateLessonHandler = data => {\n    return axios\n        .put(LESSON_URL, data)\n        .then(response => {\n            store.dispatch(updateLessonCard(response.data));\n            selectLessonCardService(null);\n            resetFormHandler(LESSON_FORM);\n\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nconst createLessonHandler = (data, isCopy) => {\n    return axios\n        .post(LESSON_URL, data)\n        .then(response => {\n            if (!isCopy) {\n                store.dispatch(storeLessonCard(response.data));\n            }\n            resetFormHandler(LESSON_FORM);\n\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const handleLessonCardService = (card, groupId) => {\n\n    let cardObj = cardObjectHandler(card, groupId);\n    if (!checkUniqLesson(cardObj)) {\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.ERROR,\n            i18n.t('common:lesson_service_is_not_unique')\n        );\n        setUniqueErrorService(true);\n        return;\n    }\n    if (cardObj.id) {\n        axios\n            .get(`teachers/${cardObj.teacher.id}`)\n            .then(res => {\n                cardObj={...cardObj,teacher: res.data}\n                updateLessonHandler(cardObj);\n            })\n            .catch(error => errorHandler(error));\n\n    } else {\n        createLessonHandler(cardObj, false);\n    }\n};\nexport const removeLessonCardService = lessonCardId => {\n    axios\n        .delete(LESSON_URL + `/${lessonCardId}`)\n        .then(res => {\n            store.dispatch(deleteLessonCard(lessonCardId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const selectLessonCardService = lessonCardId => {\n    store.dispatch(selectLessonCard(lessonCardId));\n};\n\nexport const copyLessonCardService = lessonGroupObj => {\n    const groupList = [];\n    lessonGroupObj.group.map(groupItem => groupList.push(groupItem.id));\n    axios\n        .post(\n            COPY_LESSON_URL + `?lessonId=${lessonGroupObj.lesson.id}`,\n            groupList\n        )\n        .then(response => {\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:copied_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const selectGroupIdService = groupId => {\n    store.dispatch(selectGroupId(groupId));\n};\n\nexport const setUniqueErrorService = isUniqueError => {\n    store.dispatch(setUniqueError(isUniqueError));\n};\n","import * as actionTypes from './actionsType';\n\nexport const storeLessonCard = res => {\n    return {\n        type: actionTypes.ADD_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const setLessonsCards = res => {\n    return {\n        type: actionTypes.SET_LESSONS_CARDS,\n        result: res\n    };\n};\n\nexport const setLessonTypes = res => {\n    return {\n        type: actionTypes.SET_LESSON_TYPES,\n        result: res\n    };\n};\n\nexport const deleteLessonCard = res => {\n    return {\n        type: actionTypes.DELETE_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const selectLessonCard = res => {\n    return {\n        type: actionTypes.SELECT_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const updateLessonCard = res => {\n    return {\n        type: actionTypes.UPDATE_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const selectGroupId = res => {\n    return {\n        type: actionTypes.SELECT_GROUP_ID,\n        result: res\n    };\n};\n\nexport const setUniqueError = res => {\n    return {\n        type: actionTypes.SET_UNIQUE_ERROR,\n        result: res\n    };\n};\n","import { store } from '../index';\nimport { DISABLED_ROOMS_URL, ROOM_URL } from '../constants/axios';\nimport { ROOM_FORM } from '../constants/reduxForms';\nimport axios from '../helper/axios';\n\nimport {\n    showListOfRooms,\n    deleteRoom,\n    addRoom,\n    selectOneRoom,\n    updateOneRoom,\n    clearRoomOne,\n    setDisabledRooms\n} from '../redux/actions/rooms';\n\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nimport i18n from '../helper/i18n';\n\nexport const showListOfRoomsService = () => {\n    axios\n        .get(ROOM_URL)\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(showListOfRooms(bufferArray));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const deleteRoomCardService = id => {\n    axios\n        .delete(ROOM_URL + `/${id}`)\n        .then(res => {\n            store.dispatch(deleteRoom(id));\n            getDisabledRoomsService();\n            showListOfRoomsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:room_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getDisabledRoomsService = () => {\n    axios\n        .get(DISABLED_ROOMS_URL)\n        .then(res => {\n            store.dispatch(setDisabledRooms(res.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const setDisabledRoomsService = room => {\n    room.disable = true;\n    put(room);\n};\n\nexport const setEnabledRoomsService = room => {\n    room.disable = false;\n    put(room);\n};\n\nconst put = values => {\n    axios\n        .put(ROOM_URL, values)\n        .then(result => {\n            store.dispatch(updateOneRoom(result.data));\n            resetFormHandler(ROOM_FORM);\n            getDisabledRoomsService();\n            showListOfRoomsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:room_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nconst post = values => {\n    axios\n        .post(ROOM_URL, values)\n        .then(res => {\n            store.dispatch(addRoom(res.data));\n            resetFormHandler(ROOM_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:room_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createRoomService = values => {\n    if (values.id) {\n        const newValue = {\n            id: values.id,\n            name: values.name,\n            type: { id: +values.type, description: values.typeDescription }\n        };\n        put(newValue);\n    } else {\n        const newValue = {\n            name: values.name,\n            type: { id: +values.type, description: values.typeDescription }\n        };\n\n        post(newValue);\n    }\n};\n\nexport const selectOneRoomService = roomId => {\n    store.dispatch(selectOneRoom(roomId));\n};\n\nexport const clearRoomOneService = () => {\n    store.dispatch(clearRoomOne());\n    resetFormHandler(ROOM_FORM);\n};\n","import * as actionsType from './actionsType';\n\nexport const addRoom = room => {\n    return {\n        type: actionsType.ADD_ROOM,\n        result: room\n    };\n};\n\nexport const deleteRoom = id => {\n    return {\n        type: actionsType.DELETE_ROOM,\n        result: id\n    };\n};\n\nexport const showListOfRooms = rooms => {\n    return {\n        type: actionsType.SHOW_LIST_OF_ROOMS,\n        result: rooms\n    };\n};\n\nexport const  setDisabledRooms = rooms => {\n    return {\n        type: actionsType.SET_DISABLED_ROOMS,\n        result: rooms\n    };\n};\n\nexport const selectOneRoom = id => {\n    return {\n        type: actionsType.SELECT_ONE_ROOM,\n        result: id\n    };\n};\n\nexport const updateOneRoom = room => {\n    return {\n        type: actionsType.UPDATE_ONE_ROOM,\n        result: room\n    };\n};\n\nexport const clearRoomOne = () => ({\n    type: actionsType.CLEAR_ROOM_ONE\n});\n\n\n","import React from 'react';\n\nimport { colors } from '../../constants/schedule/colors';\nimport { cssClasses } from '../../constants/schedule/cssClasses';\nimport { checkAvailabilityScheduleService } from '../../services/scheduleService';\nimport { setLoadingService } from '../../services/loadingService';\n\nconst Board = props => {\n    const itemGroupId = props.itemGroupId;\n\n    const drop = e => {\n        e.preventDefault();\n        const card_id = e.dataTransfer.getData('card_id');\n\n        const card = document.getElementById(card_id);\n        if (card) card.style.display = 'block';\n\n        const arr = e.target.id.split('-');\n        const day = arr[3];\n        const classId = arr[5];\n        const week = arr[7];\n\n        const item = JSON.parse(card.childNodes[0].value);\n        let itemId = item.id;\n\n        let obj = {\n            lessonId: item.lesson.id,\n            dayOfWeek: day.toUpperCase(),\n            periodId: +classId,\n            evenOdd: week.toUpperCase(),\n            semesterId: props.currentSemester.id\n        };\n\n        checkAvailabilityScheduleService(obj);\n\n        setLoadingService(true);\n        if (itemId) obj = { ...obj, id: itemId };\n\n        props.setModalData({ item: obj, groupId: item.lesson.group.id });\n        props.openDialog();\n    };\n\n    const dragOver = e => {\n        const target = e.target;\n        const children = target.childNodes;\n        const arr = target.id.split('-');\n        const borderGroupId = +arr[1];\n\n        if (\n            borderGroupId !== itemGroupId &&\n            target.classList.contains(cssClasses.SCHEDULE_BOARD)\n        ) {\n            target.style.backgroundColor = colors.DANGER;\n        } else if (\n            target.classList.contains(cssClasses.SCHEDULE_BOARD) &&\n            children[1]\n        ) {\n            children[1].style.backgroundColor = colors.DANGER;\n            target.style.backgroundColor = colors.DANGER;\n        } else if (\n            !children[1] &&\n            target.classList.contains(cssClasses.SCHEDULE_BOARD)\n        ) {\n            target.style.backgroundColor = colors.ALLOW;\n            e.preventDefault();\n        }\n    };\n\n    const dragLeave = e => {\n        const target = e.target;\n        const children = target.childNodes;\n        const parent = target.parentNode;\n\n        const arr = target.id.split('-');\n        const borderGroupId = +arr[1];\n\n        if (borderGroupId === itemGroupId && !target.childNodes[1]) {\n            target.style.backgroundColor = colors.POSSIBILITY;\n        } else if (\n            target.classList.contains(cssClasses.SCHEDULE_BOARD) &&\n            children[1]\n        ) {\n            target.style.backgroundColor = colors.NOTHING;\n            children[1].style.backgroundColor = colors.NOTHING;\n        } else if (\n            parent &&\n            parent.classList.contains(cssClasses.SCHEDULE_BOARD)\n        ) {\n            parent.style.backgroundColor = colors.NOTHING;\n            parent.parentNode.style.backgroundColor = colors.NOTHING;\n        } else {\n            target.style.backgroundColor = colors.NOTHING;\n        }\n    };\n\n    return (\n        <div\n            id={props.id}\n            onDrop={drop}\n            onDragOver={dragOver}\n            onDragLeave={dragLeave}\n            className={props.className}\n        >\n            {props.children}\n        </div>\n    );\n};\n\nexport default Board;\n","import React from 'react';\nimport { MdDelete, MdEdit } from 'react-icons/md';\n\nimport Card from '../../share/Card/Card';\nimport { FaUserPlus } from 'react-icons/fa';\n\nconst ScheduleItem = props => {\n    let lesson = props.lesson;\n    let itemId;\n\n    const item = props.item || null;\n    const t = props.translation;\n    const { fStrLetterCapital } = props;\n\n    if (item) {\n        lesson = item.lesson;\n        itemId = item.id;\n    }\n\n    const addition = props.addition;\n\n    const itemNodeId = `card-${lesson.id}-group-${lesson.group.id}-${addition}`;\n    const deleteNodeId = `delete-${lesson.id}-${lesson.group.id}-${addition}`;\n\n    const isGroupped = grouped =>\n        grouped ? (\n            <FaUserPlus\n                title={t('formElements:grouped_label')}\n                className=\"svg-btn copy-btn align-left info-btn\"\n            />\n        ) : (\n            ''\n        );\n\n    return (\n        <Card id={itemNodeId} class={props.class} draggable={true}>\n            <input\n                type=\"hidden\"\n                value={JSON.stringify({\n                    lesson: lesson,\n                    id: itemId\n                })}\n            />\n            {props.inBoard ? (\n                <>\n                    <div className=\"cards-btns delete-item\" id={deleteNodeId}>\n                        <MdDelete\n                            title={t('common:delete_schedule_item')}\n                            className=\"svg-btn delete-btn\"\n                            onClick={() =>\n                                props.deleteItem(itemId, item.lesson.group.id)\n                            }\n                        />\n                        <MdEdit\n                            title={t('common:edit_schedule_item')}\n                            className=\"svg-btn edit-btn\"\n                            onClick={() => props.editItem(item)}\n                        />\n                    </div>\n                </>\n            ) : (\n                ''\n            )}\n\n            <p>\n                {fStrLetterCapital(lesson.subjectForSite)} (\n                {t(\n                    `formElements:lesson_type_${lesson.lessonType.toLowerCase()}_label`\n                )}\n                )\n            </p>\n            <p>{lesson.teacherForSite}</p>\n            {props.inBoard ? (\n                <p>\n                    {isGroupped(lesson.grouped)}\n                    <b>{item.room.name}</b>\n                </p>\n            ) : (\n                <p>\n                    {isGroupped(lesson.grouped)}\n                    <b>1</b> {t('formElements:hours_label')}\n                </p>\n            )}\n        </Card>\n    );\n};\n\nexport default ScheduleItem;\n","export const firstStringLetterCapital = str => {\n    return str.replace(/^\\w/, c => c.toUpperCase());\n};\n","import React from 'react';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { styled } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nimport Board from '../Board/Board';\nimport ScheduleItem from '../ScheduleItem/ScheduleItem';\n\nimport { selectGroupIdService } from '../../services/lessonService';\n\nimport { firstStringLetterCapital } from '../../helper/strings';\n\nconst GroupField = styled(TextField)({\n    width: '150px'\n});\n\nconst ScheduleLessonsList = props => {\n    const { groups, groupId } = props;\n\n    let lessons = props.lessons;\n    const items = props.items;\n\n    const t = props.translation;\n\n    const handleGroupSelect = group => {\n        if (group) selectGroupIdService(group.id);\n    };\n\n    const groupFinderHandle = groupId => {\n        if (groupId) return groups.find(group => group.id === groupId);\n        else return '';\n    };\n\n    const defaultProps = {\n        options: groups,\n        getOptionLabel: option => (option ? option.title : '')\n    };\n\n    const firstStringLetterCapitalHandle = str => {\n        return firstStringLetterCapital(str);\n    };\n\n    const lessonItems = lesson => {\n        let hours = lesson.hours;\n        const lessonItem = [];\n        let els = [];\n        let hoursInSchedule = 0;\n\n        if (items.length > 0) {\n            els = items.filter(item => item.lesson.id === lesson.id);\n        }\n\n        els.forEach(() => {\n            hoursInSchedule += 1;\n        });\n\n        for (let i = 0; i < hours - hoursInSchedule; i++) {\n            lessonItem.push(\n                <section key={lesson.id + i}>\n                    <ScheduleItem\n                        index={i}\n                        lesson={lesson}\n                        fStrLetterCapital={firstStringLetterCapitalHandle}\n                        translation={t}\n                        classScheduler={props.classScheduler}\n                    />\n                </section>\n            );\n        }\n        return lessonItem;\n    };\n\n    return (\n        <>\n            {t('common:select_group_schedule')}\n            <Autocomplete\n                {...defaultProps}\n                id=\"group\"\n                clearOnEscape\n                openOnFocus\n                value={groupFinderHandle(groupId)}\n                onChange={(event, newValue) => {\n                    handleGroupSelect(newValue);\n                }}\n                renderInput={params => (\n                    <GroupField\n                        {...params}\n                        label={t('formElements:group_label')}\n                        margin=\"normal\"\n                    />\n                )}\n            />\n            {lessons.length > 0 ? (\n                <Board className=\"board lesson-board\">\n                    {lessons.map(lesson => lessonItems(lesson))}\n                </Board>\n            ) : groupId ? (\n                t('lesson_no_lesson_for_group_label')\n            ) : (\n                ''\n            )}\n        </>\n    );\n};\n\nexport default ScheduleLessonsList;\n","import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from '@material-ui/core';\n\nimport '../../share/modals/dialog.scss';\n\nconst useStyles = makeStyles(() => ({\n    roomField: {\n        '&': {\n            margin: '0 auto',\n            width: 250\n        }\n    }\n}));\n\nconst ScheduleDialog = props => {\n    const {\n        onClose,\n        itemData,\n        open,\n        rooms,\n        availability,\n        translation,\n        isLoading\n    } = props;\n\n    const [room, setRoom] = useState('');\n    const [sure, setSure] = useState(true);\n\n    const classes = useStyles();\n\n    const handleClose = () => {\n        onClose();\n    };\n\n    const chooseClickHandle = () => {\n        if (!room) return;\n\n        if (\n            !room.available ||\n            !availability.teacherAvailable ||\n            !availability.classSuitsToTeacher\n        ) {\n            setSure(false);\n            return;\n        }\n        onClose({ itemData, room });\n        setRoom(null);\n    };\n\n    const groupByAvailability = arr => {\n        arr.sort((x, y) => {\n            return x === y ? 0 : x ? 1 : -1;\n        });\n        return arr;\n    };\n\n    const defaultProps = {\n        options: availability.rooms\n            ? groupByAvailability(availability.rooms)\n            : rooms,\n        getOptionLabel: option =>\n            option\n                ? option.available\n                    ? option.name + ` (${translation('common:available')})`\n                    : option.name + ` (${translation('common:unavailable')})`\n                : ''\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"simple-dialog-title\"\n            open={open}\n        >\n            {sure ? (\n                <>\n                    {isLoading ? (\n                        <div className=\"circular-progress-dialog\">\n                            <CircularProgress />\n                        </div>\n                    ) : (\n                        <>\n                            <DialogTitle id=\"simple-dialog-title\">\n                                {translation('common:schedule_dialog_title')}\n                            </DialogTitle>\n                            <div className=\"availability-info\">\n                                {!availability.classSuitsToTeacher ? (\n                                    <p className=\"availability-warning\">\n                                        {translation(\n                                            'common:class_does_not_suit_for_teacher'\n                                        )}\n                                    </p>\n                                ) : (\n                                    ''\n                                )}\n                                {!availability.teacherAvailable ? (\n                                    <p className=\"availability-warning\">\n                                        {translation(\n                                            'common:teacher_is_unavailable'\n                                        )}{' '}\n                                    </p>\n                                ) : (\n                                    ''\n                                )}\n                            </div>\n                            <Autocomplete\n                                {...defaultProps}\n                                id=\"group\"\n                                clearOnEscape\n                                openOnFocus\n                                className={classes.roomField}\n                                onChange={(event, newValue) => {\n                                    setRoom(newValue);\n                                }}\n                                renderInput={params => (\n                                    <TextField\n                                        {...params}\n                                        label={translation(\n                                            'formElements:room_label'\n                                        )}\n                                        margin=\"normal\"\n                                    />\n                                )}\n                            />\n                            <div className=\"buttons-container\">\n                                <Button\n                                    className=\"dialog-button\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => chooseClickHandle()}\n                                >\n                                    {translation(\n                                        'formElements:choose_button_title'\n                                    )}\n                                </Button>\n                                <Button\n                                    className=\"dialog-button\"\n                                    variant=\"contained\"\n                                    onClick={() => onClose()}\n                                >\n                                    {translation(\n                                        'formElements:cancel_button_title'\n                                    )}\n                                </Button>\n                            </div>\n                        </>\n                    )}\n                </>\n            ) : (\n                <>\n                    <DialogTitle id=\"simple-dialog-title\">\n                        <p className=\"availability-warning\">\n                            {!room.available\n                                ? translation('common:room_is_unavailable') +\n                                  '. '\n                                : ''}\n                        </p>\n                        <p className=\"availability-warning\">\n                            {!availability.teacherAvailable\n                                ? translation('common:teacher_is_unavailable') +\n                                  '. '\n                                : ''}\n                        </p>\n\n                        <p className=\"availability-warning\">\n                            {!availability.classSuitsToTeacher\n                                ? translation(\n                                      'common:class_does_not_suit_for_teacher'\n                                  ) + '. '\n                                : ''}\n                        </p>\n\n                        {translation('common:are_you_sure')}\n                    </DialogTitle>\n                    <div className=\"buttons-container\">\n                        <Button\n                            className=\"dialog-button\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                onClose({ itemData, room });\n                                setSure(true);\n                            }}\n                        >\n                            {translation('common:yes_button_title')}\n                        </Button>\n                        <Button\n                            className=\"dialog-button\"\n                            variant=\"contained\"\n                            onClick={() => setSure(true)}\n                        >\n                            {translation('common:no_button_title')}\n                        </Button>\n                    </div>\n                </>\n            )}\n        </Dialog>\n    );\n};\n\nScheduleDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    rooms: PropTypes.array.isRequired,\n    availability: PropTypes.object.isRequired\n};\n\nexport default ScheduleDialog;\n","import React, { useState } from 'react';\nimport { IoMdMore } from 'react-icons/all';\n\nimport Board from '../Board/Board';\nimport ScheduleItem from '../ScheduleItem/ScheduleItem';\nimport ScheduleDialog from '../ScheduleDialog/ScheduleDialog';\n\nimport { firstStringLetterCapital } from '../../helper/strings';\n\nimport {\n    addItemToScheduleService,\n    deleteItemFromScheduleService,\n    checkAvailabilityChangeRoomScheduleService,\n    editRoomItemToScheduleService\n} from '../../services/scheduleService';\n\nimport {\n    getLessonsByGroupService,\n    selectGroupIdService\n} from '../../services/lessonService';\nimport { setLoadingService } from '../../services/loadingService';\n\nimport { cssClasses } from '../../constants/schedule/cssClasses';\nimport { colors } from '../../constants/schedule/colors';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst Schedule = props => {\n    const { groups, itemGroupId } = props;\n    const [open, setOpen] = useState(false);\n    const [itemData, setItemData] = useState(null);\n\n    const setNewItemHandle = (item, room, groupId) => {\n        getLessonsByGroupService(groupId);\n        selectGroupIdService(groupId);\n        if (item.id) deleteItemFromScheduleService(item.id);\n\n        addItemToScheduleService({ ...item, roomId: room.id });\n    };\n\n    const setEditItemHandle = (itemId, roomId, groupId) => {\n        getLessonsByGroupService(groupId);\n        selectGroupIdService(groupId);\n        editRoomItemToScheduleService({ itemId, roomId });\n    };\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = value => {\n        setOpen(false);\n        if (value) {\n            setLoadingService(true);\n            let el = '';\n            if (value.itemData.item.id) {\n                setEditItemHandle(\n                    value.itemData.item.id,\n                    value.room.id,\n                    value.itemData.groupId\n                );\n\n                el = document.getElementById(\n                    'card-' +\n                        value.itemData.item.lesson.id +\n                        '-group-' +\n                        value.itemData.groupId +\n                        '-in-day-' +\n                        value.itemData.item.dayOfWeek.toLowerCase() +\n                        '-class-' +\n                        value.itemData.item.period.id +\n                        '-week-' +\n                        value.itemData.item.evenOdd.toLowerCase()\n                );\n            } else {\n                setNewItemHandle(\n                    value.itemData.item,\n                    value.room,\n                    value.itemData.groupId\n                );\n                el = document.getElementById(\n                    'group-' +\n                        value.itemData.groupId +\n                        '-day-' +\n                        value.itemData.item.dayOfWeek.toLowerCase() +\n                        '-class-' +\n                        value.itemData.item.periodId +\n                        '-week-' +\n                        value.itemData.item.evenOdd.toLowerCase()\n                );\n            }\n            el.scrollIntoView();\n            setTimeout(() => {\n                el.style.backgroundColor = colors.ALLOW;\n            }, 1000);\n\n            setTimeout(() => {\n                el.style.backgroundColor = colors.NOTHING;\n            }, 3000);\n        }\n    };\n\n    const items = props.items;\n\n    const currentSemester = props.currentSemester;\n    const days = currentSemester.semester_days;\n    const classes = currentSemester.semester_classes;\n\n    const t = props.translation;\n\n    const dayContainerHeight = classes.length * 185.5 + 4.6 * classes.length;\n\n    const useStyles = makeStyles({\n        dayContainer: {\n            height: dayContainerHeight,\n            maxHeight: dayContainerHeight\n        },\n        day: {\n            height: dayContainerHeight - 37,\n            maxHeight: dayContainerHeight- 37\n        }\n    });\n    const elClasses = useStyles();\n\n    const firstStringLetterCapitalHandle = str => {\n        return firstStringLetterCapital(str);\n    };\n\n    const deleteItemFromScheduleHandler = (itemId, groupId) => {\n        deleteItemFromScheduleService(itemId);\n        getLessonsByGroupService(groupId);\n        selectGroupIdService(groupId);\n    };\n    const editItemOnScheduleHandler = item => {\n        setItemData({ item: item, groupId: item.lesson.group.id });\n        getLessonsByGroupService(item.lesson.group.id);\n        selectGroupIdService(item.lesson.group.id);\n\n        let itemId = item.id;\n\n        let obj = {\n            dayOfWeek: item.dayOfWeek,\n            periodId: +item.period.id,\n            evenOdd: item.evenOdd,\n            semesterId: item.lesson.semester.id\n        };\n        checkAvailabilityChangeRoomScheduleService(obj);\n        setLoadingService(true);\n        if (itemId) obj = { ...obj, id: itemId };\n        setOpen(true);\n    };\n\n    const conditionFunc = (item, lesson, group) => {\n        return (\n            `group-${\n                item.lesson.group.id\n            }-day-${item.dayOfWeek.toLowerCase()}-class-${\n                item.period.id\n            }-week-${item.evenOdd.toLowerCase()}` ===\n            `group-${group.id}-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`\n        );\n    };\n\n    const addDeleteBtnToItem = (item, group, lesson) => {\n        const addition = `in-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`;\n        const itemNodeId = `card-${item.lesson.id}-group-${group.id}-${addition}`;\n        const deleteNodeId = `delete-${item.lesson.id}-${group.id}-${addition}`;\n        setTimeout(() => {\n            const itemNode = document.getElementById(itemNodeId);\n            const deleteNode = document.getElementById(deleteNodeId);\n            if (deleteNode && itemNode) {\n                itemNode.addEventListener('mouseenter', () => {\n                    deleteNode.style.display = 'block';\n                });\n                itemNode.addEventListener('mouseleave', () => {\n                    deleteNode.style.display = 'none';\n                });\n            }\n        }, 1000);\n    };\n\n    const itemInBoard = (group, lesson, index) => {\n        for (let item of items) {\n            if (conditionFunc(item, lesson, group)) {\n                const addition = `in-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`;\n                addDeleteBtnToItem(item, group, lesson);\n                return (\n                    <section\n                        key={group.id + index + item.id}\n                        className={cssClasses.IN_BOARD_SECTION}\n                    >\n                        <ScheduleItem\n                            inBoard={true}\n                            addition={addition}\n                            class={cssClasses.IN_BOARD_CARD}\n                            item={item}\n                            deleteItem={deleteItemFromScheduleHandler}\n                            editItem={editItemOnScheduleHandler}\n                            fStrLetterCapital={firstStringLetterCapitalHandle}\n                            translation={t}\n                        />\n                    </section>\n                );\n            }\n        }\n    };\n\n    const allLessons = [];\n    days.forEach(day => {\n        classes.forEach(classNumber => {\n            for (let i = 0; i < 2; i++) {\n                if ((i + 1) % 2 === 0) {\n                    allLessons.push({\n                        day: { name: day.toLowerCase() },\n                        classNumber,\n                        week: 'even'\n                    });\n                } else {\n                    allLessons.push({\n                        day: { name: day.toLowerCase() },\n                        classNumber,\n                        week: 'odd'\n                    });\n                }\n            }\n        });\n    });\n\n    return (\n        <section className=\"cards-container schedule\">\n            <ScheduleDialog\n                translation={t}\n                itemData={itemData}\n                rooms={props.rooms}\n                availability={props.availability}\n                open={open}\n                isLoading={props.isLoading}\n                onClose={handleClose}\n            />\n            <aside className=\"day-classes-aside\">\n                <section className=\"card empty-card\">Група</section>\n                {days.map(day => (\n                    <section\n                        className={\n                            elClasses.dayContainer +\n                            ' cards-container day-container'\n                        }\n                        key={day}\n                    >\n                        <section\n                            className={\n                                elClasses.day + ' card schedule-day card'\n                            }\n                        >\n                            {t(`day_of_week_${day}`)}\n                        </section>\n                        <section className=\"class-section\">\n                            {classes.map(classScheduler => (\n                                <section\n                                    className=\"card schedule-class\"\n                                    key={classScheduler.id}\n                                >\n                                    {classScheduler.class_name}\n                                </section>\n                            ))}\n                        </section>\n                    </section>\n                ))}\n            </aside>\n            <section className=\"groups-section\">\n                {groups.map(group => (\n                    <section\n                        key={'group-' + group.id}\n                        className=\"group-section\"\n                    >\n                        <div\n                            className=\"group-title card\"\n                            id={`group-${group.id}`}\n                        >\n                            {group.title}\n                        </div>\n                        {allLessons.map((lesson, index) => (\n                            <div\n                                key={group + '-' + index}\n                                className=\"board-div\"\n                            >\n                                <Board\n                                    currentSemester={currentSemester}\n                                    setModalData={setItemData}\n                                    openDialog={handleClickOpen}\n                                    itemGroupId={itemGroupId}\n                                    id={`group-${group.id}-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`}\n                                    className={`board card ${cssClasses.SCHEDULE_BOARD} group-${group.id} schedule-board`}\n                                >\n                                    <IoMdMore\n                                        className=\"more-icon\"\n                                        title={\n                                            `${t(\n                                                `formElements:teacher_wish_day`\n                                            )}: ` +\n                                            t(\n                                                `day_of_week_${lesson.day.name.toUpperCase()}`\n                                            ).toLowerCase() +\n                                            `\\n${t(`teacher_wish_week`)}: ` +\n                                            t(`week_${lesson.week}_title`) +\n                                            `\\n${t('class_schedule')}: ` +\n                                            lesson.classNumber.class_name\n                                        }\n                                    />\n                                    {itemInBoard(group, lesson, index)}\n                                </Board>\n                            </div>\n                        ))}\n                    </section>\n                ))}\n            </section>\n        </section>\n    );\n};\n\nexport default Schedule;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\n\nimport { showAllGroupsService } from '../../services/groupService';\nimport { getLessonsByGroupService } from '../../services/lessonService';\nimport {\n    setLoadingService,\n    setScheduleLoadingService\n} from '../../services/loadingService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport {\n    getScheduleItemsService,\n    clearSchedule\n} from '../../services/scheduleService';\nimport { showListOfRoomsService } from '../../services/roomService';\n\nimport ScheduleLessonsList from '../../components/ScheduleLessonsList/ScheduleLessonsList';\nimport Schedule from '../../components/Schedule/Schedule';\n\nimport { CircularProgress } from '@material-ui/core';\n\nimport './SchedulePage.scss';\n\nconst SchedulePage = props => {\n    const { t } = useTranslation('common');\n\n    document.title = t('schedule_title');\n\n    const { groups, groupId } = props;\n\n    const itemGroupId = props.itemGroupId;\n\n    const scheduleItems = props.scheduleItems;\n\n    let lessons = props.lessons;\n\n    const isLoading = props.loading;\n\n    useEffect(() => {\n        setLoadingService(true);\n        setScheduleLoadingService(true);\n        getScheduleItemsService();\n    }, []);\n\n    useEffect(() => {\n        showAllGroupsService();\n    }, []);\n\n    useEffect(() => {\n        if (groupId) {\n            setLoadingService(true);\n            getLessonsByGroupService(groupId);\n        }\n    }, [groupId]);\n\n    useEffect(() => getClassScheduleListService(), []);\n\n    useEffect(() => showListOfRoomsService(), []);\n    const handleClearSchedule = () => {\n        if (props.currentSemester.id) {\n            clearSchedule(props.currentSemester.id);\n            if (groupId) {\n                setLoadingService(true);\n                getLessonsByGroupService(groupId);\n            }\n        }\n    };\n\n    return (\n        <>\n\n            <section className=\"cards-container schedule-page\">\n                <section className=\"flexbox card \">\n                    {props.scheduleLoading ? (\n                        <CircularProgress />\n                    ) : (\n                        <>\n                            {!props.currentSemester.id ? (\n                                <h2 className=\"no-current-semester\">\n                                    {t('no_current_semester')}\n                                </h2>\n                            ) : (\n                                <Schedule\n                                    currentSemester={props.currentSemester}\n                                    groups={groups}\n                                    itemGroupId={itemGroupId}\n                                    items={scheduleItems}\n                                    translation={t}\n                                    rooms={props.rooms}\n                                    availability={props.availability}\n                                    isLoading={isLoading}\n                                />\n                            )\n                            }\n                        </>\n                    )}\n                </section>\n                <aside className=\"lesson-list card\">\n                    {isLoading ? (\n                        <CircularProgress />\n                    ) : (\n                        <>\n                            <Button\n                                className=\"buttons-style\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => handleClearSchedule()}\n                            >\n                                {t('clear_schedule_label')}\n                            </Button>\n                            <ScheduleLessonsList\n                                items={scheduleItems}\n                                groups={groups}\n                                lessons={lessons}\n                                groupId={groupId}\n                                translation={t}\n                                classScheduler={\n                                    props.currentSemester.semester_classes\n                                }\n                            />\n                        </>\n                    )}\n                </aside>\n            </section>\n            <section className=\"for-phones-and-tablets card\">\n                <h1>{t('use_pc')}</h1>\n            </section>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    groups: state.groups.groups,\n    lessons: state.lesson.lessons,\n    groupId: state.lesson.groupId,\n    loading: state.loadingIndicator.loading,\n    scheduleLoading: state.loadingIndicator.scheduleLoading,\n    scheduleItems: state.schedule.items,\n    itemGroupId: state.schedule.itemGroupId,\n    availability: state.schedule.availability,\n    currentSemester: state.schedule.currentSemester,\n    semester:state.schedule.semester,\n    rooms: state.rooms.rooms\n});\n\nexport default connect(mapStateToProps)(SchedulePage);\n","import React from \"react\";\n\nimport TextField from \"@material-ui/core/TextField\";\n\nconst renderTextField = ({\n  label,\n  input,\n  meta: { touched, invalid, error },\n  ...custom\n}) => {\n  return (\n    <TextField\n      label={label}\n      placeholder={label}\n      error={touched && invalid}\n      helperText={touched && error}\n      {...input}\n      {...custom}\n    />\n  );\n};\n\nexport default renderTextField;\n","import * as actionTypes from './actionsType';\n\nexport const addDepartment = res => {\n    return {\n        type: actionTypes.ADD_DEPARTMENT,\n        result: res\n    };\n};\nexport const getAllDepartments=res=>{\n    return{\n        type:actionTypes.GET_ALL_DEPARTMENTS,\n        result:res\n    }\n}\nexport const getDisabledDepartments=res=>{\n    return{\n        type:actionTypes.GET_DISABLED_DEPARTMENTS,\n        result:res\n    }\n}\nexport const setDisabledDepartment=res=>{\n    return{\n        type:actionTypes.SET_DISABLED_DEPARTMENT,\n        result:res\n    }\n}\nexport const setEnabledDepartment=res=>{\n    return{\n        type:actionTypes.SET_ENABLED_DEPARTMENT,\n        result:res\n    }\n}\nexport const clearDepartmentForm=()=>{\n    return{\n        type:actionTypes.CLEAR_DEPARTMENT_FORM\n    }\n}\nexport const deleteDepartment=res=>{\n    return{\n        type:actionTypes.DELETE_DEPARTMENT,\n        result:res\n    }\n}\nexport const getDepartItemById=res=>{\n    return {\n        type:actionTypes.GET_DEPARTMENT_BY_ID,\n        result:res\n    }\n}\nexport const updateDepart=res=>{\n    return {\n        type:actionTypes.UPDATE_DEPARTMENT,\n        result:res\n    }\n}","import axios from '../helper/axios';\nimport { DEPARTMENT_URL, SUBJECT_URL } from '../constants/axios';\nimport { store } from '../index';\nimport { addSubject } from '../redux/actions';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { DEPARTMENT_FORM, SUBJECT_FORM } from '../constants/reduxForms';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport i18n from '../helper/i18n';\nimport {\n    addDepartment,\n    clearDepartmentForm,\n    deleteDepartment,\n    getAllDepartments, getDepartItemById,\n    getDisabledDepartments, setDisabledDepartment, setEnabledDepartment, updateDepart\n} from '../redux/actions/departments';\n\nexport const createDepartmentService = data => {\n    axios\n        .post(DEPARTMENT_URL, data)\n        .then(response => {\n            store.dispatch(addDepartment(response.data));\n            resetFormHandler(DEPARTMENT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:department_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getAllDepartmentsService = () => {\n    axios\n        .get(DEPARTMENT_URL)\n        .then(response => {\n            store.dispatch(getAllDepartments(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const getDisabledDepartmentsService = () => {\n    axios\n        .get(`${DEPARTMENT_URL}/disabled`)\n        .then(response => {\n            store.dispatch(getDisabledDepartments(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const setDisabledDepartmentService = (data) => {\n    axios\n        .put(`${DEPARTMENT_URL}`,data)\n        .then(response => {\n            store.dispatch(setDisabledDepartment(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const setEnabledDepartmentService = (data) => {\n    console.log(data);\n    axios\n        .put(`${DEPARTMENT_URL}`,data)\n        .then(response => {\n            store.dispatch(setEnabledDepartment(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const updateDepartmentService = (data) => {\n    axios\n        .put(`${DEPARTMENT_URL}`,data)\n        .then(response => {\n            store.dispatch(updateDepart(response.data));\n            resetFormHandler(DEPARTMENT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:department_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const deleteDepartmentsService = (id) => {\n    axios\n        .delete(`${DEPARTMENT_URL}/${id}`)\n        .then(response => {\n            store.dispatch(deleteDepartment(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const clearDepartment=()=>{\n    store.dispatch(clearDepartmentForm());\n    resetFormHandler(DEPARTMENT_FORM);\n}\nexport const getDepartmentByIdService=(id)=>{\n    store.dispatch(getDepartItemById(Number(id)));\n}\n","export const setDisableButton = (pristine,submitting,id) => {\n    if(id!==undefined){\n        return false\n    }\n    if(!pristine){\n        return false\n    }\n    if (submitting){\n        return true\n    }\n    if(id===undefined){\n        return true\n    }\n}\nexport const getClearOrCancelTitle = ( id ,t) => {\n   return  id===undefined?t('clear_button_label'):t('cancel_button_title')\n}","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport { required } from '../../validation/validateFields';\n\nimport Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/core/styles';\n\nimport Card from '../../share/Card/Card';\n\nimport { TEACHER_FORM } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\n\nimport './AddTeacherForm.scss';\nimport Select from 'react-select';\nimport { ReduxFormSelect } from '../../helper/ReduxFormSelect';\nimport renderSelectField from '../../share/renderedFields/select';\nimport { getDepartmentByIdService } from '../../services/departmentService';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nlet AddTeacher = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, submitting, reset,departments,teacher } = props;\n\n    const teacherId = teacher.id;\n\n    useEffect(() => {\n        if (teacherId) {\n            initializeFormHandler(teacher);\n        } else {\n            props.initialize();\n        }\n    }, [teacherId]);\n\n    const initializeFormHandler = teacher => {\n        props.initialize({\n            id: teacher.id,\n            surname: teacher.surname,\n            name: teacher.name,\n            patronymic: teacher.patronymic,\n            position: teacher.position,\n            email:teacher.email,\n            department: teacher.department.id\n        });\n    };\n\n    return (\n        <Card class=\"form-card teacher-form\">\n            <form className=\"createTeacherForm w-100\" onSubmit={handleSubmit}>\n                <h2 className=\"form-title\">\n                    {teacherId ? t('edit_title') : t('create_title')}{' '}\n                    {t('teacher_a_label')}\n                </h2>\n\n                <Field\n                    className=\"form-field\"\n                    name=\"surname\"\n                    id=\"surname\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_surname')}\n                    label={t('teacher_surname')}\n                    validate={[required]}\n                />\n\n                <Field\n                    className=\"form-field\"\n                    name=\"name\"\n                    id=\"name\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_first_name')}\n                    label={t('teacher_first_name')}\n                    validate={[required]}\n                />\n\n                <Field\n                    className=\"form-field\"\n                    name=\"patronymic\"\n                    id=\"patronymic\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_patronymic')}\n                    label={t('teacher_patronymic')}\n                    validate={[required]}\n                />\n\n                <Field\n                    className=\"form-field\"\n                    name=\"position\"\n                    id=\"position\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_position')}\n                    label={t('teacher_position')}\n                    validate={[required]}\n                />\n                <Field\n                    className=\"form-field\"\n                    name=\"email\"\n                    id=\"email\"\n                    component={renderTextField}\n                    type=\"email\"\n                    placeholder={t('email_field')}\n                    label={t('email_field')}\n                    validate={[required]}\n                />\n                <Field\n                    name=\"department\"\n                    className=\"week-days\"\n                    component={renderSelectField}\n                    label={t('department_teachers_label')}\n                    type=\"text\"\n                    onChange={({target})=> {\n                        getDepartmentByIdService(target.value)\n                    }}\n                >\n                    <option />\n                    {departments.map((item) => (\n                        <option key={item.id} value={item.value}>\n                            {item.label}\n                        </option>\n                    ))}\n                </Field>\n\n                <div className=\"form-buttons-container\">\n                    <Button\n                        className=\"buttons-style\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                        type=\"submit\"\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        className=\"buttons-style\"\n                        variant=\"contained\"\n                        disabled={setDisableButton(pristine,submitting,teacher.id)}\n                        onClick={() => {\n                            reset();\n                            props.onSetSelectedCard(null);\n                        }}\n                    >\n                        {getClearOrCancelTitle(teacher.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({ teacher: state.teachers.teacher });\n\nAddTeacher = reduxForm({\n    form: TEACHER_FORM\n})(AddTeacher);\n\nexport default connect(mapStateToProps)(AddTeacher);\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './dialog.scss';\n\nimport i18n from '../../helper/i18n';\nimport { disabledCard } from '../../constants/disabledCard';\n\nexport const ConfirmDialog = props => {\n    const { onClose, whatDelete, cardId, isHide, open } = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">\n                <>\n                    {isHide ? (\n                        <>\n                            {isHide === disabledCard.HIDE ? (\n                                <>{i18n.t('common:do_you_wanna_disable')}</>\n                            ) : (\n                                <>{i18n.t('common:do_you_wanna_show')}</>\n                            )}\n                        </>\n                    ) : (\n                        <>\n                            {i18n.t('common:do_you_wanna')}{' '}\n                            <span className=\"delete-word\">\n                                {i18n.t('common:delete_word')}\n                            </span>{' '}\n                        </>\n                    )}\n\n                    {i18n.t('common:this_card_type', {\n                        cardType: i18n.t(`formElements:${whatDelete}_element`)\n                    })}\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => onClose(cardId)}\n                >\n                    {i18n.t('common:yes_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                >\n                    {i18n.t('common:no_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nConfirmDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default ConfirmDialog;\n","export const cardType = {\n    LESSON: 'Lesson',\n    TEACHER: 'Teacher',\n    CLASS: 'Class',\n    GROUP: 'Group',\n    ROOM: 'Room',\n    TYPE: 'Type',\n    TEMPORARY_SCHEDULE: 'temporary_schedule',\n    SUBJECT: 'Subject',\n    WISH: 'Wish',\n    SEMESTER: 'Semester'\n};\n","export const search = (items, term, arr) => {\n\n    if (term.length === 0) return items;\n    \n    return items.filter( item => {\n        for (let i = 0; i < arr.length; i++) {\n            if (String(item[arr[i]]).toLowerCase().indexOf(term.toLowerCase()) > -1) return true;\n        }\n        return false\n    })\n}","import React, { useState } from 'react';\nimport { FaSearch } from 'react-icons/fa';\nimport { TextField } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport './SearchPanel.scss';\nimport Card from '../../share/Card/Card';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nconst SearchPanel = ({ SearchChange, showDisabled, showArchived }) => {\n    const { t } = useTranslation('formElements');\n    const [term, setTerm] = useState('');\n\n    const [state, setState] = React.useState({\n        checkedB: false,\n        checkedArchived: false\n    });\n\n    const handleChange = event => {\n        switch (event.target.name) {\n            case 'checkedArchived':\n                setState({\n                    ...state,\n                    checkedB: false,\n                    [event.target.name]: event.target.checked\n                });\n                showArchived();\n                break;\n            default:\n                setState({\n                    ...state,\n                    checkedArchived: false,\n                    [event.target.name]: event.target.checked\n                });\n\n                break;\n        }\n        showDisabled();\n\n    };\n\n    const onSearchChange = e => {\n        const term = e.target.value;\n        setTerm(term);\n        SearchChange(term);\n    };\n\n    return (\n        <Card class=\"search-group\">\n            <FormControlLabel\n                control={\n                    <Switch\n                        checked={state.checkedB}\n                        onChange={handleChange}\n                        name=\"checkedB\"\n                        color=\"primary\"\n                    />\n                }\n                label={\n                    !state.checkedB\n                        ? t('common:show_disabled')\n                        : t('common:show_enabled')\n                }\n            />\n            {showArchived ? (\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={state.checkedArchived}\n                            onChange={handleChange}\n                            name=\"checkedArchived\"\n                            color=\"secondary\"\n                        />\n                    }\n                    label={\n                        !state.checkedArchived\n                            ? t('show_archived')\n                            : t('show_regular')\n                    }\n                />\n            ) : (\n                ''\n            )}\n\n            <TextField\n                className=\"form-field\"\n                label={<FaSearch />}\n                placeholder={t('type_to_search')}\n                value={term}\n                onChange={onSearchChange}\n            />\n        </Card>\n    );\n};\n\nexport default SearchPanel;\n","import React from 'react'\nimport { FaSadCry } from 'react-icons/fa'\nimport { useTranslation } from 'react-i18next'\n\nimport './NotFound.scss'\n\nconst NotFound = ({name}) => {\n    const {t} = useTranslation('formElements')\n\n    return (\n        <div className='not-found__wrapper'>\n            <div>\n                <FaSadCry className='not-found__icon'/>\n            </div>\n            <p className='not-found__text'>{t('there_is_no')} {name}</p>\n        </div>\n    )\n}\n\nexport default NotFound\n","import { connect } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport Button from '@material-ui/core/Button';\nimport { useTranslation } from 'react-i18next';\n\nimport './AddGroupForms.scss';\nimport Card from '../../share/Card/Card';\nimport { GROUP_FORM } from '../../constants/reduxForms';\nimport renderTextField from '../../share/renderedFields/input';\nimport {\n    required,\n    uniqueGroup,\n    minLengthValue\n} from '../../validation/validateFields';\nimport { links } from '../../constants/links';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nlet AddGroup = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting,match,group } = props;\n\n    useEffect(() => {\n        if (group&&match.url.includes(links.Edit)&&!match.url.includes(links.Student)) {\n            if (group.id) {\n                props.initialize({\n                    id: group.id,\n                    title: group.title\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [group.id]);\n\n    return (\n        <Card class=\"form-card group-form\">\n            <h2 className=\"group-form__title\">\n                {group.id ? t('edit_title') : t('create_title')}\n                {t('group_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    className=\"form-field\"\n                    name=\"title\"\n                    id=\"title\"\n                    label={t('group_label') + ':'}\n                    component={renderTextField}\n                    validate={[required, minLengthValue, uniqueGroup]}\n                />\n                <div className=\"form-buttons-container group-btns\">\n                    <Button\n                        variant=\"contained\"\n                        className=\"buttons-style \"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                        type=\"submit\"\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        type=\"button\"\n                        className=\"buttons-style\"\n                        variant=\"contained\"\n                        disabled={setDisableButton(pristine,submitting,group.id)}\n                        onClick={onReset}\n                    >\n                        {getClearOrCancelTitle(group.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    group: state.groups.group\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: GROUP_FORM\n    })(AddGroup)\n);\n","import React from 'react';\n\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nconst Alert = props => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n};\n\nconst SnackbarComponent = props => {\n    const message = props.message;\n    const type = props.type;\n    const isOpen = props.isOpen;\n    const handleSnackbarClose = props.handleSnackbarClose;\n\n    return (\n        <Snackbar\n            open={isOpen}\n            autoHideDuration={3000}\n            onClose={handleSnackbarClose}\n        >\n            <Alert onClose={handleSnackbarClose} severity={type}>\n                {message}\n            </Alert>\n        </Snackbar>\n    );\n};\n\nexport default SnackbarComponent;\n","import { store } from '../index';\nimport axios from '../helper/axios';\nimport { DISABLED_SUBJECTS_URL, SUBJECT_URL } from '../constants/axios';\nimport { SUBJECT_FORM } from '../constants/reduxForms';\nimport {\n    addSubject,\n    clearSubject,\n    deleteSubject,\n    selectSubject,\n    setDisabledSubjects,\n    showAllSubjects,\n    updateSubject\n} from '../redux/actions/index';\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const selectSubjectService = subjectId =>\n    store.dispatch(selectSubject(subjectId));\n\nexport const handleSubjectService = values =>\n    values.id ? updateSubjectService(values) : createSubjectService(values);\n\nexport const clearSubjectService = () => {\n    store.dispatch(clearSubject());\n    resetFormHandler(SUBJECT_FORM);\n};\n\nexport const showAllSubjectsService = () => {\n    axios\n        .get(SUBJECT_URL)\n        .then(response => {\n            store.dispatch(showAllSubjects(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const removeSubjectCardService = subjectId => {\n    axios\n        .delete(SUBJECT_URL + `/${subjectId}`)\n        .then(response => {\n            store.dispatch(deleteSubject(subjectId));\n            getDisabledSubjectsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:subject_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createSubjectService = data => {\n    axios\n        .post(SUBJECT_URL, data)\n        .then(response => {\n            store.dispatch(addSubject(response.data));\n            resetFormHandler(SUBJECT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:subject_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const updateSubjectService = data => {\n    return axios\n        .put(SUBJECT_URL, data)\n        .then(response => {\n            store.dispatch(updateSubject(response.data));\n            selectSubjectService(null);\n            showAllSubjectsService();\n            getDisabledSubjectsService();\n            resetFormHandler(SUBJECT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:subject_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getDisabledSubjectsService = () => {\n    axios\n        .get(DISABLED_SUBJECTS_URL)\n        .then(res => {\n            store.dispatch(setDisabledSubjects(res.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const setDisabledSubjectsService = subject => {\n    subject.disable = true;\n    updateSubjectService(subject);\n};\n\nexport const setEnabledSubjectsService = subject => {\n    subject.disable = false;\n    updateSubjectService(subject);\n};\n","import * as actionTypes from './actionsType';\n\nexport const showAllSubjects = res => {\n    return {\n        type: actionTypes.SHOW_ALL_SUBJECTS,\n        result: res\n    };\n};\n\nexport const setDisabledSubjects = res => {\n    return {\n        type: actionTypes.SET_DISABLED_SUBJECTS,\n        result: res\n    };\n};\n\nexport const addSubject = res => {\n    return {\n        type: actionTypes.ADD_SUBJECT,\n        result: res\n    };\n};\n\nexport const deleteSubject = res => {\n    return {\n        type: actionTypes.DELETE_SUBJECT,\n        result: res\n    };\n};\n\nexport const selectSubject = res => {\n    return {\n        type: actionTypes.SELECT_SUBJECT,\n        result: res\n    };\n};\n\nexport const updateSubject = res => {\n    return {\n        type: actionTypes.UPDATE_SUBJECT,\n        result: res\n    };\n};\n\nexport const clearSubject = () => {\n    return{\n        type: actionTypes.CLEAR_SUBJECT\n    }\n\n};\n\n","import axios from '../helper/axios';\nimport { STUDENT_URL, SUBJECT_URL } from '../constants/axios';\nimport { store } from '../index';\nimport { addSubject, deleteSubject, selectGroup, updateSubject } from '../redux/actions';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { STUDENT_FORM, SUBJECT_FORM } from '../constants/reduxForms';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport i18n from '../helper/i18n';\nimport {\n    addStudent,\n    deleteStudent,\n    setStudent, showAllStudents,\n    showAllStudentsByGroupId,\n    updateStudent\n} from '../redux/actions/students';\nimport { getDisabledSubjectsService, selectSubjectService, showAllSubjectsService } from './subjectService';\n\nexport const createStudentService = data => {\n\n    axios\n        .post(STUDENT_URL, data)\n        .then(response => {\n            store.dispatch(addStudent(response.data));\n            resetFormHandler(STUDENT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:student_a_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const getAllStudentsByGroupId = groupId => {\n    axios\n        .get(STUDENT_URL)\n        .then(response => {\n            let result=response.data.filter(({ group })=>group.id===groupId)\n            store.dispatch(showAllStudentsByGroupId(result));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const getAllStudentsService = () => {\n    axios\n        .get(STUDENT_URL)\n        .then(response => {\n            store.dispatch(showAllStudents(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const deleteStudentService = student => {\n    axios\n        .delete(STUDENT_URL + `/${student.id}`)\n        .then(response => {\n            store.dispatch(deleteStudent(student.id));\n            getAllStudentsByGroupId(student.group.id)\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:student_a_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const updateStudentService = data => {\n    return axios\n        .put(STUDENT_URL, data)\n        .then(response => {\n            store.dispatch(updateStudent(response.data));\n            selectStudentService(null);\n            getAllStudentsByGroupId(data.prevGroup.id)\n            resetFormHandler(STUDENT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:student_a_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const selectStudentService = studentId =>\n    store.dispatch(setStudent(studentId));","import * as actionTypes from './actionsType';\n\nexport const addStudent = res => {\n    return {\n        type: actionTypes.ADD_STUDENT,\n        result: res\n    };\n};\nexport const showAllStudents=res=>{\n    return{\n        type:actionTypes.SHOW_ALL_STUDENTS,\n        result:res\n    };\n}\nexport const showAllStudentsByGroupId=res=>{\n    return{\n        type:actionTypes.SHOW_ALL_STUDENTS_BY_GROUP_ID,\n        result:res\n    };\n}\nexport const deleteStudent=res=>{\n    return{\n        type:actionTypes.DELETE_STUDENT,\n        result:res\n    }\n}\nexport const setStudent=res=>{\n    return{\n        type:actionTypes.SET_STUDENT,\n        result:res\n    }\n}\nexport const updateStudent = res => {\n    return {\n        type: actionTypes.UPDATE_STUDENT,\n        result: res\n    };\n};","import { useHistory } from 'react-router-dom/cjs/react-router-dom';\nimport { links } from '../constants/links';\n\n export const  goToGroupPage =(history) =>{\n        history.push(links.GroupList);\n    }\n","import React, { useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport '../dialog.scss';\nimport './showDataDialog.scss'\nimport './addStudentDialog.scss'\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport Card from '../../Card/Card';\nimport { Field, reduxForm } from 'redux-form';\nimport renderTextField from '../../renderedFields/input';\nimport { required } from '../../../validation/validateFields';\nimport { STUDENT_FORM, TEACHER_FORM } from '../../../constants/reduxForms';\nimport { FaWindowClose } from 'react-icons/fa';\nimport renderSelectField from '../../renderedFields/select';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom';\nimport { goToGroupPage } from '../../../helper/pageRedirection';\n let AddStudentDialog =( props) => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, submitting, reset,open,groups,student,match} = props;\n    const studentId = student.id;\n    const history =useHistory();\n    useEffect(() => {\n        if (studentId) {\n            initializeFormHandler(student);\n        } else {\n            props.initialize();\n        }\n    },[studentId]);\n\n\n    const initializeFormHandler = student => {\n        props.initialize({\n            id: student.id,\n            surname: student.surname,\n            name: student.name,\n            patronymic: student.patronymic,\n            email:student.email,\n            group:student.group.id\n        });\n    };\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n\n            <FaWindowClose\n                title={t('close_label')}\n                className=\"close-dialog\"\n                variant=\"contained\"\n                onClick={() => {\n                    //reset();\n                    props.onSetSelectedCard(null);\n                    goToGroupPage(history);\n                }}\n\n            />\n            <DialogTitle id=\"confirm-dialog-title\">\n                <Card class=\"form-card teacher-form\">\n\n                    <form className=\"createTeacherForm w-100\" onSubmit={handleSubmit}>\n\n                        <h2 className=\"form-title\">\n                            {studentId ? t('edit_title') : t('create_title')}{' '}\n                            {t('student_a_label')}\n                        </h2>\n\n\n                        <Field\n                            className=\"form-field\"\n                            name=\"surname\"\n                            id=\"surname\"\n                            component={renderTextField}\n                            type=\"text\"\n                            placeholder={t('surname_placeholder')}\n                            label={t('surname_placeholder')}\n                            validate={[required]}\n                        />\n\n                        <Field\n                            className=\"form-field\"\n                            name=\"name\"\n                            id=\"name\"\n                            component={renderTextField}\n                            type=\"text\"\n                            placeholder={t('name_placeholder')}\n                            label={t('name_placeholder')}\n                            validate={[required]}\n                        />\n\n                        <Field\n                            className=\"form-field\"\n                            name=\"patronymic\"\n                            id=\"patronymic\"\n                            component={renderTextField}\n                            type=\"text\"\n                            placeholder={t('patronymic_placeholder')}\n                            label={t('patronymic_placeholder')}\n                            validate={[required]}\n                        />\n\n\n                        <Field\n                            className=\"form-field\"\n                            name=\"email\"\n                            id=\"email\"\n                            component={renderTextField}\n                            type=\"email\"\n                            placeholder={t('email_field')}\n                            label={t('email_field')}\n                            validate={[required]}\n                        />\n                        {studentId?\n\n                            <Field\n                                className='form-field'\n                                component={renderSelectField}\n                                name='group'\n                                label={t('type_label')}\n                                validate={[required]}>\n                                defaultValue={student.group.id}\n                                {groups.map(group => (\n                                    <option key={group.id} value={group.id}>\n                                        {group.title}\n                                    </option>\n                                ))}\n                            </Field>\n                            :null\n                        }\n\n\n                        <div className=\"form-buttons-container\">\n                            <Button\n                                className=\"buttons-style\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={pristine || submitting}\n                                type=\"submit\"\n                            >\n                                {t('save_button_label')}\n                            </Button>\n                            <Button\n                                className=\"buttons-style\"\n                                variant=\"contained\"\n                                disabled={pristine || submitting}\n                                onClick={() => {\n                                   reset();\n                                   goToGroupPage(history);\n                                    //props.onSetSelectedCard(null);\n                                }}\n                            >\n                                {studentId?t('cancel_button_label'):t('clear_button_label')}\n                            </Button>\n                        </div>\n                    </form>\n                </Card>\n            </DialogTitle>\n        </Dialog>\n    );\n};\n\nAddStudentDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\nconst mapStateToProps = state => ({\n    student: state.students.student,\n    groups: state.groups.groups,\n    group: state.groups.group,\n});\n\n\n\nAddStudentDialog = reduxForm({\n    form: STUDENT_FORM\n})(AddStudentDialog);\nexport default connect(mapStateToProps, {})(AddStudentDialog);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { getTeacherFullName } from './renderTeacher';\nimport { useTranslation } from 'react-i18next';\nimport { FaEnvelope } from 'react-icons/fa';\nimport TableHead from '@material-ui/core/TableHead';\nimport { Checkbox, withStyles } from '@material-ui/core';\nimport { FaEdit } from 'react-icons/all';\nimport { Delete } from '@material-ui/icons';\nimport ConfirmDialog from '../share/modals/dialog';\nimport  AddStudentDialog  from '../share/modals/modal/AddStudentDialog';\nimport { selectStudentService } from '../services/studentService';\nimport './renderStudentTable.scss'\nimport { links } from '../constants/links';\nimport { connect } from 'react-redux';\nimport {Link} from 'react-router-dom';\n\nconst useStyles1 = makeStyles((theme) => ({\n    root: {\n        flexShrink: 0,\n        marginLeft: theme.spacing(2.5),\n    },\n}));\n\nfunction RenderStudentTableActions(props) {\n    const classes = useStyles1();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onPageChange } = props;\n\n    const handleFirstPageButtonClick = (event) => {\n        onPageChange(event, 0);\n    };\n\n    const handleBackButtonClick = (event) => {\n        onPageChange(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event) => {\n        onPageChange(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event) => {\n        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.root}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nRenderStudentTableActions.propTypes = {\n    count: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nconst useStyles2 = makeStyles({\n    table: {\n        minWidth: 500,\n    },\n});\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.white,\n        color: theme.palette.common.black,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport default function RenderStudentTable(props) {\n    const ALL_ROWS=-1;\n    const classes = useStyles2();\n    const {students,onDeleteStudent,onSubmit,group,\n           match,student,checkBoxStudents,handleCheckElement,\n           handleAllChecked,handleAllClear,handleChangeCheckedAllBtn,\n        handleClearCheckedAllBtn,checkedAllBtn,handleAllCheckedBtn}=props;\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [openDeleteDialog,setOpenDeleteDialog]=useState(false);\n    const [openEditDialog,setOpenEditDialog]=useState(false);\n    const { t } = useTranslation('formElements');\n    useEffect(()=>{\n        if(match.path.includes(links.Student)&&match.path.includes(links.Edit)) {\n            handleEdit(student.id)\n        }\n    },[props.group.id])\n    useEffect(()=>{\n        if(match.path.includes(links.Student)&&match.path.includes(links.Delete)) {\n            setOpenDeleteDialog(true)\n        }\n    },[props.group.id]);\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, students.length - page * rowsPerPage);\n\n\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n        handleAllClear();\n        handleClearCheckedAllBtn();\n\n    };\n    const sendMail = (email) => {\n        const mailto =\n            `mailto:${email}`;\n        window.location.href = mailto;\n    }\n    const deleteStudent = (student) => {\n        setOpenDeleteDialog(false);\n        onDeleteStudent(student);\n    }\n    const handleEdit=(studentId)=>{\n        setOpenEditDialog(true);\n        selectStudentService(studentId)\n    }\n    const handleCloseEditDialog=()=>{\n        setOpenEditDialog(false);\n        selectStudentService(null)\n    }\n    const handleSubmit=(data)=>{\n        setOpenEditDialog(false);\n        const sendObject={...data,prevGroup:group}\n        onSubmit(sendObject);\n    }\n    const getCorrectRowCount = (pageItemsCount) => {\n        const resRows=checkBoxStudents.length-pageItemsCount*page;\n       if  (pageItemsCount>resRows||pageItemsCount===ALL_ROWS){\n         return   resRows;\n       }\n       return pageItemsCount;\n    }\nconst handleAllOnPageClick = (event) => {\n        const rowsCount=getCorrectRowCount(rowsPerPage)\n        handleChangeCheckedAllBtn();\n        handleAllChecked(event,rowsCount,page,rowsPerPage);\n}\n    const detectCheckingCheckAllBtn=()=>{\n        const rowsCount=getCorrectRowCount(rowsPerPage);\n        handleAllCheckedBtn (rowsCount,page,rowsPerPage);\n    }\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n\n\n    };\n    const handleCheckElem = (event) => {\n        handleCheckElement(event);\n        detectCheckingCheckAllBtn();\n    }\n    useEffect(()=>{\n        detectCheckingCheckAllBtn()\n    },[page])\n\n\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"custom pagination table\">\n\n                <TableHead>\n\n                    <TableRow>\n                        <StyledTableCell className=\"check-box\">\n                            <span className={'checked-all'}>\n                            <input\n                                id={'checked-all-input'}\n                                type=\"checkbox\"\n                                checked={checkedAllBtn}\n                                onClick={handleAllOnPageClick}\n                                value=\"checkedAll\"\n                                title={`${t('select_all')}`}\n                            />\n                            </span>\n                        </StyledTableCell>\n                        <StyledTableCell>{t('student_label')}</StyledTableCell>\n                        <StyledTableCell>\n                            <FaEnvelope\n                                className=\"svg-btn send-message\"\n                                title={`${t('send_letter_title')}`}\n                            />\n                        </StyledTableCell>\n                        <StyledTableCell>{t('student_actions')}</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n\n                <TableBody>\n                    {(rowsPerPage > 0\n                            ? checkBoxStudents.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            : checkBoxStudents\n                    ).map((student) => (\n                        <StyledTableRow key={student.id}>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                <input\n                                    key={student.id}\n                                    onClick={handleCheckElem}\n                                    type=\"checkbox\"\n                                    checked={student.checked}\n                                    value={student.id}\n                                    className={'checked-box'}\n                                    title={`${t(\"select_student\")} ${getTeacherFullName(student)}`}\n                                />\n                            </StyledTableCell>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                {getTeacherFullName(student)}\n                            </StyledTableCell>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                <span>\n                                   <button className=\"send-letter-button\"\n                                       title={`${t('send_letter_title')} ${student.email}`}\n                                       onClick={()=>sendMail(student.email)}\n                                   >\n                                       {student.email}\n                                   </button>\n                                </span>\n\n                            </StyledTableCell>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                <span className=\"edit-cell\">\n                                     <Link to={`${links.GroupList}${links.Group}/${group.id}${links.Student}/${student.id}${links.Edit}`}>\n                                    <FaEdit\n                                        className=\"edit-button\"\n                                        title={t('edit_title')}\n                                        onClick={() => handleEdit(student.id)}\n                                    />\n                                     </Link>\n                                     <Link to={`${links.GroupList}${links.Group}/${group.id}${links.Student}/${student.id}${links.Delete}`}>\n                                <Delete\n                                    title={t('delete-title')}\n                                    className=\"delete-button\"\n                                    onClick={()=>setOpenDeleteDialog(true)}\n                                />\n                                     </Link>\n                                </span>\n\n                            </StyledTableCell>\n\n                            <AddStudentDialog\n                                open={openEditDialog}\n                                onSubmit={handleSubmit}\n                                onSetSelectedCard={handleCloseEditDialog}\n                                match={match}\n                            />\n\n                            <ConfirmDialog\n                                selectedValue={''}\n                                cardId={student}\n                                whatDelete={'student'}\n                                open={openDeleteDialog}\n                                onClose={deleteStudent}\n                            />\n                        </StyledTableRow>\n                    ))}\n\n                    {emptyRows > 0 && (\n                        <StyledTableRow style={{ height: 53 * emptyRows }}>\n                            <TableCell colSpan={6} />\n                        </StyledTableRow>\n                    )}\n                </TableBody>\n                <TableFooter>\n                    <StyledTableRow>\n                        <TablePagination\n                            labelRowsPerPage={`${t('rows_per_page')}`}\n                            rowsPerPageOptions={[5, 10, 25, { label: `${t('all_page')}`, value: ALL_ROWS }]}\n                            colSpan={3}\n                            count={students.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            SelectProps={{\n                                inputProps: { 'aria-label': 'rows per page' },\n                                native: true,\n                            }}\n                            onPageChange={handleChangePage}\n                            onRowsPerPageChange={handleChangeRowsPerPage}\n                            ActionsComponent={RenderStudentTableActions}\n                        />\n                    </StyledTableRow>\n                </TableFooter>\n            </Table>\n        </TableContainer>\n    );\n}\n\nconst mapStateToProps = state => ({\n    student:state.students.student\n});\n\n connect(mapStateToProps, {})(RenderStudentTable);","export const isObjectEmpty=(object)=> {\n    return (\n        Object.prototype.toString.call(object) === '[object Object]' &&\n        JSON.stringify(object) === '{}'\n    );\n}","import React, { useState } from 'react';\nimport { uploadStudentsToGroupFile } from '../../services/uploadFile';\nimport { Dialog, DialogTitle } from '@material-ui/core';\nimport './UploadFile.scss'\nimport { FaWindowClose } from 'react-icons/fa';\nimport { useTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport { setLoadingService } from '../../services/loadingService';\n\nexport  const UploadFile=(props)=> {\n    const { t } = useTranslation('formElements');\n    const [selectedFile, setSelectedFile] = useState(null);\n    const fileInputRef = React.useRef();\n    const { group: { id },open,handleCloseDialogFile} = props;\n\n    const changeHandler = (event) => {\n        setSelectedFile(event.target.files[0]);\n    };\n\n    const handleSubmission = () => {\n        setLoadingService(true);\n        uploadStudentsToGroupFile(selectedFile, id);\n        fileInputRef.current.value = \"\";\n        setSelectedFile(null);\n    };\n\nconst setDisabledSendButton = () => {\n        return selectedFile===null;\n}\n    return (\n        <Dialog\n\n            disableBackdropClick={true}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle className=\"upload-dialog\" id=\"confirm-dialog-title\">\n                 <FaWindowClose\n                     title={t('close_label')}\n                     className=\"close-dialog\"\n                     variant=\"contained\"\n                     onClick={handleCloseDialogFile}\n\n                 />\n                <div>\n                    <input type=\"file\" name=\"file\"  accept=\".txt, .csv\" onChange={changeHandler} ref={fileInputRef} />\n                    {selectedFile ? (\n                        <div>\n                            <p>{`${ t('common:name_label')}: ${selectedFile.name}`}</p>\n                            <p>{`${ t('common:type_label')}: ${selectedFile.type}`}</p>\n                            <p>{`${ t('common:byte_size_label')}: ${selectedFile.size}`}</p>\n                            <p>{`${ t('common:last_modified_date')}: ${selectedFile.lastModifiedDate.toLocaleDateString()}`}</p>\n                        </div>\n                    ) : (\n                        <p>{t('common:select_file_label')}</p>\n                    )}\n                    <div>\n                        <Button\n                            className=\"dialog-button\"\n                            variant=\"contained\"\n                            onClick={handleSubmission}\n                            color=\"primary\"\n                            title={t('common:upload_title')}\n                            disabled={setDisabledSendButton()}\n                        >\n                            {t('common:upload_title')}\n                        </Button>\n                    </div>\n                </div>\n            </DialogTitle>\n\n        </Dialog>\n    )\n}\n","import axios from '../helper/axios';\nimport { STUDENTS_TO_GROUP_FILE } from '../constants/axios';\nimport i18n from '../helper/i18n';\nimport { successHandler } from '../helper/handlerAxios';\n\nexport const uploadStudentsToGroupFile = (file,groupId) => {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    axios\n        .post(`${STUDENTS_TO_GROUP_FILE}${groupId}`, formData)\n        .then((res) => {\n            let students=res.data.length;\n            students+=students!==1?` ${i18n.t('formElements:students_file_label')}`:` ${i18n.t('formElements:student_file_label')}`;\n            successHandler(\n                i18n.t('serviceMessages:file_backend_success_operation', {\n                    cardType: students,\n                    actionType: i18n.t('serviceMessages:file_label')\n                })\n            );\n        })\n        .catch((err) => alert(\"File Upload Error\"));\n}","import React, { useEffect, useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport '../dialog.scss';\nimport './showDataDialog.scss'\n\nimport i18n from '../../../helper/i18n';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport RenderStudentTable from '../../../helper/renderStudentTable';\nimport { getAllStudentsByGroupId, updateStudentService } from '../../../services/studentService';\nimport Select from 'react-select';\nimport { isObjectEmpty } from '../../../helper/ObjectRevision';\nimport { successHandler } from '../../../helper/handlerAxios';\nimport { UploadFile } from '../../../components/UploadFile/UploadFile';\n\n\nexport const ShowStudentsDialog = props => {\n    const { onClose,  cardId, open,onDeleteStudent,students,onSubmit,match,student,groups,group} = props;\n    const [checkBoxStudents,setCheckBoxStudents]=useState([]);\n    const [checkedAll,setCheckedAll]=useState(false);\n    const [openUploadFile,setOpenUploadFile]=useState(false);\n    const setDefaultGroupOption=()=>{\n        return {value: `${ group.id }`,label: `${ group.title }`,...group};\n    }\n    const [groupOption,setGroupOption]=useState({});\n    const [defaultGroup,setDefaultGroup]=useState({})\n    useEffect(()=>{\n        if(group.id!==null)\n        setDefaultGroup(setDefaultGroupOption());\n    },[group.id])\n    const { t } = useTranslation('formElements');\n    useEffect(()=> {\n        getAllStudentsByGroupId(props.group.id);\n\n\n    },[open]);\n\n    useEffect(()=>{\n        parseStudentToCheckBox();\n    },[props.students]);\n\n    const setGroupsOption=()=>{\n        return groups!==undefined? groups.map(item=>{return {value:item.id,label:`${item.title}`,...item}}):null;\n\n    }\n\n    const groupsOption=setGroupsOption();\n    const handleClose = () => {\n        onClose(cardId);\n    };\n\n\n    const parseStudentToCheckBox = () => {\n        const studentsCheckBox=[...students];\n        const res=studentsCheckBox.map((item)=> {\n            return {...item,checked:false};\n        });\n        setCheckBoxStudents(res);\n    }\n    const handleCheckElement = (event) => {\n        let studentsTmp = [...checkBoxStudents];\n        studentsTmp.forEach(student => {\n            if (student.id ===Number( event.target.value))\n                student.checked =  event.target.checked\n        })\n        setCheckBoxStudents(studentsTmp);\n    }\n   const handleAllChecked = (event,pageItemsCount,page,rowsPerPage) => {\n        let studentsTmp = [...checkBoxStudents];\n       for (let i = (page)*rowsPerPage; i <pageItemsCount+(page)*rowsPerPage ; i++) {\n           studentsTmp[i].checked = event.target.checked\n       }\n        setCheckBoxStudents(studentsTmp)\n    }\n    const handleAllCheckedBtn = (pageItemsCount,page,rowsPerPage) => {\n        let studentsTmp = [...checkBoxStudents];\n        let start=(page)*rowsPerPage;\n        let finish=pageItemsCount+(page)*rowsPerPage;\n        while (start<finish){\n            if (studentsTmp[start].checked){\n                start++;\n            }\n            else {\n                break;\n            }\n        }\n        setCheckedAll(start===finish&&start!==0)\n    }\n    const handleAllClear = () => {\n        let studentsTmp = [...checkBoxStudents];\n        studentsTmp.forEach(student => {\n                if(student.checked) {\n                    student.checked = false;\n                }\n        })\n        setCheckBoxStudents(studentsTmp);\n    }\n    const handleChangeCheckedAllBtn = () => {\n        setCheckedAll(prevState => !prevState);\n    }\n    const handleClearCheckedAllBtn = () => {\n        setCheckedAll(false);\n    }\n\n\n    const setCurrentGroupOption = (group) => {\n      setGroupOption(group)\n    }\n    const isChecked=({checked})=>{\n        return checked;\n    }\n    const setSelectDisabled=()=>{\n        let resChecked=true;\n        for (let i = 0; i < checkBoxStudents.length; i++) {\n            if(isChecked(checkBoxStudents[i])){\n                resChecked= false;\n                break;\n            }\n        }\n        return resChecked;\n    }\n    const setDisabledMoveToGroupBtn=()=>{\n        return setSelectDisabled();\n    }\n    const changeStudentItem = (group,student) => {\n        let resData={};\n        if(student.checked){\n            const {checked, ...res} = student;\n            resData= {...res,group:{id:group.id}}\n        }\n        return resData;\n    }\n    const handleSubmitGroupStudents = () => {\n        if(isObjectEmpty(groupOption)){\n            successHandler(\n                i18n.t('serviceMessages:students_exist_in_this_group', {\n                    cardType: i18n.t('common:student_title'),\n                    actionType: i18n.t('serviceMessages:student_label')\n                })\n            );\n        }\n        else{\n            const {value,label,...res}=groupOption;\n            const currentStudents=[...checkBoxStudents];\n            const resData=[];\n            const prevGroup={id:defaultGroup.id};\n            for (let i = 0; i < currentStudents.length; i++) {\n                const resItem=changeStudentItem(res,currentStudents[i]);\n                if(!isObjectEmpty(resItem)){\n                    resData.push(resItem)\n                }\n            };\n            resData.forEach(item=>updateStudentService({ ...item, prevGroup }));\n        }\n        handleClearCheckedAllBtn();\n    }\n    const handleOpenDialogFile=()=>{\n        setOpenUploadFile(true)\n    }\n    const handleCloseDialogFile=()=>{\n        setOpenUploadFile(false)\n    }\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n\n            <DialogTitle id=\"confirm-dialog-title\">\n                <>\n\n                        <>\n\n                            {students.length === 0 ?\n\n                                <>\n\n                                    <h2 className=\"title-align\">{`${t('group_label')} - `}<span>{`${props.group.title}`}</span>\n                                    </h2>\n                                    {t('no_exist_students_in_group')}\n                                </>\n\n                                :\n                                <span className=\"table-student-data\">\n                                    <h6>\n                                      <Select\n                                          className={'group-select'}\n                                          defaultValue={defaultGroup}\n                                          options={groupsOption}\n                                          onChange={setCurrentGroupOption}\n                                          isOptionDisabled={()=>setSelectDisabled()}\n                                      />\n                                  </h6>\n                                <h3 className=\"title-align\"><span>{students.length !== 1 ? `${t('students_label')} ` : `${t('student_label')} `}</span>{`${t('group_students')} `}<span>{`${props.group.title}`}</span></h3>\n\n                                    <RenderStudentTable group={props.group} onDeleteStudent={onDeleteStudent}\n                                                    students={students} onSubmit={onSubmit}\n                                                    match={match}\n                                                    student={props.student}\n                                                    checkBoxStudents={checkBoxStudents}\n                                                    handleCheckElement={handleCheckElement}\n                                                    handleAllChecked={handleAllChecked}\n                                                    handleAllClear={handleAllClear}\n                                                    handleChangeCheckedAllBtn={handleChangeCheckedAllBtn}\n                                                    handleClearCheckedAllBtn={handleClearCheckedAllBtn}\n                                                    checkedAllBtn={checkedAll}\n                                                    handleAllCheckedBtn={handleAllCheckedBtn}\n                                />\n                            </span>\n                            }\n                        </>\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                {<UploadFile group={group} open={openUploadFile} handleCloseDialogFile={handleCloseDialogFile}/>}\n                <Button\n                    className={students.length !== 0?'student-dialog-button-data':'student-dialog-button-no-data'}\n                    variant='contained'\n                    onClick={handleOpenDialogFile}\n                    color='primary'\n                    title={i18n.t('upload_from_file')}\n                >\n                    {i18n.t('common:upload_from_file_title')}\n                </Button>\n                {students.length !== 0?\n                <Button\n                    className='student-dialog-button-data'\n                    variant='contained'\n                    onClick={handleSubmitGroupStudents}\n                    color='primary'\n                    disabled={setDisabledMoveToGroupBtn()}\n                    title={i18n.t('move_to_group_title')}\n                >\n                    {i18n.t('common:move_to_group_title')}\n                </Button>\n                :null}\n                <Button\n                    className={students.length !== 0?'student-dialog-button-data':'student-dialog-button-no-data'}\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                    color=\"primary\"\n                    title={i18n.t('close_title')}\n                >\n                    {i18n.t('common:close_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nShowStudentsDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\nconst mapStateToProps = state => ({\n   //currentGroup:state.groups.currentGroup\n});\n\nexport default connect(mapStateToProps, {})(ShowStudentsDialog);\n\n","import { connect } from 'react-redux';\nimport { FaEdit, FaUserPlus, FaUsers } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\nimport {Link} from 'react-router-dom'\nimport './GroupList.scss';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport AddGroup from '../../components/AddGroupForm/AddGroupForm';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport {\n    clearGroupService,\n    getDisabledGroupsService,\n    handleGroupService,\n    removeGroupCardService,\n    selectGroupService,\n    setDisabledGroupService,\n    setEnabledGroupService,\n    showAllGroupsService\n} from '../../services/groupService';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\nimport { disabledCard } from '../../constants/disabledCard';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\n\nimport {\n    createStudentService,\n    deleteStudentService,\n    getAllStudentsByGroupId,selectStudentService,\n    updateStudentService\n} from '../../services/studentService';\nimport { ShowStudentsDialog } from '../../share/modals/modal/showStudentsDialog';\nimport AddStudentDialog from '../../share/modals/modal/AddStudentDialog';\nimport { links } from '../../constants/links';\nimport './GroupList.scss'\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom';\nimport '../../router/Router.scss'\nimport { goToGroupPage } from '../../helper/pageRedirection';\nlet GroupList = props => {\n\n    const { isSnackbarOpen, snackbarType, snackbarMessage,students,groups,group,match,student } = props;\n    const { t } = useTranslation('formElements');\n\n    const [open, setOpen] = useState(false);\n    const [groupId, setGroupId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n    const [addStudentDialog, setAddStudentDialog] = useState(false);\n\n    const [disabled, setDisabled] = useState(false);\n    const [showStudents, setShowStudents]=useState(false);\n\n    const SearchChange = setTerm;\n    const history=useHistory();\n    useEffect(()=>{\n        if(match.path.includes(links.Edit)) {\n            selectGroupService(match.params.id);\n        }\n\n    },[props.groups.length])\n    useEffect(()=>{\n        if(match.path.includes(links.Delete)) {\n            handleClickOpen(props.match.params.id);\n        }\n\n    },[props.groups.length])\n    useEffect(()=>{\n        if(match.path.includes(links.AddStudent)) {\n            handleAddUser(match.params.id);\n        }\n\n    },[props.groups.length])\n    useEffect(()=>{\n        if(match.path.includes(links.SetDisable)) {\n            handleSetDisable(props.match.params.id);\n        }\n\n    },[])\n    useEffect(()=>{\n        if(match.path.includes(links.ShowStudents)) {\n            onShowStudentByGroup(Number(match.params.id));\n        }\n    },[props.students.length])\n    useEffect(()=>{\n        if(match.path.includes(links.Student)&&match.path.includes(links.Edit)) {\n            onShowStudentByGroup(Number(match.params.id));\n            selectStudentService(Number(match.params.idStudent))\n        }\n    },[props.students.length])\n    useEffect(()=>{\n        if(match.path.includes(links.Student)&&match.path.includes(links.Delete)) {\n            onShowStudentByGroup(Number(match.params.id));\n            selectStudentService(Number(match.params.idStudent))\n        }\n    },[props.students.length])\n\n    useEffect(() => showAllGroupsService(), []);\n    // useEffect(() => getDisabledGroupsService(), []);\n    const handleFormReset = () => {\n        clearGroupService();\n    };\n    const submit = values => handleGroupService(values);\n    const handleEdit = groupId => selectGroupService(groupId);\n    const visibleGroups = disabled\n        ? search(props.disabledGroups, term, ['title'])\n        : search(props.groups, term, ['title']);\n\n    const handleClickOpen = groupId => {\n        setGroupId(groupId);\n        setOpen(true);\n    };\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n    const handleAddUser = id => {\n        setGroupId(id);\n        setAddStudentDialog(true);\n    };\n\n    const handleClose = groupId => {\n        setOpen(false);\n        if (!groupId) {\n            goToGroupPage(history)\n            return;\n        }\n        if (hideDialog) {\n            if (disabled) {\n                const group = props.disabledGroups.find(\n                    group => group.id === groupId\n                );\n                setEnabledGroupService(group);\n            } else {\n                const group = groups.find(group => Number(group.id) === Number(groupId));\n                setDisabledGroupService(group);\n            }\n        } else {\n            removeGroupCardService(groupId);\n        }\n        setHideDialog(null);\n        goToGroupPage(history)\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n    const studentSubmit = (data) => {\n        if(data.id!==undefined){\n            const sendData={...data,group:{id:data.group}};\n            updateStudentService(sendData);\n        }\n        else {\n            const sendData={...data,group:{id:groupId}}\n            createStudentService(sendData)\n        }\n        setAddStudentDialog(false)\n            goToGroupPage(history);\n    }\n\n    const selectStudentCard = () => {\n        setAddStudentDialog(false)\n    };\n    const onCloseShowStudents = () => {\n        setShowStudents(false);\n        goToGroupPage(history);\n    }\n    const onShowStudentByGroup = (groupId) => {\n        setShowStudents(true)\n        selectGroupService(groupId);\n        getAllStudentsByGroupId(groupId)\n    }\n    const onDeleteStudent = (student) => {\n        if (student!=='') {\n            deleteStudentService(student);\n        }\n    }\n    const handleSetDisable = (groupId) => {\n        setHideDialog(\n            disabledCard.HIDE\n        );\n        handleClickOpen(groupId);\n    }\n    const getGroupTitle=({title})=>{\n        const MAX_LENGTH=5;\n        return title.length>MAX_LENGTH? `${ title.slice(0, MAX_LENGTH) }...`:title;\n    }\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.GROUP_LIST} val={navigation.GROUPS}/>\n\n            <ConfirmDialog\n                isHide={hideDialog}\n                cardId={groupId}\n                whatDelete={'group'}\n                open={open}\n                onClose={handleClose}\n            />\n            <AddStudentDialog\n                open={addStudentDialog}\n                onSubmit={studentSubmit}\n                onSetSelectedCard={selectStudentCard}\n            />\n            <ShowStudentsDialog\n                onClose={onCloseShowStudents}\n                open={showStudents}\n                students={students}\n                group={group}\n                onDeleteStudent={onDeleteStudent}\n                onSubmit={studentSubmit}\n                match={match}\n                student={student}\n                groups={groups}\n            />\n\n            <div className=\"cards-container\">\n                <aside className=\"search-list__panel\">\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    {disabled ? (\n                        ''\n                    ) : (\n\n                        <AddGroup\n                            match={match}\n                            className=\"form\"\n                            onSubmit={submit}\n                            onReset={handleFormReset}\n                        />\n                    )}\n                </aside>\n                <div className=\"group-wrapper group-list\">\n                    {visibleGroups.length === 0 && (\n                        <NotFound name={t('group_y_label')} />\n                    )}\n                    {visibleGroups.map(group => (\n                        <section key={group.id} className=\"group-card\">\n\n                            <div className=\"group__buttons-wrapper\">\n                                {!disabled ? (\n                                    <>\n                                    <Link  to={`${links.GroupList}${links.Group}/${group.id}${links.SetDisable}`}>\n                                        <GiSightDisabled\n                                            className=\"group__buttons-hide link-href\"\n                                            title={t('common:set_disabled')}\n                                            onClick={() => {\n                                                handleSetDisable(group.id);\n                                            }}\n                                        />\n                                    </Link>\n                                        <Link to={`${links.GroupList}${links.Group}${links.Edit}/${group.id}`}>\n                                        <FaEdit\n                                            className=\"group__buttons-edit link-href\"\n                                            title={t('edit_title')}\n                                            onClick={() => handleEdit(group.id)}\n                                        />\n                                        </Link>\n                                    </>\n                                ) : (\n                                    <IoMdEye\n                                        className=\"group__buttons-hide link-href\"\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(group.id);\n                                        }}\n                                    />\n                                )}\n                                <Link to={`${links.GroupList}${links.Group}${links.Delete}/${group.id}`}>\n                                <MdDelete\n                                    className=\"group__buttons-delete link-href\"\n                                    title={t('delete_title')}\n                                    onClick={() => handleClickOpen(group.id)}\n                                />\n                                </Link>\n                            <Link to={`${links.GroupList}${links.Group}/${group.id}${links.AddStudent}`}>\n                                <FaUserPlus\n                                    title={t('formElements:student_add_label')}\n                                    className=\"svg-btn copy-btn align-left info-btn\"\n                                    onClick={()=> {\n                                        handleAddUser(group.id);\n                                        // setCurrentGroup(group);\n                                    }}\n                                />\n                            </Link>\n\n                            </div>\n                            <p className=\"group-card__description\">\n                                {t('group_label') + ':'}\n                            </p>\n                            <h1 className=\"group-card__number\">\n                                {getGroupTitle(group)}\n                            </h1>\n                            <Link to={`${links.GroupList}${links.Group}/${group.id}${links.ShowStudents}`}>\n                            <span className=\"students-group\">\n                                <FaUsers\n                                    title={t('formElements:show_students')}\n                                    className=\"svg-btn copy-btn align-left info-btn students\"\n                                    onClick={\n                                        ()=> {\n                                            onShowStudentByGroup(group.id)\n                                        }\n                                    }\n                                />\n                            </span>\n                            </Link>\n\n                        </section>\n                    ))}\n                </div>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    groups: state.groups.groups,\n    group: state.groups.group,\n    disabledGroups: state.groups.disabledGroups,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message,\n    students: state.students.students,\n    student: state.students.student\n});\n\nexport default connect(mapStateToProps, {})(GroupList);\n","import React, {useEffect} from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport renderTextField from '../../share/renderedFields/input';\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport { ROOM_FORM } from '../../constants/reduxForms';\n\nimport { required, uniqueRoomName } from '../../validation/validateFields';\nimport Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\nimport Card from '../../share/Card/Card';\n\nimport './AddRoomForm.scss';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nlet AddRoom = props => {\n    const { t } = useTranslation('formElements')\n    const { handleSubmit, pristine, submitting, onReset,oneRoom } = props;\n\n    useEffect(() => {\n        if (props.oneRoom) {\n            if (props.oneRoom.id) {\n                props.initialize({\n                    name: props.oneRoom.name,\n                    type: props.oneRoom.type.id,\n                    id: props.oneRoom.id\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [props.oneRoom]);\n\n\n\n\n    return (\n        <Card class='form-card room-form'>\n            <form className='createGroupForm w-100' onSubmit={handleSubmit}>\n                <h2 className='form-title'>\n                    {props.oneRoom.id\n                        ? t('edit_title')\n                        : t('create_title')\n                    }{' '}\n                    {t('room_y_label')}\n                </h2>\n                <Field\n                    type='text'\n                    name='name'\n                    component={renderTextField}\n                    placeholder={t('number_label')}\n                    className='form-field'\n                    label={t('room_label')}\n                    validate={[required, uniqueRoomName]}\n                />\n                <Field\n                    className='form-field'\n                    component={renderSelectField}\n                    name='type'\n                    label={t('type_label')}\n                    validate={[required]}>\n                    <option value={''}></option>\n                    {props.roomTypes.map(roomType => (\n                        <option key={roomType.id} value={roomType.id}>\n                            {roomType.description}\n                        </option>\n                    ))}\n                </Field>\n                <div className='form-buttons-container'>\n                    <Button\n                        className='buttons-style'\n                        variant='contained'\n                        color='primary'\n                        disabled={pristine || submitting}\n                        type='submit'>\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        className='buttons-style'\n                        variant='contained'\n                        disabled={setDisableButton(pristine,submitting,oneRoom.id)}\n                        onClick={onReset}>\n                        {getClearOrCancelTitle(oneRoom.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    oneRoom: state.rooms.oneRoom,\n    roomTypes: state.roomTypes.roomTypes\n});\n\nAddRoom = reduxForm({\n    form: ROOM_FORM\n})(AddRoom);\n\nexport default connect(mapStateToProps)(AddRoom);\n","import { store } from '../index';\nimport { ROOM_FORM_TYPE } from '../constants/reduxForms';\nimport { ROOM_TYPES_URL } from '../constants/axios';\nimport axios from '../helper/axios';\n\nimport {\n    getAllRoomTypes,\n    deleteType,\n    updateOneType,\n    postOneType,\n    getOneNewType\n} from '../redux/actions/roomTypes';\n\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const getAllRoomTypesService = () => {\n    axios\n        .get(ROOM_TYPES_URL)\n        .then(res => {\n            store.dispatch(getAllRoomTypes(res.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const deleteTypeService = roomTypeId => {\n    axios\n        .delete(ROOM_TYPES_URL + `/${roomTypeId}`)\n        .then(response => {\n            store.dispatch(deleteType(roomTypeId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType:\n                        i18n.t('formElements:room_label') +\n                        ' ' +\n                        i18n.t('formElements:type_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const addNewTypeService = values => {\n    if (values.id) {\n        putNewType(values);\n    } else {\n        postNewType(values);\n    }\n};\n\nexport const putNewType = values => {\n    axios\n        .put(ROOM_TYPES_URL, values)\n        .then(response => {\n            store.dispatch(updateOneType(response.data));\n            resetFormHandler(ROOM_FORM_TYPE);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType:\n                        i18n.t('formElements:room_label') +\n                        ' ' +\n                        i18n.t('formElements:type_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const postNewType = values => {\n    axios\n        .post(ROOM_TYPES_URL, values)\n        .then(response => {\n            store.dispatch(postOneType(response.data));\n            resetFormHandler(ROOM_FORM_TYPE);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType:\n                        i18n.t('formElements:room_label') +\n                        ' ' +\n                        i18n.t('formElements:type_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getOneNewTypeService = roomId => {\n    store.dispatch(getOneNewType(roomId));\n};\n","import * as actionsType from './actionsType';\nimport roomTypes from '../reducers/roomTypes';\nimport actions from 'redux-form/lib/actions';\n\nexport const postOneType = roomType => {\n    return {\n        type: actionsType.POST_NEW_TYPE,\n        result: roomType\n    };\n};\n\nexport const getAllRoomTypes = roomType => {\n    return {\n        type: actionsType.GET_ALL_ROOM_TYPES,\n        result: roomType\n    };\n};\n\nexport const deleteType = roomType => {\n    return {\n        type: actionsType.DELETE_TYPE,\n        result: roomType\n    };\n\n\n};\n\nexport const updateOneType = roomType => {\n    return {\n        type: actionsType.UPDATE_ONE_TYPE,\n        result: roomType\n    };\n};\n\nexport const getOneNewType = roomType => {\n    return {\n        type: actionsType.GET_ONE_NEW_TYPE,\n        result: roomType\n    }\n}\n\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { ROOM_FORM_TYPE } from '../../constants/reduxForms';\n\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\nimport Card from '../../share/Card/Card';\nimport { useTranslation } from 'react-i18next';\nimport renderTextField from '../../share/renderedFields/input';\nimport Button from '@material-ui/core/Button';\nimport { MdDelete } from 'react-icons/md';\nimport { FaEdit } from 'react-icons/fa';\nimport {\n    deleteTypeService,\n    getOneNewTypeService\n} from '../../services/roomTypesService';\nimport './AddNewRoomType.scss';\n\nlet NewRoomType = props => {\n    const { handleSubmit, pristine, submitting, roomTypes } = props;\n   \n\n    const [open, setOpen] = useState(false);\n    const [typeId, setTypeId] = useState(-1);\n\n    useEffect(() => {\n        let defaultValue = {};\n        if (props.oneType.id) {\n            defaultValue={ description: props.oneType.description,\n                id: props.oneType.id};\n        }\n        props.initialize(defaultValue);\n\n    }, [props.oneType]);   \n\n    const { t } = useTranslation('formElements');\n\n    const handleClickOpen = typeId => {\n        setTypeId(typeId);\n        setOpen(true);\n    };\n\n    const handleClose = typeId => {\n        setOpen(false);\n        if (!typeId) {\n            return;\n        }\n        deleteTypeService(typeId);\n    };\n\n    const handleEdit = roomId => {\n        getOneNewTypeService(roomId);\n    };\n\n    return (\n        <>\n            <ConfirmDialog\n                selectedValue={''}\n                cardId={typeId}\n                whatDelete={cardType.TYPE.toLowerCase()}\n                open={open}\n                onClose={handleClose}\n            />\n            <Card class=\"form-card room-form\">\n                <form className=\"new-type-container\" onSubmit={handleSubmit}>\n                    <Field\n                        type=\"text\"\n                        name=\"description\"\n                        component={renderTextField}\n                        placeholder={t('add_type_label')}\n                        label={t('new_type_label')}\n                        className=\"form-field\"\n                        variant=\"outlined\"\n                    />\n                    <div className='btn-style-wrapper'>\n                        <Button\n                            color=\"primary\"\n                            className=\"btn-style\"\n                            disabled={pristine || submitting}\n                            variant=\"contained\"\n                            type=\"submit\"\n                        >\n                            {t('save_button_label')}\n                        </Button>\n                    </div>\n                </form>\n\n                <ul className=\"new-types\">\n                    {roomTypes.map(roomType => (\n                        <li\n                            key={roomType.id}\n                            value={roomType.description}\n                            className=\"new-types-list\"\n                        >\n                            <span className=\"typeDescription\">\n                                {roomType.description}\n                            </span>\n                            <span className=\"buttons\">\n                                <FaEdit\n                                    className=\"btn edit\"\n                                    onClick={() => handleEdit(roomType.id)}\n                                />\n                                <MdDelete\n                                    className=\"btn delete\"\n                                    onClick={() => handleClickOpen(roomType.id)}\n                                />\n                            </span>\n                        </li>\n                    ))}\n                </ul>\n            </Card>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    oneType: state.roomTypes.oneType,\n    roomTypes: state.roomTypes.roomTypes\n});\n\nNewRoomType = reduxForm({\n    form: ROOM_FORM_TYPE\n})(NewRoomType);\n\nexport default connect(mapStateToProps)(NewRoomType);\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\nimport FreeRooms from '../FreeRooms/freeRooms';\nimport AddRoom from '../../components/AddRoomForm/AddRoomForm';\nimport NewRoomType from '../../components/AddNewRoomType/AddNewRoomType';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport Card from '../../share/Card/Card';\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport './RoomList.scss';\nimport { useTranslation } from 'react-i18next';\nimport { search } from '../../helper/search';\n\nimport {\n    createRoomService,\n    showListOfRoomsService,\n    deleteRoomCardService,\n    selectOneRoomService,\n    clearRoomOneService,\n    getDisabledRoomsService,\n    setDisabledRoomsService,\n    setEnabledRoomsService\n} from '../../services/roomService';\n\nimport {\n    getAllRoomTypesService,\n    addNewTypeService\n} from '../../services/roomTypesService';\n\nimport NotFound from '../../share/NotFound/NotFound';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\n\nimport { disabledCard } from '../../constants/disabledCard';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst RoomList = props => {\n    const { rooms } = props;\n\n    useEffect(() => {\n        showListOfRoomsService();\n    }, []);\n\n    useEffect(() => {\n        getAllRoomTypesService();\n    }, []);\n\n    useEffect(() => {\n        getDisabledRoomsService();\n    }, []);\n\n    const { t } = useTranslation('formElements');\n    const [open, setOpen] = useState(false);\n    const [roomId, setRoomId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n\n    const [disabled, setDisabled] = useState(false);\n\n    const createRoom = values => {\n        const description = props.roomTypes.find(\n            type => type.id == values.type\n        );\n        values.typeDescription = description.description;\n        createRoomService(values);\n    };\n\n    const editHandler = roomId => {\n        selectOneRoomService(roomId);\n    };\n\n    const handleFormReset = () => {\n        clearRoomOneService();\n    };\n\n    const handleClickOpen = roomId => {\n        setRoomId(roomId);\n        setOpen(true);\n    };\n\n    const handleClose = roomId => {\n        setOpen(false);\n        if (!roomId) {\n            return;\n        }\n        if (hideDialog) {\n            if (disabled) {\n                const room = props.disabledRooms.find(\n                    room => room.id === roomId\n                );\n                setEnabledRoomsService(room);\n            } else {\n                const room = props.rooms.find(room => room.id === roomId);\n                setDisabledRoomsService(room);\n            }\n        } else {\n            deleteRoomCardService(roomId);\n        }\n        setHideDialog(null);\n    };\n\n    const submitType = values => {\n        addNewTypeService(values);\n    };\n\n    const visibleItems = disabled\n        ? search(props.disabledRooms, term, ['name'])\n        : search(rooms, term, ['name']);\n\n    const SearchChange = term => {\n        setTerm(term);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.ROOM_LIST} val={navigation.ROOMS}/>\n            <ConfirmDialog\n                cardId={roomId}\n                whatDelete={cardType.ROOM.toLowerCase()}\n                open={open}\n                isHide={hideDialog}\n                onClose={handleClose}\n            />\n            <div className=\"cards-container\">\n                <aside className=\"search-list__panel\">\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    {disabled ? (\n                        ''\n                    ) : (\n                        <>\n                            <AddRoom\n                                onSubmit={createRoom}\n                                onReset={handleFormReset}\n                            />\n                            <NewRoomType\n                                className=\"new-type\"\n                                onSubmit={submitType}\n                            />\n                        </>\n                    )}\n                </aside>\n                <section className=\"container-flex-wrap wrapper\">\n                    {visibleItems.length === 0 && (\n                        <NotFound name={t('room_y_label')} />\n                    )}\n                    {visibleItems.map((room, index) => (\n                        <Card key={index} {...room} class=\"room-card done-card\">\n                            <div className=\"cards-btns\">\n                                {!disabled ? (\n                                    <>\n                                        <GiSightDisabled\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_disabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.HIDE\n                                                );\n                                                handleClickOpen(room.id);\n                                            }}\n                                        />\n                                        <FaEdit\n                                            className=\"svg-btn\"\n                                            onClick={() => editHandler(room.id)}\n                                        />\n                                    </>\n                                ) : (\n                                    <IoMdEye\n                                        className=\"svg-btn copy-btn\"\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(room.id);\n                                        }}\n                                    />\n                                )}\n\n                                <MdDelete\n                                    className=\"svg-btn\"\n                                    onClick={() => handleClickOpen(room.id)}\n                                />\n                            </div>\n\n                            <span> {t('room_label') + ':'} </span>\n                            <h2 className=\"room-card__number\">{room.name}</h2>\n                            <span>{t('type_label') + ':'}</span>\n                            <h2 className=\"room-card__number\">\n                                {room.type.description}\n                            </h2>\n                        </Card>\n                    ))}\n                </section>\n            </div>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    rooms: state.rooms.rooms,\n    disabledRooms: state.rooms.disabledRooms,\n    oneRoom: state.rooms.oneRoom,\n    roomTypes: state.roomTypes.roomTypes,\n    oneType: state.roomTypes.oneType\n});\n\nexport default connect(mapStateToProps, {})(RoomList);\n","import { connect } from 'react-redux'\nimport React, { useEffect } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport Button from '@material-ui/core/Button'\nimport { useTranslation}  from 'react-i18next'\n\nimport './AddSubjectForm.scss'\nimport Card from '../../share/Card/Card'\nimport { SUBJECT_FORM } from '../../constants/reduxForms'\nimport renderTextField from '../../share/renderedFields/input'\nimport { required, uniqueSubject, maxLengthValue} from '../../validation/validateFields'\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nlet AddSubject = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting,subject } = props;\n\n    useEffect(() => {\n        if (props.subject) {\n            if (props.subject.id) {\n                props.initialize({\n                    id: props.subject.id,\n                    name: props.subject.name\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [props.subject]);\n\n    return (\n        <Card class='form-card subject-form'>\n            <h2 style={{ textAlign: 'center' }}>\n                {props.subject.id ? t('edit_title') : t('create_title')}\n                {t('subject_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    className='form-field'\n                    name='name'\n                    component={renderTextField}\n                    label={t('subject_label')+':'}\n                    validate={[required, uniqueSubject, maxLengthValue]}\n                />\n                <div className='form-buttons-container subject-btns'>\n                <Button\n                    variant='contained'\n                    color='primary'\n                    className='buttons-style '\n                    disabled={pristine || submitting}\n                    type='submit'>\n                    {t('save_button_label')}\n                </Button>\n                <Button\n                    type='button'\n                    variant='contained'\n                    className='buttons-style'\n                    disabled={setDisableButton(pristine,submitting,subject.id)}\n                    onClick={onReset}>\n                    {getClearOrCancelTitle(subject.id,t)}\n                </Button>\n                </div>\n            </form>\n        </Card>\n    )\n}\n\nconst mapStateToProps = state => ({\n    subject: state.subjects.subject\n})\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SUBJECT_FORM\n    })(AddSubject)\n)\n","import { connect } from 'react-redux';\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\n\nimport './SubjectPage.scss';\nimport Card from '../../share/Card/Card';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport AddSubject from '../../components/AddSubjectForm/AddSubjectForm';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport {\n    showAllSubjectsService,\n    removeSubjectCardService,\n    handleSubjectService,\n    selectSubjectService,\n    clearSubjectService,\n    setEnabledSubjectsService,\n    setDisabledSubjectsService,\n    getDisabledSubjectsService\n} from '../../services/subjectService';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst SubjectPage = props => {\n    const { t } = useTranslation('formElements');\n    const { isSnackbarOpen, snackbarType, snackbarMessage } = props;\n\n    const [open, setOpen] = useState(false);\n    const [subjectId, setSubjectId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n\n    const [disabled, setDisabled] = useState(false);\n\n    useEffect(() => showAllSubjectsService(), []);\n    useEffect(() => getDisabledSubjectsService(), []);\n\n    const submit = values => handleSubjectService(values);\n    const handleEdit = subjectId => selectSubjectService(subjectId);\n    const handleFormReset = () => clearSubjectService();\n    const visibleSubjects = disabled\n        ? search(props.disabledSubjects, term, ['name'])\n        : search(props.subjects, term, ['name']);\n    const SearchChange = setTerm;\n\n    const handleClickOpen = subjectId => {\n        setSubjectId(subjectId);\n        setOpen(true);\n    };\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n\n    const handleClose = subjectId => {\n        setOpen(false);\n        if (!subjectId) return;\n        if (hideDialog) {\n            if (disabled) {\n                const group = props.disabledSubjects.find(\n                    subject => subject.id === subjectId\n                );\n                setEnabledSubjectsService(group);\n            } else {\n                const group = props.subjects.find(\n                    subject => subject.id === subjectId\n                );\n                setDisabledSubjectsService(group);\n            }\n        } else {\n            removeSubjectCardService(subjectId);\n        }\n        setHideDialog(null);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.SUBJECT_PAGE} val={navigation.SUBJECTS}/>\n            <ConfirmDialog\n                isHide={hideDialog}\n                cardId={subjectId}\n                whatDelete={'subject'}\n                open={open}\n                onClose={handleClose}\n            />\n            <div className=\"cards-container\">\n                <aside className=\"search-list__panel\">\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    {disabled ? (\n                        ''\n                    ) : (\n                        <AddSubject\n                            className=\"form\"\n                            onSubmit={submit}\n                            onReset={handleFormReset}\n                        />\n                    )}\n                </aside>\n                <section className=\"container-flex-wrap wrapper\">\n                    {visibleSubjects.length === 0 && (\n                        <NotFound name={t('subject_y_label')} />\n                    )}\n                    {visibleSubjects.map(subject => (\n                        <Card key={subject.id} class=\"subject-card done-card\">\n                            <h2 className=\"subject-card__name\">\n                                {subject.name}\n                            </h2>\n                            <div className=\"cards-btns\">\n                                {disabled ? (\n                                    <IoMdEye\n                                        className=\"svg-btn copy-btn\"\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(subject.id);\n                                        }}\n                                    />\n                                ) : (\n                                    <>\n                                        <GiSightDisabled\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_disabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.HIDE\n                                                );\n                                                handleClickOpen(subject.id);\n                                            }}\n                                        />\n                                        <FaEdit\n                                            className=\"svg-btn edit-btn\"\n                                            title={t('edit_title')}\n                                            onClick={() =>\n                                                handleEdit(subject.id)\n                                            }\n                                        />\n                                    </>\n                                )}\n\n                                <MdDelete\n                                    className=\"svg-btn delete-btn\"\n                                    title={t('delete_title')}\n                                    onClick={() => handleClickOpen(subject.id)}\n                                />\n                            </div>\n                            {/* <p className=\"subject-card__description\">\n                                {t('subject_label') + ':'}{' '}\n                            </p> */}\n                        </Card>\n                    ))}\n                </section>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    subjects: state.subjects.subjects,\n    disabledSubjects: state.subjects.disabledSubjects,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message\n});\n\nexport default connect(mapStateToProps, {})(SubjectPage);\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './modal.scss';\n\nexport const ModalWindow = props => {\n    const { onClose, cardId, isHide, open, windowTitle } = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n    const renderOkButton = () => {\n        if (!props.isOkButton) {\n            return;\n        }\n        return (\n            <Button\n                className=\"dialog-button\"\n                variant=\"contained\"\n                color=\"primary\"\n                //onClick={() => onClose(cardId)}\n            >\n                {props.okButtonLabel}\n            </Button>\n        );\n    };\n    const renderNoButton = () => {\n        if (!props.isNoButton) {\n            return;\n        }\n        return (\n            <Button\n                className=\"dialog-button\"\n                variant=\"contained\"\n                onClick={() => onClose('')}\n            >\n                {props.noButtonLabel}\n            </Button>\n        );\n    };\n\n    const renderModalButtons = () => {\n        if (!props.isOkButton && !props.isNoButton) {\n            return;\n        }\n        return (\n            <div className=\"buttons-container\">\n                {renderOkButton()}\n                {renderNoButton()}\n            </div>\n        );\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">{windowTitle}</DialogTitle>\n            {props.children}\n            {renderModalButtons()}\n        </Dialog>\n    );\n};\n\nModalWindow.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default ModalWindow;\n","import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst renderCheckboxField = ({\n    custom,\n    input,\n    label,\n    name,\n    labelPlacement,\n    checked\n}) => {\n    return (\n        <FormControlLabel\n            labelPlacement={labelPlacement}\n            label={label}\n            name={name}\n            checked={checked}\n            control={<Checkbox color=\"primary\" {...custom} {...input} />}\n        />\n    );\n};\n\nexport default renderCheckboxField;\n","import * as moment from 'moment';\nimport { connect } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Field, reduxForm } from 'redux-form';\nimport Button from '@material-ui/core/Button';\n\nimport './SemesterForm.scss';\nimport Card from '../../share/Card/Card';\nimport renderCheckboxField from '../../share/renderedFields/checkbox';\nimport { SEMESTER_FORM } from '../../constants/reduxForms';\nimport renderTextField from '../../share/renderedFields/input';\nimport renderMonthPicker from '../../share/renderedFields/timeSemester';\nimport {\n    required,\n    minYearValue,\n    lessThanDate,\n    greaterThanDate\n} from '../../validation/validateFields';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { daysUppercase } from '../../constants/schedule/days';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\nimport formValueSelector from 'redux-form/lib/formValueSelector';\n\nlet AddSemesterForm = props => {\n    const clearCheckboxes = () => {\n        setCurrent(false);\n        setByDefault(false);\n        setCheckedDates({\n            MONDAY: false,\n            TUESDAY: false,\n            WEDNESDAY: false,\n            THURSDAY: false,\n            FRIDAY: false,\n            SATURDAY: false,\n            SUNDAY: false\n        });\n    };\n    useEffect(() => getClassScheduleListService(), []);\n\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting,semester } = props;\n\n    let prepSetCheckedClasses = {};\n    useEffect(() => {\n        props.classScheduler.forEach(classItem => {\n            prepSetCheckedClasses[`${classItem.id}`] = false;\n        });\n        setCheckedClasses({ ...prepSetCheckedClasses });\n        clearCheckboxes();\n    }, [props.classScheduler, props.semester.id]);\n    const getToday = () => {\n        return  new Date();\n    }\n    const getTomorrow = () => {\n        const tomorrow = new Date(getToday());\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        return tomorrow;\n    }\n    const [current, setCurrent] = React.useState(false);\n    const [byDefault, setByDefault] = React.useState(false);\n    const [startTime,setStartTime]=useState(getToday());\n    const [finishTime,setFinishTime]=useState(getTomorrow());\n    const [startValue,setStartValue]=useState();\n    const [finishValue,setFinishValue]=useState();\n    const [disabledFinishDate,setDisabledFinishDate]=useState(true);\n    const [checkedDates, setCheckedDates] = React.useState({\n        MONDAY: false,\n        TUESDAY: false,\n        WEDNESDAY: false,\n        THURSDAY: false,\n        FRIDAY: false,\n        SATURDAY: false,\n        SUNDAY: false\n    });\n\n    const [checkedClasses, setCheckedClasses] = React.useState(\n        prepSetCheckedClasses\n    );\n\n    const handleChange = (event,setState) => setState(event.target.checked);\n\n    const setMinFinishDate=time=>{\n        let new_date = moment(time, \"DD/MM/YYYY\").add(1, 'd');\n        setFinishTime(new_date.toDate());\n    }\n    const setEndTime = startTime => {\n        if(disabledFinishDate||moment(startValue).isSameOrBefore(finishValue)) {\n            setFinishValue(setMinFinishDate(startTime));\n            props.change(\n                'endDay',\n                moment(startTime, 'DD/MM/YYYY').add(7, 'd').format('DD/MM/YYYY')\n            );\n        }\n        return\n    }\n    const setCheckedDaysHandler = React.useCallback(\n        day => {\n            return function (event) {\n                let changedDay = { [day]: event.target.checked };\n                setCheckedDates({\n                    ...checkedDates,\n                    ...changedDay\n                });\n            };\n        },\n        [checkedDates]\n    );\n    const setCheckedClassesHandler = React.useCallback(\n        classid => {\n            return function (event) {\n                let changedClass = { [classid]: event.target.checked };\n                setCheckedClasses({\n                    ...checkedClasses,\n                    ...changedClass\n                });\n            };\n        },\n        [checkedClasses]\n    );\n\n    const setSemesterClasses = () => {\n        const classes = Object.keys(checkedClasses);\n        return classes.map(classItem => {\n            const scheduleItem = props.classScheduler.find(\n                schedule => schedule.id === +classItem\n            );\n            return (\n                <Field\n                    key={props.semester.id + classItem}\n                    name={`semester_classes_markup_${classItem}`}\n                    label={\n                        scheduleItem.class_name +\n                        ' (' +\n                        scheduleItem.startTime +\n                        '-' +\n                        scheduleItem.endTime +\n                        ')'\n                    }\n                    labelPlacement=\"end\"\n                    component={renderCheckboxField}\n                    defaultValue={checkedClasses[classItem]}\n                    checked={checkedClasses[classItem]}\n                    onChange={setCheckedClassesHandler(classItem)}\n                    color=\"primary\"\n                />\n            );\n        });\n    };\n    const setSemesterDays = () => {\n        const days = Object.keys(checkedDates);\n        return days.map(semesterDay => {\n            return (\n                <Field\n                    key={props.semester.id + semesterDay}\n                    name={`semester_days_markup_${semesterDay}`}\n                    label={t(`common:day_of_week_${semesterDay}`)}\n                    labelPlacement=\"end\"\n                    defaultValue={checkedDates[semesterDay]}\n                    component={renderCheckboxField}\n                    checked={checkedDates[semesterDay]}\n                    onChange={setCheckedDaysHandler(semesterDay)}\n                    color=\"primary\"\n                />\n            );\n        });\n    };\n\n    useEffect(() => {\n        let semesterItem = {};\n        clearCheckboxes();\n\n        if (props.semester) {\n            if (props.semester.id) {\n                semesterItem = {\n                    id: props.semester.id,\n                    year: props.semester.year,\n                    description: props.semester.description,\n                    startDay: props.semester.startDay,\n                    endDay: props.semester.endDay,\n                    currentSemester: props.semester.currentSemester,\n                    defaultSemester:props.semester.defaultSemester,\n                    semester_days: props.semester.semester_days,\n                    semester_classes: props.semester.semester_classes\n                };\n\n                daysUppercase.forEach(dayItem => {\n                    if (props.semester.semester_days.includes(dayItem)) {\n                        semesterItem[`semester_days_markup_${dayItem}`] = true;\n                    }\n                });\n                const newDays = props.semester.semester_days.reduce(\n                    (result, day) => {\n                        result[day] = true;\n                        return result;\n                    },\n                    {}\n                );\n\n                if (props.classScheduler) {\n                    props.classScheduler.forEach(classFullItem => {\n                        if (\n                            props.semester.semester_classes.findIndex(\n                                classItem => {\n                                    return classFullItem.id === classItem.id;\n                                }\n                            ) >= 0\n                        ) {\n                            semesterItem[\n                                `semester_classes_markup_${classFullItem.id}`\n                            ] = true;\n                        }\n                    });\n                }\n\n                const newClasses = props.semester.semester_classes.reduce(\n                    (result, classItem) => {\n                        result[classItem.id] = true;\n                        return result;\n                    },\n                    {}\n                );\n\n                setCurrent(props.semester.currentSemester);\n                setByDefault(props.semester.defaultSemester);\n\n                setCheckedDates({\n                    MONDAY: false,\n                    TUESDAY: false,\n                    WEDNESDAY: false,\n                    THURSDAY: false,\n                    FRIDAY: false,\n                    SATURDAY: false,\n                    SUNDAY: false,\n                    ...newDays\n                });\n\n                let prepSetCheckedClasses = {};\n                if (props.classScheduler) {\n                    props.classScheduler.forEach(classItem => {\n                        prepSetCheckedClasses[`${classItem.id}`] = false;\n                    });\n                }\n                setCheckedClasses({\n                    ...prepSetCheckedClasses,\n                    ...newClasses\n                });\n            }\n        }\n        props.initialize(semesterItem);\n    }, [props.semester.id]);\n\n    return (\n\n        <Card class=\"form-card semester-form\">\n            <h2 style={{ textAlign: 'center' }}>\n                {props.semester.id ? t('edit_title') : t('create_title')}\n                {t('semestry_label')}\n            </h2>\n\n            <form onSubmit={handleSubmit}>\n                <div className=\"semester-checkbox\">\n                    <Field\n                        name=\"currentSemester\"\n                        label={t('common:current_label')}\n                        labelPlacement=\"start\"\n                        component={renderCheckboxField}\n                        checked={current}\n                        onChange={(e)=>handleChange(e,setCurrent)}\n                        color=\"primary\"\n                    />\n                    <Field\n                        name=\"defaultSemester\"\n                        label={t('common:default_label')}\n                        labelPlacement=\"start\"\n                        component={renderCheckboxField}\n                        checked={byDefault}\n                        onChange={(e)=>handleChange(e,setByDefault)}\n                        color=\"primary\"\n                    />\n                </div>\n\n                <Field\n                    className=\"form-field\"\n                    name=\"year\"\n                    type=\"number\"\n                    component={renderTextField}\n                    label={t('year_label') + ':'}\n                    validate={[required, minYearValue]}\n                />\n                <Field\n                    className=\"form-field\"\n                    name=\"description\"\n                    component={renderTextField}\n                    label={t('semester_label') + ':'}\n                    validate={[required]}\n                />\n                <div className=\"form-time-block\">\n                    <Field\n                        className=\"time-input\"\n                        name=\"startDay\"\n                        component={renderMonthPicker}\n                        label={t('class_from_label') + ':'}\n                        validate={[required, lessThanDate]}\n                        minDate={startTime}\n                        onChange={(event, value) => {\n                            if (value) {\n                                setStartValue(value);\n                                setMinFinishDate(value);\n                                setEndTime(value);\n                                setDisabledFinishDate(false)\n                            }\n                        }}\n                    />\n                    <Field\n                        className=\"time-input\"\n                        name=\"endDay\"\n                        component={renderMonthPicker}\n                        label={t('class_to_label') + ':'}\n                        validate={[required, greaterThanDate]}\n                        minDate={finishTime}\n                        disabled={disabledFinishDate}\n                        onChange={(event, value) => {\n                            setFinishValue(value)\n                        }}\n                    />\n                </div>\n                <div className=\"\">\n                    <p>{t('common:days_label') + ': '}</p>\n                    {setSemesterDays()}\n                </div>\n                <div className=\"\">\n                    <p>{t('common:ClassSchedule_management_title') + ': '}</p>\n                    {setSemesterClasses()}\n                </div>\n                <div className=\"form-buttons-container semester-btns\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className=\"buttons-style \"\n                        disabled={pristine || submitting}\n                        type=\"submit\"\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        type=\"button\"\n                        variant=\"contained\"\n                        className=\"buttons-style\"\n                        disabled={setDisableButton(pristine,submitting,semester.id)}\n                        onClick={onReset}\n                    >\n                        {getClearOrCancelTitle(semester.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    semester: state.semesters.semester,\n    classScheduler: state.classActions.classScheduler,\n\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SEMESTER_FORM\n    })(AddSemesterForm)\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\n\nimport Button from '@material-ui/core/Button';\nimport { MdPlayArrow } from 'react-icons/md';\n\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport './SemesterCopyForm.scss';\n\nimport { SEMESTER_COPY_FORM } from '../../constants/reduxForms';\nimport { required } from '../../validation/validateFields';\nconst shortid = require('shortid');\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    }\n}));\n\nconst SemesterCopyForm = props => {\n    const classes = useStyles();\n    const { t } = useTranslation('common');\n    const { semesterId, semesters, handleSubmit, pristine, submitting } = props;\n\n    const renderSemesterList = () => {\n        const available_semesters_for_copy = semesters.filter(\n            semester => semester.id !== semesterId\n        );\n        if (available_semesters_for_copy) {\n            if (available_semesters_for_copy.length > 1) {\n                return (\n                    <>\n                        <Field\n                            id=\"toSemesterId\"\n                            name=\"toSemesterId\"\n                            component={renderSelectField}\n                            label={t('formElements:semester_label')}\n                            type=\"text\"\n                            validate={[required]}\n                        >\n                            <option />\n                            {available_semesters_for_copy.map(\n                                (semester, index) => (\n                                    <option\n                                        key={shortid.generate()}\n                                        value={semester.id}\n                                    >\n                                        {semester.description}\n                                    </option>\n                                )\n                            )}\n                        </Field>\n                    </>\n                );\n            } else if (available_semesters_for_copy.length === 1) {\n                return <p>{available_semesters_for_copy[0].description}</p>;\n            }\n        }\n    };\n\n    return (\n        <section className={classes.root}>\n            <p>{t('formElements:semester_copy_hint')}</p>\n            <p className=\"red-color\">\n                {t('formElements:semester_copy_red_hint')}\n            </p>\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-buttons-container\">\n                    {renderSemesterList()}\n                    <Button\n                        className='semester-copy-btn'\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={pristine || submitting}\n                    >\n                        <MdPlayArrow\n                            title={t('teacher_schedule_label')}\n                            className=\"svg-btn\"\n                        />\n                        {props.submitButtonLabel}\n                    </Button>\n                </div>\n            </form>\n        </section>\n    );\n};\n\nconst mapStateToProps = state => ({\n    semesters: state.semesters.semesters\n});\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SEMESTER_COPY_FORM\n    })(SemesterCopyForm)\n);\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './modal.scss';\n\nimport i18n from 'i18next';\nimport { disabledCard } from '../../../constants/disabledCard';\nimport './setDefaultDialog.scss'\nexport const SetChangeDialog = props => {\n    const { onClose, cardId, isHide, open} = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n    const className=\"set-default\";\n    return (\n        <Dialog\n\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">\n                <>\n                    {isHide ? (\n                        <>\n                            {isHide === disabledCard.HIDE ? (\n                                <>{i18n.t('common:do_you_wanna_disable')}</>\n                            ) : (\n                                <>{i18n.t('common:do_you_wanna_show')}</>\n                            )}\n                        </>\n                    ) : (\n                        <>\n                            {i18n.t('common:do_you_wanna')}{' '}\n                            <span className={className}>\n                                {i18n.t(`common:set_default_word`)}\n                            </span>{' '}\n                        </>\n                    )}\n\n                    {i18n.t('common:this_card_type', {\n                        cardType: i18n.t(`formElements:semester_element`)\n                    })}\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => onClose(cardId)}\n                >\n                    {i18n.t('common:yes_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                >\n                    {i18n.t('common:no_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nSetChangeDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default SetChangeDialog;\n","import { connect } from 'react-redux';\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete, MdDonutSmall, MdEdit } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\n\nimport './SemesterPage.scss';\nimport Card from '../../share/Card/Card';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport ModalWindow from '../../share/modals/modal/modal';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport SemesterForm from '../../components/SemesterForm/SemesterForm';\nimport SemesterCopyForm from '../../components/SemesterCopyForm/SemesterCopyForm';\nimport {\n    clearSemesterService,\n    getDisabledSemestersService,\n    handleSemesterService,\n    removeSemesterCardService,\n    selectSemesterService,\n    setDisabledSemestersService,\n    setEnabledSemestersService,\n    showAllSemestersService,\n    semesterCopy,\n    createArchiveSemesterService,\n    getArchivedSemestersService,\n    viewArchivedSemester, setDefaultSemesterById\n} from '../../services/semesterService';\nimport { setScheduleTypeService } from '../../services/scheduleService';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { GiSightDisabled, IoMdEye, FaCopy } from 'react-icons/all';\nimport { FaFileArchive } from 'react-icons/fa';\n\nimport GroupSchedulePage from '../../components/GroupSchedulePage/GroupSchedulePage';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport SetDefaultDialog from '../../share/modals/modal/setDefaultDialog';\nimport SetChangeDialog from '../../share/modals/modal/setDefaultDialog';\n\nconst SemesterPage = props => {\n    const { t } = useTranslation('formElements');\n    const [open, setOpen] = useState(false);\n    const [openDefault, setOpenDefault] = useState(false);\n    const [openModal, setOpenModal] = useState(false);\n    const [semesterId, setSemesterId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const { isSnackbarOpen, snackbarType, snackbarMessage } = props;\n\n    useEffect(() => showAllSemestersService(), []);\n    useEffect(() => {\n        getDisabledSemestersService();\n    }, []);\n    useEffect(() => getArchivedSemestersService(), []);\n\n    const [hideDialog, setHideDialog] = useState(null);\n    const [hideDialogModal, setHideDialogModal] = useState(null);\n    const [disabled, setDisabled] = useState(false);\n    const [archived, setArchived] = useState(false);\n\n    setScheduleTypeService('archived');\n\n    const SearchChange = setTerm;\n    const handleFormReset = () => clearSemesterService();\n    const submit = values => handleSemesterService(values);\n    const handleEdit = semesterId => selectSemesterService(semesterId);\n    const handleCreateArchive = semesterId =>\n        createArchiveSemesterService(semesterId);\n\n    const searchArr = ['year', 'description', 'startDay', 'endDay'];\n\n    let visibleItems = [];\n    if (disabled) {\n        visibleItems = search(props.disabledSemesters, term, searchArr);\n    } else if (archived) {\n        visibleItems = search(props.archivedSemesters, term, searchArr);\n    } else {\n        visibleItems = search(props.semesters, term, searchArr);\n    }\n\n    const handleClickOpen = semesterId => {\n        setSemesterId(semesterId);\n        setOpen(true);\n    };\n    const handleClickOpenDefault = semesterId => {\n        setSemesterId(semesterId);\n        setOpenDefault(true);\n    };\n    const handleClickOpenModal = semesterId => {\n        setSemesterId(semesterId);\n        setOpenModal(true);\n    };\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n\n    const handleCloseModal = (event, reason) => {\n        setOpenModal(false);\n        setHideDialogModal(null);\n        if (reason === 'clickaway') return;\n    };\n\n    const handleClose = semesterId => {\n        const setDelete=open;\n        const setDefault=openDefault;\n        setOpen(false);\n        setOpenDefault(false);\n        if (!semesterId) return;\n        if (hideDialog) {\n            if (disabled) {\n                const semester = props.disabledSemesters.find(\n                    semester => semester.id === semesterId\n                );\n                setEnabledSemestersService(semester);\n            } else {\n                const semester = props.semesters.find(\n                    semester => semester.id === semesterId\n                );\n                setDisabledSemestersService(semester);\n            }\n        } else if(setDelete) {\n            removeSemesterCardService(semesterId);\n        }\n        else if(setDefault){\n           setDefaultSemesterById(semesterId)\n        }\n        setHideDialog(null);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n        setArchived(false);\n    };\n\n    const showArchivedHandler = () => {\n        setArchived(!archived);\n        !archived === true\n            ? setScheduleTypeService('archived')\n            : setScheduleTypeService('default');\n        setDisabled(false);\n    };\n    const handleSemesterCopySubmit = values => {\n        semesterCopy({\n            fromSemesterId: +semesterId,\n            toSemesterId: +values.toSemesterId\n        });\n        setOpenModal(false);\n        setHideDialogModal(null);\n    };\n\n    const handleSemesterArchivedPreview = semesterId => {\n        viewArchivedSemester(+semesterId);\n    };\n    const setClassNameForDefaultSemester=semester=>{\n        const defaultSemesterName=\"default\";\n        const className=\"svg-btn edit-btn\";\n        return semester.defaultSemester===true?`${className} ${defaultSemesterName}`:className;\n    }\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.SEMESTER_PAGE} val={navigation.SEMESTERS}/>\n            <ConfirmDialog\n                cardId={semesterId}\n                whatDelete={'semester'}\n                isHide={hideDialog}\n                open={open}\n                onClose={handleClose}\n            />\n            <SetChangeDialog\n                cardId={semesterId}\n                isHide={hideDialog}\n                open={openDefault}\n                onClose={handleClose}\n            />\n            <ModalWindow\n                whatDelete={'semester'}\n                isHide={hideDialogModal}\n                open={openModal}\n                onClose={handleCloseModal}\n                windowTitle={t('semester_copy_label')}\n                isOkButton={false}\n                isNoButton={true}\n                noButtonLabel={t('close_label')}\n            >\n                <SemesterCopyForm\n                    semesterId={semesterId}\n                    onSubmit={handleSemesterCopySubmit}\n                    submitButtonLabel={t('copy_label')}\n                />\n            </ModalWindow>\n            <div className=\"cards-container\">\n                <aside className=\"search-list__panel\">\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                        showArchived={showArchivedHandler}\n                    />\n                    {disabled || archived ? (\n                        ''\n                    ) : (\n                        <SemesterForm\n                            className=\"form\"\n                            onSubmit={submit}\n                            onReset={handleFormReset}\n                        />\n                    )}\n                </aside>\n                <section className=\"container-flex-wrap wrapper\">\n                    {visibleItems.length === 0 && (\n                        <NotFound name={t('semestry_label')} />\n                    )}\n                    {visibleItems.map((semester, index) => {\n                        const sem_days = [];\n\n                        semester.semester_days.forEach(day =>\n                            sem_days.push(t(`common:day_of_week_${day}`))\n                        );\n                        return (\n                            <Card\n                                key={index}\n                                class={`semester-card done-card ${\n                                    semester.currentSemester ? 'current' : ''\n                                }`}\n                            >\n                                <div className=\"cards-btns\">\n                                    {!disabled && !archived ? (\n                                        <>\n                                            <GiSightDisabled\n                                                className=\"svg-btn copy-btn\"\n                                                title={t('common:set_disabled')}\n                                                onClick={() => {\n                                                    setHideDialog(\n                                                        disabledCard.HIDE\n                                                    );\n                                                    handleClickOpen(\n                                                        semester.id\n                                                    );\n                                                }}\n                                            />\n                                            <FaEdit\n                                                className=\"svg-btn edit-btn\"\n                                                title={t('edit_title')}\n                                                onClick={() =>\n                                                    handleEdit(semester.id)\n                                                }\n                                            />\n                                            <FaCopy\n                                                className=\"svg-btn copy-btn\"\n                                                title={t('copy_label')}\n                                                onClick={() => {\n                                                    handleClickOpenModal(\n                                                        semester.id\n                                                    );\n                                                }}\n                                            />\n                                            {semester.currentSemester ? (\n                                                ''\n                                            ) : (\n                                                <FaFileArchive\n                                                    className=\"svg-btn archive-btn\"\n                                                    title={t(\n                                                        'common:make_archive'\n                                                    )}\n                                                    onClick={() => {\n                                                        handleCreateArchive(\n                                                            semester.id\n                                                        );\n                                                    }}\n                                                />\n                                            )}\n                                        </>\n                                    ) : !archived ? (\n                                        <IoMdEye\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_enabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.SHOW\n                                                );\n                                                handleClickOpen(semester.id);\n                                            }}\n                                        />\n                                    ) : (\n                                        <IoMdEye\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:preview')}\n                                            onClick={() => {\n                                                handleSemesterArchivedPreview(\n                                                    semester.id\n                                                );\n                                            }}\n                                        />\n                                    )}\n                                    <MdDelete\n                                        className=\"svg-btn delete-btn\"\n                                        title={t('delete_title')}\n                                        onClick={() =>\n                                            handleClickOpen(semester.id)\n                                        }\n                                    />\n\n                                        <MdDonutSmall\n                                            className={setClassNameForDefaultSemester(semester)}\n                                            title={t('set_default_title')}\n                                            onClick={() =>\n                                                handleClickOpenDefault(semester.id)\n                                            }\n                                        />\n\n\n                                </div>\n\n                                <p className=\"semester-card__description\">\n                                    <small>{t('semester_label') + ':'}</small>\n                                    <b>{semester.description}</b>\n                                    {' ( ' + semester.year + ' )'}\n                                </p>\n                                <p className=\"semester-card__description\">\n                                    <b>\n                                        {semester.startDay} - {semester.endDay}\n                                    </b>\n                                </p>\n                                <p className=\"semester-card__description\">\n                                    {t('common:days_label') + ': '}\n                                    {sem_days.join(', ')}\n                                </p>\n                                <p className=\"semester-card__description\">\n                                    {t(\n                                        'common:ClassSchedule_management_title'\n                                    ) + ': '}\n                                    {semester.semester_classes\n                                        .map(classItem => {\n                                            return classItem.class_name;\n                                        })\n                                        .join(', ')}\n                                </p>\n                            </Card>\n                        );\n                    })}\n                </section>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n            <GroupSchedulePage scheduleType=\"archived\" />\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    semesters: state.semesters.semesters,\n    disabledSemesters: state.semesters.disabledSemesters,\n    archivedSemesters: state.semesters.archivedSemesters,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message\n});\n\nexport default connect(mapStateToProps, {})(SemesterPage);\n","import axios from '../helper/axios';\nimport { store } from '../index';\n\nimport {\n    MERGE_USER_AND_TEACHER_URL,\n    USERS_URL,\n    USER_PROFILE,\n    UPDATE_USER_PROFILE\n} from '../constants/axios';\nimport { setUsers, setUser, setTeacher } from '../redux/actions/index';\n\nimport i18n from '../helper/i18n';\nimport { setLoadingService } from './loadingService';\nimport { getTeachersWithoutAccount } from './teacherService';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\n\nexport const getUsersService = () => {\n    axios\n        .get(USERS_URL)\n        .then(response => {\n            store.dispatch(setUsers(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getUserProfile = () => {\n    axios\n        .get(USER_PROFILE)\n        .then(response => {\n            store.dispatch(setUser(response.data));\n            if (response.data.teacher_name) {\n                store.dispatch(\n                    setTeacher({\n                        id: 15,\n                        name: response.data.teacher_name,\n                        surname: response.data.teacher_surname,\n                        patronymic: response.data.teacher_patronymic,\n                        position: response.data.teacher_position\n                    })\n                );\n            }\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const updateUserPassword = values => {\n    axios\n        .put(UPDATE_USER_PROFILE, {\n            current_password: values.current_password,\n            new_password: values.new_password\n        })\n        .then(response => {\n            store.dispatch(setUser(response.data));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_label'),\n                    actionType: i18n.t('serviceMessages:updated')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const updateUserTeacher = values => {\n    axios\n        .put(UPDATE_USER_PROFILE, {\n            teacher_name: values.name,\n            teacher_surname: values.surname,\n            teacher_patronymic: values.patronymic,\n            teacher_position: values.position\n        })\n        .then(response => {\n            store.dispatch(setUser(response.data));\n            store.dispatch(\n                setTeacher({\n                    id: 15,\n                    name: response.data.teacher_name,\n                    surname: response.data.teacher_surname,\n                    patronymic: response.data.teacher_patronymic,\n                    position: response.data.teacher_position\n                })\n            );\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:user_label'),\n                    actionType: i18n.t('serviceMessages:updated')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const mergeUserAndTeacherService = mergeObj => {\n    axios\n        .put(MERGE_USER_AND_TEACHER_URL, mergeObj)\n        .then(response => {\n            getTeachersWithoutAccount();\n            getUsersService();\n            setLoadingService(false);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:user_label'),\n                    actionType: i18n.t('serviceMessages:successfully_merged')\n                })\n            );\n        })\n        .catch(error => {\n            setLoadingService(false);\n            errorHandler(error);\n        });\n};\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    getUsersService,\n    mergeUserAndTeacherService\n} from '../../services/userService';\nimport { getTeachersWithoutAccount } from '../../services/teacherService';\nimport { setLoadingService } from '../../services/loadingService';\n\n\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from '@material-ui/core';\n\nimport Card from '../../share/Card/Card';\n\nimport './MergeRolePage.scss';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst useStyles = makeStyles(() => ({\n    autoCompleteField: {\n        '&': {\n            display: 'inline-block',\n            margin: '0 10px 10px 0',\n            width: 200\n        }\n    }\n}));\n\nconst MergeRolePage = props => {\n    const { t } = useTranslation('common');\n\n    const [teacher, setTeacher] = useState(null);\n    const [user, setUser] = useState(null);\n\n    const classes = useStyles();\n\n    const teachers = props.teachers;\n    const users = props.users;\n\n    useEffect(() => getTeachersWithoutAccount(), []);\n    useEffect(() => getUsersService(), []);\n\n    const defaultPropsTeachers = {\n        options: teachers,\n        getOptionLabel: option =>\n            option\n                ? option.position +\n                  ' ' +\n                  option.surname +\n                  ' ' +\n                  option.name +\n                  ' ' +\n                  option.patronymic\n                : ''\n    };\n\n    const defaultPropsUsers = {\n        options: users,\n        getOptionLabel: option => (option ? option.email : '')\n    };\n\n    const mergeUserAndTeacherHandle = () => {\n        if (!user || !teacher) return;\n        mergeUserAndTeacherService({ teacherId: teacher.id, userId: user.id });\n        setUser(null);\n        setTeacher(null);\n        setLoadingService(true);\n    };\n\n    return (\n        <>\n            <NavigationPage  val={navigation.USERS}/>\n            <div className=\"merge-role-form\">\n                <Card class=\"merge-role-card\">\n                    <h2 className=\"under-line\">{t('merge_header')}</h2>\n                    {props.loading ? (\n                        <CircularProgress />\n                    ) : (\n                        <>\n                            <div className=\"autocomplete-group\">\n                                <Autocomplete\n                                    {...defaultPropsTeachers}\n                                    clearOnEscape\n                                    openOnFocus\n                                    className={classes.autoCompleteField}\n                                    onChange={(event, newValue) => {\n                                        setTeacher(newValue);\n                                    }}\n                                    renderInput={params => (\n                                        <TextField\n                                            {...params}\n                                            label={t(\n                                                'formElements:teacher_label'\n                                            )}\n                                            margin=\"normal\"\n                                        />\n                                    )}\n                                />\n                                <Autocomplete\n                                    {...defaultPropsUsers}\n                                    clearOnEscape\n                                    openOnFocus\n                                    className={classes.autoCompleteField}\n                                    onChange={(event, newValue) => {\n                                        setUser(newValue);\n                                    }}\n                                    renderInput={params => (\n                                        <TextField\n                                            {...params}\n                                            label={t('formElements:user_label')}\n                                            margin=\"normal\"\n                                        />\n                                    )}\n                                />\n                            </div>\n                            <Button\n                                className=\"merge-btn\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => mergeUserAndTeacherHandle()}\n                            >\n                                {t('formElements:merge_button')}\n                            </Button>\n                        </>\n                    )}\n                </Card>\n            </div>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    teachers: state.teachers.teachers,\n    users: state.users.users,\n    loading: state.loadingIndicator.loading\n});\n\nexport default connect(mapStateToProps)(MergeRolePage);\n","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { connect } from 'react-redux';\n\nimport './ChangePasswordForm.scss';\n\nimport renderTextField from '../../share/renderedFields/input';\n\nimport Button from '@material-ui/core/Button';\n\nimport { required, password } from '../../validation/validateFields';\n\nimport { PROFILE_FORM } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\nimport NavigationPage from '../Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nlet ChangePasswordForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting } = props;\n\n    return (\n        <>\n            <NavigationPage  val={navigation.CHANGES}/>\n        <form onSubmit={handleSubmit}>\n            <h3 className=\"form-title\">{t('change_password_form_title')}</h3>\n            <Field\n                component={renderTextField}\n                className=\"form-field\"\n                name=\"current_password\"\n                id=\"current_password\"\n                label={t('password_label')}\n                type=\"password\"\n                validate={[required, password]}\n            />\n            <Field\n                component={renderTextField}\n                className=\"form-field\"\n                name=\"new_password\"\n                id=\"new_password\"\n                label={t('new_password_label')}\n                type=\"password\"\n                validate={[required, password]}\n            />\n            <Field\n                component={renderTextField}\n                className=\"form-field\"\n                name=\"confirm_password\"\n                id=\"confirm_password\"\n                label={t('retype_password_label')}\n                type=\"password\"\n                validate={[required, password]}\n            />\n\n            <div className=\"form-buttons-container\">\n                <Button\n                    className=\"buttons-style\"\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={pristine || submitting}\n                >\n                    {t('save_button_label')}\n                </Button>\n                <Button\n                    className=\"buttons-style\"\n                    type=\"button\"\n                    variant=\"contained\"\n                    disabled={pristine || submitting}\n                    onClick={onReset}\n                >\n                    {t('clear_button_label')}\n                </Button>\n            </div>\n        </form>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: PROFILE_FORM\n    })(ChangePasswordForm)\n);\n","import React, { useEffect, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport Card from '../../share/Card/Card';\nimport './BusyRooms.scss';\nimport { useTranslation } from 'react-i18next';\nimport { getScheduleItemsService } from '../../services/scheduleService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { CircularProgress } from '@material-ui/core';\nimport { setLoadingService } from '../../services/loadingService';\nimport AdminPage from '../AdminPage/AdminPage';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst BusyRooms = props => {\n    const { t } = useTranslation('common');\n\n    useEffect(() => getScheduleItemsService(), []);\n    useEffect(() => {\n        getClassScheduleListService();\n        setLoadingService(true);\n    }, []);\n\n    const busyRooms = props.busyRooms[0];\n\n    const isLoading = props.loading;\n\n    let conflictLesson = 'more-then-one-conflict';\n    let grouppedLesson = 'more-then-one';\n\n    let busyRoomsLength;\n\n    if (busyRooms !== undefined) {\n        busyRoomsLength = busyRooms.length;\n    }\n\n    const renderRoomTitle = (name, type) => (\n        <h3 className=\"room-heading\">\n            <span className=\"room-name\">{name}</span>\n            <span className=\"room-type\">{type}</span>\n        </h3>\n    );\n\n    const renderWeekRoomInfo = (schedule, index, type = 'odd') => {\n        return props.currentSemester.semester_classes.map(scheduleClass => {\n            let in_arrayIndex = -1;\n            in_arrayIndex =\n                type === 'odd'\n                    ? schedule.classes[0].odd.findIndex(\n                          classItem => classItem.class_id === scheduleClass.id\n                      )\n                    : schedule.classes[0].even.findIndex(\n                          classItem => classItem.class_id === scheduleClass.id\n                      );\n            let classOne =\n                type === 'odd'\n                    ? schedule.classes[0].odd.find(\n                          classItem => classItem.class_id === scheduleClass.id\n                      )\n                    : schedule.classes[0].even.find(\n                          classItem => classItem.class_id === scheduleClass.id\n                      );\n            if (\n                in_arrayIndex < 0 ||\n                !classOne ||\n                classOne.lessons.length <= 0\n            ) {\n                return (\n                    <div\n                        className=\"class-info\"\n                        key={index + scheduleClass.class_name}\n                    >\n                        <div className=\"class-info-data class-number\">\n                            {scheduleClass.class_name}\n                        </div>\n                        <div className=\"class-info-data\">\n                            <div className=\"green-free\"></div>\n                        </div>\n                    </div>\n                );\n            } else {\n                let intersectClass = '';\n                if (\n                    classOne &&\n                    classOne.lessons &&\n                    classOne.lessons.length > 1\n                ) {\n                    intersectClass = conflictLesson;\n                }\n                let grouppedLessonClass = '';\n                classOne.lessons.map(lessonOne => {\n                    grouppedLessonClass =\n                        lessonOne.groups.length > 1 ? grouppedLesson : '';\n                });\n                return (\n                    <div\n                        className=\"class-info\"\n                        key={index + classOne.class_name + classOne.group_name}\n                    >\n                        <div className=\"class-info-data class-number\">\n                            {classOne.class_name}\n                        </div>\n                        <div\n                            className={`class-info-data group-height ${grouppedLessonClass}${intersectClass}`}\n                        >\n                            {classOne.lessons.map(lessonOne => {\n                                return lessonOne.groups.map(groupItem => {\n                                    const hoverInfo =\n                                        lessonOne.teacher_for_site +\n                                        lessonOne.subject_for_site;\n                                    return (\n                                        <p\n                                            title={hoverInfo}\n                                            key={hoverInfo + lessonOne.name}\n                                        >\n                                            {groupItem.group_name}\n                                        </p>\n                                    );\n                                });\n                            })}\n                        </div>\n                    </div>\n                );\n            }\n        });\n    };\n\n    const renderRoomDay = (schedule, index) => (\n        <section className=\"room-day\" key={index + schedule.day}>\n            <h3 className=\"room-heading\">{t(`day_of_week_${schedule.day}`)}</h3>\n            <section>\n                <Fragment key={index}>\n                    <div className=\"even-odd-week\">\n                        <span className=\"even-odd-heading\">\n                            {t('week_odd_title')}\n                        </span>\n                        {renderWeekRoomInfo(schedule, index, 'odd')}\n                    </div>\n                    <div className=\"even-odd-week\">\n                        <span className=\"even-odd-heading\">\n                            {t('week_even_title')}\n                        </span>\n                        {renderWeekRoomInfo(schedule, index, 'even')}\n                    </div>\n                </Fragment>\n            </section>\n        </section>\n    );\n    return (\n        <div className=\"busy-rooms-container\">\n            {isLoading ? (\n                <h2 className=\"busy-heading\">\n                    <CircularProgress />\n                </h2>\n            ) : (\n                <>\n\n                    {busyRoomsLength > 0 ? (\n                        <>\n                            <NavigationPage val={navigation.BUSY_ROOMS}/>\n                            <h2 className=\"busy-heading\">\n                                {t('busy_rooms_heading')}\n                            </h2>\n                            <section className=\"view-rooms\">\n                                {busyRooms.map(busyRoom => (\n                                    <Card\n                                        class=\"busy-room\"\n                                        key={busyRoom.room_id}\n                                    >\n                                        {renderRoomTitle(\n                                            busyRoom.room_name,\n                                            busyRoom.room_type\n                                        )}\n\n                                        {busyRoom.schedules.map(\n                                            (schedule, index) => {\n                                                return props.currentSemester.semester_days.includes(\n                                                    schedule.day\n                                                )\n                                                    ? renderRoomDay(\n                                                          schedule,\n                                                          index\n                                                      )\n                                                    : '';\n                                            }\n                                        )}\n                                    </Card>\n                                ))}\n                            </section>\n                        </>\n                    ) : (\n                        <>\n                            <h2 className=\"busy-heading\">\n                                <CircularProgress />\n                            </h2>\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    busyRooms: state.busyRooms.busyRooms,\n    loading: state.loadingIndicator.loading,\n    currentSemester: state.schedule.currentSemester\n});\n\nexport default connect(mapStateToProps, {})(BusyRooms);\n","import TeacherList from '../containers/TeachersList/TeachersList';\nimport GroupList from '../containers/GroupList/GroupList';\nimport RoomList from '../containers/RoomList/RoomList';\nimport SubjectPage from '../containers/SubjectPage/SubjectPage';\nimport SemesterPage from '../containers/SemesterPage/SemesterPage';\nimport MergeRolePage from '../containers/MergeRolePage/MergeRolePage';\nimport Changes from '../components/ChangePasswordForm/ChangePasswordForm';\nimport BusyRooms from '../containers/BusyRooms/BusyRooms';\nimport React from 'react';\nexport const navigation={\n    \"LESSONS\":0,\n    \"USERS\":1,\n    \"CHANGES\":2,\n    \"BUSY_ROOMS\":3,\n    \"BELLS\":4,\n    \"DEPARTMENTS\":5,\n    \"GROUPS\":6,\n    \"ROOMS\":7,\n    \"SUBJECTS\":8,\n    \"SEMESTERS\":9,\n    \"TEACHERS\":10,\n}\nexport const navigationNames={\n    TEACHER_LIST:'TeacherList',\n    GROUP_LIST:'GroupList',\n    CLASS_SCHEDULE_TITLE:'ClassScheduleTitle',\n    ROOM_LIST:'RoomList',\n    SUBJECT_PAGE:'SubjectPage',\n    SEMESTER_PAGE:'SemesterPage',\n    DEPARTMENTS:'Departments',\n    LESSON_PAGE:'LessonPage',\n    MERGE_ROLE_PAGE:'MergeRolePage',\n    CHANGES:'Changes',\n    BUSY_ROOMS:'BusyRooms',\n    GENERAL:\"General\"\n}\n","import React, { useRef } from \"react\";\nimport ReactSelect from \"react-select\";\nimport { Dialog, DialogTitle } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Select from 'react-select';\nimport i18n from 'i18next';\nimport '../helper/multiselect.scss'\nimport { useTranslation } from 'react-i18next';\nexport const MultiSelect = props => {\n    const { t } = useTranslation('common');\n    const valueRef = useRef(props.value);\n    valueRef.current = props.value;\n    const {open,defaultSemester,semesters}=props;\n\n    const selectAllOption = {\n        value: \"<SELECT_ALL>\",\n        label: t('all_teachers')\n    };\n\n    const isSelectAllSelected = () =>\n        valueRef.current.length === props.options.length;\n\n    const isOptionSelected = option =>\n        valueRef.current.some(({ value }) => value === option.value) ||\n        isSelectAllSelected();\n\n    const getOptions = () => [selectAllOption, ...props.options];\n\n    const getValue = () =>\n        isSelectAllSelected() ? [selectAllOption] : props.value;\n\n    const onChange = (newValue, actionMeta) => {\n        const { action, option, removedValue } = actionMeta;\n\n        if (action === \"select-option\" && option.value === selectAllOption.value) {\n            props.onChange(props.options, actionMeta);\n        }\n        else if (\n            (action === \"deselect-option\" &&\n                option.value === selectAllOption.value) ||\n            (action === \"remove-value\" &&\n                removedValue.value === selectAllOption.value)\n        ) {\n            props.onChange([], actionMeta);\n        } else if (\n            actionMeta.action === \"deselect-option\" &&\n            isSelectAllSelected()\n        ) {\n            props.onChange(\n                props.options.filter(({ value }) => value !== option.value),\n                actionMeta\n            );\n        } else {\n            props.onChange(newValue || [], actionMeta);\n        }\n    };\n   const handleChange = (newValue, actionMeta) => {\n        props.onChangeSemesterValue(newValue);\n    };\n\n    return (\n\n        <Dialog id=\"select-dialog\"\n\n                disableBackdropClick={true}\n                aria-labelledby=\"confirm-dialog-title\"\n                open={open}\n        >\n            <DialogTitle id=\"select-dialog-title\" className=\"confirm-dialog\">\n        <ReactSelect\n            isOptionSelected={isOptionSelected}\n            options={getOptions()}\n            value={getValue()}\n            onChange={onChange}\n            hideSelectedOptions={false}\n            closeMenuOnSelect={false}\n            isMulti\n            placeholder={t('choose_teachers')}\n        />\n                <Select\n                    defaultValue={defaultSemester}\n                    options={semesters}\n                    onChange={handleChange}\n                />\n\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={props.onCancel}\n                >\n                    {t('cancel_schedule')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={props.onSentTeachers}\n                    disabled={!props.isEnabledSentBtn}\n                >\n                    {t('sent_schedule')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport AddTeacherForm from '../../components/AddTeacherForm/AddTeacherForm';\nimport Card from '../../share/Card/Card';\nimport WishModal from '../WishModal/WishModal';\n\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\n\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport Button from '@material-ui/core/Button';\nimport { showTeacherWish } from '../../services/teacherWishService';\n\nimport './TeachersList.scss';\n\nimport { connect } from 'react-redux';\nimport {\n    getCurrentSemesterService,\n    getDefaultSemesterService,\n    sendTeachersScheduleService, showAllPublicSemestersService\n} from '../../services/scheduleService';\nimport {\n    getDisabledTeachersService,\n    handleTeacherService,\n    removeTeacherCardService,\n    selectTeacherCardService,\n    setDisabledTeachersService,\n    setEnabledTeachersService,\n    showAllTeachersService\n} from '../../services/teacherService';\n\nimport { useTranslation } from 'react-i18next';\nimport { search } from '../../helper/search';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport NotFound from '../../share/NotFound/NotFound';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { getPublicClassScheduleListService } from '../../services/classService';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport Multiselect, { MultiSelect } from '../../helper/multiselect';\nimport Example from '../../helper/multiselect';\nimport { getFirstLetter } from '../../helper/renderTeacher';\nimport { showAllSemestersService } from '../../services/semesterService';\nimport { getAllDepartmentsService, getDepartmentByIdService } from '../../services/departmentService';\nimport { clearDepartmentForm, getDepartItemById } from '../../redux/actions/departments';\n\nconst TeacherList = props => {\n    const { t } = useTranslation('common');\n\n    const [open, setOpen] = useState(false);\n    const [teacherCardId, setTeacherId] = useState();\n    const [term, setTerm] = useState('');\n    const [disabled, setDisabled] = useState(false);\n    const [hideDialog, setHideDialog] = useState(null);\n    const [openSelect,setOpenSelect]=useState(false);\n\n\n    useEffect(() => showAllTeachersService(), []);\n    useEffect(() => getDisabledTeachersService(), []);\n    useEffect(() => getPublicClassScheduleListService(), []);\n    useEffect(() => getDefaultSemesterService(), []);\n    useEffect(() => getCurrentSemesterService(), []);\n    useEffect(() => showAllPublicSemestersService(), []);\n    useEffect(() => showAllSemestersService(), []);\n    useEffect(()=>getAllDepartmentsService(),[])\n    const {teachers ,disabledTeachers ,currentSemester,semesters,defaultSemester,departments,department}=props;\n\n    const setOptions=()=>{\n        return teachers.map(item=>{return {id:item.id,value:item.id,label:`${item.surname} ${getFirstLetter(item.name)} ${getFirstLetter(item.patronymic)}`}});\n    }\n    const setSemesterOptions=()=>{\n        return semesters!==undefined? semesters.map(item=>{return {id:item.id,value:item.id,label:`${item.description}`}}):null;\n\n    }\n    const parseDefaultSemester = () => {\n      return{id:defaultSemester.id,value:defaultSemester.id,label:`${defaultSemester.description}`}\n    }\n    const setDepartmentOptions = () => {\n        return departments.map(item=>{return {id:item.id,value:item.id,label:`${item.name}`}});\n    }\n\n    const teacherLength = disabled ? disabledTeachers.length : teachers.length;\n    const [selected, setSelected] = useState([]);\n    const[selectedSemester,setSelectedSemester]=useState('');\n    const options = setOptions();\n    const semesterOptions=setSemesterOptions();\n    const departmentOptions=setDepartmentOptions();\n    const teacherSubmit = values => {\n\n        const sendData={...values,department:department}\n\n        handleTeacherService(sendData);\n\n    };\n\n    const selectTeacherCard = teacherCardId => {\n        selectTeacherCardService(teacherCardId);\n    };\n\n    const removeTeacherCard = id => {\n        removeTeacherCardService(id);\n    };\n\n    const handleClickOpen = teacherCardId => {\n        setTeacherId(teacherCardId);\n        setOpen(true);\n    };\n\n    const handleClose = teacherCardId => {\n        setOpen(false);\n        if (!teacherCardId) {\n            return;\n        }\n        if (hideDialog) {\n            if (disabled) {\n                const teacher = disabledTeachers.find(\n                    teacher => teacher.id === teacherCardId\n                );\n                setEnabledTeachersService(teacher);\n            } else {\n                const teacher = teachers.find(\n                    teacher => teacher.id === teacherCardId\n                );\n                setDisabledTeachersService(teacher);\n            }\n        } else {\n            removeTeacherCard(teacherCardId);\n        }\n        setHideDialog(null);\n    };\n    const handleCloseSending = scheduleId => {\n        setOpenSelect(false);\n    };\n    const [openWish, setOpenWish] = useState(false);\n    const [teacher, setTeacher] = useState(0);\n\n    const handleClickOpenWish = teacher => {\n        setTeacher(teacher);\n        showTeacherWish(teacher.id);\n        setOpenWish(true);\n    };\n\n    const handleCloseWish = value => {\n        setOpenWish(false);\n    };\n\n    const visibleItems = disabled\n        ? search(disabledTeachers, term, ['name', 'surname', 'patronymic'])\n        : search(teachers, term, ['name', 'surname', 'patronymic']);\n\n    const SearchChange = term => {\n        setTerm(term);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    const handleToUpperCase = str => {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    };\n    const cancelSelection=()=>{\n        clearSelection();\n        closeSelectionDialog();\n    }\n    const sendTeachers=()=>{\n        closeSelectionDialog();\n        const teachersId=selected.map(item=>{return item.id});\n        const semesterId=selectedSemester===''?defaultSemester.id:selectedSemester.id;\n        const data={semesterId,teachersId};\n        sendTeachersScheduleService(data);\n        clearSelection();\n    }\n    const closeSelectionDialog=()=>{\n        setOpenSelect(false);\n    }\n    const clearSelection=()=>{\n        setSelected([]);\n    }\n    const isChosenSelection=()=>{\n       return  selected.length!==0\n    }\n    return (\n        <>\n            <NavigationPage name={navigationNames.TEACHER_LIST} val={navigation.TEACHERS}/>\n        <div className=\"cards-container\">\n\n            <ConfirmDialog\n                cardId={teacherCardId}\n                whatDelete={cardType.TEACHER}\n                open={open}\n                isHide={hideDialog}\n                onClose={handleClose}\n            />\n\n            <WishModal\n                openWish={openWish}\n                onCloseWish={handleCloseWish}\n                teacher={teacher}\n                teacherWishes={props.teacherWishes}\n                classScheduler={props.classScheduler}\n            />\n\n            <aside className=\"form-with-search-panel\">\n\n                <SearchPanel\n                    SearchChange={SearchChange}\n                    showDisabled={showDisabledHandle}\n                />\n                <Button\n                    className=\"wish-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {\n                        setOpenSelect(true);\n                    }}\n                >\n                    {t('send_schedule_for_teacher')}\n                </Button>\n                <>\n                    <MultiSelect open={openSelect}\n                                 options={options}\n                                 value={selected}\n                                 onChange={setSelected}\n                                 onCancel={cancelSelection}\n                                 onSentTeachers={sendTeachers}\n                                 isEnabledSentBtn={isChosenSelection()}\n                                 semesters={semesterOptions}\n                                 defaultSemester={parseDefaultSemester()}\n                                 onChangeSemesterValue={setSelectedSemester}\n\n                    />\n                </>\n\n                {disabled ? (\n                    ''\n                ) : (\n                    <AddTeacherForm\n                        departments={departmentOptions}\n                        teachers={teachers}\n                        onSubmit={teacherSubmit}\n                        onSetSelectedCard={selectTeacherCard}\n                    />\n                )}\n            </aside>\n\n            <section className=\"container-flex-wrap\">\n                {visibleItems.length === 0 && (\n                    <NotFound name={t('formElements:teacher_a_label')} />\n                )}\n                {teacherLength > 0 ? (\n                    visibleItems.map((teacher, index) => (\n                        <Card\n                            key={index}\n                            {...teacher}\n                            class=\"teacher-card done-card\"\n                        >\n                            <div className=\"cards-btns\">\n                                {!disabled ? (\n                                    <>\n                                        <GiSightDisabled\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_disabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.HIDE\n                                                );\n                                                handleClickOpen(teacher.id);\n                                            }}\n                                        />\n                                        <FaEdit\n                                            className=\"svg-btn edit-btn\"\n                                            title={t('common:edit_hover_title')}\n                                            onClick={() =>\n                                                selectTeacherCard(teacher.id)\n                                            }\n                                        />\n                                    </>\n                                ) : (\n                                    <IoMdEye\n                                        className=\"svg-btn copy-btn\"\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(teacher.id);\n                                        }}\n                                    />\n                                )}\n                                <MdDelete\n                                    className=\"svg-btn delete-btn\"\n                                    title={t('common:delete_hover_title')}\n                                    onClick={() => handleClickOpen(teacher.id)}\n                                />\n                            </div>\n\n                            <p className=\"teacher-subtitle\">\n                                {t('teacher_card_fullName')}\n                            </p>\n                            <h2 className=\"teacher-card-name\">\n                                {handleToUpperCase(teacher.surname)}{' '}\n                                {handleToUpperCase(teacher.name)}{' '}\n                                {handleToUpperCase(teacher.patronymic)}\n                            </h2>\n                            <p className=\"teacher-subtitle\">\n                                {t('teacher_card_position')}\n                            </p>\n                            <p className=\"teacher-card-title\">\n                                {teacher.position}\n                            </p>\n                            <div className=\"teacher-wish-block\">\n                                <Button\n                                    className=\"wish-button\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => {\n                                        handleClickOpenWish(teacher);\n                                    }}\n                                >\n                                    {t('teacher_card_wish')}\n                                </Button>\n                            </div>\n                        </Card>\n                    ))\n                ) : (\n                    <h2>{t('teacher_card_no_cards')}</h2>\n                )}\n            </section>\n        </div>\n     </>\n    );\n};\nconst mapStateToProps = state => ({\n    teachers: state.teachers.teachers,\n    disabledTeachers: state.teachers.disabledTeachers,\n    classScheduler: state.classActions.classScheduler,\n    teacherWishes: state.teachersWish.wishes,\n    currentSemester:state.schedule.currentSemester,\n    defaultSemester:state.schedule.defaultSemester,\n    semesters: state.schedule.semesters,\n    departments:state.departments.departments,\n    department: state.departments.department,\n});\n\nexport default connect(mapStateToProps, {})(TeacherList);\n","import React, { useEffect } from 'react';\n\nimport Card from '../../share/Card/Card';\n\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport renderSelectField from '../../share/renderedFields/select';\nimport renderCheckboxField from '../../share/renderedFields/checkbox';\n\nimport { FaUserPlus } from 'react-icons/fa';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { LESSON_FORM } from '../../constants/reduxForms';\n\nimport {\n    lessThanZero,\n    maxLengthValue,\n    required\n} from '../../validation/validateFields';\nimport { useTranslation } from 'react-i18next';\nimport { setUniqueErrorService } from '../../services/lessonService';\nimport {handleTeacherInfo } from '../../helper/renderTeacher';\nimport {\n    setValueToSubjectForSiteHandler\n} from '../../helper/reduxFormHelper';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nconst useStyles = makeStyles(() => ({\n    notSelected: {\n        '&': {\n            textAlign: 'center',\n            margin: 'auto'\n        }\n    }\n}));\n\nlet LessonForm = props => {\n    const { t } = useTranslation('formElements');\n\n    const { handleSubmit, pristine, reset, submitting } = props;\n\n    const classes = useStyles();\n\n    const lesson = props.lesson;\n    const lessonId = lesson.id;\n\n    const isUniqueError = props.isUniqueError;\n\n    const teachers = props.teachers;\n\n    const subjects = props.subjects;\n\n    const groupId = props.groupId;\n\n    const [checked, setChecked] = React.useState(false);\n    const handleChange = event => setChecked(event.target.checked);\n\n    useEffect(() => {\n        setChecked(false);\n        if (lessonId) {\n            initializeFormHandler(lesson);\n        } else {\n            props.initialize();\n        }\n    }, [lessonId]);\n\n    const initializeFormHandler = lesson => {\n        props.initialize({\n            lessonCardId: lesson.id,\n            teacher: lesson.teacher.id,\n            subject: lesson.subject.id,\n            type: lesson.lessonType,\n            hours: lesson.hours,\n            linkToMeeting:lesson.linkToMeeting,\n            subjectForSite: lesson.subjectForSite,\n            grouped: lesson.grouped\n        });\n        setChecked(lesson.grouped);\n    };\n\n    return (\n        <Card class=\"form-card\">\n            {groupId ? (\n                <h2 className=\"form-title under-line\">\n                    {lessonId ? t('edit_title') : t('create_title')}\n                    {t('lesson_label')}\n                </h2>\n            ) : (\n                ''\n            )}\n            {groupId ? (\n                <form onSubmit={handleSubmit}>\n                    <Field\n                        id=\"teacher\"\n                        name=\"teacher\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('teacher_label')}\n                        {...(!isUniqueError\n                            ? { validate: [required] }\n                            : { error: isUniqueError })}\n                        onChange={()=>\n                            setUniqueErrorService(false)\n                        }\n                    >\n                        <option />\n                        {teachers.map(teacher => (\n                            <option key={teacher.id} value={teacher.id}>\n                                {handleTeacherInfo(teacher)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        id=\"subject\"\n                        name=\"subject\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('subject_label')}\n                        {...(!isUniqueError\n                            ? { validate: [required] }\n                            : { error: isUniqueError })}\n                        onChange={event => {\n                            setValueToSubjectForSiteHandler(\n                                subjects,\n                                event.target.value,\n                                props.change\n                            );\n                            setUniqueErrorService(false);\n                        }}\n                    >\n                        <option value={''} />\n                        {subjects.map(subject => (\n                            <option key={subject.id} value={subject.id}>\n                                {subject.name}\n                            </option>\n                        ))}\n                    </Field>\n                    <div className=\"form-fields-container\">\n                        <Field\n                            id=\"type\"\n                            name=\"type\"\n                            className=\"form-field\"\n                            component={renderSelectField}\n                            label={t('type_label')}\n                            {...(!isUniqueError\n                                ? { validate: [required] }\n                                : { error: isUniqueError })}\n                            onChange={() => {\n                                setUniqueErrorService(false);\n                            }}\n                        >\n                            <option value={''} />\n                            {props.lessonTypes.map((lessonType, index) => (\n                                <option value={lessonType} key={index}>\n                                    {t(\n                                        `formElements:lesson_type_${lessonType.toLowerCase()}_label`\n                                    )}\n                                </option>\n                            ))}\n                        </Field>\n                        <Field\n                            id=\"hours\"\n                            name=\"hours\"\n                            className=\"form-field\"\n                            type=\"number\"\n                            component={renderTextField}\n                            label={t('hours_label')}\n                            validate={[required, lessThanZero]}\n                        />\n                        <Field\n                            id=\"grouped\"\n                            name=\"grouped\"\n                            className=\"form-field\"\n                            label={\n                                <FaUserPlus\n                                    title={t('formElements:grouped_label')}\n                                    className=\"svg-btn copy-btn align-left info-btn\"\n                                />\n                            }\n                            labelPlacement=\"end\"\n                            defaultValue={checked}\n                            component={renderCheckboxField}\n                            checked={checked}\n                            onChange={handleChange}\n                            color=\"primary\"\n                        />\n                    </div>\n                    <Field\n                        id=\"linkToMeeting\"\n                        name=\"linkToMeeting\"\n                        className=\"form-field\"\n                        rowsMax=\"1\"\n                        margin=\"normal\"\n                        component={renderTextField}\n                        label={t('link_to_meeting_label')}\n                        validate={[required, maxLengthValue]}\n                        type=\"url\"\n                        placeholder={\"Input URL\"}\n                    />\n                    <Field\n                        id=\"subjectForSite\"\n                        name=\"subjectForSite\"\n                        className=\"form-field\"\n                        multiline\n                        rowsMax=\"1\"\n                        margin=\"normal\"\n                        component={renderTextField}\n                        label={t('subject_label') + t('for_site_label')}\n                        validate={[required, maxLengthValue]}\n                    />\n\n                    <div className=\"form-buttons-container\">\n                        <Button\n                            className=\"buttons-style\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            disabled={pristine || submitting}\n                        >\n                            {t('save_button_label')}\n                        </Button>\n                        <Button\n                            className=\"buttons-style\"\n                            type=\"button\"\n                            variant=\"contained\"\n                            disabled={setDisableButton(pristine,submitting,lesson.id)}\n                            onClick={() => {\n                                reset();\n                                setUniqueErrorService(null);\n                                props.onSetSelectedCard(null);\n                            }}\n                        >\n                            {getClearOrCancelTitle(lesson.id,t)}\n                        </Button>\n                    </div>\n                </form>\n            ) : (\n                <div className={classes.notSelected}>\n                    <h2>{t('group_label') + ' ' + t('not_selected_label')}</h2>\n                </div>\n            )}\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({ lesson: state.lesson.lesson });\n\nLessonForm = reduxForm({\n    form: LESSON_FORM\n})(LessonForm);\n\nexport default connect(mapStateToProps)(LessonForm);\n","\nimport { getTeacherForSite } from './renderTeacher';\n\nexport const setValueToTeacherForSiteHandler = (teachers, id, setValue) => {\n    const teacher = teachers.find(teacher => teacher.id === +id);\n    if (!teacher) setValue('teacherForSite', '');\n    else setValue('teacherForSite', getTeacherForSite(teacher));\n};\n\nexport const setValueToSubjectForSiteHandler = (subjects, subjectId, setValue) => {\n    const subject = subjects.find(subject => subject.id === +subjectId);\n    if (!subject) return setValue('subjectForSite', '');\n    else setValue('subjectForSite', subject.name);\n};\n","import React from 'react';\nimport MomentUtils from '@date-io/moment';\nimport * as moment from 'moment';\nimport { TimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\n\nconst renderTimePicker = ({\n    label,\n    input: { value, ...inputProps },\n    meta: { touched, invalid, error },\n    ...custom\n}) => {\n    return (\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n            <TimePicker\n                clearable\n                ampm={false}\n                value={value ? moment(value, 'HH:mm').toDate() : null}\n                error={touched && invalid}\n                helperText={touched && error ? touched && error : label}\n                format=\"HH:mm\"\n                {...inputProps}\n                {...custom}\n            />\n        </MuiPickersUtilsProvider>\n    );\n};\n\nexport default renderTimePicker;\n","import React, { useEffect } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport '../LessonForm/LessonForm';\nimport './ClassForm.scss';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport renderTimePicker from '../../share/renderedFields/time';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport {\n    required,\n    greaterThanTime,\n    lessThanTime,\n    uniqueClassName,\n    timeIntersect\n} from '../../validation/validateFields';\n\nimport { CLASS_FORM } from '../../constants/reduxForms';\nimport * as moment from 'moment';\nimport { CLASS_DURATION } from '../../constants/common';\nimport { useTranslation } from 'react-i18next';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nconst useStyles = makeStyles(theme => ({\n    rootInput: {\n        width: '20em'\n    }\n}));\n\nlet ClassFormFunc = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting,classScheduleOne } = props;\n    const classes = useStyles();\n\n    useEffect(() => {\n        let initialValues = {};\n        if (props.classScheduleOne) {\n            initialValues = props.classScheduleOne;\n        }\n        props.initialize(initialValues);\n    }, [props.classScheduleOne]);\n\n    const setEndTime = startTime =>\n        props.change(\n            'endTime',\n            moment(startTime, 'HH:mm').add(CLASS_DURATION, 'h').format('HH:mm')\n        );\n\n    return (\n        <Card class=\"form-card\">\n            <h2 className=\"form-title\">\n                {props.classScheduleOne.id\n                    ? t('edit_title')\n                    : t('create_title')}{' '}\n                {t('class_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    component={renderTextField}\n                    className=\"form-field\"\n                    name=\"class_name\"\n                    id=\"class_name\"\n                    label={t('class_label')}\n                    type=\"text\"\n                    validate={[required, uniqueClassName]}\n                />\n                <div className=\"form-time-block\">\n                    <Field\n                        component={renderTimePicker}\n                        className=\"time-input\"\n                        name=\"startTime\"\n                        label={t('class_from_label')}\n                        type=\"time\"\n                        validate={[required, lessThanTime, timeIntersect]}\n                        onChange={(event, value) => {\n                            if (value) {\n                                setEndTime(value);\n                            }\n                        }}\n                    />\n                    <Field\n                        component={renderTimePicker}\n                        className=\"time-input\"\n                        name=\"endTime\"\n                        label={t('class_to_label')}\n                        type=\"time\"\n                        validate={[required, greaterThanTime, timeIntersect]}\n                    />\n                </div>\n\n                <div className=\"form-buttons-container\">\n                    <Button\n                        className=\"buttons-style\"\n                        type=\"submit\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        className=\"buttons-style\"\n                        type=\"button\"\n                        variant=\"contained\"\n                        disabled={setDisableButton(pristine,submitting,classScheduleOne.id)}\n                        onClick={onReset}\n                    >\n                        {getClearOrCancelTitle(classScheduleOne.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: CLASS_FORM\n    })(ClassFormFunc)\n);\n","export const CLASS_DURATION = \"1.3333333333333333333333333333\";\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\n\nimport ClassForm from '../../components/ClassForm/ClassForm';\nimport Card from '../../share/Card/Card';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\n\nimport {\n    getClassScheduleListService,\n    addClassScheduleOneService,\n    getClassScheduleOneService,\n    deleteClassScheduleOneService,\n    clearClassScheduleOneService\n} from '../../services/classService';\nimport { useTranslation } from 'react-i18next';\n\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst ClassSchedule =(props) => {\n    const { t } = useTranslation('formElements');\n    const [open, setOpen] = useState(false);\n    const [classId, setClassId] = React.useState(-1);\n    useEffect(() => getClassScheduleListService(), []);\n\n    const submit = values => {\n        if (!values.id && props.classScheduler.length >= 7)\n            return handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                t('max_count_classes_reached')\n            );\n        addClassScheduleOneService(values);\n    };\n\n    const handleEdit = classId => {\n        getClassScheduleOneService(classId);\n    };\n\n    const handleFormReset = () => {\n        clearClassScheduleOneService();\n    };\n\n    const handleClickOpen = classId => {\n        setClassId(classId);\n        setOpen(true);\n    };\n\n    const handleClose = classId => {\n        setOpen(false);\n        if (!classId) {\n            return;\n        }\n        deleteClassScheduleOneService(classId);\n    };\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.CLASS_SCHEDULE_TITLE} val={navigation.BELLS}/>\n        <div className=\"cards-container\">\n            <ConfirmDialog\n                selectedValue={''}\n                cardId={classId}\n                whatDelete={cardType.CLASS.toLowerCase()}\n                open={open}\n                onClose={handleClose}\n            />\n            <ClassForm onSubmit={submit} onReset={handleFormReset} />\n            <section className=\"container-flex-wrap\">\n                {props.classScheduler.map(schedule => (\n                    <Card class=\"class-card-width\" key={schedule.id}>\n                        <div className=\"cards-btns\">\n                            <FaEdit\n                                className=\"svg-btn\"\n                                title={t('common:edit_hover_title')}\n                                onClick={() => handleEdit(schedule.id)}\n                            />\n                            <MdDelete\n                                className=\"svg-btn\"\n                                title={t('common:delete_hover_title')}\n                                onClick={() => handleClickOpen(schedule.id)}\n                            />\n                        </div>\n                        <p>\n                            {t('class_label')}: {schedule.class_name}\n                        </p>\n                        <p>\n                            {t('class_from_label')} - {t('class_to_label')}\n                        </p>\n                        <p>\n                            {schedule.startTime} - {schedule.endTime}\n                        </p>\n                    </Card>\n                ))}\n            </section>\n        </div>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    ClassScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps, {})(ClassSchedule);\n","import { connect } from 'react-redux'\nimport React, { useEffect } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport Button from '@material-ui/core/Button'\nimport { useTranslation}  from 'react-i18next'\n\n\nimport Card from '../../share/Card/Card'\nimport { DEPARTMENT_FORM} from '../../constants/reduxForms';\nimport renderTextField from '../../share/renderedFields/input'\nimport { required, uniqueSubject, maxLengthValue, uniqueDepartment } from '../../validation/validateFields';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nconst AddDepartment = props => {\n    const { t } = useTranslation('formElements');\n    const {handleSubmit,clear,department,pristine,submitting,editDepartment}=props;\n    useEffect(() => {\n        if (department&&editDepartment) {\n            if (department.id) {\n                props.initialize({\n                    name: department.name,\n                    id: department.id\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [department]);\n\n    return (\n        <Card class='form-card subject-form'>\n            <h2 style={{ textAlign: 'center' }}>\n                {t('department_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    className='form-field'\n                    name='name'\n                    component={renderTextField}\n                    label={t('department_add_label')+':'}\n                    validate={[required, uniqueDepartment, maxLengthValue]}\n                />\n                <div className='form-buttons-container subject-btns'>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className='buttons-style '\n                        disabled={pristine || submitting}\n                        type='submit'>\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        type='button'\n                        variant='contained'\n                        className='buttons-style'\n                        disabled={setDisableButton(pristine,submitting,department.id)}\n                        onClick={clear}\n                        >\n                        {getClearOrCancelTitle(department.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    )\n}\n\nconst mapStateToProps = state => ({\n    department:state.departments.department\n})\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: DEPARTMENT_FORM\n    })(AddDepartment)\n)\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { getTeacherFullName } from './renderTeacher';\nimport { useTranslation } from 'react-i18next';\nimport { FaEnvelope } from 'react-icons/fa';\nimport TableHead from '@material-ui/core/TableHead';\nimport { withStyles } from '@material-ui/core';\nconst useStyles1 = makeStyles((theme) => ({\n    root: {\n        flexShrink: 0,\n        marginLeft: theme.spacing(2.5),\n    },\n}));\n\nfunction RenderTeacherTableActions(props) {\n    const classes = useStyles1();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onPageChange } = props;\n\n    const handleFirstPageButtonClick = (event) => {\n        onPageChange(event, 0);\n    };\n\n    const handleBackButtonClick = (event) => {\n        onPageChange(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event) => {\n        onPageChange(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event) => {\n        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.root}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nRenderTeacherTableActions.propTypes = {\n    count: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nconst useStyles2 = makeStyles({\n    table: {\n        minWidth: 500,\n    },\n});\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.white,\n        color: theme.palette.common.black,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport default function RenderTeacherTable(props) {\n    const classes = useStyles2();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const {teachers}=props;\n    const { t } = useTranslation('formElements');\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, teachers.length - page * rowsPerPage);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n    const sendMail = (email) => {\n        const mailto =\n            // \"mailto:mail@gmail.com?subject=Test subject&body=Body content\";\n            `mailto:${email}`;\n        window.location.href = mailto;\n    }\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"custom pagination table\">\n\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell>{t('teacher_label')}</StyledTableCell>\n                        <StyledTableCell>{t('teacher_position')}</StyledTableCell>\n                        <StyledTableCell>{t('send_letter_title')}</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n\n                <TableBody>\n                    {(rowsPerPage > 0\n                            ? teachers.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            : teachers\n                    ).map((teacher) => (\n                        <StyledTableRow key={teacher.position}>\n                            <StyledTableCell align=\"center\" style={{ width: 160 }}>\n                                {getTeacherFullName(teacher)}\n                            </StyledTableCell>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                {teacher.position}\n                            </StyledTableCell>\n                            <StyledTableCell style={{ width: 160 }} align=\"center\">\n                                <span>\n                                    <p>{teacher.email}</p>\n                                    <FaEnvelope\n                                        className=\"svg-btn send-message\"\n                                        title={`${t('send_letter_title')} ${teacher.email}`}\n                                        onClick={()=>sendMail(teacher.email)}\n                                    />\n                                </span>\n\n                            </StyledTableCell>\n                        </StyledTableRow>\n                    ))}\n\n                    {emptyRows > 0 && (\n                        <StyledTableRow style={{ height: 53 * emptyRows }}>\n                            <TableCell colSpan={6} />\n                        </StyledTableRow>\n                    )}\n                </TableBody>\n                <TableFooter>\n                    <StyledTableRow>\n                        <TablePagination\n                            labelRowsPerPage={`${t('rows_per_page')}`}\n                            rowsPerPageOptions={[5, 10, 25, { label: `${t('all_page')}`, value: -1 }]}\n                            colSpan={3}\n                            count={teachers.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            SelectProps={{\n                                inputProps: { 'aria-label': 'rows per page' },\n                                native: true,\n                            }}\n                            onPageChange={handleChangePage}\n                            onRowsPerPageChange={handleChangeRowsPerPage}\n                            ActionsComponent={RenderTeacherTableActions}\n                        />\n                    </StyledTableRow>\n                </TableFooter>\n            </Table>\n        </TableContainer>\n    );\n}\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport '../dialog.scss';\nimport './showDataDialog.scss'\n\nimport i18n from '../../../helper/i18n';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport RenderTeacherTable from '../../../helper/renderTeacherTable';\n\nexport const ShowDataDialog = props => {\n    const { onClose,  cardId, open,teachers,department } = props;\n    const { t } = useTranslation('formElements');\n    const handleClose = () => {\n        onClose(cardId);\n    };\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">\n                <>\n\n                    <>\n                        {teachers.length===0?\n                            <>\n                                <h2 className=\"title-align\">{`${t('department_teachers_label')} - `}<span>{`${department.name}`}</span></h2>\n                                {t('no_exist_teachers_at_department')}\n                            </>\n\n                            :\n                            <>\n                                <h3 className=\"title-align\"><span>{teachers.length!==1?`${t('teachers_label')} `:`${t('teacher_label')}`}</span>{`${t('department_teachers')} `}<span>{`${department.name}`}</span></h3>\n                                <RenderTeacherTable teachers={teachers}/>\n                            </>\n                        }\n                    </>\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                    color=\"primary\"\n                >\n                    {i18n.t('common:close_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nShowDataDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\nconst mapStateToProps = state => ({\n    department: state.departments.department\n});\n\nexport default connect(mapStateToProps, {})(ShowDataDialog);","import React, { useEffect, useState } from 'react';\nimport AddDepartment from '../../components/AddDepartmentForm/AddDepartmentForm';\nimport {\n    clearDepartment,\n    createDepartmentService,\n    deleteDepartmentsService,\n    getAllDepartmentsService,\n    getDepartmentByIdService,\n    getDisabledDepartmentsService,\n    setDisabledDepartmentService, setEnabledDepartmentService,\n    updateDepartmentService\n} from '../../services/departmentService';\nimport { connect } from 'react-redux';\nimport Card from '../../share/Card/Card';\nimport { GiSightDisabled, IoMdEye, MdFace } from 'react-icons/all';\nimport { FaChalkboardTeacher, FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport { setDisabledDepartment, setEnabledDepartment } from '../../redux/actions/departments';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport Button from '@material-ui/core/Button';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport { getAllTeachersByDepartmentId } from '../../redux/actions/teachers';\nimport { showAllPublicTeachersByDepartmentService } from '../../services/scheduleService';\nimport ShowDataDialog from '../../share/modals/modal/showDataDialog';\nfunction DepartmentPage(props) {\n    const { t } = useTranslation('formElements');\n    const { departments,disabledDepartments } = props;\n    const [isDisabled,setIsDisabled]=useState(false);\n    const [term, setTerm] = useState('');\n    const [deleteDialog,setDeleteDialog]=useState(false);\n    const [departmentId,setDepartmentId]=useState(\"\");\n    const [hideDialog, setHideDialog] = useState(null);\n    const [department,setDepartment]=useState({});\n    const [teacherDialog,setTeacherDialog]=useState(false);\n    const [editDepartment,setEditDepartment]=useState(false);\n    const { isSnackbarOpen, snackbarType, snackbarMessage,teachers } = props;\n    useEffect(()=>clearDepartmentForm(),[])\n    const visibleDepartments = isDisabled\n        ? search(disabledDepartments, term, ['name'])\n        : search(departments, term, ['name']);\n    const SearchChange = setTerm;\n    const changeDisable=()=>{\n        setIsDisabled(prev=>!prev);\n    }\n    const submit = (data) => {\n        data.id===undefined?\n            createDepartmentService(data):\n            updateDepartmentService(data);\n    }\n    const clearDepartmentForm = () => {\n        clearDepartment();\n    }\n    const deleteDepartment=(id)=>{\n        setDepartmentId(id);\n        setDeleteDialog(true);\n    }\n    const setDisabled=(department)=>{\n\n        const disabledDepartment={...department,disabled:true};\n        setDisabledDepartmentService(disabledDepartment);\n    }\n    const setEnabled=(department)=>{\n        setDepartmentId(department.id);\n        setDeleteDialog(true);\n        const enabledDepartment={...department,disabled:false};\n        setEnabledDepartment(enabledDepartment);\n    }\n    const setDepartmentIntoForm=(id)=>{\n        getDepartmentByIdService(id)\n    }\n    const closeTeacherDialog = () => {\n      setTeacherDialog(false)\n    }\n    const handleClose=(id)=>{\n        if(id!=='') {\n            if(department.id!==undefined) {\n                if (hideDialog === disabledCard.SHOW) {\n                    const { id, name } = department;\n                    const enabledDepartment = { id, name, disable: false };\n                    setEnabledDepartmentService(enabledDepartment);\n                } else if (hideDialog === disabledCard.HIDE) {\n\n                    const { id, name } = department;\n                    const enabledDepartment = { id, name, disable: true };\n                    setDisabledDepartmentService(enabledDepartment);\n                }\n\n            }\n            else {\n                deleteDepartmentsService(departmentId);\n            }\n        }\n         setDeleteDialog(false);\n    }\n    useEffect(() => getAllDepartmentsService(), [isDisabled])\n    useEffect(()=> {\n        if (isDisabled)\n            getDisabledDepartmentsService();\n    },[])\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n    return (\n        <>\n            <NavigationPage name={navigationNames.DEPARTMENTS} val={navigation.DEPARTMENTS}/>\n            <ConfirmDialog\n                isHide={hideDialog}\n                cardId={departmentId}\n                whatDelete={'department'}\n                open={deleteDialog}\n                onClose={handleClose}\n            />\n            <ShowDataDialog\n                isHide={hideDialog}\n                cardId={departmentId}\n                open={teacherDialog}\n                onClose={closeTeacherDialog}\n                teachers={teachers}\n            />\n            <div className=\"cards-container\">\n            <aside className=\"search-list__panel\">\n                <SearchPanel\n                    SearchChange={SearchChange}\n                    showDisabled={changeDisable}\n                />\n                {\n                    isDisabled?'':\n                    <AddDepartment\n                    onSubmit={submit} clear={clearDepartmentForm} editDepartment={editDepartment}\n                    />\n                }\n            </aside>\n            <section className=\"container-flex-wrap wrapper\">\n                {visibleDepartments.length === 0 && (\n                    <NotFound name={t('department_y_label')} />\n                )}\n                {visibleDepartments.map(department => (\n                    <Card key={department.id} class=\"subject-card done-card\">\n                        <h2 className=\"subject-card__name\">\n                            {department.name}\n                        </h2>\n                        <div className=\"cards-btns\">\n                            {isDisabled?\n                                <IoMdEye\n                                    className=\"svg-btn copy-btn\"\n                                    title={t('common:set_enabled')}\n                                    onClick={() => {\n                                        setHideDialog(disabledCard.SHOW);\n                                        deleteDepartment(department.id);\n                                        setDepartment(department);\n                                    }}\n                                />:\n\n                                (\n                                    <>\n                                        <GiSightDisabled\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_disabled')}\n                                            onClick={() => {\n                                                //setDisabled(department)\n                                                setHideDialog(\n                                                    disabledCard.HIDE\n                                                );\n                                                deleteDepartment(department.id);\n                                                setDepartment(department);\n                                            }}\n                                        />\n\n                                        <FaEdit\n                                            className=\"svg-btn edit-btn\"\n                                            title={t('edit_title')}\n                                            onClick={() => {\n                                                setEditDepartment(true);\n                                                setDepartmentIntoForm(department.id);\n                                            }\n                                            }\n                                        />\n                                    </>\n\n                                )\n                            }\n\n\n\n                            <MdDelete\n                                className=\"svg-btn delete-btn\"\n                                title={t('delete_title')}\n                                onClick={() => {\n                                    setDepartment({});\n                                    deleteDepartment(department.id);\n                                }}\n                            />\n                            <FaChalkboardTeacher\n                                className=\"svg-btn delete-btn\"\n                                title={t('show_teacher_title')}\n                                onClick={() => {\n                                    showAllPublicTeachersByDepartmentService(department.id);\n                                    getDepartmentByIdService(department.id);\n                                    setDepartmentIntoForm(department.id)\n                                    setTeacherDialog(true);\n                                }}\n                            />\n\n                        </div>\n                    </Card>\n                ))}\n\n\n            </section>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n        </>\n    )\n}\n\nconst mapStateToProps = state => ({\n    departments: state.departments.departments,\n    disabledDepartments: state.departments.disabledDepartments,\n    department: state.departments.department,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message,\n    teachers:state.teachers.teachers\n\n});\n\nexport default connect(mapStateToProps, {})(DepartmentPage);","// import AdminPage from '../containers/AdminPage/AdminPage';\n// import TeacherList from '../containers/TeachersList/TeachersList';\n// import GroupList from '../containers/GroupList/GroupList';\n// import ClassSchedule from '../containers/ClassSchedule/ClassSchedule';\n// import RoomList from '../containers/RoomList/RoomList';\n// import SubjectPage from '../containers/SubjectPage/SubjectPage';\n// import BusyRooms from '../containers/BusyRooms/BusyRooms';\n// import React from 'react';\n// import SemesterPage from '../containers/SemesterPage/SemesterPage';\n// import MergeRolePage from '../containers/MergeRolePage/MergeRolePage';\n// import Changes from '../components/ChangePasswordForm/ChangePasswordForm';\n// import DepartmentPage from '../containers/DepartmentPage/DepartmentPage';\n// export const general=[\n//     { name: 'SemesterPage', component: <SemesterPage /> },\n//     { name: 'MergeRolePage', component: <MergeRolePage /> },\n//     { name: 'Changes', component: <Changes /> },\n//     { name: 'Departments', component: <DepartmentPage /> }];\n// export const tabs_components = [\n//     { name: 'LessonPage', component: <AdminPage /> },\n//     { name: 'TeacherList', component: <TeacherList /> },\n//     { name: 'GroupList', component: <GroupList /> },\n//     { name: 'ClassScheduleTitle', component: <ClassSchedule /> },\n//     { name: 'RoomList', component: <RoomList /> },\n//     { name: 'SubjectPage', component: <SubjectPage /> },\n//     { name: 'BusyRooms', component: <BusyRooms /> },\n//     // { name: 'SemesterPage', component: <SemesterPage /> },\n//     // { name: 'MergeRolePage', component: <MergeRolePage /> },\n//     // { name: 'Changes', component: <Changes /> },\n//     // { name: 'Departments', component: <DepartmentPage /> },\n//     general,\n// ];\nimport AdminPage from '../containers/AdminPage/AdminPage';\nimport TeacherList from '../containers/TeachersList/TeachersList';\nimport GroupList from '../containers/GroupList/GroupList';\nimport ClassSchedule from '../containers/ClassSchedule/ClassSchedule';\nimport RoomList from '../containers/RoomList/RoomList';\nimport SubjectPage from '../containers/SubjectPage/SubjectPage';\nimport BusyRooms from '../containers/BusyRooms/BusyRooms';\nimport React from 'react';\nimport SemesterPage from '../containers/SemesterPage/SemesterPage';\nimport MergeRolePage from '../containers/MergeRolePage/MergeRolePage';\nimport Changes from '../components/ChangePasswordForm/ChangePasswordForm';\nimport DepartmentPage from '../containers/DepartmentPage/DepartmentPage';\nimport { navigationNames } from './navigation';\nexport const general=[\n     {name: navigationNames.GENERAL},\n    { name: navigationNames.CLASS_SCHEDULE_TITLE, component: <ClassSchedule /> },\n    { name: navigationNames.DEPARTMENTS, component: <DepartmentPage /> },\n    { name: navigationNames.GROUP_LIST, component: <GroupList /> },\n    { name: navigationNames.ROOM_LIST, component: <RoomList /> },\n    { name: navigationNames.SUBJECT_PAGE, component: <SubjectPage /> },\n    { name: navigationNames.SEMESTER_PAGE, component: <SemesterPage /> },\n    { name: navigationNames.TEACHER_LIST, component: <TeacherList /> },\n\n];\nexport const tabs_components = [\n    { name: navigationNames.LESSON_PAGE, component: <AdminPage /> },\n    { name: navigationNames.MERGE_ROLE_PAGE, component: <MergeRolePage /> },\n    { name: navigationNames.CHANGES, component: <Changes /> },\n    { name: navigationNames.BUSY_ROOMS, component: <BusyRooms /> },\n    general,\n];\n\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { setCurrentSemester } from '../../redux/actions';\nimport {Link} from 'react-router-dom';\nimport { links } from '../../constants/links';\nimport './NavigationPage.scss';\nimport { MenuItem, Select } from '@material-ui/core';\nimport { general, tabs_components } from '../../constants/navigationComponents';\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper\n    },\n    header: {\n        backgroundColor: theme.palette.info.dark\n    },\n    nav:{\n        textDecoration:'none',\n            color: '#fff',\n            ':hover': {\n                color: 'purple'\n            }\n    },\n    select:{\n       backgroundColor:'primary'\n    },\n\n    btn:{\n        margin:0,\n        width: \"10px\"\n    }\n}));\n\nconst NavigationPage = (props) => {\n    const {val}=props;\n    const { t } = useTranslation('common');\n    const classes = useStyles();\n    const [value, setValue] = useState(val?val:0);\n    const [gen,setGen]=useState(props.name||general[0].name);\n    useEffect(() => {\n        setCurrentSemester();\n    }, []);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    let document_title = title => {\n        document.title = t(`${title}_management_title`);\n    };\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    aria-label=\"simple tabs example\"\n                    indicatorColor=\"primary\"\n                    variant=\"scrollable\"\n                    scrollButtons=\"on\"\n                    className={classes.header}\n                >\n                    {tabs_components.map((tab_one, index) => (\n\n                                        <>\n                                            {tab_one.length===undefined?\n                                                <Link className={classes.nav}\n\n                                                      to={links[tab_one.name]}>\n                                                    <Tab className={classes.btn}\n                                                        key={index + tab_one}\n                                                        onClick={() => document_title(tab_one.name)}\n                                                        label={t(`${tab_one.name}_management_title`)}\n                                                        {...a11yProps(index)}\n                                                    />\n                                                </Link>:\n                                                <Select className=\"general MuiTab-root\"\n                                                    labelId=\"demo-controlled-open-select-label\"\n                                                    id=\"demo-controlled-open-select\"\n                                                    value={gen}\n                                                    onChange={event => {\n                                                        const val=event.target.value;\n                                                        setGen(val);\n                                                        document_title(val)\n                                                    }}\n                                            >\n\n                                                {\n                                                    Object.entries(tab_one).map(function(data, index) {\n                                                        return  (<MenuItem className={\"menu-dictionary MuiTab-root\"}  value={data[1].name} key={data[0]} {...a11yProps(index)}>\n                                                            <Link className={classes.nav}\n\n                                                                  to={links[data[1].name]}>\n                                                                {t(`${ data[1].name }_management_title`)}\n                                                            </Link>\n                                                        </MenuItem>)\n                                                    }, this)\n                                                }\n\n                                            </Select>\n\n                                            }\n                                        </>\n                    ))}\n                </Tabs>\n\n            </AppBar>\n\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    ClassScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps, {})(NavigationPage);\n","import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n    groupField: {\n        '&': {\n            margin: '0 auto',\n            width: '90%'\n        }\n    }\n}));\n\nexport const CopyLessonDialog = props => {\n    const { onClose, lesson, translation, groups, groupId, open } = props;\n    const [group, setGroup] = useState('');\n    const [error, setError] = useState('');\n\n    const classes = useStyles();\n\n    const handleClose = () => {\n        onClose();\n    };\n\n    const chooseClickHandle = () => {\n        if (!group) {\n            return;\n        }\n        if (group.id === groupId) {\n            setError(translation('copy_to_same_group_error'));\n            return;\n        }\n        onClose({ lesson, group });\n    };\n\n    const defaultProps = {\n        options: groups,\n        getOptionLabel: option => (option ? option.title : '')\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"simple-dialog-title\">\n                {translation('choose_group')}\n            </DialogTitle>\n            <Autocomplete\n                {...defaultProps}\n                id=\"group\"\n                multiple\n                clearOnEscape\n                openOnFocus\n                className={classes.groupField}\n                onChange={(event, newValue) => {\n                    setGroup(newValue);\n                    setError(null);\n                }}\n                renderInput={params => (\n                    <TextField\n                        {...params}\n                        label={translation('common:choose_group')}\n                        error={!!error}\n                        helperText={error ? error : null}\n                        margin=\"normal\"\n                    />\n                )}\n            />\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => chooseClickHandle()}\n                >\n                    {translation('formElements:choose_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose()}\n                >\n                    {translation('formElements:cancel_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nCopyLessonDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default CopyLessonDialog;\n","import React from 'react';\n\nimport Card from '../../share/Card/Card';\n\nimport { FaEdit, FaUserPlus } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { MdContentCopy } from 'react-icons/all';\nimport { getTeacherName } from '../../helper/renderTeacher';\nimport i18n from 'i18next';\n\nconst LessonsList = props => {\n    const lessons = props.lessons;\n\n    const t = props.translation;\n\n    const firstStringLetterCapitalHandle = str => {\n        return str.replace(/^\\w/, c => c.toUpperCase());\n    };\n    const isGroupped = grouped =>\n        grouped ? (\n            <FaUserPlus\n                title={t('formElements:grouped_label')}\n                className=\"svg-btn copy-btn align-left info-btn\"\n            />\n        ) : (\n            ''\n        );\n    const getUkWordHours=(number)=>{\n        if (number===1){\n            return \"година\"\n        }\n        if(number>=2&&number<=4){\n            return \"години\"\n        }\n        if ((number>=5&&number<=20)||number===0){\n            return \"годин\"\n        }\n        return\n    }\n    const getUkHour=(number)=>{\n        if(number>=20&&number<=100){\n            let toText = number.toString(); //convert to string\n            let lastChar = toText.slice(-1); //gets last character\n            let lastDigit = +(lastChar); //convert last character to number\n            return getUkWordHours(lastDigit);\n        }\n        else if(number>100){\n            let toText = number.toString(); //convert to string\n            let lastChar = toText.slice(-2); //gets last character\n            let lastDigit = +(lastChar); //convert last character to number\n            return getUkWordHours(lastDigit);\n        }\n        else {\n            return  getUkWordHours(number)\n        }\n    }\n    const getEnHour=(number)=>{\n        if (number===1){\n            return \"hour\"\n        }\n        return \"hours\"\n    }\n   const getHour=(number)=>{\n        const language=(i18n.language).toUpperCase();\n        const en=\"EN\";\n        const uk=\"UK\";\n        if(language===en){\n            return getEnHour(number)\n        }\n        else if(language===uk){\n            return getUkHour(number)\n        }\n        return\n   }\n    return (\n        <div>\n            <section className=\"container-flex-wrap\">\n                {lessons.map(lesson => (\n                    <Card class=\"done-card\" key={lesson.id}>\n                        <div className=\"cards-btns\">\n                            {isGroupped(lesson.grouped)}\n                            <MdContentCopy\n                                title={t('copy_lesson')}\n                                className=\"svg-btn copy-btn\"\n                                onClick={() => props.onCopyLesson(lesson)}\n                            />\n                            <FaEdit\n                                title={t('edit_lesson')}\n                                className=\"svg-btn edit-btn\"\n                                onClick={() => props.onSelectLesson(lesson.id)}\n                            />\n                            <MdDelete\n                                title={t('delete_lesson')}\n                                className=\"svg-btn delete-btn\"\n                                onClick={() => props.onClickOpen(lesson.id)}\n                            />\n                        </div>\n                        <p>\n                            {firstStringLetterCapitalHandle(\n                                lesson.subjectForSite\n                            )}{' '}\n                            (\n                            {t(\n                                `formElements:lesson_type_${lesson.lessonType.toLowerCase()}_label`\n                            )}\n                            )\n                        </p>\n                       <p>{getTeacherName(lesson.teacher)}</p>\n                        <p>\n                            {' '}\n                            <b>{lesson.hours}</b>{' '}\n                            {getHour(lesson.hours)}\n                        </p>\n                        <p>\n                            <input value={lesson.linkToMeeting} disabled=\"disabled\"/>\n                        </p>\n                    </Card>\n                ))}\n            </section>\n        </div>\n    );\n};\n\nexport default LessonsList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { useTranslation } from 'react-i18next';\n\nimport Button from '@material-ui/core/Button';\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport './CopyLessonsFromSemesterForm.scss';\nimport Card from '../../share/Card/Card';\n\nimport { COPY_LESSONS_FROM_SEMESTER_FORM } from '../../constants/reduxForms';\nimport { required } from '../../validation/validateFields';\nconst shortid = require('shortid');\n\nconst CopyLessonsFromSemesterForm = props => {\n    const { t } = useTranslation('common');\n    const { semesters, handleSubmit, pristine, submitting } = props;\n    const renderSemesterList = () => {\n        if (semesters) {\n            if (semesters.length > 1) {\n                return (\n                    <Field\n                        id=\"fromSemesterId\"\n                        name=\"fromSemesterId\"\n                        component={renderSelectField}\n                        label={t('formElements:semester_label')}\n                        type=\"text\"\n                        validate={[required]}\n                    >\n                        <option />\n                        {semesters.map((semester, index) => (\n                            <option\n                                key={shortid.generate()}\n                                value={semester.id}\n                            >\n                                {semester.description}\n                            </option>\n                        ))}\n                    </Field>\n                );\n            } else if (semesters.length === 1) {\n                handleSubmit({ fromSemesterId: semesters[0].id });\n                return <p>{semesters[0].description}</p>;\n            }\n        }\n    };\n\n    return (\n        <Card class=\"form-card\">\n            <form onSubmit={handleSubmit}>\n                <h2 className=\"lesson-page-h\">{t('copy_lesson')}</h2>\n                <p>{t('copy_lessons_from_semester_to_current')}</p>\n                {renderSemesterList()}\n                <div className=\"form-buttons-container\">\n                    <Button\n                        className='semester-copy-btn'\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={pristine || submitting}\n                    >\n                        {t('formElements:copy_label')}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    semesters: state.semesters.semesters,\n    currentSemester: state.schedule.currentSemester\n});\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: COPY_LESSONS_FROM_SEMESTER_FORM\n    })(CopyLessonsFromSemesterForm)\n);\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport Card from '../../share/Card/Card';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport CopyLessonDialog from '../../share/modals/chooseGroupDialog/CopyLessonDialog';\n\nimport LessonForm from '../../components/LessonForm/LessonForm';\nimport LessonsList from '../../components/LessonsList/LessonsList';\nimport CopyLessonsFromSemesterForm from '../../components/CopyLessonsFromSemesterForm/CopyLessonsFromSemesterForm';\n\nimport {\n    copyLessonCardService,\n    getLessonsByGroupService,\n    getLessonTypesService,\n    handleLessonCardService,\n    removeLessonCardService,\n    selectGroupIdService,\n    selectLessonCardService\n} from '../../services/lessonService';\nimport { showAllTeachersService } from '../../services/teacherService';\nimport { showAllGroupsService } from '../../services/groupService';\nimport { setLoadingService } from '../../services/loadingService';\nimport { showAllSubjectsService } from '../../services/subjectService';\nimport {\n    showAllSemestersService,\n    CopyLessonsFromSemesterService\n} from '../../services/semesterService';\n\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { styled } from '@material-ui/core/styles';\n\nimport { cardType } from '../../constants/cardType';\n\nimport './LessonPage.scss';\n\nconst GroupField = styled(TextField)({\n    display: 'inline-block',\n    width: '150px'\n});\n\nconst LessonPage = props => {\n    const { t } = useTranslation('common');\n\n    const [open, setOpen] = useState(false);\n    const [openCopyLessonDialog, setOpenCopyLessonDialog] = useState(false);\n    const [lessonId, setLessonId] = React.useState(-1);\n    const [copiedLesson, setCopiedLesson] = React.useState(-1);\n\n    const teachers = props.teachers;\n\n    const isUniqueError = props.isUniqueError;\n\n    const lessons = props.lessons;\n    const lessonLength = lessons.length;\n\n    const isLoading = props.loading;\n\n    const { groups, groupId } = props;\n\n    const subjects = props.subjects;\n\n    useEffect(() => {\n        if (groupId) {\n            setLoadingService(true);\n            getLessonsByGroupService(groupId);\n        }\n    }, [groupId]);\n    useEffect(() => showAllTeachersService(), []);\n    useEffect(() => showAllSemestersService(), []);\n    useEffect(() => getLessonTypesService(), []);\n    useEffect(() => showAllGroupsService(), []);\n    useEffect(() => {\n        showAllSubjectsService();\n    }, []);\n\n    const createLessonCardHandler = card => {\n        if (Object.keys(card).length === 0 && card.constructor === Object)\n            return;\n\n        handleLessonCardService(card, groupId);\n    };\n\n    const selectLessonCardHandler = lessonCardId => {\n        selectLessonCardService(lessonCardId);\n    };\n\n    const groupTitleHandle = (groups, groupId) => {\n        return groups.find(group => group.id === +groupId).title;\n    };\n\n    const groupHandle = (groups, groupId) => {\n        return groups.find(group => group.id === +groupId);\n    };\n\n    const handleClickOpen = lessonId => {\n        setLessonId(lessonId);\n        setOpen(true);\n    };\n\n    const handleClose = lessonId => {\n        setOpen(false);\n        if (!lessonId) return;\n\n        removeLessonCardService(lessonId);\n    };\n\n    const openCopyLessonDialogHandle = lesson => {\n        setCopiedLesson(lesson);\n        setOpenCopyLessonDialog(true);\n    };\n\n    const closeCopyLessonDialogHandle = lessonGroupObj => {\n        setOpenCopyLessonDialog(false);\n        if (!lessonGroupObj) return;\n        copyLessonCardService(lessonGroupObj);\n    };\n\n    const defaultProps = {\n        options: groups,\n        getOptionLabel: option => (option ? option.title : '')\n    };\n\n    const handleGroupSelect = group => {\n        if (group) selectGroupIdService(group.id);\n    };\n\n    const groupFinderHandle = groupId => {\n        if (groupId) return groups.find(group => group.id === groupId);\n        else return '';\n    };\n\n    const submitCopy = values => {\n        values.toSemesterId = props.currentSemester.id;\n        values.fromSemesterId = +values.fromSemesterId;\n        CopyLessonsFromSemesterService(values);\n    };\n\n    const renderCopyLessonsForm = () => {\n        if (!groupId) {\n            return <CopyLessonsFromSemesterForm onSubmit={submitCopy} />;\n        }\n    };\n\n    let cardsContainer = (\n        <>\n            {lessonLength > 0 ? (\n                <LessonsList\n                    lessons={lessons}\n                    onClickOpen={handleClickOpen}\n                    onSelectLesson={selectLessonCardHandler}\n                    onCopyLesson={openCopyLessonDialogHandle}\n                    translation={t}\n                />\n            ) : (\n                <section className=\"centered-container\">\n                    <h2>\n                        {groupHandle(groups, groupId)\n                            ? t('lesson_no_lesson_for_group_label') +\n                              groupTitleHandle(groups, groupId)\n                            : ''}\n                    </h2>\n                </section>\n            )}\n        </>\n    );\n\n    if (isLoading) {\n        cardsContainer = (\n            <section className=\"centered-container\">\n                <CircularProgress />\n            </section>\n        );\n    }\n\n    return (\n        <>\n            <Card class=\"card-title lesson-card\">\n                <CopyLessonDialog\n                    open={openCopyLessonDialog}\n                    onClose={closeCopyLessonDialogHandle}\n                    groupId={groupId}\n                    lesson={copiedLesson}\n                    groups={groups}\n                    translation={t}\n                />\n                <ConfirmDialog\n                    cardId={lessonId}\n                    whatDelete={cardType.LESSON.toLowerCase()}\n                    open={open}\n                    onClose={handleClose}\n                />\n                <div className=\"lesson-page-title\">\n                    <h1 className=\"lesson-page-h\">\n                        {t('lesson_for_group_title')}\n                    </h1>\n                    <Autocomplete\n                        {...defaultProps}\n                        id=\"group\"\n                        clearOnEscape\n                        openOnFocus\n                        value={groupFinderHandle(groupId)}\n                        onChange={(event, newValue) => {\n                            handleGroupSelect(newValue);\n                        }}\n                        renderInput={params => (\n                            <GroupField\n                                {...params}\n                                label={t('formElements:group_label')}\n                                margin=\"normal\"\n                            />\n                        )}\n                    />\n                </div>\n            </Card>\n            <div className=\"cards-container\">\n                <section>\n                    <LessonForm\n                        lessonTypes={props.lessonTypes}\n                        isUniqueError={isUniqueError}\n                        groupId={groupId}\n                        subjects={subjects}\n                        teachers={teachers}\n                        onSubmit={createLessonCardHandler}\n                        onSetSelectedCard={selectLessonCardHandler}\n                    />\n                    {renderCopyLessonsForm()}\n                </section>\n                {cardsContainer}\n            </div>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    lessons: state.lesson.lessons,\n    lessonTypes: state.lesson.lessonTypes,\n    groupId: state.lesson.groupId,\n    isUniqueError: state.lesson.uniqueError,\n    teachers: state.teachers.teachers,\n    groups: state.groups.groups,\n    subjects: state.subjects.subjects,\n    loading: state.loadingIndicator.loading,\n    semesters: state.semesters.semesters,\n    currentSemester: state.schedule.currentSemester\n});\n\nexport default connect(mapStateToProps)(LessonPage);\n","import React from 'react';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport LessonPage from '../LessonPage/LessonPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport { connect } from 'react-redux';\n\n\n\nfunction AdminPage(props){\n    return(\n\n        <>\n            <NavigationPage val={navigation.LESSONS} />\n            <LessonPage/>\n        </>\n    )\n}\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    ClassScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps, {})(AdminPage);","import React, { useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { logout } from '../../../redux/actions/index';\nimport { setScheduleSemesterIdService } from '../../../services/scheduleService';\nimport { useHistory } from 'react-router-dom';\nconst Logout = props => {\n    useEffect(() => {\n        props.onLogout();\n    }, []);\n    // useEffect(()=>setScheduleSemesterIdService(0))\n    // const history=useHistory();\n    // useEffect(()=>history.push(\"/\"));\n    return <Redirect to=\"/\" />;\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(logout())\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(Logout);\n","import * as actionTypes from './actionsType';\nimport { TOKEN_BEGIN } from '../../constants/tokenBegin';\n\nexport const authUser = res => {\n    return {\n        type: actionTypes.AUTH_USER,\n        result: res\n    };\n};\n\nexport const registerUser = res => {\n    return {\n        type: actionTypes.REGISTER_USER,\n        result: res\n    };\n};\n\nexport const resetUserPassword = res => {\n    return {\n        type: actionTypes.RESET_USER_PASSWORD,\n        result: res\n    };\n};\n\nexport const activateUser = res => {\n    return {\n        type: actionTypes.ACTIVATE_USER,\n        result: res\n    };\n};\n\nexport const logout = () => {\n    return {\n        type: actionTypes.AUTH_USER_INITIATE_LOGOUT\n    };\n};\n\nexport const authCheckState = () => {\n    const token = localStorage.getItem('token');\n    if (token && !token.includes(TOKEN_BEGIN)) {\n        return {\n            type: actionTypes.AUTH_USER_LOGOUT\n        };\n    }\n    const role = localStorage.getItem('userRole');\n    return {\n        type: actionTypes.AUTH_USER_CHECK_STATE,\n        token,\n        role\n    };\n};\n\nexport const setAuthError = res => {\n    return {\n        type: actionTypes.SET_AUTH_ERROR,\n        result: res\n    };\n};\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { activateUser } from '../../redux/actions';\n\nimport { links } from '../../constants/links';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\n\nimport { CircularProgress } from '@material-ui/core';\n\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\n\nimport './ActivationPage.scss';\n\nconst ActivationPage = props => {\n    const { t } = useTranslation('common');\n\n    const params = new URLSearchParams(props.location.search);\n    const token = params.get('token');\n\n    const error = props.error;\n\n    const response = props.response;\n    let redirect = null;\n\n    if (response && response.data.hasOwnProperty('message')) {\n        redirect = <Redirect to={links.AUTH} />;\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.SUCCESS,\n            response.data.message\n        );\n    }\n\n    let main = (\n        <>\n            <h2>{t('verifying_token')}</h2>\n            <CircularProgress />\n        </>\n    );\n\n    if (error) {\n        main = (\n            <>\n                <h2>{t('token_error')}</h2>\n                <p>{error}</p>\n            </>\n        );\n    }\n\n    useEffect(() => {\n        if (token) {\n            props.onActivate(token);\n        }\n    }, [token]);\n\n    return (\n        <>\n            <section className=\"activation-page-container\">\n                {redirect}\n                <section className=\"card activation-section\">{main}</section>\n            </section>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    response: state.auth.response,\n    error: state.auth.activationError\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onActivate: data => dispatch(activateUser(data))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivationPage);\n","import React, { useEffect } from 'react';\n\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport './ProfilePage.scss';\n\nimport ChangePasswordForm from '../../components/ChangePasswordForm/ChangePasswordForm';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { resetFormHandler } from '../../helper/formHelper';\nimport { useTranslation } from 'react-i18next';\nimport { PROFILE_FORM, TEACHER_FORM } from '../../constants/reduxForms';\n\nimport {\n    getUserProfile,\n    updateUserPassword,\n    updateUserTeacher\n} from '../../services/userService';\nimport AddTeacherForm from '../../components/AddTeacherForm/AddTeacherForm';\nconst useStyles = makeStyles(theme => ({\n    rootInput: {\n        width: '20em'\n    }\n}));\n\nlet ProfilePage = props => {\n    const { t } = useTranslation('formElements');\n    const classes = useStyles();\n\n    const submitPasswordChange = values => {\n        if (values.new_password !== values.confirm_password) {\n            props.setError({\n                registration: { passwords: t('different_passwords') }\n            });\n            return;\n        }\n        updateUserPassword(values);\n        handlePasswordFormReset();\n    };\n\n    const submitTeacherChange = values => {\n        updateUserTeacher(values);\n    };\n    const handlePasswordFormReset = () => resetFormHandler(PROFILE_FORM);\n    const handleTeacherFormReset = () => resetFormHandler(TEACHER_FORM);\n    useEffect(() => {\n        getUserProfile();\n    }, [localStorage.getItem('userRole')]);\n\n    const renderTeacherdataForm = () => {\n        if (localStorage.getItem('userRole') === 'ROLE_TEACHER') {\n            return (\n                <AddTeacherForm\n                    onSubmit={submitTeacherChange}\n                    onReset={handleTeacherFormReset}\n                />\n            );\n        }\n    };\n\n    return (\n        <>\n            <Card class=\"form-card\">\n                <h2 className=\"form-title\">{t('common:my_profile')}</h2>\n                <section>\n                    <span>{t('email_label') + ': '}</span>\n                    <span>{localStorage.getItem('email')}</span>\n                </section>\n                <ChangePasswordForm\n                    onSubmit={submitPasswordChange}\n                    onReset={handlePasswordFormReset}\n                />\n            </Card>\n            {renderTeacherdataForm()}\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    user: state.users.user\n});\n\nexport default connect(mapStateToProps)(ProfilePage);\n","export const authTypes = {\n    LOGIN: 'LOGIN',\n    GOOGLE: 'GOOGLE',\n    REGISTRATION: 'REGISTRATION',\n    RESET_PASSWORD: 'RESET_PASSWORD'\n};\n","import React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Card from '../../share/Card/Card';\nimport renderTextField from '../../share/renderedFields/input';\n\nimport { LOGIN_FORM } from '../../constants/reduxForms';\nimport { authTypes } from '../../constants/auth';\nimport { GOOGLE_LOGIN_URL } from '../../constants/axios';\n\nimport { required } from '../../validation/validateFields';\nimport { FaGoogle } from 'react-icons/fa';\nimport { links } from '../../constants/links';\nimport { Link } from 'react-router-dom';\nimport {\n    setScheduleGroupIdService,\n    setScheduleSemesterIdService,\n    setScheduleTeacherIdService, setScheduleTypeService\n} from '../../services/scheduleService';\nlet LoginForm = props => {\n\n    useEffect(()=>setScheduleSemesterIdService(0))\n    useEffect(()=>setScheduleTeacherIdService(0))\n    useEffect(()=>setScheduleGroupIdService(0))\n    useEffect(()=>setScheduleTypeService(\"\"))\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n\n    const error = props.loginError;\n\n    const translation = props.translation;\n\n    const errorHandling = value => {\n        if (required(value)) props.setError(required(value));\n        else props.setError(null);\n    };\n\n    let form = (\n        <form onSubmit={handleSubmit}>\n            <Field\n                name=\"email\"\n                className=\"form-field\"\n                component={renderTextField}\n                label={t('email_label')}\n                error={!!error}\n                helperText={error ? error.login : null}\n                onChange={e => errorHandling(e.target.value)}\n            />\n            <Field\n                name=\"password\"\n                className=\"form-field\"\n                type=\"password\"\n                component={renderTextField}\n                label={t('password_label')}\n                error={!!error}\n                onChange={() => props.setError(null)}\n            />\n            <Button\n                className=\"buttons-style under-line\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                {translation('login_title')}\n            </Button>\n            <div className=\"group-btns\">\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.REGISTRATION);\n                        props.setError(null);\n                    }}\n                >\n                   <Link  className=\"navLinks\" to={links.Registration}>{translation('no_account')}</Link>\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.RESET_PASSWORD);\n                        props.setError(null);\n                    }}\n                >\n                   <Link  className=\"navLinks\" to={links.RESET_PASSWORD}>{translation('forgot_password')}</Link>\n                </button>\n            </div>\n            {}\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() =>\n                    (window.document.location.href =\n                        process.env.REACT_APP_API_BASE_URL.trim() +\n                        GOOGLE_LOGIN_URL)\n                }\n            >\n                <FaGoogle />\n                {t('login_via_google')}\n            </Button>\n        </form>\n    );\n\n    if (props.isLoading) {\n        form = <CircularProgress />;\n    }\n\n    return (\n        <Card class=\"auth-card\">\n            <h2 className=\"under-line\">{translation('login_page_title')}</h2>\n            {form}\n        </Card>\n    );\n};\n\nLoginForm = reduxForm({\n    form: LOGIN_FORM\n})(LoginForm);\n\nexport default LoginForm;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport Card from '../../share/Card/Card';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { REGISTRATION_FORM } from '../../constants/reduxForms';\nimport { authTypes } from '../../constants/auth';\n\nimport { email, password, required } from '../../validation/validateFields';\nimport { links } from '../../constants/links';\nimport {Link} from 'react-router-dom';\nlet RegistrationForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n\n    const translation = props.translation;\n\n    const error = props.registrationError;\n\n    const emailValidate = { validate: [required, email] };\n    const emailErrorCondition = error && error.registration.reg;\n    const emailAdvancedValidate = {\n        error: !!emailErrorCondition,\n        helperText: emailErrorCondition ? error.registration.reg : ''\n    };\n\n    const passwordValidate = { validate: [required, password] };\n    const passwordsCondition = error && error.registration.passwords;\n    const passwordValidateAdvanced = {\n        error: !!passwordsCondition,\n        helperText: passwordsCondition ? error.registration.passwords : ''\n    };\n\n    const retypePasswordValidate = { validate: [required, password] };\n    const retypePasswordValidateAdvanced = {\n        error: !!passwordsCondition\n    };\n\n    let form = (\n        <form onSubmit={handleSubmit}>\n            <Field\n                name=\"email\"\n                className=\"form-field\"\n                type=\"email\"\n                component={renderTextField}\n                label={t('email_label')}\n                {...(!error ? emailValidate : emailAdvancedValidate)}\n                onChange={e => props.setError(null)}\n            />\n            <Field\n                name=\"password\"\n                className=\"form-field\"\n                type=\"password\"\n                component={renderTextField}\n                label={t('password_label')}\n                {...(!error ? passwordValidate : passwordValidateAdvanced)}\n                onChange={e => props.setError(null)}\n            />\n            <Field\n                name=\"retypePassword\"\n                className=\"form-field\"\n                type=\"password\"\n                component={renderTextField}\n                label={t('retype_password_label')}\n                {...(!error\n                    ? retypePasswordValidate\n                    : retypePasswordValidateAdvanced)}\n            />\n            <Button\n                className=\"buttons-style\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                {translation('create_account')}\n            </Button>\n            <div className=\"group-btns\">\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.LOGIN);\n                        props.setError(null);\n                    }}\n                >\n                   <Link  className=\"navLinks\" to={links.LOGIN}>{translation('account_exist')}</Link>\n                </button>\n            </div>\n        </form>\n    );\n\n    if (props.isLoading) {\n        form = <CircularProgress />;\n    }\n    return (\n        <Card class=\"auth-card\">\n            <h2 className=\"under-line\">\n                {props.translation('registration_page_title')}\n            </h2>\n            {form}\n        </Card>\n    );\n};\n\nRegistrationForm = reduxForm({\n    form: REGISTRATION_FORM\n})(RegistrationForm);\n\nexport default RegistrationForm;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Card from '../../share/Card/Card';\nimport renderTextField from '../../share/renderedFields/input';\n\nimport { RESET_PASSWORD_FORM } from '../../constants/reduxForms';\nimport { authTypes } from '../../constants/auth';\n\nimport { email, required } from '../../validation/validateFields';\nimport { links } from '../../constants/links';\nimport {Link} from 'react-router-dom';\n\nlet ResetPasswordForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n\n    const error = props.resetPasswordError;\n\n    const translation = props.translation;\n\n    const emailValidate = { validate: [required, email] };\n\n    const errorHandling = value => {\n        if (required(value)) {\n            props.setError(required(value));\n        } else {\n            props.setError(null);\n        }\n    };\n\n    let form = (\n        <form onSubmit={handleSubmit}>\n            <Field\n                name=\"email\"\n                className=\"form-field\"\n                component={renderTextField}\n                label={t('email_label')}\n                {...(!error ? emailValidate : error)}\n                onChange={e => {\n                    errorHandling(e.target.value);\n                }}\n            />\n            <Button\n                className=\"buttons-style under-line\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                {translation('reset_password_button')}\n            </Button>\n            <div className=\"group-btns\">\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.LOGIN);\n                        props.setError(null);\n                    }}\n                >\n                  <Link  className=\"navLinks\" to={links.LOGIN} >{translation('login_page_title')}</Link>\n                </button>\n            </div>\n        </form>\n    );\n\n    if (props.isLoading) {\n        form = <CircularProgress />;\n    }\n\n    return (\n        <Card class=\"auth-card\">\n            <h2 className=\"under-line\">\n                {translation('reset_password_page_title')}\n            </h2>\n            {form}\n        </Card>\n    );\n};\n\nResetPasswordForm = reduxForm({\n    form: RESET_PASSWORD_FORM\n})(ResetPasswordForm);\n\nexport default ResetPasswordForm;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { resetFormHandler } from '../../helper/formHelper';\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\n\nimport {\n    LOGIN_FORM,\n    REGISTRATION_FORM,\n    RESET_PASSWORD_FORM\n} from '../../constants/reduxForms';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\nimport { links } from '../../constants/links';\nimport { authTypes } from '../../constants/auth';\nimport { userRoles } from '../../constants/userRoles';\nimport { validation } from '../../constants/validation';\n\nimport LoginForm from '../../components/LoginForm/LoginForm';\nimport RegistrationForm from '../../components/RegistrationForm/RegistrationForm';\nimport ResetPasswordForm from '../../components/ResetPasswordForm/ResetPasswordForm';\n\nimport {\n    authUser,\n    registerUser,\n    resetUserPassword,\n    setAuthError,\n    setLoading\n} from '../../redux/actions/index';\n\nimport './Auth.scss';\n\nconst Auth = props => {\n    const { t } = useTranslation('common');\n    const [authType, setAuthType] = useState(authTypes.LOGIN);\n\n    const error = props.error;\n    var url = window.document.location;\n    var parser = new URL(url);\n\n    const socialLoginHandler = data => {\n        props.setLoading(true);\n        if (!data.token || data.token.length < 20) {\n            props.setError({ login: t('broken_token') });\n            return;\n        }\n        setAuthType(authTypes.GOOGLE);\n        props.onAuth(data);\n        resetFormHandler(LOGIN_FORM);\n        window.history.replaceState({}, document.title, '/');\n        props.setLoading(false);\n    };\n\n    let social = false;\n    let isToken = false;\n    let token = '';\n\n    if (parser.search.length > 0) {\n        const params = parser.search.split('&');\n        if (params) {\n            params.map(param => {\n                const splitedParam = param.split('=');\n                if (splitedParam) {\n                    if (\n                        splitedParam[0] === '?social' &&\n                        splitedParam[1] === 'true'\n                    ) {\n                        social = true;\n                    }\n                    if (\n                        splitedParam[0] === 'token' &&\n                        splitedParam[1].length > 0\n                    ) {\n                        isToken = true;\n                        token = splitedParam[1];\n                    }\n                }\n            });\n        }\n        if (social && isToken)\n            socialLoginHandler({ authType: 'google', token });\n    }\n\n    useEffect(() => {\n        if (\n            authType === authTypes.REGISTRATION &&\n            props.response &&\n            props.response.data.hasOwnProperty('message')\n        ) {\n            setAuthType(authTypes.LOGIN);\n            message = t('successful_registered_message');\n            handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n        }\n    }, [props.response]);\n\n    useEffect(() => {\n        if (\n            props.resetPasswordResponse &&\n            props.resetPasswordResponse.data.hasOwnProperty('message')\n        ) {\n            setAuthType(authTypes.LOGIN);\n            message = t('successful_reset_password_message');\n            handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n        }\n    }, [props.resetPasswordResponse]);\n\n    const loginHandler = loginData => {\n        if (!loginData.email || !loginData.password) {\n            props.setError({ login: t('empty_fields') });\n            return;\n        }\n        if (!validation.EMAIL.test(loginData.email)) {\n            props.setError({ login: t('validationMessages:email') });\n            return;\n        }\n        props.onAuth(loginData);\n        props.setLoading(true);\n        resetFormHandler(LOGIN_FORM);\n    };\n\n    const registrationHandler = registrationData => {\n        if (registrationData.password !== registrationData.retypePassword) {\n            props.setError({\n                registration: { passwords: t('different_passwords') }\n            });\n            return;\n        }\n        props.onRegister({\n            email: registrationData.email,\n            password: registrationData.password\n        });\n        props.setLoading(true);\n        resetFormHandler(REGISTRATION_FORM);\n    };\n\n    const resetPasswordHandler = resetPasswordData => {\n        props.onResetPassword({\n            email: resetPasswordData.email\n        });\n        props.setLoading(true);\n        resetFormHandler(RESET_PASSWORD_FORM);\n    };\n\n    let isSuccess, message;\n    const isLoading = props.loading;\n\n    if (!error && props.userRole) {\n        const token = props.token;\n        isSuccess = !!token;\n        message = t('successful_login_message');\n        handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n    }\n\n    const commonCondition = !error && isSuccess && !isLoading;\n\n    let authRedirect = null;\n    if (commonCondition && props.userRole === userRoles.MANAGER) {\n        authRedirect = <Redirect to={links.ADMIN_PAGE} />;\n    } else if (commonCondition && props.userRole) {\n        authRedirect = <Redirect to={links.HOME_PAGE} />;\n    } else if (commonCondition && props.userRole === userRoles.TEACHER) {\n        authRedirect = <Redirect to={links.HOME_PAGE} />;\n    }\n\n    const switchAuthModeHandler = authType => {\n        setAuthType(authType);\n    };\n\n    let authPage;\n\n    switch (authType) {\n        case authTypes.LOGIN:\n            document.title = t('login_page_title');\n            authPage = (\n                <LoginForm\n                    isLoading={isLoading}\n                    loginError={error}\n                    onSubmit={loginHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n            break;\n        case authTypes.REGISTRATION:\n            document.title = t('registration_page_title');\n            authPage = (\n                <RegistrationForm\n                    isLoading={isLoading}\n                    registrationError={error}\n                    onSubmit={registrationHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n            break;\n        case authTypes.RESET_PASSWORD:\n            document.title = t('reset_password_page_title');\n            authPage = (\n                <ResetPasswordForm\n                    isLoading={isLoading}\n                    resetPasswordError={error}\n                    onSubmit={resetPasswordHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n            break;\n        default:\n            document.title = t('login_page_title');\n            authPage = (\n                <LoginForm\n                    isLoading={isLoading}\n                    loginError={error}\n                    onSubmit={loginHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n    }\n\n    return (\n        <div className=\"auth-form\">\n            {authRedirect}\n            {authPage}\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    response: state.auth.response,\n    resetPasswordResponse: state.auth.resetPasswordResponse,\n    error: state.auth.error,\n    token: state.auth.token,\n    userRole: state.auth.role,\n    loading: state.loadingIndicator.loading\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: data => dispatch(authUser(data)),\n        onRegister: data => dispatch(registerUser(data)),\n        onResetPassword: data => dispatch(resetUserPassword(data)),\n        setLoading: isLoading => dispatch(setLoading(isLoading)),\n        setError: error => dispatch(setAuthError(error))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n","import React, { useEffect, useState } from 'react';\nimport { authTypes } from '../../constants/auth';\nimport '../../containers/Auth/Auth.scss';\nimport Auth from '../../containers/Auth/Auth';\n\nconst Register = () => {\n    return <Auth authType={authTypes.REGISTRATION}/>\n};\nexport {Register}\n","import React, { useEffect, useState } from 'react';\nimport { authTypes } from '../../constants/auth';\nimport '../../containers/Auth/Auth.scss';\nimport Auth from '../../containers/Auth/Auth';\n\nconst ResetPassword = () => {\n    return <Auth authType={authTypes.RESET_PASSWORD}/>\n};\nexport {ResetPassword}","import React, { useEffect, useState } from 'react';\nimport { authTypes } from '../../constants/auth';\nimport '../../containers/Auth/Auth.scss';\nimport Auth from '../../containers/Auth/Auth';\n\nconst Login = () => {\n    return <Auth authType={authTypes.LOGIN}/>\n};\nexport {Login}","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Redirect,\n    Route,\n    Switch\n} from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Header from '../components/Header/Header';\n\nimport HomePage from '../containers/Home/Home';\nimport TeacherSchedule from '../components/TeacherSchedule/TeacherSchedule';\nimport SchedulePage from '../containers/SchedulePage/SchedulePage';\nimport AdminPage from '../containers/AdminPage/AdminPage';\nimport Logout from '../containers/Auth/Logout/Logout';\nimport ActivationPage from '../containers/ActivationPage/ActivationPage';\nimport ProfilePage from '../containers/ProfilePage/ProfilePage';\nimport { links } from '../constants/links';\nimport { userRoles } from '../constants/userRoles';\nimport TeacherList from '../containers/TeachersList/TeachersList';\nimport BusyRooms from '../containers/BusyRooms/BusyRooms';\nimport GroupList from '../containers/GroupList/GroupList';\nimport ClassSchedule  from '../containers/ClassSchedule/ClassSchedule';\nimport RoomList from '../containers/RoomList/RoomList';\nimport SubjectPage from '../containers/SubjectPage/SubjectPage';\nimport SemesterPage from '../containers/SemesterPage/SemesterPage';\nimport MergeRolePage from '../containers/MergeRolePage/MergeRolePage';\nimport ChangePasswordForm from '../components/ChangePasswordForm/ChangePasswordForm';\nimport GroupSchedulePage from '../components/GroupSchedulePage/GroupSchedulePage';\nimport { Register } from '../components/Register/Register';\nimport { ResetPassword } from '../components/ResetPassword/ResetPassword';\nimport { Login } from '../components/Login/Login';\nimport DepartmentPage from '../containers/DepartmentPage/DepartmentPage';\nconst Routers = props => {\n    const userRole = props.userRole;\n\n    let routes = (\n        <Switch>\n            <Route path={links.Registration} component={Register}/>\n            <Route path={links.HOME_PAGE} exact component={HomePage} />\n            <Route path={links.ScheduleFor} component={GroupSchedulePage}/>\n            <Route path={links.ADMIN_PAGE}>\n                <Redirect to={links.LOGIN} />\n            </Route>\n            <Route path={links.LOGIN} component={Login} />\n            <Route path={links.ACTIVATION_PAGE} component={ActivationPage} />\n            <Route path={links.MY_PROFILE} component={ProfilePage} />\n\n        </Switch>\n    );\n\n    if (userRole === userRoles.MANAGER) {\n        routes = (\n            <Switch>\n                <Route path={links.SCHEDULE_PAGE} component={SchedulePage} />\n                <Route path={links.Departments} component={DepartmentPage}/>\n                <Route path={links.Registration} component={Register}/>\n                <Route path={links.RESET_PASSWORD} component={ResetPassword}/>\n                <Route path={links.HOME_PAGE} exact component={HomePage} />\n\n                <Route path={links.LessonPage}  component={AdminPage} />\n                <Route path={links.TeacherList}  component={TeacherList} />\n                <Route exact path={links.GroupList} component={GroupList} />\n\n                <Route path={`${links.GroupList}${links.Group}${links.Edit}${links.IdParam}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.Delete}${links.IdParam}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.AddStudent}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.SetDisable}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.ShowStudents}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.Student}${links.IdStudentParam}${links.Edit}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.Student}${links.IdStudentParam}${links.Delete}`}  component={GroupList} />\n\n                <Route path={links.ClassScheduleTitle}  component={ClassSchedule} />\n                <Route path={links.RoomList}  component={RoomList} />\n                <Route path={links.SubjectPage}  component={SubjectPage} />\n                <Route path={links.BusyRooms}  component={BusyRooms} />\n                <Route path={links.SemesterPage}  component={SemesterPage} />\n                <Route path={links.MergeRolePage}  component={MergeRolePage} />\n                <Route path={links.Changes}  component={ChangePasswordForm} />\n\n\n                <Route path={links.ACTIVATION_PAGE}>\n                    <Redirect to={links.ADMIN_PAGE} />\n                </Route>\n                <Route path={links.LOGIN} component={Login} />\n\n                <Route path={links.ADMIN_PAGE} component={AdminPage} />\n                <Route path={links.LOGOUT} component={Logout} />\n                <Route path={links.MY_PROFILE} component={ProfilePage} />\n                <Route path={links.ScheduleFor} component={GroupSchedulePage}/>\n\n\n            </Switch>\n        );\n    } else if (userRole) {\n        routes = (\n            <Switch>\n                <Route path={links.Registration} component={Register}/>\n                <Route path={links.RESET_PASSWORD} component={ResetPassword}/>\n                <Route path={links.HOME_PAGE} exact component={HomePage} />\n\n\n                <Route\n                    path={links.TEACHER_SCHEDULE}\n                    component={TeacherSchedule}\n                />\n                <Route path={links.SCHEDULE_PAGE}>\n                    <Redirect to={links.LOGIN} />\n                </Route>\n                <Route path={links.ADMIN_PAGE}>\n                    <Redirect to={links.LOGIN} />\n                </Route>\n                <Route path={links.LOGIN} component={Login} />\n                <Route path={links.ACTIVATION_PAGE}>\n                    <Redirect to={links.HOME_PAGE} />\n                </Route>\n                <Route path={links.MY_PROFILE} component={ProfilePage} />\n                <Route path={links.LOGOUT} component={Logout} />\n                <Route path={links.ScheduleFor} component={GroupSchedulePage}/>\n            </Switch>\n        );\n    }\n    return (\n        <Router>\n            <Header userRole={userRole} roles={userRoles} />\n            {routes}\n        </Router>\n    );\n};\n\nconst mapStateToProps = state => ({ userRole: state.auth.role });\n\nexport default connect(mapStateToProps)(Routers);\n","import React, { Suspense, useEffect } from 'react';\nimport './App.scss';\nimport Routers from './router/Routers';\nimport './helper/i18n';\nimport { connect } from 'react-redux';\n\nimport { authCheckState } from './redux/actions/index';\nimport { handleSnackbarCloseService } from './services/snackbarService';\nimport SnackbarComponent from './share/Snackbar/SnackbarComponent';\n\nconst App = props => {\n    const { isSnackbarOpen, snackbarType, snackbarMessage } = props;\n    const handleSnackbarClose = (event, reason) => {\n        if (!reason === 'clickaway') {\n            return;\n        }\n\n        handleSnackbarCloseService();\n    };\n\n    useEffect(() => {\n        props.onTryAutoLogin();\n    }, []);\n\n    return (\n        <Suspense fallback={null}>\n            <div className=\"container\">\n                <Routers />\n                <SnackbarComponent\n                    message={snackbarMessage}\n                    type={snackbarType}\n                    isOpen={isSnackbarOpen}\n                    handleSnackbarClose={handleSnackbarClose}\n                />\n            </div>\n        </Suspense>\n    );\n};\n\nconst mapStateToProps = state => ({\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onTryAutoLogin: () => dispatch(authCheckState())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './redux/reducers/index';\nimport rootSaga from './sagas';\n\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers =\n    (process.env.NODE_ENV === 'development'\n        ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n        : null) || compose;\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}