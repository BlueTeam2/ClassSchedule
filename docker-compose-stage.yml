version: '3.5'

services:
  schedule-app-test:
    image: "${SCHEDULE_TEST_APP_IMAGE}"
    container_name: schedule-app-test
    restart: "no"
    environment:
      - POSTGRES_URL
      - "POSTGRES_USERNAME=${POSTGRES_USER}"
      - POSTGRES_PASSWORD
      - POSTGRES_TEST_URL
      - REDIS_URL
      - MONGO_DATABASE
      - MONGO_URL
      - JWT_TOKEN
      - JWT_EXPIRED
    depends_on:
        - postgres
        - mongo
        - redis
    networks:
        - backend

  shcedule-app:
    container_name: shcedule-app
    restart: always
    image: "${SCHEDULE_APP_IMAGE}"
    ports:
      - "${SCHEDULE_APP_PORT}:8080"
    environment:
      - POSTGRES_URL
      - "POSTGRES_USERNAME=${POSTGRES_USER}"
      - POSTGRES_PASSWORD
      - REDIS_URL
      - MONGO_DATABASE
      - MONGO_URL
      - JWT_TOKEN
      - JWT_EXPIRED
    depends_on:
      - postgres
      - mongo
      - redis
    networks:
      - backend
    healthcheck:
      test: 
        [
          "CMD-SHELL",
          "curl --output /dev/null --silent --fail http://127.0.0.1:8080/public/semesters || exit 1"
          ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 30s  

  postgres:
    image: postgres:15.1-alpine
    container_name: Postgres15
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_ADMIN_USERNAME
      - POSTGRES_ADMIN_PASSWORD
      - POSTGRES_DATABASE
      - POSTGRES_TEST_DATABASE
    expose:
      - 5432
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./backup/initial_data.dump:/docker-entrypoint-initdb.d/initial_data.dump
      - ./scripts/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s  
    
  mongo:
    image: mongo:jammy
    container_name: MongoDB
    restart: always
    expose:
      - 27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD
    networks:
      - backend
    volumes:
      - mongo:/data/db
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "--quiet",
          "127.0.0.1/test",
          "--eval",
          "'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  redis:
    image: redis:alpine
    container_name: Redis
    restart: always
    expose:
      - 6379
    volumes:
      - redis:/root/redis
    environment:
      - REDIS_PORT
      - REDIS_DATABASES
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

networks:
  backend:
  
volumes:
  postgres:
  mongo:
  redis:
  