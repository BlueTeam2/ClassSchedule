def COLOR_MAP = [
    'SUCCESS': 'good', 
    'FAILURE': 'danger',
]

pipeline {
    agent any
    
    triggers {
        GenericTrigger (
            genericHeaderVariables: [
                [ key: 'X-GitHub-Event' ]
            ],
            genericVariables: [
                [ key: 'branch_source', value: '$.pull_request.head.ref' ],
                [ key: 'branch_target', value: '$.pull_request.base.ref' ],
                [ key: 'committer', value: '$.pull_request.user.login' ],
                [ key: 'pull_request_state', value: '$.pull_request.state' ],
            ],
            
            causeString: "Pull Request BY \$committer FROM '\$branch_source' TO '\$branch_target'",
            token: 'pull',
            regexpFilterText: '$branch_target : $pull_request_state',
            regexpFilterExpression: '^(main|stage) : open$'
        )
    }
    
    environment{
        targetTestStage = "backend-test"
        targetProdStage = "backend-tomcat-prod"
        
        targetTestTag = "schedule-test:${BUILD_NUMBER}"
        targetTestName= "schedule-app-test-${BUILD_NUMBER}"
        targetProdTag = "blueguys/schedule-app:latest"

        POSTGRES_ENTRYPOINT_DIR="${JENKINS_HOME}/userContent/postgres_entrypoint/"
    }
    
    stages {
        stage('GH Poll Variables') {
            steps {
                sh '''
                    echo "GH Source Branch: ${branch_source}"
                    echo "GH Target Branch: ${branch_target}"
                    echo "GH Committer: ${committer}"
                    echo "GH PR State: ${pull_request_state}"
                '''
            }
        }
        
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'test-jenkins-git-class-schedule', url: 'git@github.com:BlueTeam2/TestClassSchedule.git'
            }
        }
        stage('Build and test') {
            steps{
                script {
                    docker.build("${targetTestTag}","--target ${targetTestStage} .")
                }
                
                withCredentials([file(credentialsId: 'test-dot-env-file', variable: 'ENV_FILE')]){
                    sh "docker compose -f docker-compose-deps.yml --env-file $ENV_FILE up -d"
                    sh "docker run --name ${targetTestName} --restart no --network backend_netwok --env-file $ENV_FILE ${targetTestTag}"
                }
            }
            
        }
    }
    post {
        always {
            withCredentials([file(credentialsId: 'test-dot-env-file', variable: 'ENV_FILE')]){
                sh "docker compose -f docker-compose-deps.yml --env-file $ENV_FILE down"   
            }
            sh "docker volume prune -f -a"
            sh "docker stop ${targetTestName} && docker rm ${targetTestName}"
            
            echo 'Slack Notifications.'
            slackSend channel: '#jenkinscicd',
                color: COLOR_MAP[currentBuild.currentResult],
                message: """
                    *New Pull Reqeust (Tests Result)*\n\n
                    *By*: ${committer}\n
                    *From*: ${branch_source}\n
                    *To*: ${branch_target}\n\n
                    More info at: ${env.BUILD_URL}
                """.stripIndent()
        }
    }
}
